name: Validate README

on:
  push:
    branches:
      - "**"

permissions:
  contents: read

concurrency:
  group: validate-readme-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: "Validate README"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Determine pnpm store path
        id: pnpm-store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-node-20-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-20-pnpm-store-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20-node_modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-20-node_modules-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          pnpm install --frozen-lockfile --ignore-scripts

      - name: Start Anvil
        run: |
          # Kill any existing anvil processes
          pkill anvil || true

          # Start Anvil with explicit nonce management
          anvil --host 0.0.0.0 --port 8545 --accounts 10 --balance 10000 &
          ANVIL_PID=$!

          # Wait for Anvil to be ready
          echo "Waiting for Anvil to be ready..."
          for i in {1..30}; do
            if curl -s -X POST -H "Content-Type: application/json" \
               --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
               http://localhost:8545 > /dev/null 2>&1; then
              echo "Anvil is ready!"
              break
            fi
            echo "Attempt $i/30: Anvil not ready yet, waiting 1 second..."
            sleep 1
          done

          # Final check to ensure Anvil is responding
          if ! curl -s -X POST -H "Content-Type: application/json" \
             --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' \
             http://localhost:8545 > /dev/null 2>&1; then
            echo "ERROR: Anvil failed to start properly!"
            exit 1
          fi

          # Store the PID for cleanup
          echo $ANVIL_PID > anvil.pid

      - name: Reset Nonce and Deploy
        run: |
          set -euo pipefail

          # Use the first anvil account private key for deployment
          export PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
          export ACCOUNT_ADDRESS="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

          # Reset nonce by sending a dummy transaction if needed
          echo "Checking current nonce..."
          CURRENT_NONCE=$(curl -s -X POST -H "Content-Type: application/json" \
            --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionCount\",\"params\":[\"$ACCOUNT_ADDRESS\",\"latest\"],\"id\":1}" \
            http://localhost:8545 | jq -r '.result' | xargs printf "%d")

          echo "Current nonce: $CURRENT_NONCE"

          # If nonce is not 0, reset it by mining a new block
          if [ "$CURRENT_NONCE" -gt 0 ]; then
            echo "Nonce is not 0, mining a new block to reset state..."
            curl -s -X POST -H "Content-Type: application/json" \
              --data '{"jsonrpc":"2.0","method":"evm_mine","params":[],"id":1}' \
              http://localhost:8545
          fi

          # Deploy contracts to anvil using catapult with custom RPC URL
          echo "Deploying contracts to anvil..."
          pnpm run deploy --rpc-url http://localhost:8545

          echo "Deployment completed successfully!"

      - name: Generate Table and Validate README
        run: |
          set -euo pipefail

          # Generate the table and save to temp file
          echo "Generating deployment table..."
          pnpm -s run gen-table > gen-table.txt

          # Extract the table section from README.md (from the start of the table to the end)
          echo "Extracting table from README.md..."
          sed -n '/^┌.*┬.*┬.*┐$/,/^└.*┴.*┴.*┘$/p' README.md > readme-table.txt

          # Compare the files directly
          echo "Comparing generated table with README table..."
          if ! diff -w gen-table.txt readme-table.txt; then
            echo "ERROR: The table in README.md does not match the current deployment table"
            echo "Please run 'pnpm run gen-table' and update README.md with the latest table"
            echo ""
            echo "Generated table:"
            cat gen-table.txt
            echo ""
            echo "README table:"
            cat readme-table.txt
            exit 1
          fi

          echo "✅ README table validation passed!"

      - name: Cleanup
        if: always()
        run: |
          # Clean up Anvil process
          if [ -f anvil.pid ]; then
            ANVIL_PID=$(cat anvil.pid)
            kill $ANVIL_PID 2>/dev/null || true
            rm -f anvil.pid
          fi

          # Kill any remaining anvil processes
          pkill anvil || true
