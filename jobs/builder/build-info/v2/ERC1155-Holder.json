{
  "id": "ff48c684536c36af5e56ae1ff604caec218a09fd",
  "source_id_to_path": {
    "0": "src/tokens/ERC1155/utility/holder/ERC1155Holder.sol",
    "1": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol",
    "2": "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol",
    "3": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol"
  },
  "language": "Solidity",
  "_format": "ethers-rs-sol-build-info-1",
  "input": {
    "version": "0.8.27",
    "language": "Solidity",
    "sources": {
      "src/tokens/ERC1155/utility/holder/ERC1155Holder.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IERC1155 } from \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\";\nimport { IERC1155Receiver, IERC165 } from \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * An ERC-1155 contract that allows permissive minting.\n */\ncontract ERC1155Holder is IERC1155Receiver {\n\n    /// @dev Emitted when a claim is added.\n    event ClaimAdded(address claimant, address tokenAddress, uint256 tokenId, uint256 amount);\n    /// @dev Emitted when a batch of claims is added.\n    event ClaimAddedBatch(address claimant, address tokenAddress, uint256[] tokenIds, uint256[] amounts);\n\n    /// @dev Emitted when a claim is claimed.\n    event Claimed(address claimant, address tokenAddress, uint256 tokenId, uint256 amount);\n    /// @dev Emitted when a batch of claims is claimed.\n    event ClaimedBatch(address claimant, address tokenAddress, uint256[] tokenIds, uint256[] amounts);\n\n    /// @dev Error thrown when the claimant is invalid.\n    error InvalidClaimant();\n\n    /// @dev claimant -> tokenAddress -> tokenId -> amount\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public claims;\n\n    /// @dev Claims a token.\n    /// @param claimant The claimant.\n    /// @param tokenAddress The token address.\n    /// @param tokenId The token id.\n    function claim(address claimant, address tokenAddress, uint256 tokenId) public {\n        uint256 amount = claims[claimant][tokenAddress][tokenId];\n        delete claims[claimant][tokenAddress][tokenId];\n        emit Claimed(claimant, tokenAddress, tokenId, amount);\n        IERC1155(tokenAddress).safeTransferFrom(address(this), claimant, tokenId, amount, \"\");\n    }\n\n    /// @dev Claims a batch of tokens.\n    /// @param claimant The claimant.\n    /// @param tokenAddress The token address.\n    /// @param tokenIds The token ids.\n    function claimBatch(address claimant, address tokenAddress, uint256[] memory tokenIds) public {\n        uint256[] memory amounts = new uint256[](tokenIds.length);\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            amounts[i] = claims[claimant][tokenAddress][tokenIds[i]];\n            delete claims[claimant][tokenAddress][tokenIds[i]];\n        }\n        emit ClaimedBatch(claimant, tokenAddress, tokenIds, amounts);\n        IERC1155(tokenAddress).safeBatchTransferFrom(address(this), claimant, tokenIds, amounts, \"\");\n    }\n\n    /// @inheritdoc IERC1155Receiver\n    /// @param claimData The encoded claimant.\n    function onERC1155Received(\n        address,\n        address,\n        uint256 tokenId,\n        uint256 amount,\n        bytes calldata claimData\n    ) public virtual override returns (bytes4) {\n        address claimant = _decodeClaimant(claimData);\n        address tokenAddress = msg.sender;\n        claims[claimant][tokenAddress][tokenId] += amount;\n        emit ClaimAdded(claimant, tokenAddress, tokenId, amount);\n        return this.onERC1155Received.selector;\n    }\n\n    /// @inheritdoc IERC1155Receiver\n    /// @param claimData The encoded claimant.\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts,\n        bytes calldata claimData\n    ) public virtual override returns (bytes4) {\n        address claimant = _decodeClaimant(claimData);\n        address tokenAddress = msg.sender;\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            claims[claimant][tokenAddress][tokenIds[i]] += amounts[i];\n        }\n        emit ClaimAddedBatch(claimant, tokenAddress, tokenIds, amounts);\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /// @dev Decodes the claimant from the claim data.\n    function _decodeClaimant(\n        bytes calldata claimData\n    ) internal pure returns (address claimant) {\n        if (claimData.length == 20) {\n            // Packed address format\n            assembly {\n                calldatacopy(0, claimData.offset, 20)\n                claimant := shr(96, mload(0))\n            }\n        } else if (claimData.length == 32) {\n            // ABI encoded address format\n            (claimant) = abi.decode(claimData, (address));\n        }\n        if (claimant == address(0)) {\n            revert InvalidClaimant();\n        }\n        return claimant;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc2470-libs/=lib/erc2470-libs/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "murky/=lib/murky/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/",
        "signals-implicit-mode/=lib/signals-implicit-mode/",
        "solady/=lib/solady/src/"
      ],
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "evm.bytecode",
            "evm.deployedBytecode",
            "devdoc",
            "userdoc",
            "metadata",
            "abi",
            "evm.methodIdentifiers"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": true
    },
    "evmVersion": "paris",
    "viaIR": true,
    "libraries": {}
  },
  "allowPaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "basePath": "/home/michael/Code/Horizon/live-contracts",
  "includePaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "output": {
    "contracts": {
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "IERC1155": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                }
              ],
              "name": "TransferBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "TransferSingle",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "URI",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "accounts",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                }
              ],
              "name": "balanceOfBatch",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeBatchTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "approved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._",
            "events": {
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
              },
              "TransferBatch(address,address,address,uint256[],uint256[])": {
                "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
              },
              "TransferSingle(address,address,address,uint256,uint256)": {
                "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
              },
              "URI(string,uint256)": {
                "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
              }
            },
            "kind": "dev",
            "methods": {
              "balanceOf(address,uint256)": {
                "details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."
              },
              "balanceOfBatch(address[],uint256[])": {
                "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
              },
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
                "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
              },
              "safeTransferFrom(address,address,uint256,uint256,bytes)": {
                "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "balanceOf(address,uint256)": "00fdd58e",
              "balanceOfBatch(address[],uint256[])": "4e1273f4",
              "isApprovedForAll(address,address)": "e985e9c5",
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
              "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "IERC1155Receiver": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "onERC1155BatchReceived",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "onERC1155Received",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "_Available since v3.1._",
            "kind": "dev",
            "methods": {
              "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
                "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
                "params": {
                  "data": "Additional data with no specified format",
                  "from": "The address which previously owned the token",
                  "ids": "An array containing ids of each token being transferred (order and length must match values array)",
                  "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
                  "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
                },
                "returns": {
                  "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
                }
              },
              "onERC1155Received(address,address,uint256,uint256,bytes)": {
                "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
                "params": {
                  "data": "Additional data with no specified format",
                  "from": "The address which previously owned the token",
                  "id": "The ID of the token being transferred",
                  "operator": "The address which initiated the transfer (i.e. msg.sender)",
                  "value": "The amount of tokens being transferred"
                },
                "returns": {
                  "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
              "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/utility/holder/ERC1155Holder.sol": {
        "ERC1155Holder": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidClaimant",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ClaimAdded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "ClaimAddedBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Claimed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "ClaimedBatch",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "claim",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "claimant",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "name": "claimBatch",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "claims",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "claimData",
                  "type": "bytes"
                }
              ],
              "name": "onERC1155BatchReceived",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "claimData",
                  "type": "bytes"
                }
              ],
              "name": "onERC1155Received",
              "outputs": [
                {
                  "internalType": "bytes4",
                  "name": "",
                  "type": "bytes4"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "InvalidClaimant()": [
                {
                  "details": "Error thrown when the claimant is invalid."
                }
              ]
            },
            "events": {
              "ClaimAdded(address,address,uint256,uint256)": {
                "details": "Emitted when a claim is added."
              },
              "ClaimAddedBatch(address,address,uint256[],uint256[])": {
                "details": "Emitted when a batch of claims is added."
              },
              "Claimed(address,address,uint256,uint256)": {
                "details": "Emitted when a claim is claimed."
              },
              "ClaimedBatch(address,address,uint256[],uint256[])": {
                "details": "Emitted when a batch of claims is claimed."
              }
            },
            "kind": "dev",
            "methods": {
              "claim(address,address,uint256)": {
                "details": "Claims a token.",
                "params": {
                  "claimant": "The claimant.",
                  "tokenAddress": "The token address.",
                  "tokenId": "The token id."
                }
              },
              "claimBatch(address,address,uint256[])": {
                "details": "Claims a batch of tokens.",
                "params": {
                  "claimant": "The claimant.",
                  "tokenAddress": "The token address.",
                  "tokenIds": "The token ids."
                }
              },
              "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
                "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
                "params": {
                  "claimData": "The encoded claimant."
                },
                "returns": {
                  "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
                }
              },
              "onERC1155Received(address,address,uint256,uint256,bytes)": {
                "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
                "params": {
                  "claimData": "The encoded claimant."
                },
                "returns": {
                  "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "stateVariables": {
              "claims": {
                "details": "claimant -> tokenAddress -> tokenId -> amount"
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x12AF PUSH2 0x2C DUP3 CODECOPY PUSH2 0x12AF SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x722 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x3F2E7821 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0x8F98C8FB EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x996CBA68 EQ PUSH2 0x69 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x64 JUMPI PUSH4 0xF23A6E61 SUB PUSH2 0xE JUMPI PUSH2 0x6E6 JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x10F JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0xAD DUP2 PUSH2 0x98 JUMP JUMPDEST SUB PUSH2 0xB4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xC6 DUP3 PUSH2 0xA4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xE2 JUMPI PUSH2 0xDF SWAP2 PUSH1 0x0 ADD PUSH2 0xB9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xF5 SWAP1 PUSH2 0xE7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x13F JUMPI PUSH2 0x13B PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8 JUMP JUMPDEST PUSH2 0x72C JUMP JUMPDEST PUSH2 0x132 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xF9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x158 SWAP1 PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x164 DUP2 PUSH2 0x14F JUMP JUMPDEST SUB PUSH2 0x16B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x17D DUP3 PUSH2 0x15B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18B DUP2 PUSH2 0x17F JUMP JUMPDEST SUB PUSH2 0x192 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1A4 DUP3 PUSH2 0x182 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x1DC JUMPI PUSH2 0x1D9 PUSH2 0x1C2 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP4 PUSH2 0x1D0 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x170 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1F3 PUSH2 0x1FD SWAP3 PUSH2 0x144 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x209 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x222 SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x23A SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 PUSH2 0x261 SWAP3 PUSH2 0x17F JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26E SWAP1 PUSH2 0x248 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x293 SWAP1 PUSH1 0x8 PUSH2 0x298 SWAP4 MUL PUSH2 0x27C JUMP JUMPDEST PUSH2 0x280 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A6 SWAP2 SLOAD PUSH2 0x283 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2D2 SWAP3 PUSH2 0x2C8 PUSH2 0x2CD SWAP3 PUSH2 0x2C3 PUSH1 0x0 SWAP6 PUSH1 0x0 SWAP7 PUSH2 0x218 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH2 0x264 JUMP JUMPDEST PUSH2 0x29B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DE SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F6 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x329 JUMPI PUSH2 0x325 PUSH2 0x314 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6 JUMP JUMPDEST SWAP2 PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0x31C PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x35D SWAP1 PUSH2 0x333 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x377 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST SWAP1 PUSH2 0x38F PUSH2 0x388 PUSH2 0x83 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x353 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3A9 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x3C8 PUSH2 0x3C3 DUP3 PUSH2 0x391 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x405 JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x3EC JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x3FA DUP5 DUP7 PUSH2 0x197 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x428 JUMPI DUP2 PUSH1 0x20 PUSH2 0x425 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x3B3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x47A JUMPI PUSH2 0x445 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x453 DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x475 JUMPI PUSH2 0x472 SWAP3 ADD PUSH2 0x40A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x4B4 JUMPI PUSH2 0x49E PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x42D JUMP JUMPDEST SWAP2 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0x4A6 PUSH2 0x83 JUMP JUMPDEST DUP1 PUSH2 0x4B0 DUP2 PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST CALLVALUE PUSH2 0x4E8 JUMPI PUSH2 0x4D2 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6 JUMP JUMPDEST SWAP2 PUSH2 0xCBD JUMP JUMPDEST PUSH2 0x4DA PUSH2 0x83 JUMP JUMPDEST DUP1 PUSH2 0x4E4 DUP2 PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x52C JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x527 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0x522 JUMPI JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x56B JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x566 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0x561 JUMPI JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP4 DUP4 SUB SLT PUSH2 0x60E JUMPI PUSH2 0x588 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x596 DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x609 JUMPI DUP2 PUSH2 0x5B7 SWAP2 DUP5 ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x604 JUMPI DUP4 PUSH2 0x5DA SWAP2 DUP5 ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5FF JUMPI PUSH2 0x5FB SWAP3 ADD PUSH2 0x531 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH2 0x61C SWAP1 PUSH2 0x98 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x634 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x613 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x670 JUMPI PUSH2 0x66C PUSH2 0x65B PUSH2 0x64C CALLDATASIZE PUSH1 0x4 PUSH2 0x570 JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x663 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x620 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x6E1 JUMPI PUSH2 0x68F DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x69D DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x6AB DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x197 JUMP JUMPDEST SWAP3 PUSH2 0x6B9 DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x197 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x6DC JUMPI PUSH2 0x6D8 SWAP3 ADD PUSH2 0x531 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST CALLVALUE PUSH2 0x71D JUMPI PUSH2 0x719 PUSH2 0x708 PUSH2 0x6FC CALLDATASIZE PUSH1 0x4 PUSH2 0x675 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1044 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x620 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x734 PUSH2 0x727 JUMP JUMPDEST POP DUP1 PUSH2 0x74F PUSH2 0x749 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH2 0x98 JUMP JUMPDEST SWAP2 PUSH2 0x98 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x75C JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x777 PUSH2 0x771 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x98 JUMP JUMPDEST SWAP2 PUSH2 0x98 JUMP JUMPDEST EQ CODESIZE PUSH2 0x758 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x794 PUSH2 0x78F DUP4 PUSH2 0x391 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x7C3 PUSH2 0x7AB DUP4 PUSH2 0x782 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x7B9 DUP7 SWAP4 PUSH2 0x391 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x799 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x7D7 PUSH2 0x7E1 SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x7F0 SWAP2 ADD PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x813 DUP3 PUSH2 0x77E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x824 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x833 SWAP1 MLOAD PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x848 PUSH2 0x84D SWAP2 PUSH2 0x836 JUMP JUMPDEST PUSH2 0x280 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x85A SWAP1 SLOAD PUSH2 0x83C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x867 SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x88B SWAP2 MUL SWAP2 PUSH2 0x885 PUSH1 0x0 NOT DUP5 PUSH2 0x86B JUMP JUMPDEST SWAP3 PUSH2 0x86B JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8AE PUSH2 0x8A9 PUSH2 0x8B6 SWAP4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x895 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x86F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x8D1 SWAP2 PUSH2 0x8CB PUSH2 0x8BA JUMP JUMPDEST SWAP2 PUSH2 0x898 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8DC SWAP1 PUSH2 0x14F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x8F8 SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x909 DUP2 PUSH1 0x20 SWAP4 PUSH2 0x8EF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x930 PUSH2 0x92A PUSH2 0x923 DUP5 PUSH2 0x77E JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x8E0 JUMP JUMPDEST SWAP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x941 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH2 0x95A PUSH2 0x954 PUSH1 0x1 SWAP3 DUP7 MLOAD PUSH2 0x8FC JUMP JUMPDEST SWAP5 PUSH2 0x90D JUMP JUMPDEST SWAP2 ADD SWAP2 SWAP1 SWAP2 PUSH2 0x934 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x99B SWAP2 PUSH2 0x98E PUSH2 0x9A9 SWAP7 SWAP5 PUSH2 0x984 PUSH1 0x80 DUP9 ADD SWAP5 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B5 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C1 SWAP1 PUSH2 0x9AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9CD SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9D9 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x9F2 JUMPI JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xA0C PUSH1 0x0 DUP1 SWAP3 PUSH2 0x9F7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0xA66 SWAP5 SWAP2 PUSH2 0xA4A SWAP2 PUSH2 0xA3D PUSH2 0xA58 SWAP6 PUSH2 0xA33 PUSH1 0xA0 DUP10 ADD SWAP5 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP6 DUP3 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA00 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA71 PUSH2 0x83 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xA8B PUSH2 0xA86 DUP5 PUSH2 0x77E JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST PUSH2 0xA95 PUSH1 0x0 PUSH2 0x7C8 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xAB1 PUSH2 0xAAB PUSH2 0xAA6 DUP9 PUSH2 0x77E JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST LT ISZERO PUSH2 0xB4F JUMPI PUSH2 0xB4A SWAP1 PUSH2 0xB0A PUSH2 0xAF8 PUSH2 0xAF3 PUSH2 0xADA PUSH2 0xAD3 PUSH1 0x0 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xAED PUSH2 0xAE8 DUP12 DUP8 SWAP1 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST PUSH2 0xB05 DUP6 SWAP2 DUP5 SWAP1 SWAP3 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH2 0xB45 PUSH1 0x0 PUSH2 0xB40 PUSH2 0xB27 PUSH2 0xB20 DUP4 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xB3A PUSH2 0xB35 DUP12 DUP8 SWAP1 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0xA96 JUMP JUMPDEST POP SWAP2 PUSH2 0xB9B PUSH2 0xBA0 SWAP2 DUP4 DUP2 DUP8 SWAP2 PUSH2 0xB93 DUP9 PUSH32 0x52AFAE05D11477135F8797C76D1235E9CA8BFEC06367627F38F22FF5019379A3 SWAP5 PUSH2 0xB8A PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x964 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST PUSH4 0x2EB2C2D6 SWAP3 PUSH2 0xBAF ADDRESS PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xC28 JUMPI PUSH1 0x0 SWAP5 PUSH2 0xBE4 DUP7 SWAP3 PUSH2 0xBD9 SWAP5 PUSH2 0xBCD PUSH2 0x83 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x9E1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0xA10 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xC23 JUMPI PUSH2 0xBF6 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xC16 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xC1C JUMPI JUMPDEST PUSH2 0xC0E DUP2 DUP4 PUSH2 0x353 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x9E7 JUMP JUMPDEST CODESIZE PUSH2 0xBF3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC04 JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH2 0xC63 PUSH2 0xC6A SWAP5 PUSH2 0xC59 PUSH1 0x60 SWAP5 SWAP9 SWAP8 SWAP6 PUSH2 0xC4F PUSH1 0x80 DUP7 ADD SWAP11 PUSH1 0x0 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 PUSH2 0xCA3 PUSH2 0xCAD SWAP3 SWAP5 PUSH2 0xC99 PUSH2 0xCBA SWAP8 PUSH2 0xC8F PUSH1 0xA0 DUP9 ADD SWAP9 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA00 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD5D PUSH2 0xD58 PUSH2 0xCEB PUSH2 0xCE6 PUSH2 0xCDF PUSH2 0xCD8 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST SWAP4 PUSH2 0xD15 PUSH1 0x0 PUSH2 0xD10 PUSH2 0xD09 PUSH2 0xD02 DUP4 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST DUP4 DUP2 DUP8 SWAP2 PUSH2 0xD50 DUP9 PUSH32 0x2F6639D24651730C7BF57C95DDBF96D66D11477E4EC626876F92C22E5F365E68 SWAP5 PUSH2 0xD47 PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0xC2D JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST PUSH4 0xF242432A SWAP3 PUSH2 0xD6C ADDRESS PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xDE5 JUMPI PUSH1 0x0 SWAP5 PUSH2 0xDA1 DUP7 SWAP3 PUSH2 0xD96 SWAP5 PUSH2 0xD8A PUSH2 0x83 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x9E1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0xC6C JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xDE0 JUMPI PUSH2 0xDB3 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD3 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xDD9 JUMPI JUMPDEST PUSH2 0xDCB DUP2 DUP4 PUSH2 0x353 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x9E7 JUMP JUMPDEST CODESIZE PUSH2 0xDB0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDC1 JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xE03 JUMPI PUSH1 0x20 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F3 JUMP JUMPDEST CALLDATALOAD PUSH2 0xE12 DUP2 PUSH2 0x182 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xE3A PUSH2 0xE40 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x17F JUMP JUMPDEST SWAP3 PUSH2 0x17F JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0xE4B JUMPI JUMP JUMPDEST PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE63 PUSH1 0x0 NOT SWAP2 PUSH2 0xE50 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE82 PUSH2 0xE7D PUSH2 0xE89 SWAP3 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x895 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xE56 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH2 0xEA2 SWAP2 PUSH2 0x8E0 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0xEC5 JUMPI DUP3 SWAP2 PUSH1 0x20 PUSH2 0xEC1 SWAP3 MUL SWAP4 DUP5 SWAP2 PUSH2 0xE92 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE8D JUMP JUMPDEST SWAP5 SWAP3 SWAP4 PUSH2 0xF10 SWAP7 SWAP5 PUSH2 0xEF5 PUSH2 0xF02 SWAP5 PUSH2 0xEEB PUSH1 0x80 DUP11 ADD SWAP6 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP7 DUP4 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0xE96 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0xE96 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xF30 PUSH2 0xF2B PUSH2 0xF35 SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP SWAP4 SWAP5 PUSH2 0xF50 SWAP2 SWAP4 SWAP6 PUSH2 0xF4A PUSH2 0xDEA JUMP JUMPDEST POP PUSH2 0x11AF JUMP JUMPDEST SWAP4 CALLER SWAP2 PUSH2 0xF5D PUSH1 0x0 PUSH2 0x7C8 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xF7B PUSH2 0xF75 PUSH2 0xF70 DUP10 DUP10 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST LT ISZERO PUSH2 0xFF0 JUMPI PUSH2 0xFEB SWAP1 PUSH2 0xFE6 PUSH2 0xF9C PUSH2 0xF97 DUP6 DUP8 DUP6 SWAP2 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST PUSH2 0xFE0 PUSH2 0xFD1 PUSH2 0xFB7 PUSH2 0xFB0 DUP14 PUSH1 0x0 PUSH2 0x218 JUMP JUMPDEST DUP11 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xFCB PUSH2 0xFC6 DUP14 DUP14 DUP10 SWAP2 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST SWAP2 PUSH2 0xFDB DUP4 PUSH2 0x850 JUMP JUMPDEST PUSH2 0xE2B JUMP JUMPDEST SWAP1 PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0xF5E JUMP JUMPDEST POP SWAP1 PUSH2 0x1031 SWAP3 SWAP4 SWAP6 SWAP4 SWAP5 SWAP6 SWAP2 SWAP1 SWAP2 PUSH32 0x8BC34FEED688351319653DD43606ECFF95D859489D6A570F0DC355C98A007225 SWAP7 PUSH2 0x1028 PUSH2 0x83 JUMP JUMPDEST SWAP7 DUP8 SWAP7 DUP8 PUSH2 0xECA JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x1041 PUSH4 0xBC197C81 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP SWAP2 SWAP3 PUSH2 0x105B SWAP2 SWAP4 PUSH2 0x1055 PUSH2 0xDEA JUMP JUMPDEST POP PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x10D2 CALLER SWAP2 PUSH2 0x109C DUP6 PUSH2 0x1096 PUSH2 0x1087 PUSH2 0x1080 PUSH2 0x1079 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP9 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP9 SWAP1 PUSH2 0x264 JUMP JUMPDEST SWAP2 PUSH2 0x1091 DUP4 PUSH2 0x850 JUMP JUMPDEST PUSH2 0xE2B JUMP JUMPDEST SWAP1 PUSH2 0xE6D JUMP JUMPDEST SWAP2 SWAP3 SWAP4 PUSH32 0x13805C88D507C700BE6B306C02E8A12F22987364D2FADEFF7D4FA5392508FDBF SWAP5 PUSH2 0x10C9 PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0xC2D JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x10E2 PUSH4 0xF23A6E61 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x1100 PUSH2 0x110A SWAP3 PUSH2 0x10EE JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x111F PUSH2 0x1129 SWAP3 PUSH2 0x110D JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1135 SWAP1 PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x112C JUMP JUMPDEST SUB PUSH2 0x1148 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x115A DUP3 PUSH2 0x1138 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1176 JUMPI PUSH2 0x1173 SWAP2 PUSH1 0x0 ADD PUSH2 0x114D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH2 0x1184 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x119B PUSH2 0x1196 PUSH2 0x11A0 SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11AC SWAP1 PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11B7 PUSH2 0x10E5 JUMP JUMPDEST SWAP2 PUSH2 0x11C3 DUP3 DUP3 SWAP1 PUSH2 0x10EA JUMP JUMPDEST PUSH2 0x11D6 PUSH2 0x11D0 PUSH1 0x14 PUSH2 0x10F1 JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x122E JUMPI POP PUSH1 0x14 SWAP2 POP PUSH1 0x0 CALLDATACOPY PUSH1 0x0 MLOAD PUSH1 0x60 SHR JUMPDEST DUP1 PUSH2 0x1209 PUSH2 0x1203 PUSH2 0x11FE PUSH1 0x0 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP2 PUSH2 0x14F JUMP JUMPDEST EQ PUSH2 0x1211 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x6DEFBEED PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x122A PUSH1 0x4 DUP3 ADD PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x123A DUP2 DUP4 SWAP1 PUSH2 0x10EA JUMP JUMPDEST PUSH2 0x124D PUSH2 0x1247 PUSH1 0x20 PUSH2 0x1110 JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST EQ PUSH2 0x125A JUMPI JUMPDEST POP POP PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x1272 SWAP3 POP SWAP1 PUSH2 0x126D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH2 0x117B JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x1253 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 INVALID ORIGIN MUL 0xC9 ADD PUSH7 0xDFC5F174690E2F SWAP1 0xE7 0xBB PUSH3 0x1873FF BLOBHASH CALLDATALOAD PUSH3 0x423AF7 DUP11 0xB9 PUSH21 0xDBB564736F6C634300081B00330000000000000000 ",
              "sourceMap": "331:4265:3:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address": {
                  "entryPoint": 368,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payable": {
                  "entryPoint": 4429,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_array_uint256_dyn": {
                  "entryPoint": 1069,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_addresst_array_uint256_dyn_calldatat_array_uint256_dyn_calldatat_bytes_calldata": {
                  "entryPoint": 1392,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 8
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 422,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_addresst_uint256t_uint256t_bytes_calldata": {
                  "entryPoint": 1653,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_array_uint256_dyn": {
                  "entryPoint": 1034,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_array_uint256_dyn_calldata": {
                  "entryPoint": 1266,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_array_uint256_dyn": {
                  "entryPoint": 947,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes4": {
                  "entryPoint": 200,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes_calldata": {
                  "entryPoint": 1329,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 2535,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_t_bytes4": {
                  "entryPoint": 185,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 4444,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 407,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_uint256": {
                  "entryPoint": 2300,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 2259,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_array_uint256_dyn_array_uint256_dyn": {
                  "entryPoint": 2404,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_address_address_array_uint256_dyn_array_uint256_dyn_stringliteral_c5d2": {
                  "entryPoint": 2576,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_address_address_array_uint256_dyn_calldata_array_uint256_dyn_calldata": {
                  "entryPoint": 3786,
                  "id": null,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_uint256": {
                  "entryPoint": 3117,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_address_address_uint256_uint256_stringliteral_c5d2": {
                  "entryPoint": 3180,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_array_uint256_dyn": {
                  "entryPoint": 2323,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_array_uint256_dyn_calldata": {
                  "entryPoint": 3734,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": 249,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 236,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes4": {
                  "entryPoint": 1555,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_stringliteral_c5d2": {
                  "entryPoint": 2560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 1151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_bytes4": {
                  "entryPoint": 1568,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 738,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 2287,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint256_to_uint256_fromStack": {
                  "entryPoint": 725,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_and_zero_memory_array_array_uint256_dyn": {
                  "entryPoint": 1950,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 892,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_array_uint256_dyn": {
                  "entryPoint": 1922,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_array_uint256_dyn": {
                  "entryPoint": 913,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_uint256_dyn": {
                  "entryPoint": 2281,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_uint256_dyn": {
                  "entryPoint": 1918,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_uint256_dyn_calldata": {
                  "entryPoint": 3567,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_length_bytes_calldata": {
                  "entryPoint": 4330,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_nextElement_array_uint256_dyn": {
                  "entryPoint": 2317,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_array_uint256_dyn": {
                  "entryPoint": 2272,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 2551,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_access_uint256_dyn_calldata": {
                  "entryPoint": 3571,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 3627,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 335,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 4396,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 231,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 152,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 640,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 4365,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 1989,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 4334,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 324,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 383,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint32": {
                  "entryPoint": 3859,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 4475,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 524,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IERC1155": {
                  "entryPoint": 2488,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC1155Holder_to_address": {
                  "entryPoint": 2512,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IERC1155_to_address": {
                  "entryPoint": 2500,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint256": {
                  "entryPoint": 1992,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 4515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 4487,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 4337,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 4368,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 512,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IERC1155": {
                  "entryPoint": 2476,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 484,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 584,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint32_to_bytes4": {
                  "entryPoint": 3868,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory": {
                  "entryPoint": 3730,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_claim": {
                  "entryPoint": 1209,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_claimBatch": {
                  "entryPoint": 1157,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_claims": {
                  "entryPoint": 760,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_onERC1155BatchReceived": {
                  "entryPoint": 1590,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_onERC1155Received": {
                  "entryPoint": 1766,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 271,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_uint256": {
                  "entryPoint": 643,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 2108,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 851,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_claim": {
                  "entryPoint": 3261,
                  "id": 295,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_claimBatch": {
                  "entryPoint": 2682,
                  "id": 378,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_decodeClaimant": {
                  "entryPoint": 4527,
                  "id": 543,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_onERC1155BatchReceived": {
                  "entryPoint": 3896,
                  "id": 497,
                  "parameterSlots": 8,
                  "returnSlots": 1
                },
                "fun_onERC1155Received": {
                  "entryPoint": 4164,
                  "id": 428,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "fun_supportsInterface": {
                  "entryPoint": 1836,
                  "id": 568,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "getter_fun_claims": {
                  "entryPoint": 681,
                  "id": 244,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 481,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_wrapping_uint256": {
                  "entryPoint": 2020,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_mapping_address_mapping_uint256_uint256_of_address": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_mapping_uint256_uint256_of_address": {
                  "entryPoint": 560,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_uint256_of_uint256": {
                  "entryPoint": 612,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint256_dyn": {
                  "entryPoint": 2057,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 3605,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 2035,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 829,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_uint256": {
                  "entryPoint": 2197,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_calldatat_uint256": {
                  "entryPoint": 3592,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint256": {
                  "entryPoint": 2089,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_uint256": {
                  "entryPoint": 667,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 2128,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 2524,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
                  "entryPoint": 1261,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 814,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1826,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
                  "entryPoint": 942,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 137,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec": {
                  "entryPoint": 3725,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 142,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 2665,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 819,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 3664,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 2529,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 2155,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 2102,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 125,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 2239,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 2159,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3670,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 3693,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 347,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 4408,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 164,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 386,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "write_to_memory_uint256": {
                  "entryPoint": 2141,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_memory_chunk_uint256": {
                  "entryPoint": 1945,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 4325,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1831,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes4": {
                  "entryPoint": 3562,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 2234,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x722 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x3F2E7821 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0x8F98C8FB EQ PUSH2 0x6E JUMPI DUP1 PUSH4 0x996CBA68 EQ PUSH2 0x69 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x64 JUMPI PUSH4 0xF23A6E61 SUB PUSH2 0xE JUMPI PUSH2 0x6E6 JUMP JUMPDEST PUSH2 0x636 JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x10F JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0xAD DUP2 PUSH2 0x98 JUMP JUMPDEST SUB PUSH2 0xB4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xC6 DUP3 PUSH2 0xA4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xE2 JUMPI PUSH2 0xDF SWAP2 PUSH1 0x0 ADD PUSH2 0xB9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xF5 SWAP1 PUSH2 0xE7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x13F JUMPI PUSH2 0x13B PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8 JUMP JUMPDEST PUSH2 0x72C JUMP JUMPDEST PUSH2 0x132 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xF9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x158 SWAP1 PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x164 DUP2 PUSH2 0x14F JUMP JUMPDEST SUB PUSH2 0x16B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x17D DUP3 PUSH2 0x15B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18B DUP2 PUSH2 0x17F JUMP JUMPDEST SUB PUSH2 0x192 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1A4 DUP3 PUSH2 0x182 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x1DC JUMPI PUSH2 0x1D9 PUSH2 0x1C2 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP4 PUSH2 0x1D0 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x170 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x1F3 PUSH2 0x1FD SWAP3 PUSH2 0x144 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x209 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x222 SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x23A SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 PUSH2 0x261 SWAP3 PUSH2 0x17F JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26E SWAP1 PUSH2 0x248 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x293 SWAP1 PUSH1 0x8 PUSH2 0x298 SWAP4 MUL PUSH2 0x27C JUMP JUMPDEST PUSH2 0x280 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A6 SWAP2 SLOAD PUSH2 0x283 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2D2 SWAP3 PUSH2 0x2C8 PUSH2 0x2CD SWAP3 PUSH2 0x2C3 PUSH1 0x0 SWAP6 PUSH1 0x0 SWAP7 PUSH2 0x218 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH2 0x264 JUMP JUMPDEST PUSH2 0x29B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DE SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F6 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x329 JUMPI PUSH2 0x325 PUSH2 0x314 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6 JUMP JUMPDEST SWAP2 PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0x31C PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x35D SWAP1 PUSH2 0x333 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x377 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST SWAP1 PUSH2 0x38F PUSH2 0x388 PUSH2 0x83 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x353 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3A9 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x3C8 PUSH2 0x3C3 DUP3 PUSH2 0x391 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x405 JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x3EC JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x3FA DUP5 DUP7 PUSH2 0x197 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x428 JUMPI DUP2 PUSH1 0x20 PUSH2 0x425 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x3B3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x47A JUMPI PUSH2 0x445 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x453 DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x475 JUMPI PUSH2 0x472 SWAP3 ADD PUSH2 0x40A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x4B4 JUMPI PUSH2 0x49E PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x42D JUMP JUMPDEST SWAP2 PUSH2 0xA7A JUMP JUMPDEST PUSH2 0x4A6 PUSH2 0x83 JUMP JUMPDEST DUP1 PUSH2 0x4B0 DUP2 PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST CALLVALUE PUSH2 0x4E8 JUMPI PUSH2 0x4D2 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6 JUMP JUMPDEST SWAP2 PUSH2 0xCBD JUMP JUMPDEST PUSH2 0x4DA PUSH2 0x83 JUMP JUMPDEST DUP1 PUSH2 0x4E4 DUP2 PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x52C JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x527 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0x522 JUMPI JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x56B JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x566 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0x561 JUMPI JUMP JUMPDEST PUSH2 0x3AE JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP4 DUP4 SUB SLT PUSH2 0x60E JUMPI PUSH2 0x588 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x596 DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x609 JUMPI DUP2 PUSH2 0x5B7 SWAP2 DUP5 ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x604 JUMPI DUP4 PUSH2 0x5DA SWAP2 DUP5 ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5FF JUMPI PUSH2 0x5FB SWAP3 ADD PUSH2 0x531 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH2 0x61C SWAP1 PUSH2 0x98 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x634 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x613 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x670 JUMPI PUSH2 0x66C PUSH2 0x65B PUSH2 0x64C CALLDATASIZE PUSH1 0x4 PUSH2 0x570 JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x663 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x620 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x6E1 JUMPI PUSH2 0x68F DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x69D DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x170 JUMP JUMPDEST SWAP3 PUSH2 0x6AB DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x197 JUMP JUMPDEST SWAP3 PUSH2 0x6B9 DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x197 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x6DC JUMPI PUSH2 0x6D8 SWAP3 ADD PUSH2 0x531 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x93 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST CALLVALUE PUSH2 0x71D JUMPI PUSH2 0x719 PUSH2 0x708 PUSH2 0x6FC CALLDATASIZE PUSH1 0x4 PUSH2 0x675 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1044 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x83 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x620 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x734 PUSH2 0x727 JUMP JUMPDEST POP DUP1 PUSH2 0x74F PUSH2 0x749 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH2 0x98 JUMP JUMPDEST SWAP2 PUSH2 0x98 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x75C JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x777 PUSH2 0x771 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x98 JUMP JUMPDEST SWAP2 PUSH2 0x98 JUMP JUMPDEST EQ CODESIZE PUSH2 0x758 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x794 PUSH2 0x78F DUP4 PUSH2 0x391 JUMP JUMPDEST PUSH2 0x37C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x7C3 PUSH2 0x7AB DUP4 PUSH2 0x782 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x7B9 DUP7 SWAP4 PUSH2 0x391 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x799 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x7D7 PUSH2 0x7E1 SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x7F0 SWAP2 ADD PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x813 DUP3 PUSH2 0x77E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x824 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x833 SWAP1 MLOAD PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x848 PUSH2 0x84D SWAP2 PUSH2 0x836 JUMP JUMPDEST PUSH2 0x280 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x85A SWAP1 SLOAD PUSH2 0x83C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x867 SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x88B SWAP2 MUL SWAP2 PUSH2 0x885 PUSH1 0x0 NOT DUP5 PUSH2 0x86B JUMP JUMPDEST SWAP3 PUSH2 0x86B JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8AE PUSH2 0x8A9 PUSH2 0x8B6 SWAP4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x895 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x86F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x8D1 SWAP2 PUSH2 0x8CB PUSH2 0x8BA JUMP JUMPDEST SWAP2 PUSH2 0x898 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8DC SWAP1 PUSH2 0x14F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x8F8 SWAP1 PUSH2 0x17F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x909 DUP2 PUSH1 0x20 SWAP4 PUSH2 0x8EF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x930 PUSH2 0x92A PUSH2 0x923 DUP5 PUSH2 0x77E JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x8E0 JUMP JUMPDEST SWAP3 PUSH2 0x8E9 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x941 JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH2 0x95A PUSH2 0x954 PUSH1 0x1 SWAP3 DUP7 MLOAD PUSH2 0x8FC JUMP JUMPDEST SWAP5 PUSH2 0x90D JUMP JUMPDEST SWAP2 ADD SWAP2 SWAP1 SWAP2 PUSH2 0x934 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x99B SWAP2 PUSH2 0x98E PUSH2 0x9A9 SWAP7 SWAP5 PUSH2 0x984 PUSH1 0x80 DUP9 ADD SWAP5 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B5 SWAP1 PUSH2 0x1E4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C1 SWAP1 PUSH2 0x9AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9CD SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9D9 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x9F2 JUMPI JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xA0C PUSH1 0x0 DUP1 SWAP3 PUSH2 0x9F7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0xA66 SWAP5 SWAP2 PUSH2 0xA4A SWAP2 PUSH2 0xA3D PUSH2 0xA58 SWAP6 PUSH2 0xA33 PUSH1 0xA0 DUP10 ADD SWAP5 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP6 DUP3 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x913 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA00 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA71 PUSH2 0x83 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0xA8B PUSH2 0xA86 DUP5 PUSH2 0x77E JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST PUSH2 0xA95 PUSH1 0x0 PUSH2 0x7C8 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xAB1 PUSH2 0xAAB PUSH2 0xAA6 DUP9 PUSH2 0x77E JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST LT ISZERO PUSH2 0xB4F JUMPI PUSH2 0xB4A SWAP1 PUSH2 0xB0A PUSH2 0xAF8 PUSH2 0xAF3 PUSH2 0xADA PUSH2 0xAD3 PUSH1 0x0 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xAED PUSH2 0xAE8 DUP12 DUP8 SWAP1 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST PUSH2 0xB05 DUP6 SWAP2 DUP5 SWAP1 SWAP3 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH2 0xB45 PUSH1 0x0 PUSH2 0xB40 PUSH2 0xB27 PUSH2 0xB20 DUP4 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xB3A PUSH2 0xB35 DUP12 DUP8 SWAP1 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0xA96 JUMP JUMPDEST POP SWAP2 PUSH2 0xB9B PUSH2 0xBA0 SWAP2 DUP4 DUP2 DUP8 SWAP2 PUSH2 0xB93 DUP9 PUSH32 0x52AFAE05D11477135F8797C76D1235E9CA8BFEC06367627F38F22FF5019379A3 SWAP5 PUSH2 0xB8A PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x964 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST PUSH4 0x2EB2C2D6 SWAP3 PUSH2 0xBAF ADDRESS PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xC28 JUMPI PUSH1 0x0 SWAP5 PUSH2 0xBE4 DUP7 SWAP3 PUSH2 0xBD9 SWAP5 PUSH2 0xBCD PUSH2 0x83 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x9E1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0xA10 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xC23 JUMPI PUSH2 0xBF6 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xC16 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xC1C JUMPI JUMPDEST PUSH2 0xC0E DUP2 DUP4 PUSH2 0x353 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x9E7 JUMP JUMPDEST CODESIZE PUSH2 0xBF3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC04 JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH2 0xC63 PUSH2 0xC6A SWAP5 PUSH2 0xC59 PUSH1 0x60 SWAP5 SWAP9 SWAP8 SWAP6 PUSH2 0xC4F PUSH1 0x80 DUP7 ADD SWAP11 PUSH1 0x0 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 PUSH2 0xCA3 PUSH2 0xCAD SWAP3 SWAP5 PUSH2 0xC99 PUSH2 0xCBA SWAP8 PUSH2 0xC8F PUSH1 0xA0 DUP9 ADD SWAP9 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA00 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD5D PUSH2 0xD58 PUSH2 0xCEB PUSH2 0xCE6 PUSH2 0xCDF PUSH2 0xCD8 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x850 JUMP JUMPDEST SWAP4 PUSH2 0xD15 PUSH1 0x0 PUSH2 0xD10 PUSH2 0xD09 PUSH2 0xD02 DUP4 DUP10 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0x264 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST DUP4 DUP2 DUP8 SWAP2 PUSH2 0xD50 DUP9 PUSH32 0x2F6639D24651730C7BF57C95DDBF96D66D11477E4EC626876F92C22E5F365E68 SWAP5 PUSH2 0xD47 PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0xC2D JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x9B8 JUMP JUMPDEST PUSH2 0x9C4 JUMP JUMPDEST PUSH4 0xF242432A SWAP3 PUSH2 0xD6C ADDRESS PUSH2 0x9D0 JUMP JUMPDEST SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0xDE5 JUMPI PUSH1 0x0 SWAP5 PUSH2 0xDA1 DUP7 SWAP3 PUSH2 0xD96 SWAP5 PUSH2 0xD8A PUSH2 0x83 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x9E1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0xC6C JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xDE0 JUMPI PUSH2 0xDB3 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD3 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xDD9 JUMPI JUMPDEST PUSH2 0xDCB DUP2 DUP4 PUSH2 0x353 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x9E7 JUMP JUMPDEST CODESIZE PUSH2 0xDB0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDC1 JUMP JUMPDEST PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xE03 JUMPI PUSH1 0x20 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F3 JUMP JUMPDEST CALLDATALOAD PUSH2 0xE12 DUP2 PUSH2 0x182 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xE3A PUSH2 0xE40 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x17F JUMP JUMPDEST SWAP3 PUSH2 0x17F JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0xE4B JUMPI JUMP JUMPDEST PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE63 PUSH1 0x0 NOT SWAP2 PUSH2 0xE50 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE82 PUSH2 0xE7D PUSH2 0xE89 SWAP3 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x895 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xE56 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH2 0xEA2 SWAP2 PUSH2 0x8E0 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0xEC5 JUMPI DUP3 SWAP2 PUSH1 0x20 PUSH2 0xEC1 SWAP3 MUL SWAP4 DUP5 SWAP2 PUSH2 0xE92 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE8D JUMP JUMPDEST SWAP5 SWAP3 SWAP4 PUSH2 0xF10 SWAP7 SWAP5 PUSH2 0xEF5 PUSH2 0xF02 SWAP5 PUSH2 0xEEB PUSH1 0x80 DUP11 ADD SWAP6 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0x8D3 JUMP JUMPDEST DUP7 DUP4 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0xE96 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0xE96 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xF30 PUSH2 0xF2B PUSH2 0xF35 SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP SWAP4 SWAP5 PUSH2 0xF50 SWAP2 SWAP4 SWAP6 PUSH2 0xF4A PUSH2 0xDEA JUMP JUMPDEST POP PUSH2 0x11AF JUMP JUMPDEST SWAP4 CALLER SWAP2 PUSH2 0xF5D PUSH1 0x0 PUSH2 0x7C8 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xF7B PUSH2 0xF75 PUSH2 0xF70 DUP10 DUP10 SWAP1 PUSH2 0xDEF JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST LT ISZERO PUSH2 0xFF0 JUMPI PUSH2 0xFEB SWAP1 PUSH2 0xFE6 PUSH2 0xF9C PUSH2 0xF97 DUP6 DUP8 DUP6 SWAP2 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST PUSH2 0xFE0 PUSH2 0xFD1 PUSH2 0xFB7 PUSH2 0xFB0 DUP14 PUSH1 0x0 PUSH2 0x218 JUMP JUMPDEST DUP11 SWAP1 PUSH2 0x230 JUMP JUMPDEST PUSH2 0xFCB PUSH2 0xFC6 DUP14 DUP14 DUP10 SWAP2 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xE08 JUMP JUMPDEST SWAP1 PUSH2 0x264 JUMP JUMPDEST SWAP2 PUSH2 0xFDB DUP4 PUSH2 0x850 JUMP JUMPDEST PUSH2 0xE2B JUMP JUMPDEST SWAP1 PUSH2 0xE6D JUMP JUMPDEST PUSH2 0x7E4 JUMP JUMPDEST PUSH2 0xF5E JUMP JUMPDEST POP SWAP1 PUSH2 0x1031 SWAP3 SWAP4 SWAP6 SWAP4 SWAP5 SWAP6 SWAP2 SWAP1 SWAP2 PUSH32 0x8BC34FEED688351319653DD43606ECFF95D859489D6A570F0DC355C98A007225 SWAP7 PUSH2 0x1028 PUSH2 0x83 JUMP JUMPDEST SWAP7 DUP8 SWAP7 DUP8 PUSH2 0xECA JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x1041 PUSH4 0xBC197C81 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP SWAP2 SWAP3 PUSH2 0x105B SWAP2 SWAP4 PUSH2 0x1055 PUSH2 0xDEA JUMP JUMPDEST POP PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x10D2 CALLER SWAP2 PUSH2 0x109C DUP6 PUSH2 0x1096 PUSH2 0x1087 PUSH2 0x1080 PUSH2 0x1079 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x218 JUMP JUMPDEST DUP9 SWAP1 PUSH2 0x230 JUMP JUMPDEST DUP9 SWAP1 PUSH2 0x264 JUMP JUMPDEST SWAP2 PUSH2 0x1091 DUP4 PUSH2 0x850 JUMP JUMPDEST PUSH2 0xE2B JUMP JUMPDEST SWAP1 PUSH2 0xE6D JUMP JUMPDEST SWAP2 SWAP3 SWAP4 PUSH32 0x13805C88D507C700BE6B306C02E8A12F22987364D2FADEFF7D4FA5392508FDBF SWAP5 PUSH2 0x10C9 PUSH2 0x83 JUMP JUMPDEST SWAP5 DUP6 SWAP5 DUP6 PUSH2 0xC2D JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x10E2 PUSH4 0xF23A6E61 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x1100 PUSH2 0x110A SWAP3 PUSH2 0x10EE JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x111F PUSH2 0x1129 SWAP3 PUSH2 0x110D JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x17F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1135 SWAP1 PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x112C JUMP JUMPDEST SUB PUSH2 0x1148 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x115A DUP3 PUSH2 0x1138 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1176 JUMPI PUSH2 0x1173 SWAP2 PUSH1 0x0 ADD PUSH2 0x114D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH2 0x1184 SWAP1 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x119B PUSH2 0x1196 PUSH2 0x11A0 SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x1E1 JUMP JUMPDEST PUSH2 0x144 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11AC SWAP1 PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11B7 PUSH2 0x10E5 JUMP JUMPDEST SWAP2 PUSH2 0x11C3 DUP3 DUP3 SWAP1 PUSH2 0x10EA JUMP JUMPDEST PUSH2 0x11D6 PUSH2 0x11D0 PUSH1 0x14 PUSH2 0x10F1 JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x122E JUMPI POP PUSH1 0x14 SWAP2 POP PUSH1 0x0 CALLDATACOPY PUSH1 0x0 MLOAD PUSH1 0x60 SHR JUMPDEST DUP1 PUSH2 0x1209 PUSH2 0x1203 PUSH2 0x11FE PUSH1 0x0 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP2 PUSH2 0x14F JUMP JUMPDEST EQ PUSH2 0x1211 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x6DEFBEED PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x122A PUSH1 0x4 DUP3 ADD PUSH2 0x47F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x123A DUP2 DUP4 SWAP1 PUSH2 0x10EA JUMP JUMPDEST PUSH2 0x124D PUSH2 0x1247 PUSH1 0x20 PUSH2 0x1110 JUMP JUMPDEST SWAP2 PUSH2 0x17F JUMP JUMPDEST EQ PUSH2 0x125A JUMPI JUMPDEST POP POP PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x1272 SWAP3 POP SWAP1 PUSH2 0x126D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x115C JUMP JUMPDEST PUSH2 0x117B JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x1253 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 INVALID ORIGIN MUL 0xC9 ADD PUSH7 0xDFC5F174690E2F SWAP1 0xE7 0xBB PUSH3 0x1873FF BLOBHASH CALLDATALOAD PUSH3 0x423AF7 DUP11 0xB9 PUSH21 0xDBB564736F6C634300081B00330000000000000000 ",
              "sourceMap": "331:4265:3:-:0;;;;;;;;;-1:-1:-1;331:4265:3;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;1124:81::-;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;331:4265::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;4362:231::-;4470:4;;:::i;:::-;4493:11;;:49;;4508:34;;;4493:49;:::i;:::-;;;:::i;:::-;;:93;;;;;4362:231;4486:100;;:::o;4493:93::-;4546:11;;:40;;4561:25;;;4546:40;:::i;:::-;;;:::i;:::-;;4493:93;;;331:4265;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;;;;;;;1898:540;2029:30;2043:15;:8;:15;:::i;:::-;2029:30;:::i;:::-;2074:13;2086:1;2074:13;:::i;:::-;2110:3;2089:1;:19;;2093:15;:8;:15;:::i;:::-;2089:19;:::i;:::-;;;:::i;:::-;;;;;2110:3;2142:6;2129:56;2142:43;;:30;:16;:6;2149:8;2142:16;;:::i;:::-;2159:12;2142:30;;:::i;:::-;2173:11;;:8;2182:1;2173:11;;:::i;:::-;;:::i;:::-;2142:43;;:::i;:::-;;:::i;:::-;2129:56;:7;2137:1;;2129:56;;;:::i;:::-;;:::i;:::-;2199:50;;2206:43;:30;:16;:6;2213:8;2206:16;;:::i;:::-;2223:12;2206:30;;:::i;:::-;2237:11;;:8;2246:1;2237:11;;:::i;:::-;;:::i;:::-;2206:43;;:::i;:::-;2199:50;:::i;:::-;2110:3;:::i;:::-;2074:13;;2089:19;;;2339:22;:44;2089:19;2287:8;2297:12;2311:8;2321:7;2274:55;2321:7;2274:55;;;;:::i;:::-;;;;;;:::i;:::-;;;;2339:22;:::i;:::-;:44;:::i;:::-;;2392:4;2384:13;2392:4;2384:13;:::i;:::-;2399:8;2409;2419:7;2339:92;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;2069:191;1898:540;:::o;2339:92::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;331:4265::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;1363:366::-;1637:39;:22;1469:39;;:30;:16;:6;1476:8;1469:16;;:::i;:::-;1486:12;1469:30;;:::i;:::-;1500:7;1469:39;;:::i;:::-;;:::i;:::-;1525:6;1518:46;;1525:39;:30;:16;:6;1532:8;1525:16;;:::i;:::-;1542:12;1525:30;;:::i;:::-;1556:7;1525:39;;:::i;:::-;1518:46;:::i;:::-;1587:8;1597:12;1611:7;1620:6;1579:48;1620:6;1579:48;;;;:::i;:::-;;;;;;:::i;:::-;;;;1637:22;:::i;:::-;:39;:::i;:::-;;1685:4;1677:13;1685:4;1677:13;:::i;:::-;1692:8;1702:7;1711:6;1637:85;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;1363:366;;:::o;1637:85::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;331:4265::-;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3087:588::-;;;;;3336:26;3087:588;;;3299:6;;:::i;:::-;3352:9;3336:26;:::i;:::-;3395:10;;3432:1;3420:13;3432:1;3420:13;:::i;:::-;3456:3;3435:1;:19;;3439:15;:8;;:15;;:::i;:::-;3435:19;:::i;:::-;;;:::i;:::-;;;;;3456:3;3522:7;3475:57;3522:10;;:7;;3530:1;3522:10;;:::i;:::-;;:::i;:::-;3475:57;:43;:30;:16;:6;;:16;:::i;:::-;3492:12;3475:30;;:::i;:::-;3506:11;;:8;;3515:1;3506:11;;:::i;:::-;;:::i;:::-;3475:43;;:::i;:::-;:57;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;3456:3;:::i;:::-;3420:13;;3435:19;;;3557:58;3435:19;;;3583:12;3597:8;;3607:7;;3557:58;;;;;:::i;:::-;;;;;;:::i;:::-;;;;3632:36;:27;:36;:::i;:::-;3625:43;:::o;2528:469::-;;;;;2748:26;2528:469;;2711:6;;:::i;:::-;2764:9;2748:26;:::i;:::-;2891:51;2807:10;2870:6;2827:49;2870:6;2827:49;:39;:30;:16;:6;2834:8;2827:16;;:::i;:::-;2844:12;2827:30;;:::i;:::-;2858:7;2827:39;;:::i;:::-;:49;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2912:12;2926:7;2935:6;2891:51;;;;:::i;:::-;;;;;;:::i;:::-;;;;2959:31;:22;:31;:::i;:::-;2952:38;:::o;331:4265::-;;;:::o;:::-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;3736:592::-;3824:16;;:::i;:::-;3856:9;:16;:9;;:16;;:::i;:::-;:22;;3876:2;3856:22;:::i;:::-;;;:::i;:::-;;3852:359;;;;3931:124;;;;;;;;;;3852:359;4224:8;:22;;4236:10;4244:1;4236:10;:::i;:::-;4224:22;:::i;:::-;;;:::i;:::-;;4220:77;;4306:15;:::o;4220:77::-;4269:17;;;;;;;;;;;;:::i;:::-;;;;3852:359;4075:9;:16;:9;;:16;;:::i;:::-;:22;;4095:2;4075:22;:::i;:::-;;;:::i;:::-;;4071:140;;3852:359;;;;;4071:140;4155:45;4179:9;;;4168:32;4179:9;;4168:32;;;;:::i;:::-;4155:45;:::i;:::-;4071:140;;;"
            },
            "methodIdentifiers": {
              "claim(address,address,uint256)": "996cba68",
              "claimBatch(address,address,uint256[])": "8f98c8fb",
              "claims(address,address,uint256)": "3f2e7821",
              "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
              "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidClaimant\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ClaimAddedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ClaimedBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidClaimant()\":[{\"details\":\"Error thrown when the claimant is invalid.\"}]},\"events\":{\"ClaimAdded(address,address,uint256,uint256)\":{\"details\":\"Emitted when a claim is added.\"},\"ClaimAddedBatch(address,address,uint256[],uint256[])\":{\"details\":\"Emitted when a batch of claims is added.\"},\"Claimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when a claim is claimed.\"},\"ClaimedBatch(address,address,uint256[],uint256[])\":{\"details\":\"Emitted when a batch of claims is claimed.\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,address,uint256)\":{\"details\":\"Claims a token.\",\"params\":{\"claimant\":\"The claimant.\",\"tokenAddress\":\"The token address.\",\"tokenId\":\"The token id.\"}},\"claimBatch(address,address,uint256[])\":{\"details\":\"Claims a batch of tokens.\",\"params\":{\"claimant\":\"The claimant.\",\"tokenAddress\":\"The token address.\",\"tokenIds\":\"The token ids.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"claimData\":\"The encoded claimant.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"claimData\":\"The encoded claimant.\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"claims\":{\"details\":\"claimant -> tokenAddress -> tokenId -> amount\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"An ERC-1155 contract that allows permissive minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/utility/holder/ERC1155Holder.sol\":\"ERC1155Holder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/tokens/ERC1155/utility/holder/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC1155 } from \\\"openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC1155Receiver, IERC165 } from \\\"openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * An ERC-1155 contract that allows permissive minting.\\n */\\ncontract ERC1155Holder is IERC1155Receiver {\\n\\n    /// @dev Emitted when a claim is added.\\n    event ClaimAdded(address claimant, address tokenAddress, uint256 tokenId, uint256 amount);\\n    /// @dev Emitted when a batch of claims is added.\\n    event ClaimAddedBatch(address claimant, address tokenAddress, uint256[] tokenIds, uint256[] amounts);\\n\\n    /// @dev Emitted when a claim is claimed.\\n    event Claimed(address claimant, address tokenAddress, uint256 tokenId, uint256 amount);\\n    /// @dev Emitted when a batch of claims is claimed.\\n    event ClaimedBatch(address claimant, address tokenAddress, uint256[] tokenIds, uint256[] amounts);\\n\\n    /// @dev Error thrown when the claimant is invalid.\\n    error InvalidClaimant();\\n\\n    /// @dev claimant -> tokenAddress -> tokenId -> amount\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public claims;\\n\\n    /// @dev Claims a token.\\n    /// @param claimant The claimant.\\n    /// @param tokenAddress The token address.\\n    /// @param tokenId The token id.\\n    function claim(address claimant, address tokenAddress, uint256 tokenId) public {\\n        uint256 amount = claims[claimant][tokenAddress][tokenId];\\n        delete claims[claimant][tokenAddress][tokenId];\\n        emit Claimed(claimant, tokenAddress, tokenId, amount);\\n        IERC1155(tokenAddress).safeTransferFrom(address(this), claimant, tokenId, amount, \\\"\\\");\\n    }\\n\\n    /// @dev Claims a batch of tokens.\\n    /// @param claimant The claimant.\\n    /// @param tokenAddress The token address.\\n    /// @param tokenIds The token ids.\\n    function claimBatch(address claimant, address tokenAddress, uint256[] memory tokenIds) public {\\n        uint256[] memory amounts = new uint256[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            amounts[i] = claims[claimant][tokenAddress][tokenIds[i]];\\n            delete claims[claimant][tokenAddress][tokenIds[i]];\\n        }\\n        emit ClaimedBatch(claimant, tokenAddress, tokenIds, amounts);\\n        IERC1155(tokenAddress).safeBatchTransferFrom(address(this), claimant, tokenIds, amounts, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC1155Receiver\\n    /// @param claimData The encoded claimant.\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata claimData\\n    ) public virtual override returns (bytes4) {\\n        address claimant = _decodeClaimant(claimData);\\n        address tokenAddress = msg.sender;\\n        claims[claimant][tokenAddress][tokenId] += amount;\\n        emit ClaimAdded(claimant, tokenAddress, tokenId, amount);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @inheritdoc IERC1155Receiver\\n    /// @param claimData The encoded claimant.\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        bytes calldata claimData\\n    ) public virtual override returns (bytes4) {\\n        address claimant = _decodeClaimant(claimData);\\n        address tokenAddress = msg.sender;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            claims[claimant][tokenAddress][tokenIds[i]] += amounts[i];\\n        }\\n        emit ClaimAddedBatch(claimant, tokenAddress, tokenIds, amounts);\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /// @dev Decodes the claimant from the claim data.\\n    function _decodeClaimant(\\n        bytes calldata claimData\\n    ) internal pure returns (address claimant) {\\n        if (claimData.length == 20) {\\n            // Packed address format\\n            assembly {\\n                calldatacopy(0, claimData.offset, 20)\\n                claimant := shr(96, mload(0))\\n            }\\n        } else if (claimData.length == 32) {\\n            // ABI encoded address format\\n            (claimant) = abi.decode(claimData, (address));\\n        }\\n        if (claimant == address(0)) {\\n            revert InvalidClaimant();\\n        }\\n        return claimant;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9210aa3f64c5262c9e32fdf798691fb7d5a8b5d00b256c688bd039d0b0861f31\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "An ERC-1155 contract that allows permissive minting.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
        "id": 0
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
        "id": 1
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 2
      },
      "src/tokens/ERC1155/utility/holder/ERC1155Holder.sol": {
        "id": 3
      }
    }
  },
  "solcLongVersion": "0.8.27+commit.40a35a09",
  "solcVersion": "0.8.27"
}
