{
  "id": "634d310a0d0815ad7c20b2d491276bea56357977",
  "source_id_to_path": {
    "0": "src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol",
    "1": "src/proxies/SequenceProxyFactory.sol",
    "2": "src/tokens/ERC1155/presets/items/ERC1155Items.sol",
    "3": "src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol",
    "4": "src/proxies/TransparentUpgradeableBeaconProxy.sol",
    "5": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
    "6": "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol",
    "7": "lib/openzeppelin-contracts/contracts/utils/Create2.sol",
    "8": "src/tokens/ERC1155/ERC1155BaseToken.sol",
    "9": "src/tokens/ERC1155/presets/items/IERC1155Items.sol",
    "10": "src/proxies/openzeppelin/BeaconProxy.sol",
    "11": "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol",
    "12": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
    "13": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol",
    "14": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
    "15": "src/tokens/common/ERC2981Controlled.sol",
    "16": "src/tokens/common/SignalsImplicitModeControlled.sol",
    "17": "src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol",
    "18": "lib/solady/src/utils/LibString.sol",
    "19": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "20": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol",
    "21": "src/proxies/openzeppelin/ERC1967Proxy.sol",
    "22": "src/tokens/common/IERC2981Controlled.sol",
    "23": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
    "24": "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol",
    "25": "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol",
    "26": "src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol",
    "27": "lib/solady/src/tokens/ERC1155.sol",
    "28": "lib/solady/src/utils/LibBytes.sol",
    "29": "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol",
    "30": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol",
    "31": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
    "32": "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol",
    "33": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
    "34": "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
    "35": "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol",
    "36": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
    "37": "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol",
    "38": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol",
    "39": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol",
    "40": "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol",
    "41": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
    "42": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
    "43": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
    "44": "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol",
    "45": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
    "46": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
  },
  "language": "Solidity",
  "_format": "ethers-rs-sol-build-info-1",
  "input": {
    "version": "0.8.27",
    "language": "Solidity",
    "sources": {
      "src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { SequenceProxyFactory } from \"../../../../proxies/SequenceProxyFactory.sol\";\nimport { ERC1155Items } from \"./ERC1155Items.sol\";\nimport { IERC1155ItemsFactory, IERC1155ItemsFactoryFunctions } from \"./IERC1155ItemsFactory.sol\";\n\n/**\n * Deployer of ERC-1155 Items proxies.\n */\ncontract ERC1155ItemsFactory is IERC1155ItemsFactory, SequenceProxyFactory {\n\n    /**\n     * Creates an ERC-1155 Items Factory.\n     * @param factoryOwner The owner of the ERC-1155 Items Factory\n     */\n    constructor(\n        address factoryOwner\n    ) {\n        ERC1155Items impl = new ERC1155Items();\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\n    }\n\n    /// @inheritdoc IERC1155ItemsFactoryFunctions\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                name,\n                baseURI,\n                contractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                implicitModeValidator,\n                implicitModeProjectId\n            )\n        );\n        proxyAddr = _createProxy(salt, proxyOwner, \"\");\n        ERC1155Items(proxyAddr).initialize(\n            tokenOwner,\n            name,\n            baseURI,\n            contractURI,\n            royaltyReceiver,\n            royaltyFeeNumerator,\n            implicitModeValidator,\n            implicitModeProjectId\n        );\n        emit ERC1155ItemsDeployed(proxyAddr);\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IERC1155ItemsFactoryFunctions\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external view returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                name,\n                baseURI,\n                contractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                implicitModeValidator,\n                implicitModeProjectId\n            )\n        );\n        return _computeProxyAddress(salt, proxyOwner, \"\");\n    }\n\n}\n"
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    ITransparentUpgradeableBeaconProxy,\n    TransparentUpgradeableBeaconProxy\n} from \"./TransparentUpgradeableBeaconProxy.sol\";\n\nimport { Ownable } from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport { UpgradeableBeacon } from \"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { Create2 } from \"openzeppelin-contracts/contracts/utils/Create2.sol\";\n\n/**\n * An proxy factory that deploys upgradeable beacon proxies.\n * @dev The factory owner is able to upgrade the beacon implementation.\n * @dev Proxy deployers are able to override the beacon reference with their own.\n */\nabstract contract SequenceProxyFactory is Ownable {\n\n    UpgradeableBeacon public beacon;\n\n    /**\n     * Initialize a Sequence Proxy Factory.\n     * @param implementation The initial beacon implementation.\n     * @param factoryOwner The owner of the factory.\n     */\n    function _initialize(address implementation, address factoryOwner) internal {\n        beacon = new UpgradeableBeacon(implementation);\n        Ownable._transferOwnership(factoryOwner);\n    }\n\n    /**\n     * Deploys and initializes a new proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @param _data The initialization data.\n     * @return proxyAddress The address of the deployed proxy.\n     */\n    function _createProxy(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal returns (address proxyAddress) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\n\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\n    }\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @return proxy The expected address of the deployed proxy.\n     */\n    function _computeProxyAddress(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal view returns (address) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\n\n        return Create2.computeAddress(saltedHash, bytecodeHash);\n    }\n\n    /**\n     * Upgrades the beacon implementation.\n     * @param implementation The new beacon implementation.\n     */\n    function upgradeBeacon(\n        address implementation\n    ) public onlyOwner {\n        beacon.upgradeTo(implementation);\n    }\n\n}\n"
      },
      "src/tokens/ERC1155/presets/items/ERC1155Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { ERC1155BaseToken, ERC2981Controlled } from \"../../ERC1155BaseToken.sol\";\nimport { IERC1155Items, IERC1155ItemsFunctions } from \"./IERC1155Items.sol\";\n\n/**\n * An implementation of ERC-1155 capable of minting when role provided.\n */\ncontract ERC1155Items is ERC1155BaseToken, IERC1155Items {\n\n    bytes32 internal constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    address private immutable initializer;\n    bool private initialized;\n\n    constructor() {\n        initializer = msg.sender;\n    }\n\n    /**\n     * Initialize the contract.\n     * @param owner Owner address\n     * @param tokenName Token name\n     * @param tokenBaseURI Base URI for token metadata\n     * @param tokenContractURI Contract URI for token metadata\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) public virtual {\n        if (msg.sender != initializer || initialized) {\n            revert InvalidInitialization();\n        }\n\n        ERC1155BaseToken._initialize(\n            owner, tokenName, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\n        );\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\n\n        _grantRole(MINTER_ROLE, owner);\n\n        initialized = true;\n    }\n\n    //\n    // Minting\n    //\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token ID to mint.\n     * @param amount Amount of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external onlyRole(MINTER_ROLE) {\n        _mint(to, tokenId, amount, data);\n    }\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenIds Token IDs to mint.\n     * @param amounts Amounts of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function batchMint(\n        address to,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external onlyRole(MINTER_ROLE) {\n        _batchMint(to, tokenIds, amounts, data);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC1155BaseToken) returns (bool) {\n        return type(IERC1155ItemsFunctions).interfaceId == interfaceId\n            || ERC1155BaseToken.supportsInterface(interfaceId) || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155ItemsFactoryFunctions {\n\n    /**\n     * Creates an ERC-1155 Items proxy.\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\n     * @param name The name of the ERC-1155 Items proxy\n     * @param baseURI The base URI of the ERC-1155 Items proxy\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\n     */\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\n     * @param name The name of the ERC-1155 Items proxy\n     * @param baseURI The base URI of the ERC-1155 Items proxy\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\n     */\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n}\n\ninterface IERC1155ItemsFactorySignals {\n\n    /**\n     * Event emitted when a new ERC-1155 Items proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event ERC1155ItemsDeployed(address proxyAddr);\n\n}\n\ninterface IERC1155ItemsFactory is IERC1155ItemsFactoryFunctions, IERC1155ItemsFactorySignals { }\n"
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { BeaconProxy, Proxy } from \"./openzeppelin/BeaconProxy.sol\";\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \"./openzeppelin/TransparentUpgradeableProxy.sol\";\n\ninterface ITransparentUpgradeableBeaconProxy {\n\n    function initialize(address admin, address beacon, bytes memory data) external;\n\n}\n\nerror InvalidInitialization();\n\n/**\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * The proxy selectors are:\n * - 0xcf7a1d77: initialize\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\n */\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\n\n    /**\n     * Decode the initialization data from the msg.data and call the initialize function.\n     */\n    function _dispatchInitialize() private returns (bytes memory) {\n        _requireZeroValue();\n\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\n        initialize(admin, beacon, data);\n\n        return \"\";\n    }\n\n    function initialize(address admin, address beacon, bytes memory data) internal {\n        if (_admin() != address(0)) {\n            // Redundant call. This function can only be called when the admin is not set.\n            revert InvalidInitialization();\n        }\n        _changeAdmin(admin);\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\n     */\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\n        if (_getAdmin() == address(0)) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\n                ret = _dispatchInitialize();\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    return(add(ret, 0x20), mload(ret))\n                }\n            }\n            // When the admin is not set, the fallback function is used to initialize the proxy.\n            revert InvalidInitialization();\n        }\n        TransparentUpgradeableProxy._fallback();\n    }\n\n    /**\n     * Returns the current implementation address.\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\n     */\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\n        address implementation = ERC1967Proxy._implementation();\n        if (implementation != address(0)) {\n            return implementation;\n        }\n        return BeaconProxy._implementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
      },
      "src/tokens/ERC1155/ERC1155BaseToken.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { ERC2981Controlled } from \"../common/ERC2981Controlled.sol\";\nimport { SignalsImplicitModeControlled } from \"../common/SignalsImplicitModeControlled.sol\";\nimport { ERC1155, ERC1155Supply } from \"./extensions/supply/ERC1155Supply.sol\";\n\nimport { LibString } from \"solady/utils/LibString.sol\";\n\nerror InvalidInitialization();\n\n/**\n * A standard base implementation of ERC-1155 for use in Sequence library contracts.\n */\nabstract contract ERC1155BaseToken is ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled {\n\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\"METADATA_ADMIN_ROLE\");\n\n    string public name;\n    string public baseURI;\n    string public contractURI;\n\n    /**\n     * Deploy contract.\n     */\n    constructor() { }\n\n    /**\n     * Initialize the contract.\n     * @param owner Owner address.\n     * @param tokenName Token name.\n     * @param tokenBaseURI Base URI for token metadata.\n     * @param tokenContractURI Contract URI for token metadata.\n     * @param implicitModeValidator Implicit session validator address.\n     * @param implicitModeProjectId Implicit session project id.\n     * @dev This should be called immediately after deployment.\n     */\n    function _initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) internal {\n        name = tokenName;\n        baseURI = tokenBaseURI;\n        contractURI = tokenContractURI;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\n        _grantRole(METADATA_ADMIN_ROLE, owner);\n\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\n    }\n\n    //\n    // Metadata\n    //\n\n    /// @inheritdoc ERC1155\n    function uri(\n        uint256 _id\n    ) public view virtual override returns (string memory) {\n        return string(abi.encodePacked(baseURI, LibString.toString(_id), \".json\"));\n    }\n\n    /**\n     * Update the base URI of token's URI.\n     * @param tokenBaseURI New base URI of token's URI\n     */\n    function setBaseMetadataURI(\n        string memory tokenBaseURI\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        baseURI = tokenBaseURI;\n    }\n\n    /**\n     * Update the name of the contract.\n     * @param tokenName New contract name\n     */\n    function setContractName(\n        string memory tokenName\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        name = tokenName;\n    }\n\n    /**\n     * Update the contract URI of token's URI.\n     * @param tokenContractURI New contract URI of token's URI\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function setContractURI(\n        string memory tokenContractURI\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        contractURI = tokenContractURI;\n    }\n\n    //\n    // Burn\n    //\n\n    /**\n     * Allows the owner of the token to burn their tokens.\n     * @param tokenId Id of token to burn\n     * @param amount Amount of tokens to burn\n     */\n    function burn(uint256 tokenId, uint256 amount) public virtual {\n        _burn(msg.sender, tokenId, amount);\n    }\n\n    /**\n     * Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\n     * @param tokenIds Array of token ids to burn\n     * @param amounts Array of the amount to be burned\n     */\n    function batchBurn(uint256[] memory tokenIds, uint256[] memory amounts) public virtual {\n        super._batchBurn(msg.sender, tokenIds, amounts);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\n        return ERC1155Supply.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC1155/presets/items/IERC1155Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155ItemsFunctions {\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token ID to mint.\n     * @param amount Amount of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenIds Token IDs to mint.\n     * @param amounts Amounts of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\n\n}\n\ninterface IERC1155ItemsSignals {\n\n    /**\n     * Invalid initialization error.\n     */\n    error InvalidInitialization();\n\n}\n\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\n"
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n}\n"
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\n/// - Pragma updated\n/// - Imports updated\n/// - Constructor removed\n/// - Allows admin to call implementation\n\npragma solidity ^0.8.19;\n\nimport \"./ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(\n        address\n    ) external;\n\n    function upgradeTo(\n        address\n    ) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\n * This potentially exposes the admin to a proxy selector attack. See\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\n * The proxy selectors are:\n * - 0x3659cfe6: upgradeTo\n * - 0x4f1ef286: upgradeToAndCall\n * - 0x8f283970: changeAdmin\n * - 0xf851a440: admin\n * - 0x5c60da1b: implementation\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                // Call implementation\n                return super._fallback();\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() internal {\n        require(msg.value == 0);\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IERC2981Controlled } from \"./IERC2981Controlled.sol\";\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport { ERC2981 } from \"openzeppelin-contracts/contracts/token/common/ERC2981.sol\";\n\n/**\n * An implementation of ERC-2981 that allows updates by roles.\n */\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\n\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\"ROYALTY_ADMIN_ROLE\");\n\n    //\n    // Royalty\n    //\n\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport {\n    IERC165,\n    IImplicitProjectValidation,\n    SignalsImplicitMode\n} from \"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\";\n\n/**\n * An abstract contract that allows implicit session access for a given project.\n */\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\n\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\"IMPLICIT_MODE_ADMIN_ROLE\");\n\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\n        _initializeSignalsImplicitMode(validator, projectId);\n    }\n\n    /**\n     * Updates the validator for implicit mode validation.\n     * @param validator The validator address.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeValidator(\n        address validator\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _validator = IImplicitProjectValidation(validator);\n    }\n\n    /**\n     * Updates the settings for implicit mode validation.\n     * @param projectId The project id.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeProjectId(\n        bytes32 projectId\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _projectId = projectId;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\n        return\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IERC1155Supply, IERC1155SupplyFunctions } from \"./IERC1155Supply.sol\";\n\nimport { ERC1155 } from \"solady/tokens/ERC1155.sol\";\n\n/**\n * An ERC-1155 extension that tracks token supply.\n */\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\n\n    // Current supply\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public tokenSupply;\n\n    /**\n     * Mint _amount of tokens of a given id\n     * @param _to The address to mint tokens to\n     * @param _id Token id to mint\n     * @param _amount The amount to be minted\n     * @param _data Data to pass if receiver is contract\n     */\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual override {\n        super._mint(_to, _id, _amount, _data);\n\n        totalSupply += _amount;\n        tokenSupply[_id] += _amount;\n    }\n\n    /**\n     * Mint tokens for each ids in _ids\n     * @param _to The address to mint tokens to\n     * @param _ids Array of ids to mint\n     * @param _amounts Array of amount of tokens to mint per id\n     * @param _data Data to pass if receiver is contract\n     */\n    function _batchMint(\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        bytes memory _data\n    ) internal virtual override {\n        super._batchMint(_to, _ids, _amounts, _data);\n\n        uint256 nMint = _ids.length;\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < nMint; i++) {\n            totalAmount += _amounts[i];\n            tokenSupply[_ids[i]] += _amounts[i];\n        }\n        totalSupply += totalAmount;\n    }\n\n    /**\n     * Burn _amount of tokens of a given token id\n     * @param _from The address to burn tokens from\n     * @param _id Token id to burn\n     * @param _amount The amount to be burned\n     */\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual override {\n        super._burn(_from, _id, _amount);\n\n        totalSupply -= _amount;\n        tokenSupply[_id] -= _amount;\n    }\n\n    /**\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\n     * @param _from The address to burn tokens from\n     * @param _ids Array of token ids to burn\n     * @param _amounts Array of the amount to be burned\n     */\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual override {\n        super._batchBurn(_from, _ids, _amounts);\n\n        uint256 nBurn = _ids.length;\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < nBurn; i++) {\n            tokenSupply[_ids[i]] -= _amounts[i];\n            totalAmount += _amounts[i];\n        }\n        totalSupply -= totalAmount;\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC1155) returns (bool) {\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "lib/solady/src/utils/LibString.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {LibBytes} from \"./LibBytes.sol\";\n\n/// @notice Library for converting numbers into strings and other string operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\n///\n/// @dev Note:\n/// For performance and bytecode compactness, most of the string operations are restricted to\n/// byte strings (7-bit ASCII), except where otherwise specified.\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\n/// can lead to undefined behavior.\nlibrary LibString {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\n    /// Packs length with the first 31 bytes if <255 bytes, so it’s mad tight.\n    struct StringStorage {\n        bytes32 _spacer;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The length of the output is too small to contain all the hex digits.\n    error HexLengthInsufficient();\n\n    /// @dev The length of the string is more than 32 bytes.\n    error TooBigForSmallString();\n\n    /// @dev The input string must be a 7-bit ASCII.\n    error StringNot7BitASCII();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the string.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\n\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\n\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\n\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\n\n    /// @dev Lookup for '0123456789'.\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\n\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\n\n    /// @dev Lookup for '01234567'.\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\n\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'.\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\n\n    /// @dev Lookup for '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\n\n    /// @dev Lookup for ' \\t\\n\\r\\x0b\\x0c'.\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                 STRING STORAGE OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sets the value of the string storage `$` to `s`.\n    function set(StringStorage storage $, string memory s) internal {\n        LibBytes.set(bytesStorage($), bytes(s));\n    }\n\n    /// @dev Sets the value of the string storage `$` to `s`.\n    function setCalldata(StringStorage storage $, string calldata s) internal {\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\n    }\n\n    /// @dev Sets the value of the string storage `$` to the empty string.\n    function clear(StringStorage storage $) internal {\n        delete $._spacer;\n    }\n\n    /// @dev Returns whether the value stored is `$` is the empty string \"\".\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\n        return uint256($._spacer) & 0xff == uint256(0);\n    }\n\n    /// @dev Returns the length of the value stored in `$`.\n    function length(StringStorage storage $) internal view returns (uint256) {\n        return LibBytes.length(bytesStorage($));\n    }\n\n    /// @dev Returns the value stored in `$`.\n    function get(StringStorage storage $) internal view returns (string memory) {\n        return string(LibBytes.get(bytesStorage($)));\n    }\n\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\n        return LibBytes.uint8At(bytesStorage($), i);\n    }\n\n    /// @dev Helper to cast `$` to a `BytesStorage`.\n    function bytesStorage(StringStorage storage $)\n        internal\n        pure\n        returns (LibBytes.BytesStorage storage casted)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            casted.slot := $.slot\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     DECIMAL OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(uint256 value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits.\n            result := add(mload(0x40), 0x80)\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end of the memory to calculate the length later.\n            let w := not(0) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                result := add(result, w) // `sub(result, 1)`.\n                // Store the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(result, add(48, mod(temp, 10)))\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\n                if iszero(temp) { break }\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(int256 value) internal pure returns (string memory result) {\n        if (value >= 0) return toString(uint256(value));\n        unchecked {\n            result = toString(~uint256(value) + 1);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We still have some spare memory space on the left,\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\n            let n := mload(result) // Load the string length.\n            mstore(result, 0x2d) // Store the '-' character.\n            result := sub(result, 1) // Move back the string pointer by a byte.\n            mstore(result, add(n, 1)) // Update the string length.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   HEXADECIMAL OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `byteCount` bytes.\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `byteCount * 2 + 2` bytes.\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\n    function toHexString(uint256 value, uint256 byteCount)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = toHexStringNoPrefix(value, byteCount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `byteCount` bytes.\n    /// The output is not prefixed with \"0x\" and is encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `byteCount * 2` bytes.\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\n            // We add 0x20 to the total and round down to a multiple of 0x20.\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end to calculate the length later.\n            // Store \"0123456789abcdef\" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            let start := sub(result, add(byteCount, byteCount))\n            let w := not(1) // Tsk.\n            let temp := value\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for {} 1 {} {\n                result := add(result, w) // `sub(result, 2)`.\n                mstore8(add(result, 1), mload(and(temp, 15)))\n                mstore8(result, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(xor(result, start)) { break }\n            }\n            if temp {\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\n                revert(0x1c, 0x04)\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20)\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2 + 2` bytes.\n    function toHexString(uint256 value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\".\n    /// The output excludes leading \"0\" from the `toHexString` output.\n    /// `0x00: \"0x0\", 0x01: \"0x1\", 0x12: \"0x12\", 0x123: \"0x123\"`.\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(add(result, o), 0x3078) // Store the \"0x\" prefix, accounting for leading zero.\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output excludes leading \"0\" from the `toHexStringNoPrefix` output.\n    /// `0x00: \"0\", 0x01: \"1\", 0x12: \"12\", 0x123: \"123\"`.\n    function toMinimalHexStringNoPrefix(uint256 value)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\n            let n := mload(result) // Get the length.\n            result := add(result, o) // Move the pointer, accounting for leading zero.\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2` bytes.\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\n            result := add(mload(0x40), 0x80)\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end to calculate the length later.\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n\n            let w := not(1) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                result := add(result, w) // `sub(result, 2)`.\n                mstore8(add(result, 1), mload(and(temp, 15)))\n                mstore8(result, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(temp) { break }\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20)\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\n    /// and the alphabets are capitalized conditionally according to\n    /// https://eips.ethereum.org/EIPS/eip-55\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\n        result = toHexString(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\n            let o := add(result, 0x22)\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\n            let t := shl(240, 136) // `0b10001000 << 240`\n            for { let i := 0 } 1 {} {\n                mstore(add(i, i), mul(t, byte(i, hashed)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\n            o := add(o, 0x20)\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n    function toHexString(address value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            // Allocate memory.\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\n            mstore(0x40, add(result, 0x80))\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n\n            result := add(result, 2)\n            mstore(result, 40) // Store the length.\n            let o := add(result, 0x20)\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\n            value := shl(96, value)\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let i := 0 } 1 {} {\n                let p := add(o, add(i, i))\n                let temp := byte(i, value)\n                mstore8(add(p, 1), mload(and(temp, 15)))\n                mstore8(p, mload(shr(4, temp)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(raw);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(raw)\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\n            mstore(result, add(n, n)) // Store the length of the output.\n\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n            let o := add(result, 0x20)\n            let end := add(raw, n)\n            for {} iszero(eq(raw, end)) {} {\n                raw := add(raw, 1)\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\n                o := add(o, 2)\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   RUNE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the number of UTF characters in the string.\n    function runeCount(string memory s) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if mload(s) {\n                mstore(0x00, div(not(0), 255))\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\n                let o := add(s, 0x20)\n                let end := add(o, mload(s))\n                for { result := 1 } 1 { result := add(result, 1) } {\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\n                    if iszero(lt(o, end)) { break }\n                }\n            }\n        }\n    }\n\n    /// @dev Returns if this string is a 7-bit ASCII string.\n    /// (i.e. all characters codes are in [0..127])\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            let mask := shl(7, div(not(0), 255))\n            let n := mload(s)\n            if n {\n                let o := add(s, 0x20)\n                let end := add(o, n)\n                let last := mload(end)\n                mstore(end, 0)\n                for {} 1 {} {\n                    if and(mask, mload(o)) {\n                        result := 0\n                        break\n                    }\n                    o := add(o, 0x20)\n                    if iszero(lt(o, end)) { break }\n                }\n                mstore(end, last)\n            }\n        }\n    }\n\n    /// @dev Returns if this string is a 7-bit ASCII string,\n    /// AND all characters are in the `allowed` lookup.\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            if mload(s) {\n                let allowed_ := shr(128, shl(128, allowed))\n                let o := add(s, 0x20)\n                for { let end := add(o, mload(s)) } 1 {} {\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\n                    o := add(o, 1)\n                    if iszero(and(result, lt(o, end))) { break }\n                }\n            }\n        }\n    }\n\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\n    /// To save runtime gas, you can cache the result in an immutable variable.\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if mload(s) {\n                let o := add(s, 0x20)\n                for { let end := add(o, mload(s)) } 1 {} {\n                    result := or(result, shl(byte(0, mload(o)), 1))\n                    o := add(o, 1)\n                    if iszero(lt(o, end)) { break }\n                }\n                if shr(128, result) {\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   BYTE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // For performance and bytecode compactness, byte string operations are restricted\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\n    // can lead to undefined behavior.\n\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\n    function replace(string memory subject, string memory needle, string memory replacement)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(string memory subject, string memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(string memory subject, string memory needle)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\n    }\n\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.contains(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns whether `subject` starts with `needle`.\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns whether `subject` ends with `needle`.\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\n        return string(LibBytes.repeat(bytes(subject), times));\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(string memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(LibBytes.slice(bytes(subject), start, end));\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\n    /// `start` is a byte offset.\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\n    }\n\n    /// @dev Returns all the indices of `needle` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(string memory subject, string memory needle)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\n    function split(string memory subject, string memory delimiter)\n        internal\n        pure\n        returns (string[] memory result)\n    {\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := a\n        }\n    }\n\n    /// @dev Returns a concatenated string of `a` and `b`.\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\n        return string(LibBytes.concat(bytes(a), bytes(b)));\n    }\n\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function toCase(string memory subject, bool toUpper)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(subject)\n            if n {\n                result := mload(0x40)\n                let o := add(result, 0x20)\n                let d := sub(subject, result)\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\n                for { let end := add(o, n) } 1 {} {\n                    let b := byte(0, mload(add(d, o)))\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\n                    o := add(o, 1)\n                    if eq(o, end) { break }\n                }\n                mstore(result, n) // Store the length.\n                mstore(o, 0) // Zeroize the slot after the string.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n            }\n        }\n    }\n\n    /// @dev Returns a string from a small bytes32 string.\n    /// `s` must be null-terminated, or behavior will be undefined.\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let n := 0\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\0'.\n            mstore(result, n) // Store the length.\n            let o := add(result, 0x20)\n            mstore(o, s) // Store the bytes of the string.\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\0'.\n            mstore(0x00, s)\n            mstore(result, 0x00)\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Returns the string as a normalized null-terminated small string.\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(s)\n            if iszero(lt(result, 33)) {\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\n                revert(0x1c, 0x04)\n            }\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\n        }\n    }\n\n    /// @dev Returns a lowercased copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function lower(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, false);\n    }\n\n    /// @dev Returns an UPPERCASED copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function upper(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, true);\n    }\n\n    /// @dev Escapes the string to be used within HTML tags.\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let end := add(s, mload(s))\n            let o := add(result, 0x20)\n            // Store the bytes of the packed offsets and strides into the scratch space.\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\n            mstore(0x1f, 0x900094)\n            mstore(0x08, 0xc0000000a6ab)\n            // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\n            for {} iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\n                    mstore8(o, c)\n                    o := add(o, 1)\n                    continue\n                }\n                let t := shr(248, mload(c))\n                mstore(o, mload(and(t, 0x1f)))\n                o := add(o, shr(5, t))\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\n    function escapeJSON(string memory s, bool addDoubleQuotes)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let o := add(result, 0x20)\n            if addDoubleQuotes {\n                mstore8(o, 34)\n                o := add(1, o)\n            }\n            // Store \"\\\\u0000\" in scratch space.\n            // Store \"0123456789abcdef\" in scratch space.\n            // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\n            // into the scratch space.\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\n            // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                if iszero(lt(c, 0x20)) {\n                    if iszero(and(shl(c, 1), e)) {\n                        // Not in `[\"\\\"\",\"\\\\\"]`.\n                        mstore8(o, c)\n                        o := add(o, 1)\n                        continue\n                    }\n                    mstore8(o, 0x5c) // \"\\\\\".\n                    mstore8(add(o, 1), c)\n                    o := add(o, 2)\n                    continue\n                }\n                if iszero(and(shl(c, 1), 0x3700)) {\n                    // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\n                    mstore(o, mload(0x19)) // \"\\\\u00XX\".\n                    o := add(o, 6)\n                    continue\n                }\n                mstore8(o, 0x5c) // \"\\\\\".\n                mstore8(add(o, 1), mload(add(c, 8)))\n                o := add(o, 2)\n            }\n            if addDoubleQuotes {\n                mstore8(o, 34)\n                o := add(1, o)\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\n        result = escapeJSON(s, false);\n    }\n\n    /// @dev Encodes `s` so that it can be safely used in a URI,\n    /// just like `encodeURIComponent` in JavaScript.\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            // Store \"0123456789ABCDEF\" in scratch space.\n            // Uppercased to be consistent with JavaScript's implementation.\n            mstore(0x0f, 0x30313233343536373839414243444546)\n            let o := add(result, 0x20)\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\n                    mstore8(o, 0x25) // '%'.\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\n                    mstore8(add(o, 2), mload(and(c, 15)))\n                    o := add(o, 3)\n                    continue\n                }\n                mstore8(o, c)\n                o := add(o, 1)\n            }\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\n        return LibBytes.cmp(bytes(a), bytes(b));\n    }\n\n    /// @dev Packs a single string with its length into a single word.\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\n    function packOne(string memory a) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We don't need to zero right pad the string,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    // Load the length and the bytes.\n                    mload(add(a, 0x1f)),\n                    // `length != 0 && length < 32`. Abuses underflow.\n                    // Assumes that the length is valid and within the block gas limit.\n                    lt(sub(mload(a), 1), 0x1f)\n                )\n        }\n    }\n\n    /// @dev Unpacks a string packed using {packOne}.\n    /// Returns the empty string if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40) // Grab the free memory pointer.\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\n            mstore(result, 0) // Zeroize the length slot.\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\n        }\n    }\n\n    /// @dev Packs two strings with their lengths into a single word.\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLen := mload(a)\n            // We don't need to zero right pad the strings,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    or( // Load the length and the bytes of `a` and `b`.\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\n                    // Assumes that the lengths are valid and within the block gas limit.\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\n                )\n        }\n    }\n\n    /// @dev Unpacks strings packed using {packTwo}.\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\n    function unpackTwo(bytes32 packed)\n        internal\n        pure\n        returns (string memory resultA, string memory resultB)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            resultA := mload(0x40) // Grab the free memory pointer.\n            resultB := add(resultA, 0x40)\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\n            mstore(0x40, add(resultB, 0x40))\n            // Zeroize the length slots.\n            mstore(resultA, 0)\n            mstore(resultB, 0)\n            // Store the lengths and bytes.\n            mstore(add(resultA, 0x1f), packed)\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\n            // Right pad with zeroes.\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(string memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Assumes that the string does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the string is produced\n            // by a method that doesn't zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            mstore(retStart, 0x20) // Store the return offset.\n            // End the transaction, returning the string.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n\n}\n"
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC2981ControlledFunctions {\n\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\n\n}\n\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { IImplicitProjectValidation } from \"../registry/IImplicitProjectValidation.sol\";\n\nimport { ERC165, IERC165 } from \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\nimport { ISignalsImplicitMode } from \"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\";\nimport { Payload } from \"sequence-v3/src/modules/Payload.sol\";\n\n/// @title SignalsImplicitMode\n/// @author Michael Standen\n/// @notice Base contract for implicit mode validation by project\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\n\n  IImplicitProjectValidation internal _validator;\n  bytes32 internal _projectId;\n\n  /// @notice Initialize implicit mode validation\n  /// @param validator The IImplicitProjectValidation address\n  /// @param projectId The project id\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\n    _validator = IImplicitProjectValidation(validator);\n    _projectId = projectId;\n  }\n\n  /// @inheritdoc ISignalsImplicitMode\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32) {\n    _validateImplicitRequest(wallet, attestation, call);\n    return _validator.validateAttestation(wallet, attestation, _projectId);\n  }\n\n  /// @notice Validates an implicit request\n  /// @dev Optional hook for additional validation of the implicit requests\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  function _validateImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) internal view virtual { }\n\n  /// @inheritdoc IERC165\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n}\n"
      },
      "src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155SupplyFunctions {\n\n    /**\n     * Returns the total supply of ERC1155 tokens.\n     */\n    function totalSupply() external returns (uint256);\n\n    /**\n     * Returns the total supply of a given ERC1155 token.\n     * @param tokenId The ERC1155 token id.\n     */\n    function tokenSupply(\n        uint256 tokenId\n    ) external returns (uint256);\n\n}\n\ninterface IERC1155SupplySignals {\n\n    /**\n     * Invalid array input length.\n     */\n    error InvalidArrayLength();\n\n}\n\ninterface IERC1155Supply is IERC1155SupplySignals { }\n"
      },
      "lib/solady/src/tokens/ERC1155.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple ERC1155 implementation.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\n///\n/// @dev Note:\n/// - The ERC1155 standard allows for self-approvals.\n///   For performance, this implementation WILL NOT revert for such actions.\n///   Please add any checks with overrides if desired.\n/// - The transfer functions use the identity precompile (0x4)\n///   to copy memory internally.\n///\n/// If you are overriding:\n/// - Make sure all variables written to storage are properly cleaned\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\n/// - Check that the overridden function is actually used in the function you want to\n///   change the behavior of. Much of the code has been manually inlined for performance.\nabstract contract ERC1155 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The lengths of the input arrays are not the same.\n    error ArrayLengthsMismatch();\n\n    /// @dev Cannot mint or transfer to the zero address.\n    error TransferToZeroAddress();\n\n    /// @dev The recipient's balance has overflowed.\n    error AccountBalanceOverflow();\n\n    /// @dev Insufficient balance.\n    error InsufficientBalance();\n\n    /// @dev Only the token owner or an approved account can manage the tokens.\n    error NotOwnerNorApproved();\n\n    /// @dev Cannot safely transfer to a contract that does not implement\n    /// the ERC1155Receiver interface.\n    error TransferToNonERC1155ReceiverImplementer();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Emitted when `amount` of token `id` is transferred\n    /// from `from` to `to` by `operator`.\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 amount\n    );\n\n    /// @dev Emitted when `amounts` of token `ids` are transferred\n    /// from `from` to `to` by `operator`.\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\n\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\n    /// is updated to `value`. This event is not used in the base contract.\n    /// You may need to emit this event depending on your URI logic.\n    ///\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\n    event URI(string value, uint256 indexed id);\n\n    /// @dev `keccak256(bytes(\"TransferSingle(address,address,address,uint256,uint256)\"))`.\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\n\n    /// @dev `keccak256(bytes(\"TransferBatch(address,address,address,uint256[],uint256[])\"))`.\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\n\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\n    /// ```\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\n    /// ```\n    ///\n    /// The balance slot of `owner` is given by.\n    /// ```\n    ///     mstore(0x20, ownerSlotSeed)\n    ///     mstore(0x00, id)\n    ///     let balanceSlot := keccak256(0x00, 0x40)\n    /// ```\n    ///\n    /// The operator approval slot of `owner` is given by.\n    /// ```\n    ///     mstore(0x20, ownerSlotSeed)\n    ///     mstore(0x00, operator)\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\n    /// ```\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC1155 METADATA                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the URI for token `id`.\n    ///\n    /// You can either return the same templated URI for all token IDs,\n    /// (e.g. \"https://example.com/api/{id}.json\"),\n    /// or return a unique URI for each `id`.\n    ///\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\n    function uri(uint256 id) public view virtual returns (string memory);\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          ERC1155                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the amount of `id` owned by `owner`.\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\n            mstore(0x14, owner)\n            mstore(0x00, id)\n            result := sload(keccak256(0x00, 0x40))\n        }\n    }\n\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\n            mstore(0x14, owner)\n            mstore(0x00, operator)\n            result := sload(keccak256(0x0c, 0x34))\n        }\n    }\n\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\n    ///\n    /// Emits a {ApprovalForAll} event.\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`msg.sender`, `operator`).\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\n            mstore(0x14, caller())\n            mstore(0x00, operator)\n            sstore(keccak256(0x0c, 0x34), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            // forgefmt: disable-next-line\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\n        }\n    }\n\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - `from` must have at least `amount` of `id`.\n    /// - If the caller is not `from`,\n    ///   it must be approved to manage the tokens of `from`.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferSingle} event.\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\n            mstore(0x20, fromSlotSeed)\n            // Clear the upper 96 bits.\n            from := shr(96, fromSlotSeed)\n            to := shr(96, toSlotSeed)\n            // Revert if `to` is the zero address.\n            if iszero(to) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // If the caller is not `from`, do the authorization check.\n            if iszero(eq(caller(), from)) {\n                mstore(0x00, caller())\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Subtract and store the updated balance of `from`.\n            {\n                mstore(0x00, id)\n                let fromBalanceSlot := keccak256(0x00, 0x40)\n                let fromBalance := sload(fromBalanceSlot)\n                if gt(amount, fromBalance) {\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\n            }\n            // Increase and store the updated balance of `to`.\n            {\n                mstore(0x20, toSlotSeed)\n                let toBalanceSlot := keccak256(0x00, 0x40)\n                let toBalanceBefore := sload(toBalanceSlot)\n                let toBalanceAfter := add(toBalanceBefore, amount)\n                if lt(toBalanceAfter, toBalanceBefore) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceAfter)\n            }\n            // Emit a {TransferSingle} event.\n            mstore(0x20, amount)\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Do the {onERC1155Received} check if `to` is a smart contract.\n            if extcodesize(to) {\n                // Prepare the calldata.\n                let m := mload(0x40)\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\n                mstore(m, 0xf23a6e61)\n                mstore(add(m, 0x20), caller())\n                mstore(add(m, 0x40), from)\n                mstore(add(m, 0x60), id)\n                mstore(add(m, 0x80), amount)\n                mstore(add(m, 0xa0), 0xa0)\n                mstore(add(m, 0xc0), data.length)\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\n                // Revert if the call reverts.\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\n                    if returndatasize() {\n                        // Bubble up the revert if the call reverts.\n                        returndatacopy(m, 0x00, returndatasize())\n                        revert(m, returndatasize())\n                    }\n                }\n                // Load the returndata and compare it with the function selector.\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - `from` must have at least `amount` of `id`.\n    /// - `ids` and `amounts` must have the same length.\n    /// - If the caller is not `from`,\n    ///   it must be approved to manage the tokens of `from`.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferBatch} event.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, to, ids, amounts, data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(ids.length, amounts.length)) {\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\n                revert(0x1c, 0x04)\n            }\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\n            mstore(0x20, fromSlotSeed)\n            // Clear the upper 96 bits.\n            from := shr(96, fromSlotSeed)\n            to := shr(96, toSlotSeed)\n            // Revert if `to` is the zero address.\n            if iszero(to) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // If the caller is not `from`, do the authorization check.\n            if iszero(eq(caller(), from)) {\n                mstore(0x00, caller())\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Loop through all the `ids` and update the balances.\n            {\n                for { let i := shl(5, ids.length) } i {} {\n                    i := sub(i, 0x20)\n                    let amount := calldataload(add(amounts.offset, i))\n                    // Subtract and store the updated balance of `from`.\n                    {\n                        mstore(0x20, fromSlotSeed)\n                        mstore(0x00, calldataload(add(ids.offset, i)))\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\n                        let fromBalance := sload(fromBalanceSlot)\n                        if gt(amount, fromBalance) {\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\n                    }\n                    // Increase and store the updated balance of `to`.\n                    {\n                        mstore(0x20, toSlotSeed)\n                        let toBalanceSlot := keccak256(0x00, 0x40)\n                        let toBalanceBefore := sload(toBalanceSlot)\n                        let toBalanceAfter := add(toBalanceBefore, amount)\n                        if lt(toBalanceAfter, toBalanceBefore) {\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(toBalanceSlot, toBalanceAfter)\n                    }\n                }\n            }\n            // Emit a {TransferBatch} event.\n            {\n                let m := mload(0x40)\n                // Copy the `ids`.\n                mstore(m, 0x40)\n                let n := shl(5, ids.length)\n                mstore(add(m, 0x40), ids.length)\n                calldatacopy(add(m, 0x60), ids.offset, n)\n                // Copy the `amounts`.\n                mstore(add(m, 0x20), add(0x60, n))\n                let o := add(add(m, n), 0x60)\n                mstore(o, ids.length)\n                calldatacopy(add(o, 0x20), amounts.offset, n)\n                // Do the emit.\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\n            }\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\n            if extcodesize(to) {\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\n                let m := mload(0x40)\n                // Prepare the calldata.\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\n                mstore(m, 0xbc197c81)\n                mstore(add(m, 0x20), caller())\n                mstore(add(m, 0x40), from)\n                // Copy the `ids`.\n                mstore(add(m, 0x60), 0xa0)\n                let n := shl(5, ids.length)\n                mstore(add(m, 0xc0), ids.length)\n                calldatacopy(add(m, 0xe0), ids.offset, n)\n                // Copy the `amounts`.\n                mstore(add(m, 0x80), add(0xc0, n))\n                let o := add(add(m, n), 0xe0)\n                mstore(o, ids.length)\n                calldatacopy(add(o, 0x20), amounts.offset, n)\n                // Copy the `data`.\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\n                o := add(add(o, n), 0x20)\n                mstore(o, data.length)\n                calldatacopy(add(o, 0x20), data.offset, data.length)\n                let nAll := add(0x104, add(data.length, add(n, n)))\n                // Revert if the call reverts.\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\n                    if returndatasize() {\n                        // Bubble up the revert if the call reverts.\n                        returndatacopy(m, 0x00, returndatasize())\n                        revert(m, returndatasize())\n                    }\n                }\n                // Load the returndata and compare it with the function selector.\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns the amounts of `ids` for `owners.\n    ///\n    /// Requirements:\n    /// - `owners` and `ids` must have the same length.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory balances)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(ids.length, owners.length)) {\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\n                revert(0x1c, 0x04)\n            }\n            balances := mload(0x40)\n            mstore(balances, ids.length)\n            let o := add(balances, 0x20)\n            let i := shl(5, ids.length)\n            mstore(0x40, add(i, o))\n            // Loop through all the `ids` and load the balances.\n            for {} i {} {\n                i := sub(i, 0x20)\n                let owner := calldataload(add(owners.offset, i))\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\n                mstore(0x00, calldataload(add(ids.offset, i)))\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\n            }\n        }\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\n    /// See: https://eips.ethereum.org/EIPS/eip-165\n    /// This function call must use less than 30000 gas.\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let s := shr(224, interfaceId)\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL MINT FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Mints `amount` of `id` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferSingle} event.\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            let to_ := shl(96, to)\n            // Revert if `to` is the zero address.\n            if iszero(to_) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // Increase and store the updated balance of `to`.\n            {\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\n                mstore(0x14, to)\n                mstore(0x00, id)\n                let toBalanceSlot := keccak256(0x00, 0x40)\n                let toBalanceBefore := sload(toBalanceSlot)\n                let toBalanceAfter := add(toBalanceBefore, amount)\n                if lt(toBalanceAfter, toBalanceBefore) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceAfter)\n            }\n            // Emit a {TransferSingle} event.\n            mstore(0x20, amount)\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\n        }\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\n    }\n\n    /// @dev Mints `amounts` of `ids` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - `ids` and `amounts` must have the same length.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferBatch} event.\n    function _batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(mload(ids), mload(amounts))) {\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\n                revert(0x1c, 0x04)\n            }\n            let to_ := shl(96, to)\n            // Revert if `to` is the zero address.\n            if iszero(to_) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            // Loop through all the `ids` and update the balances.\n            {\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\n                    let amount := mload(add(amounts, i))\n                    // Increase and store the updated balance of `to`.\n                    {\n                        mstore(0x00, mload(add(ids, i)))\n                        let toBalanceSlot := keccak256(0x00, 0x40)\n                        let toBalanceBefore := sload(toBalanceSlot)\n                        let toBalanceAfter := add(toBalanceBefore, amount)\n                        if lt(toBalanceAfter, toBalanceBefore) {\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(toBalanceSlot, toBalanceAfter)\n                    }\n                }\n            }\n            // Emit a {TransferBatch} event.\n            {\n                let m := mload(0x40)\n                // Copy the `ids`.\n                mstore(m, 0x40)\n                let n := add(0x20, shl(5, mload(ids)))\n                let o := add(m, 0x40)\n                pop(staticcall(gas(), 4, ids, n, o, n))\n                // Copy the `amounts`.\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\n                o := add(o, returndatasize())\n                n := add(0x20, shl(5, mload(amounts)))\n                pop(staticcall(gas(), 4, amounts, n, o, n))\n                n := sub(add(o, returndatasize()), m)\n                // Do the emit.\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\n            }\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\n        }\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL BURN FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        _burn(address(0), from, id, amount);\n    }\n\n    /// @dev Destroys `amount` of `id` from `from`.\n    ///\n    /// Requirements:\n    /// - `from` must have at least `amount` of `id`.\n    /// - If `by` is not the zero address, it must be either `from`,\n    ///   or approved to manage the tokens of `from`.\n    ///\n    /// Emits a {TransferSingle} event.\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \"\");\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            let from_ := shl(96, from)\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\n            // If `by` is not the zero address, and not equal to `from`,\n            // check if it is approved to manage all the tokens of `from`.\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\n                mstore(0x00, by)\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Decrease and store the updated balance of `from`.\n            {\n                mstore(0x00, id)\n                let fromBalanceSlot := keccak256(0x00, 0x40)\n                let fromBalance := sload(fromBalanceSlot)\n                if gt(amount, fromBalance) {\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\n            }\n            // Emit a {TransferSingle} event.\n            mstore(0x20, amount)\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \"\");\n        }\n    }\n\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\n        internal\n        virtual\n    {\n        _batchBurn(address(0), from, ids, amounts);\n    }\n\n    /// @dev Destroys `amounts` of `ids` from `from`.\n    ///\n    /// Requirements:\n    /// - `ids` and `amounts` must have the same length.\n    /// - `from` must have at least `amounts` of `ids`.\n    /// - If `by` is not the zero address, it must be either `from`,\n    ///   or approved to manage the tokens of `from`.\n    ///\n    /// Emits a {TransferBatch} event.\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\n        internal\n        virtual\n    {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, address(0), ids, amounts, \"\");\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(mload(ids), mload(amounts))) {\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\n                revert(0x1c, 0x04)\n            }\n            let from_ := shl(96, from)\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\n            // If `by` is not the zero address, and not equal to `from`,\n            // check if it is approved to manage all the tokens of `from`.\n            let by_ := shl(96, by)\n            if iszero(or(iszero(by_), eq(by_, from_))) {\n                mstore(0x00, by)\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Loop through all the `ids` and update the balances.\n            {\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\n                    let amount := mload(add(amounts, i))\n                    // Decrease and store the updated balance of `from`.\n                    {\n                        mstore(0x00, mload(add(ids, i)))\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\n                        let fromBalance := sload(fromBalanceSlot)\n                        if gt(amount, fromBalance) {\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\n                    }\n                }\n            }\n            // Emit a {TransferBatch} event.\n            {\n                let m := mload(0x40)\n                // Copy the `ids`.\n                mstore(m, 0x40)\n                let n := add(0x20, shl(5, mload(ids)))\n                let o := add(m, 0x40)\n                pop(staticcall(gas(), 4, ids, n, o, n))\n                // Copy the `amounts`.\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\n                o := add(o, returndatasize())\n                n := add(0x20, shl(5, mload(amounts)))\n                pop(staticcall(gas(), 4, amounts, n, o, n))\n                n := sub(add(o, returndatasize()), m)\n                // Do the emit.\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\n            }\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, address(0), ids, amounts, \"\");\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Approve or remove the `operator` as an operator for `by`,\n    /// without authorization checks.\n    ///\n    /// Emits a {ApprovalForAll} event.\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`by`, `operator`).\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\n            mstore(0x14, by)\n            mstore(0x00, operator)\n            sstore(keccak256(0x0c, 0x34), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            let m := shr(96, not(0))\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\n        internal\n        virtual\n    {\n        _safeTransfer(address(0), from, to, id, amount, data);\n    }\n\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - `from` must have at least `amount` of `id`.\n    /// - If `by` is not the zero address, it must be either `from`,\n    ///   or approved to manage the tokens of `from`.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferSingle} event.\n    function _safeTransfer(\n        address by,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            let from_ := shl(96, from)\n            let to_ := shl(96, to)\n            // Revert if `to` is the zero address.\n            if iszero(to_) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\n            // If `by` is not the zero address, and not equal to `from`,\n            // check if it is approved to manage all the tokens of `from`.\n            let by_ := shl(96, by)\n            if iszero(or(iszero(by_), eq(by_, from_))) {\n                mstore(0x00, by)\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Subtract and store the updated balance of `from`.\n            {\n                mstore(0x00, id)\n                let fromBalanceSlot := keccak256(0x00, 0x40)\n                let fromBalance := sload(fromBalanceSlot)\n                if gt(amount, fromBalance) {\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\n            }\n            // Increase and store the updated balance of `to`.\n            {\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\n                let toBalanceSlot := keccak256(0x00, 0x40)\n                let toBalanceBefore := sload(toBalanceSlot)\n                let toBalanceAfter := add(toBalanceBefore, amount)\n                if lt(toBalanceAfter, toBalanceBefore) {\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceAfter)\n            }\n            // Emit a {TransferSingle} event.\n            mstore(0x20, amount)\n            // forgefmt: disable-next-line\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\n        }\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\n    }\n\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\n    function _safeBatchTransfer(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\n    }\n\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\n    ///\n    /// Requirements:\n    /// - `to` cannot be the zero address.\n    /// - `ids` and `amounts` must have the same length.\n    /// - `from` must have at least `amounts` of `ids`.\n    /// - If `by` is not the zero address, it must be either `from`,\n    ///   or approved to manage the tokens of `from`.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\n    ///\n    /// Emits a {TransferBatch} event.\n    function _safeBatchTransfer(\n        address by,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        if (_useBeforeTokenTransfer()) {\n            _beforeTokenTransfer(from, to, ids, amounts, data);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(eq(mload(ids), mload(amounts))) {\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\n                revert(0x1c, 0x04)\n            }\n            let from_ := shl(96, from)\n            let to_ := shl(96, to)\n            // Revert if `to` is the zero address.\n            if iszero(to_) {\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\n            mstore(0x20, fromSlotSeed)\n            // If `by` is not the zero address, and not equal to `from`,\n            // check if it is approved to manage all the tokens of `from`.\n            let by_ := shl(96, by)\n            if iszero(or(iszero(by_), eq(by_, from_))) {\n                mstore(0x00, by)\n                if iszero(sload(keccak256(0x0c, 0x34))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Loop through all the `ids` and update the balances.\n            {\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\n                    let amount := mload(add(amounts, i))\n                    // Subtract and store the updated balance of `from`.\n                    {\n                        mstore(0x20, fromSlotSeed)\n                        mstore(0x00, mload(add(ids, i)))\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\n                        let fromBalance := sload(fromBalanceSlot)\n                        if gt(amount, fromBalance) {\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\n                    }\n                    // Increase and store the updated balance of `to`.\n                    {\n                        mstore(0x20, toSlotSeed)\n                        let toBalanceSlot := keccak256(0x00, 0x40)\n                        let toBalanceBefore := sload(toBalanceSlot)\n                        let toBalanceAfter := add(toBalanceBefore, amount)\n                        if lt(toBalanceAfter, toBalanceBefore) {\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\n                            revert(0x1c, 0x04)\n                        }\n                        sstore(toBalanceSlot, toBalanceAfter)\n                    }\n                }\n            }\n            // Emit a {TransferBatch} event.\n            {\n                let m := mload(0x40)\n                // Copy the `ids`.\n                mstore(m, 0x40)\n                let n := add(0x20, shl(5, mload(ids)))\n                let o := add(m, 0x40)\n                pop(staticcall(gas(), 4, ids, n, o, n))\n                // Copy the `amounts`.\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\n                o := add(o, returndatasize())\n                n := add(0x20, shl(5, mload(amounts)))\n                pop(staticcall(gas(), 4, amounts, n, o, n))\n                n := sub(add(o, returndatasize()), m)\n                // Do the emit.\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\n            }\n        }\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, to, ids, amounts, data);\n        }\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    HOOKS FOR OVERRIDING                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\n    /// This is to help the compiler avoid producing dead bytecode.\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\n        return false;\n    }\n\n    /// @dev Hook that is called before any token transfer.\n    /// This includes minting and burning, as well as batched variants.\n    ///\n    /// The same hook is called on both single and batched variants.\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\n    /// This is to help the compiler avoid producing dead bytecode.\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\n        return false;\n    }\n\n    /// @dev Hook that is called after any token transfer.\n    /// This includes minting and burning, as well as batched variants.\n    ///\n    /// The same hook is called on both single and batched variants.\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PRIVATE HELPERS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\n    /// This is to help the compiler avoid producing dead bytecode.\n    function _afterTokenTransferCalldata(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) private {\n        if (_useAfterTokenTransfer()) {\n            _afterTokenTransfer(from, to, ids, amounts, data);\n        }\n    }\n\n    /// @dev Returns if `a` has bytecode of non-zero length.\n    function _hasCode(address a) private view returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := extcodesize(a) // Can handle dirty upper bits.\n        }\n    }\n\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\n    /// Reverts if the target does not support the function correctly.\n    function _checkOnERC1155Received(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the calldata.\n            let m := mload(0x40)\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\n            mstore(m, 0xf23a6e61)\n            mstore(add(m, 0x20), caller())\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\n            mstore(add(m, 0x60), id)\n            mstore(add(m, 0x80), amount)\n            mstore(add(m, 0xa0), 0xa0)\n            let n := mload(data)\n            mstore(add(m, 0xc0), n)\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\n            // Revert if the call reverts.\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\n                if returndatasize() {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n            // Load the returndata and compare it with the function selector.\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\n    /// Reverts if the target does not support the function correctly.\n    function _checkOnERC1155BatchReceived(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the calldata.\n            let m := mload(0x40)\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\n            mstore(m, 0xbc197c81)\n            mstore(add(m, 0x20), caller())\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\n            // Copy the `ids`.\n            mstore(add(m, 0x60), 0xa0)\n            let n := add(0x20, shl(5, mload(ids)))\n            let o := add(m, 0xc0)\n            pop(staticcall(gas(), 4, ids, n, o, n))\n            // Copy the `amounts`.\n            let s := add(0xa0, returndatasize())\n            mstore(add(m, 0x80), s)\n            o := add(o, returndatasize())\n            n := add(0x20, shl(5, mload(amounts)))\n            pop(staticcall(gas(), 4, amounts, n, o, n))\n            // Copy the `data`.\n            mstore(add(m, 0xa0), add(s, returndatasize()))\n            o := add(o, returndatasize())\n            n := add(0x20, mload(data))\n            pop(staticcall(gas(), 4, data, n, o, n))\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\n            // Revert if the call reverts.\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\n                if returndatasize() {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n            // Load the returndata and compare it with the function selector.\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns `x` in an array with a single element.\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            mstore(0x40, add(result, 0x40))\n            mstore(result, 1)\n            mstore(add(result, 0x20), x)\n        }\n    }\n}\n"
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for byte related operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\nlibrary LibBytes {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\n    /// Packs length with the first 31 bytes if <255 bytes, so it’s mad tight.\n    struct BytesStorage {\n        bytes32 _spacer;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the bytes.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  BYTE STORAGE OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function set(BytesStorage storage $, bytes memory s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(s)\n            let packed := or(0xff, shl(8, n))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(n, 0xfe)) {\n                    i := 0x1f\n                    packed := or(n, shl(8, mload(add(s, i))))\n                    if iszero(gt(n, i)) { break }\n                }\n                let o := add(s, 0x20)\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let packed := or(0xff, shl(8, s.length))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(s.length, 0xfe)) {\n                    i := 0x1f\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\n                    if iszero(gt(s.length, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, s.length)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\n    function clear(BytesStorage storage $) internal {\n        delete $._spacer;\n    }\n\n    /// @dev Returns whether the value stored is `$` is the empty bytes \"\".\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\n        return uint256($._spacer) & 0xff == uint256(0);\n    }\n\n    /// @dev Returns the length of the value stored in `$`.\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\n        result = uint256($._spacer);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := and(0xff, result)\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\n        }\n    }\n\n    /// @dev Returns the value stored in `$`.\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let o := add(result, 0x20)\n            let packed := sload($.slot)\n            let n := shr(8, packed)\n            for { let i := 0 } 1 {} {\n                if iszero(eq(or(packed, 0xff), packed)) {\n                    mstore(o, packed)\n                    n := and(0xff, packed)\n                    i := 0x1f\n                    if iszero(gt(n, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            mstore(result, n) // Store the length of the memory.\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let packed := sload($.slot) } 1 {} {\n                if iszero(eq(or(packed, 0xff), packed)) {\n                    if iszero(gt(i, 0x1e)) {\n                        result := byte(i, packed)\n                        break\n                    }\n                    if iszero(gt(i, and(0xff, packed))) {\n                        mstore(0x00, $.slot)\n                        let j := sub(i, 0x1f)\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\n                    }\n                    break\n                }\n                if iszero(gt(i, shr(8, packed))) {\n                    mstore(0x00, $.slot)\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\n                }\n                break\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      BYTES OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let needleLen := mload(needle)\n            let replacementLen := mload(replacement)\n            let d := sub(result, subject) // Memory difference.\n            let i := add(subject, 0x20) // Subject bytes pointer.\n            mstore(0x00, add(i, mload(subject))) // End of subject.\n            if iszero(gt(needleLen, mload(subject))) {\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, needleLen), h)) {\n                                mstore(add(i, d), t)\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Copy the `replacement` one word at a time.\n                        for { let j := 0 } 1 {} {\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\n                            j := add(j, 0x20)\n                            if iszero(lt(j, replacementLen)) { break }\n                        }\n                        d := sub(add(d, replacementLen), needleLen)\n                        if needleLen {\n                            i := add(i, needleLen)\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    mstore(add(i, d), t)\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n            }\n            let end := mload(0x00)\n            let n := add(sub(d, add(result, 0x20)), end)\n            // Copy the rest of the bytes one word at a time.\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\n            let o := add(i, d)\n            mstore(o, 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := not(0) // Initialize to `NOT_FOUND`.\n            for { let subjectLen := mload(subject) } 1 {} {\n                if iszero(mload(needle)) {\n                    result := from\n                    if iszero(gt(from, subjectLen)) { break }\n                    result := subjectLen\n                    break\n                }\n                let needleLen := mload(needle)\n                let subjectStart := add(subject, 0x20)\n\n                subject := add(subjectStart, from)\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\n                let s := mload(add(needle, 0x20))\n\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\n\n                if iszero(lt(needleLen, 0x20)) {\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                        if iszero(shr(m, xor(mload(subject), s))) {\n                            if eq(keccak256(subject, needleLen), h) {\n                                result := sub(subject, subjectStart)\n                                break\n                            }\n                        }\n                        subject := add(subject, 1)\n                        if iszero(lt(subject, end)) { break }\n                    }\n                    break\n                }\n                for {} 1 {} {\n                    if iszero(shr(m, xor(mload(subject), s))) {\n                        result := sub(subject, subjectStart)\n                        break\n                    }\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\n        return indexOf(subject, needle, 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                result := not(0) // Initialize to `NOT_FOUND`.\n                let needleLen := mload(needle)\n                if gt(needleLen, mload(subject)) { break }\n                let w := result\n\n                let fromMax := sub(mload(subject), needleLen)\n                if iszero(gt(fromMax, from)) { from := fromMax }\n\n                let end := add(add(subject, 0x20), w)\n                subject := add(add(subject, 0x20), from)\n                if iszero(gt(subject, end)) { break }\n                // As this function is not too often used,\n                // we shall simply use keccak256 for smaller bytecode size.\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                    if eq(keccak256(subject, needleLen), h) {\n                        result := sub(subject, add(end, 1))\n                        break\n                    }\n                    subject := add(subject, w) // `sub(subject, 1)`.\n                    if iszero(gt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256)\n    {\n        return lastIndexOf(subject, needle, type(uint256).max);\n    }\n\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\n        return indexOf(subject, needle) != NOT_FOUND;\n    }\n\n    /// @dev Returns whether `subject` starts with `needle`.\n    function startsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            // Just using keccak256 directly is actually cheaper.\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\n            result := lt(gt(n, mload(subject)), t)\n        }\n    }\n\n    /// @dev Returns whether `subject` ends with `needle`.\n    function endsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            let notInRange := gt(n, mload(subject))\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\n            // Just using keccak256 directly is actually cheaper.\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\n        }\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(bytes memory subject, uint256 times)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(or(iszero(times), iszero(l))) {\n                result := mload(0x40)\n                subject := add(subject, 0x20)\n                let o := add(result, 0x20)\n                for {} 1 {} {\n                    // Copy the `subject` one word at a time.\n                    for { let j := 0 } 1 {} {\n                        mstore(add(o, j), mload(add(subject, j)))\n                        j := add(j, 0x20)\n                        if iszero(lt(j, l)) { break }\n                    }\n                    o := add(o, l)\n                    times := sub(times, 1)\n                    if iszero(times) { break }\n                }\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(bytes memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(gt(l, end)) { end := l }\n            if iszero(gt(l, start)) { start := l }\n            if lt(start, end) {\n                result := mload(0x40)\n                let n := sub(end, start)\n                let i := add(subject, start)\n                let w := not(0x1f)\n                // Copy the `subject` one word at a time, backwards.\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\n                    mstore(add(result, j), mload(add(i, j)))\n                    j := add(j, w) // `sub(j, 0x20)`.\n                    if iszero(j) { break }\n                }\n                let o := add(add(result, 0x20), n)\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, n) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset.\n    function slice(bytes memory subject, uint256 start)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        result = slice(subject, start, type(uint256).max);\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, end), sub(end, start))\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\n        }\n    }\n\n    /// @dev Reduces the size of `subject` to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncate(bytes memory subject, uint256 n)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := subject\n            mstore(mul(lt(n, mload(result)), result), n)\n        }\n    }\n\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncatedCalldata(bytes calldata subject, uint256 n)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.offset := subject.offset\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\n        }\n    }\n\n    /// @dev Returns all the indices of `needle` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256[] memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let searchLen := mload(needle)\n            if iszero(gt(searchLen, mload(subject))) {\n                result := mload(0x40)\n                let i := add(subject, 0x20)\n                let o := add(result, 0x20)\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, searchLen), h)) {\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\n                        o := add(o, 0x20)\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\n                        if searchLen {\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\n                // Allocate memory for result.\n                // We allocate one more word, so this array can be recycled for {split}.\n                mstore(0x40, add(o, 0x20))\n            }\n        }\n    }\n\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\n    function split(bytes memory subject, bytes memory delimiter)\n        internal\n        pure\n        returns (bytes[] memory result)\n    {\n        uint256[] memory indices = indicesOf(subject, delimiter);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let w := not(0x1f)\n            let indexPtr := add(indices, 0x20)\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n            mstore(add(indicesEnd, w), mload(subject))\n            mstore(indices, add(mload(indices), 1))\n            for { let prevIndex := 0 } 1 {} {\n                let index := mload(indexPtr)\n                mstore(indexPtr, 0x60)\n                if iszero(eq(index, prevIndex)) {\n                    let element := mload(0x40)\n                    let l := sub(index, prevIndex)\n                    mstore(element, l) // Store the length of the element.\n                    // Copy the `subject` one word at a time, backwards.\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n                        o := add(o, w) // `sub(o, 0x20)`.\n                        if iszero(o) { break }\n                    }\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\n                    mstore(indexPtr, element) // Store the `element` into the array.\n                }\n                prevIndex := add(index, mload(delimiter))\n                indexPtr := add(indexPtr, 0x20)\n                if iszero(lt(indexPtr, indicesEnd)) { break }\n            }\n            result := indices\n            if iszero(mload(delimiter)) {\n                result := add(indices, 0x20)\n                mstore(result, sub(mload(indices), 2))\n            }\n        }\n    }\n\n    /// @dev Returns a concatenated bytes of `a` and `b`.\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let w := not(0x1f)\n            let aLen := mload(a)\n            // Copy `a` one word at a time, backwards.\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\n                mstore(add(result, o), mload(add(a, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let bLen := mload(b)\n            let output := add(result, aLen)\n            // Copy `b` one word at a time, backwards.\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\n                mstore(add(output, o), mload(add(b, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let totalLen := add(aLen, bLen)\n            let last := add(add(result, 0x20), totalLen)\n            mstore(last, 0) // Zeroize the slot after the bytes.\n            mstore(result, totalLen) // Store the length.\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLen := mload(a)\n            let bLen := mload(b)\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\n            if n {\n                for { let i := 0x20 } 1 {} {\n                    let x := mload(add(a, i))\n                    let y := mload(add(b, i))\n                    if iszero(or(xor(x, y), eq(i, n))) {\n                        i := add(i, 0x20)\n                        continue\n                    }\n                    result := sub(gt(x, y), lt(x, y))\n                    break\n                }\n            }\n            // forgefmt: disable-next-item\n            if iszero(result) {\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\n                result := sub(gt(x, y), lt(x, y))\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\n            }\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(bytes memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Assumes that the bytes does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the bytes is produced\n            // by a method that doesn't zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            mstore(retStart, 0x20) // Store the return offset.\n            // End the transaction, returning the bytes.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n\n    /// @dev Directly returns `a` with minimal copying.\n    function directReturn(bytes[] memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(a) // `a.length`.\n            let o := add(a, 0x20) // Start of elements in `a`.\n            let u := a // Highest memory slot.\n            let w := not(0x1f)\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\n                let s := mload(c) // `a[i]`.\n                let l := mload(s) // `a[i].length`.\n                let r := and(l, 0x1f) // `a[i].length % 32`.\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\n                // If `s` comes before `o`, or `s` is not zero right padded.\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\n                    let m := mload(0x40)\n                    mstore(m, l) // Copy `a[i].length`.\n                    for {} 1 {} {\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\n                        z := add(z, w) // `sub(z, 0x20)`.\n                        if iszero(z) { break }\n                    }\n                    let e := add(add(m, 0x20), l)\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\n                    s := m\n                }\n                mstore(c, sub(s, o)) // Convert to calldata offset.\n                let t := add(l, add(s, 0x20))\n                if iszero(lt(t, u)) { u := t }\n            }\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\n            mstore(retStart, 0x20) // Store the return offset.\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(add(add(a, 0x20), offset))\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    function loadCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := calldataload(add(a.offset, offset))\n        }\n    }\n\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            result.offset := add(a.offset, offset)\n            result.length := sub(a.length, offset)\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\n            result.offset := add(a.offset, s)\n            result.length := sub(a.length, s)\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns bytes in calldata. Performs bounds checks.\n    function bytesInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\n            result.offset := add(add(a.offset, s), 0x20)\n            result.length := calldataload(add(a.offset, s))\n            // forgefmt: disable-next-item\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\n    function emptyCalldata() internal pure returns (bytes calldata result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.length := 0\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\n\n/// @title IImplicitProjectValidation\n/// @author Michael Standen\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\ninterface IImplicitProjectValidation {\n\n  /// @notice Invalid redirect url error\n  error InvalidRedirectUrl();\n\n  /// @notice Check if a project has a code\n  /// @param wallet The wallet address\n  /// @param attestation The attestation\n  /// @param projectId The project id\n  /// @return magic The attestation magic bytes for the wallet address\n  function validateAttestation(\n    address wallet,\n    Attestation calldata attestation,\n    bytes32 projectId\n  ) external view returns (bytes32);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../../../utils/LibBytes.sol\";\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \"./ISignalsImplicitMode.sol\";\n\nusing LibBytes for bytes;\n\n/// @notice Attestation for a specific session\n/// @param approvedSigner Address of the approved signer\n/// @param identityType Identity type\n/// @param issuerHash Hash of the issuer\n/// @param audienceHash Hash of the audience\n/// @param applicationData Unspecified application data\n/// @param authData Auth data\nstruct Attestation {\n  address approvedSigner;\n  bytes4 identityType;\n  bytes32 issuerHash;\n  bytes32 audienceHash;\n  bytes applicationData;\n  AuthData authData;\n}\n\n/// @notice Auth data for an attestation\n/// @param redirectUrl Authorization redirect URL\n/// @param issuedAt Timestamp of the attestation issuance\nstruct AuthData {\n  string redirectUrl;\n  uint64 issuedAt;\n}\n\n/// @title LibAttestation\n/// @author Michael Standen\n/// @notice Library for attestation management\nlibrary LibAttestation {\n\n  /// @notice Hashes an attestation\n  function toHash(\n    Attestation memory attestation\n  ) internal pure returns (bytes32) {\n    return keccak256(toPacked(attestation));\n  }\n\n  /// @notice Decodes an attestation from a packed bytes array\n  /// @param encoded The packed bytes array\n  /// @param pointer The pointer to the start of the attestation\n  /// @return attestation The decoded attestation\n  /// @return newPointer The new pointer to the end of the attestation\n  function fromPacked(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\n    newPointer = pointer;\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\n    // Application data (arbitrary bytes)\n    uint256 dataSize;\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\n    newPointer += dataSize;\n    // Auth data\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\n    return (attestation, newPointer);\n  }\n\n  /// @notice Decodes the auth data from a packed bytes\n  /// @param encoded The packed bytes containing the auth data\n  /// @param pointer The pointer to the start of the auth data within the encoded data\n  /// @return authData The decoded auth data\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\n  function fromPackedAuthData(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\n    uint24 redirectUrlLength;\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\n    pointer += redirectUrlLength;\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\n    return (authData, pointer);\n  }\n\n  /// @notice Encodes an attestation into a packed bytes array\n  /// @param attestation The attestation to encode\n  /// @return encoded The packed bytes array\n  function toPacked(\n    Attestation memory attestation\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(\n      attestation.approvedSigner,\n      attestation.identityType,\n      attestation.issuerHash,\n      attestation.audienceHash,\n      uint24(attestation.applicationData.length),\n      attestation.applicationData,\n      toPackAuthData(attestation.authData)\n    );\n  }\n\n  /// @notice Encodes the auth data into a packed bytes array\n  /// @param authData The auth data to encode\n  /// @return encoded The packed bytes array\n  function toPackAuthData(\n    AuthData memory authData\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\n  }\n\n  /// @notice Generates the implicit request magic return value\n  /// @param attestation The attestation\n  /// @param wallet The wallet\n  /// @return magic The expected implicit request magic\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\n    );\n  }\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { Payload } from \"../../../modules/Payload.sol\";\nimport { Attestation } from \"./Attestation.sol\";\n\n/// @dev Magic prefix for the implicit request\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\"acceptImplicitRequest\"));\n\n/// @title ISignalsImplicitMode\n/// @author Agustin Aguilar, Michael Standen\n/// @notice Interface for the contracts that support implicit mode validation\ninterface ISignalsImplicitMode {\n\n  /// @notice Determines if an implicit request is valid\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  /// @return magic The hash of the implicit request if valid\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32 magic);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../utils/LibBytes.sol\";\n\nusing LibBytes for bytes;\n\n/// @title Payload\n/// @author Agustin Aguilar, Michael Standen, William Hua\n/// @notice Library for encoding and decoding payloads\nlibrary Payload {\n\n  /// @notice Error thrown when the kind is invalid\n  error InvalidKind(uint8 kind);\n\n  /// @dev keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n  /// @dev keccak256(\"Sequence Wallet\")\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\n\n  /// @dev keccak256(\"3\")\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\n\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\n    return keccak256(\n      abi.encode(\n        EIP712_DOMAIN_TYPEHASH,\n        EIP712_DOMAIN_NAME_SEQUENCE,\n        EIP712_DOMAIN_VERSION_SEQUENCE,\n        _noChainId ? uint256(0) : uint256(block.chainid),\n        _wallet\n      )\n    );\n  }\n\n  /// @dev keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\n\n  /// @dev keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\n\n  /// @dev keccak256(\"Message(bytes message,address[] wallets)\")\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\n\n  /// @dev keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\n\n  /// @notice Kind of transaction\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\n  /// @notice Kind of digest\n  uint8 public constant KIND_MESSAGE = 0x01;\n  /// @notice Kind of config update\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\n  /// @notice Kind of message\n  uint8 public constant KIND_DIGEST = 0x03;\n\n  /// @notice Behavior on error: ignore error\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\n  /// @notice Behavior on error: revert on error\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\n  /// @notice Behavior on error: abort on error\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\n\n  /// @notice Payload call information\n  /// @param to Address of the target contract\n  /// @param value Value to send with the call\n  /// @param data Data to send with the call\n  /// @param gasLimit Gas limit for the call\n  /// @param delegateCall If the call is a delegate call\n  /// @param onlyFallback If the call should only be executed in an error scenario\n  /// @param behaviorOnError Behavior on error\n  struct Call {\n    address to;\n    uint256 value;\n    bytes data;\n    uint256 gasLimit;\n    bool delegateCall;\n    bool onlyFallback;\n    uint256 behaviorOnError;\n  }\n\n  /// @notice Decoded payload\n  /// @param kind Kind of payload\n  /// @param noChainId If the chain ID should be omitted\n  /// @param calls Array of calls (transaction kind)\n  /// @param space Nonce space for the calls (transaction kind)\n  /// @param nonce Nonce value for the calls (transaction kind)\n  /// @param message Message to validate (message kind)\n  /// @param imageHash Image hash to update to (config update kind)\n  /// @param digest Digest to validate (digest kind)\n  /// @param parentWallets Parent wallets\n  struct Decoded {\n    uint8 kind;\n    bool noChainId;\n    // Transaction kind\n    Call[] calls;\n    uint256 space;\n    uint256 nonce;\n    // Message kind\n    // TODO: Maybe native 721 ?\n    bytes message;\n    // Config update kind\n    bytes32 imageHash;\n    // Digest kind for 1271\n    bytes32 digest;\n    // Parent wallets\n    address[] parentWallets;\n  }\n\n  function fromMessage(\n    bytes memory message\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_MESSAGE;\n    _decoded.message = message;\n  }\n\n  function fromConfigUpdate(\n    bytes32 imageHash\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_CONFIG_UPDATE;\n    _decoded.imageHash = imageHash;\n  }\n\n  function fromDigest(\n    bytes32 digest\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_DIGEST;\n    _decoded.digest = digest;\n  }\n\n  function fromPackedCalls(\n    bytes calldata packed\n  ) internal view returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_TRANSACTIONS;\n\n    // Read the global flag\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\n\n    // First bit determines if space is zero or not\n    if (globalFlag & 0x01 == 0x01) {\n      _decoded.space = 0;\n    } else {\n      (_decoded.space, pointer) = packed.readUint160(pointer);\n    }\n\n    // Next 3 bits determine the size of the nonce\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\n\n    if (nonceSize > 0) {\n      // Read the nonce\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\n    }\n\n    uint256 numCalls;\n\n    // Bit 5 determines if the batch contains a single call\n    if (globalFlag & 0x10 == 0x10) {\n      numCalls = 1;\n    } else {\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\n      if (globalFlag & 0x20 == 0x20) {\n        (numCalls, pointer) = packed.readUint16(pointer);\n      } else {\n        (numCalls, pointer) = packed.readUint8(pointer);\n      }\n    }\n\n    // Read the calls\n    _decoded.calls = new Call[](numCalls);\n\n    for (uint256 i = 0; i < numCalls; i++) {\n      uint8 flags;\n      (flags, pointer) = packed.readUint8(pointer);\n\n      // First bit determines if this is a call to self\n      // or a call to another address\n      if (flags & 0x01 == 0x01) {\n        // Call to self\n        _decoded.calls[i].to = address(this);\n      } else {\n        // Call to another address\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\n      }\n\n      // Second bit determines if the call has value or not\n      if (flags & 0x02 == 0x02) {\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\n      }\n\n      // Third bit determines if the call has data or not\n      if (flags & 0x04 == 0x04) {\n        // 3 bytes determine the size of the calldata\n        uint256 calldataSize;\n        (calldataSize, pointer) = packed.readUint24(pointer);\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\n        pointer += calldataSize;\n      }\n\n      // Fourth bit determines if the call has a gas limit or not\n      if (flags & 0x08 == 0x08) {\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\n      }\n\n      // Fifth bit determines if the call is a delegate call or not\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\n\n      // Sixth bit determines if the call is fallback only\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\n\n      // Last 2 bits are directly mapped to the behavior on error\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\n    }\n  }\n\n  function hashCall(\n    Call memory c\n  ) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encode(\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\n      )\n    );\n  }\n\n  function hashCalls(\n    Call[] memory calls\n  ) internal pure returns (bytes32) {\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\n    // hashes of each item. So we hash each Call, pack them, and hash again.\n    bytes32[] memory callHashes = new bytes32[](calls.length);\n    for (uint256 i = 0; i < calls.length; i++) {\n      callHashes[i] = hashCall(calls[i]);\n    }\n    return keccak256(abi.encodePacked(callHashes));\n  }\n\n  function toEIP712(\n    Decoded memory _decoded\n  ) internal pure returns (bytes32) {\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\n\n    if (_decoded.kind == KIND_TRANSACTIONS) {\n      bytes32 callsHash = hashCalls(_decoded.calls);\n      // The top-level struct for Calls might be something like:\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\n    } else if (_decoded.kind == KIND_MESSAGE) {\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\n    } else if (_decoded.kind == KIND_DIGEST) {\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\n    } else {\n      // Unknown kind\n      revert InvalidKind(_decoded.kind);\n    }\n  }\n\n  function hash(\n    Decoded memory _decoded\n  ) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.18;\n\n/// @title Library for reading data from bytes arrays\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\n/// @notice This library contains functions for reading data from bytes arrays.\n/// @dev These functions do not check if the input index is within the bounds of the data array.\n/// @dev Reading out of bounds may return dirty values.\nlibrary LibBytes {\n\n  function readFirstUint8(\n    bytes calldata _data\n  ) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(_data.offset)\n      a := shr(248, word)\n      newPointer := 1\n    }\n  }\n\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(248, word)\n      newPointer := add(_index, 1)\n    }\n  }\n\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(240, word)\n      newPointer := add(_index, 2)\n    }\n  }\n\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(232, word)\n      newPointer := add(_index, 3)\n    }\n  }\n\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(192, word)\n      newPointer := add(_index, 8)\n    }\n  }\n\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(96, word)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_index, _data.offset))\n      newPointer := add(_index, 32)\n    }\n  }\n\n  function readUintX(\n    bytes calldata _data,\n    uint256 _index,\n    uint256 _length\n  ) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      let shift := sub(256, mul(_length, 8))\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\n      newPointer := add(_index, _length)\n    }\n  }\n\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_pointer, _data.offset))\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n      newPointer := add(_pointer, 4)\n    }\n  }\n\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_pointer, _data.offset))\n      newPointer := add(_pointer, 32)\n    }\n  }\n\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  /// @dev ERC-2098 Compact Signature\n  function readRSVCompact(\n    bytes calldata _data,\n    uint256 _index\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\n    uint256 yParityAndS;\n    assembly {\n      r := calldataload(add(_index, _data.offset))\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\n      newPointer := add(_index, 64)\n    }\n    uint256 yParity = uint256(yParityAndS >> 255);\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\n    v = uint8(yParity) + 27;\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc2470-libs/=lib/erc2470-libs/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "murky/=lib/murky/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/",
        "signals-implicit-mode/=lib/signals-implicit-mode/",
        "solady/=lib/solady/src/"
      ],
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "evm.bytecode",
            "evm.deployedBytecode",
            "devdoc",
            "userdoc",
            "metadata",
            "abi",
            "evm.methodIdentifiers"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": true,
      "libraries": {}
    },
    "evmVersion": "paris",
    "viaIR": true,
    "libraries": {}
  },
  "allowPaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "basePath": "/home/michael/Code/Horizon/live-contracts",
  "includePaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "output": {
    "contracts": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "AccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "AccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Extension of {AccessControl} that allows enumerating the members of each role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "IAccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControl declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "IAccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControlEnumerable declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "IERC1967": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "IERC2981": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "royaltyAmount",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._",
            "kind": "dev",
            "methods": {
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":\"IERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "IERC1822Proxiable": {
          "abi": [
            {
              "inputs": [],
              "name": "proxiableUUID",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
            "kind": "dev",
            "methods": {
              "proxiableUUID()": {
                "details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "proxiableUUID()": "52d1902d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "ERC1967Upgrade": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "_ADMIN_SLOT": {
                "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
              },
              "_BEACON_SLOT": {
                "details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
              },
              "_IMPLEMENTATION_SLOT": {
                "details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "Proxy": {
          "abi": [
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "IBeacon": {
          "abi": [
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This is the interface that {BeaconProxy} expects of its beacon.",
            "kind": "dev",
            "methods": {
              "implementation()": {
                "details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "UpgradeableBeacon": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newImplementation",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.",
            "events": {
              "Upgraded(address)": {
                "details": "Emitted when the implementation returned by the beacon is changed."
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."
              },
              "implementation()": {
                "details": "Returns the current implementation address."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeTo(address)": {
                "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 407,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_Ownable": {
                  "entryPoint": 302,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_UpgradeableBeacon": {
                  "entryPoint": 283,
                  "id": 1095,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 563,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 535,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_UpgradeableBeacon": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 687,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 862,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 657,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_setImplementation": {
                  "entryPoint": 622,
                  "id": 1141,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 726,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 532,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 587,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 823,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:11:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;931:89::-;997:15;931:89;;;:::i;:::-;997:15;:::i;:::-;931:89::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;543:1496:11:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;543:1496::-;;;:::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:11:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;543:1496:11:-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 278,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 175,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 190,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 294,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 1215,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 998,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 1190,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 221,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 307,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 1429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 911,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 142,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 797,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 1708,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 1711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_implementation": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeTo": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__transferOwnership": {
                  "entryPoint": 1593,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 1281,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_implementation": {
                  "entryPoint": 757,
                  "id": 1105,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 1739,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 1690,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 870,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 860,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 840,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 1563,
                  "id": 1141,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 1139,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 1090,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 691,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo_inner": {
                  "entryPoint": 616,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 561,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 779,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_1111": {
                  "entryPoint": 542,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 892,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 1528,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 1240,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 1049,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 1454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 537,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 121,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 126,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_left": {
                  "entryPoint": 1495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 920,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 1325,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 1150,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 1501,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 1531,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 154,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 702,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1703,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:11:-:0;;;;;;;;;-1:-1:-1;543:1496:11;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:11:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1469:167::-;1569:17;;;:::i;:::-;1602:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1469:167::o;:::-;;;;:::i;:::-;:::o;543:1496::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1098:112::-;1162:7;;:::i;:::-;1188:15;;;;:::i;:::-;1181:22;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;543:1496:11:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;1201:85::-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:11:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;543:1496:11:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;543:1496:11:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:11:-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeTo(address)": "3659cfe6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\",\"events\":{\"Upgraded(address)\":{\"details\":\"Emitted when the implementation returned by the beacon is changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon.\"},\"implementation()\":{\"details\":\"Returns the current implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":\"UpgradeableBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "ERC2981": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._",
            "kind": "dev",
            "methods": {
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":\"ERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:13:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:13:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "Create2": {
          "abi": [],
          "devdoc": {
            "details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:15:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:15:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "devdoc": {
            "details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:16:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:16:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:17:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:17:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "Math": {
          "abi": [],
          "devdoc": {
            "details": "Standard math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:20:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:20:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "SignedMath": {
          "abi": [],
          "devdoc": {
            "details": "Standard signed math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:21:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:21:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "EnumerableSet": {
          "abi": [],
          "devdoc": {
            "details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:22:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:22:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "LibAttestation": {
          "abi": [],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {},
            "title": "LibAttestation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:23:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:23:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LibAttestation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for attestation management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":\"LibAttestation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for attestation management",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "ISignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "magic",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "magic": "The hash of the implicit request if valid"
                }
              }
            },
            "title": "ISignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"magic\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"magic\":\"The hash of the implicit request if valid\"}}},\"title\":\"ISignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Interface for the contracts that support implicit mode validation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":\"ISignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Interface for the contracts that support implicit mode validation",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "Payload": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "kind",
                  "type": "uint8"
                }
              ],
              "name": "InvalidKind",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_ABORT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_IGNORE_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_REVERT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_CONFIG_UPDATE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_DIGEST",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_MESSAGE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_TRANSACTIONS",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen, William Hua",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "CALLS_TYPEHASH": {
                "details": "keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CALL_TYPEHASH": {
                "details": "keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CONFIG_UPDATE_TYPEHASH": {
                "details": "keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")"
              },
              "EIP712_DOMAIN_NAME_SEQUENCE": {
                "details": "keccak256(\"Sequence Wallet\")"
              },
              "EIP712_DOMAIN_TYPEHASH": {
                "details": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
              },
              "EIP712_DOMAIN_VERSION_SEQUENCE": {
                "details": "keccak256(\"3\")"
              },
              "MESSAGE_TYPEHASH": {
                "details": "keccak256(\"Message(bytes message,address[] wallets)\")"
              }
            },
            "title": "Payload",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 42,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234602057600e6024565b61036661003082393081505061036690f35b602a565b60405190565b600080fdfe60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x20 JUMPI PUSH1 0xE PUSH1 0x24 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x30 DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH2 0x366 SWAP1 RETURN JUMPDEST PUSH1 0x2A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:25:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple_uint8": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8": {
                  "entryPoint": 238,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 414,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 174,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 316,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 177,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 512,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 646,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_CONFIG_UPDATE": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_DIGEST": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_MESSAGE": {
                  "entryPoint": 445,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_TRANSACTIONS": {
                  "entryPoint": 347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint8": {
                  "entryPoint": 319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint8": {
                  "entryPoint": 186,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 716,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 417,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 603,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 273,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_DIGEST": {
                  "entryPoint": 768,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_MESSAGE": {
                  "entryPoint": 469,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 371,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "getter_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 525,
                  "id": 4162,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 592,
                  "id": 4154,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 659,
                  "id": 4158,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 227,
                  "id": 4146,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_DIGEST": {
                  "entryPoint": 757,
                  "id": 4150,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_MESSAGE": {
                  "entryPoint": 458,
                  "id": 4142,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 360,
                  "id": 4138,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:25:-:0;;;;;;;;;-1:-1:-1;275:9850:25;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2439:47::-;2482:4;;;:::i;:::-;2439:47;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2279:46::-;2321:4;;;:::i;:::-;2279:46;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2358:41::-;2395:4;;;:::i;:::-;2358:41;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2819:52;2867:4;;;:::i;:::-;2819:52;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2611:50;2657:4;;;:::i;:::-;2611:50;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2714:53;2763:4;;;:::i;:::-;2714:53;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2520:40::-;2556:4;;;:::i;:::-;2520:40;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;"
            },
            "methodIdentifiers": {
              "BEHAVIOR_ABORT_ON_ERROR()": "420b0c25",
              "BEHAVIOR_IGNORE_ERROR()": "4a7d2aa0",
              "BEHAVIOR_REVERT_ON_ERROR()": "4e5f5715",
              "KIND_CONFIG_UPDATE()": "0739d59a",
              "KIND_DIGEST()": "b570180a",
              "KIND_MESSAGE()": "3d5c1f9b",
              "KIND_TRANSACTIONS()": "075a3d2d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"InvalidKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEHAVIOR_ABORT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_IGNORE_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_REVERT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_CONFIG_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_DIGEST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_MESSAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_TRANSACTIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen, William Hua\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"CALLS_TYPEHASH\":{\"details\":\"keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CALL_TYPEHASH\":{\"details\":\"keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CONFIG_UPDATE_TYPEHASH\":{\"details\":\"keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\"},\"EIP712_DOMAIN_NAME_SEQUENCE\":{\"details\":\"keccak256(\\\"Sequence Wallet\\\")\"},\"EIP712_DOMAIN_TYPEHASH\":{\"details\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"EIP712_DOMAIN_VERSION_SEQUENCE\":{\"details\":\"keccak256(\\\"3\\\")\"},\"MESSAGE_TYPEHASH\":{\"details\":\"keccak256(\\\"Message(bytes message,address[] wallets)\\\")\"}},\"title\":\"Payload\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKind(uint8)\":[{\"notice\":\"Error thrown when the kind is invalid\"}]},\"kind\":\"user\",\"methods\":{\"BEHAVIOR_ABORT_ON_ERROR()\":{\"notice\":\"Behavior on error: abort on error\"},\"BEHAVIOR_IGNORE_ERROR()\":{\"notice\":\"Behavior on error: ignore error\"},\"BEHAVIOR_REVERT_ON_ERROR()\":{\"notice\":\"Behavior on error: revert on error\"},\"KIND_CONFIG_UPDATE()\":{\"notice\":\"Kind of config update\"},\"KIND_DIGEST()\":{\"notice\":\"Kind of message\"},\"KIND_MESSAGE()\":{\"notice\":\"Kind of digest\"},\"KIND_TRANSACTIONS()\":{\"notice\":\"Kind of transaction\"}},\"notice\":\"Library for encoding and decoding payloads\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":\"Payload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidKind(uint8)": [
                {
                  "notice": "Error thrown when the kind is invalid"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "BEHAVIOR_ABORT_ON_ERROR()": {
                "notice": "Behavior on error: abort on error"
              },
              "BEHAVIOR_IGNORE_ERROR()": {
                "notice": "Behavior on error: ignore error"
              },
              "BEHAVIOR_REVERT_ON_ERROR()": {
                "notice": "Behavior on error: revert on error"
              },
              "KIND_CONFIG_UPDATE()": {
                "notice": "Kind of config update"
              },
              "KIND_DIGEST()": {
                "notice": "Kind of message"
              },
              "KIND_MESSAGE()": {
                "notice": "Kind of digest"
              },
              "KIND_TRANSACTIONS()": {
                "notice": "Kind of transaction"
              }
            },
            "notice": "Library for encoding and decoding payloads",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)",
            "details": "These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.",
            "kind": "dev",
            "methods": {},
            "title": "Library for reading data from bytes arrays",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:26:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:26:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\",\"details\":\"These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for reading data from bytes arrays\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library contains functions for reading data from bytes arrays.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "This library contains functions for reading data from bytes arrays.",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "SignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "title": "SignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"SignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Base contract for implicit mode validation by project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":\"SignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Base contract for implicit mode validation by project",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "IImplicitProjectValidation": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidRedirectUrl",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "validateAttestation",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "params": {
                  "attestation": "The attestation",
                  "projectId": "The project id",
                  "wallet": "The wallet address"
                },
                "returns": {
                  "_0": "magic The attestation magic bytes for the wallet address"
                }
              }
            },
            "title": "IImplicitProjectValidation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": "3808a90b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidRedirectUrl\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"validateAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"params\":{\"attestation\":\"The attestation\",\"projectId\":\"The project id\",\"wallet\":\"The wallet address\"},\"returns\":{\"_0\":\"magic The attestation magic bytes for the wallet address\"}}},\"title\":\"IImplicitProjectValidation\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRedirectUrl()\":[{\"notice\":\"Invalid redirect url error\"}]},\"kind\":\"user\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"notice\":\"Check if a project has a code\"}},\"notice\":\"Interface for contracts supporting validation of implicit sessions for projects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":\"IImplicitProjectValidation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidRedirectUrl()": [
                {
                  "notice": "Invalid redirect url error"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "notice": "Check if a project has a code"
              }
            },
            "notice": "Interface for contracts supporting validation of implicit sessions for projects",
            "version": 1
          }
        }
      },
      "lib/solady/src/tokens/ERC1155.sol": {
        "ERC1155": {
          "abi": [
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ArrayLengthsMismatch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC1155ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "TransferBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "TransferSingle",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "URI",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "owners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                }
              ],
              "name": "balanceOfBatch",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "balances",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeBatchTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "uri",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "ArrayLengthsMismatch()": [
                {
                  "details": "The lengths of the input arrays are not the same."
                }
              ],
              "InsufficientBalance()": [
                {
                  "details": "Insufficient balance."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the tokens."
                }
              ],
              "TransferToNonERC1155ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "TransferBatch(address,address,address,uint256[],uint256[])": {
                "details": "Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`."
              },
              "TransferSingle(address,address,address,uint256,uint256)": {
                "details": "Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`."
              },
              "URI(string,uint256)": {
                "details": "Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "kind": "dev",
            "methods": {
              "balanceOf(address,uint256)": {
                "details": "Returns the amount of `id` owned by `owner`."
              },
              "balanceOfBatch(address[],uint256[])": {
                "details": "Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
                "details": "Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event."
              },
              "safeTransferFrom(address,address,uint256,uint256,bytes)": {
                "details": "Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."
              },
              "uri(uint256)": {
                "details": "Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \"https://example.com/api/{id}.json\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "stateVariables": {
              "_APPROVAL_FOR_ALL_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`."
              },
              "_ERC1155_MASTER_SLOT_SEED": {
                "details": "The `ownerSlotSeed` of a given owner is given by. ```     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)) ``` The balance slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, id)     let balanceSlot := keccak256(0x00, 0x40) ``` The operator approval slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, operator)     let operatorApprovalSlot := keccak256(0x0c, 0x34) ```"
              },
              "_TRANSFER_BATCH_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"TransferBatch(address,address,address,uint256[],uint256[])\"))`."
              },
              "_TRANSFER_SINGLE_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"TransferSingle(address,address,address,uint256,uint256)\"))`."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "balanceOf(address,uint256)": "00fdd58e",
              "balanceOfBatch(address[],uint256[])": "4e1273f4",
              "isApprovedForAll(address,address)": "e985e9c5",
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
              "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "uri(uint256)": "0e89341c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \\\"https://example.com/api/{id}.json\\\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"stateVariables\":{\"_APPROVAL_FOR_ALL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\"},\"_ERC1155_MASTER_SLOT_SEED\":{\"details\":\"The `ownerSlotSeed` of a given owner is given by. ```     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)) ``` The balance slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, id)     let balanceSlot := keccak256(0x00, 0x40) ``` The operator approval slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, operator)     let operatorApprovalSlot := keccak256(0x0c, 0x34) ```\"},\"_TRANSFER_BATCH_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\"},\"_TRANSFER_SINGLE_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"- Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/tokens/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// - The ERC1155 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The transfer functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                mstore(add(m, 0xc0), data.length)\\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, ids.length) } i {} {\\n                    i := sub(i, 0x20)\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0x40), ids.length)\\n                calldatacopy(add(m, 0x60), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x60, n))\\n                let o := add(add(m, n), 0x60)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Do the emit.\\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0xc0), ids.length)\\n                calldatacopy(add(m, 0xe0), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x80), add(0xc0, n))\\n                let o := add(add(m, n), 0xe0)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\\n                o := add(add(o, n), 0x20)\\n                mstore(o, data.length)\\n                calldatacopy(add(o, 0x20), data.offset, data.length)\\n                let nAll := add(0x104, add(data.length, add(n, n)))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let i := shl(5, ids.length)\\n            mstore(0x40, add(i, o))\\n            // Loop through all the `ids` and load the balances.\\n            for {} i {} {\\n                i := sub(i, 0x20)\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `from`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x306249cc3611727ffa9e15ec816282a60fd9629e5ea03ab1c780d638d1537c68\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "- Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.",
            "version": 1
          }
        }
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "NOT_FOUND": {
                "details": "The constant returned when the `search` is not found in the bytes."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202333ed565e73699ecd67ee453c4d35b10817b7875cd0ca836c6ddecc89795dae64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLER 0xED JUMP MCOPY PUSH20 0x699ECD67EE453C4D35B10817B7875CD0CA836C6D 0xDE 0xCC DUP10 PUSH26 0x5DAE64736F6C634300081B003300000000000000000000000000 ",
              "sourceMap": "197:34035:30:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202333ed565e73699ecd67ee453c4d35b10817b7875cd0ca836c6ddecc89795dae64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLER 0xED JUMP MCOPY PUSH20 0x699ECD67EE453C4D35B10817B7875CD0CA836C6D 0xDE 0xCC DUP10 PUSH26 0x5DAE64736F6C634300081B003300000000000000000000000000 ",
              "sourceMap": "197:34035:30:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"NOT_FOUND\":{\"details\":\"The constant returned when the `search` is not found in the bytes.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for byte related operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for byte related operations.",
            "version": 1
          }
        }
      },
      "lib/solady/src/utils/LibString.sol": {
        "LibString": {
          "abi": [
            {
              "inputs": [],
              "name": "HexLengthInsufficient",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "StringNot7BitASCII",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TooBigForSmallString",
              "type": "error"
            }
          ],
          "devdoc": {
            "author": "Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)",
            "details": "Note: For performance and bytecode compactness, most of the string operations are restricted to byte strings (7-bit ASCII), except where otherwise specified. Usage of byte string operations on charsets with runes spanning two or more bytes can lead to undefined behavior.",
            "errors": {
              "HexLengthInsufficient()": [
                {
                  "details": "The length of the output is too small to contain all the hex digits."
                }
              ],
              "StringNot7BitASCII()": [
                {
                  "details": "The input string must be a 7-bit ASCII."
                }
              ],
              "TooBigForSmallString()": [
                {
                  "details": "The length of the string is more than 32 bytes."
                }
              ]
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "ALPHANUMERIC_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "DIGITS_7_BIT_ASCII": {
                "details": "Lookup for '0123456789'."
              },
              "HEXDIGITS_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefABCDEF'."
              },
              "LETTERS_7_BIT_ASCII": {
                "details": "Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "LOWERCASE_7_BIT_ASCII": {
                "details": "Lookup for 'abcdefghijklmnopqrstuvwxyz'."
              },
              "NOT_FOUND": {
                "details": "The constant returned when the `search` is not found in the string."
              },
              "OCTDIGITS_7_BIT_ASCII": {
                "details": "Lookup for '01234567'."
              },
              "PRINTABLE_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'."
              },
              "PUNCTUATION_7_BIT_ASCII": {
                "details": "Lookup for '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'."
              },
              "UPPERCASE_7_BIT_ASCII": {
                "details": "Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "WHITESPACE_7_BIT_ASCII": {
                "details": "Lookup for ' \\t\\n\\r\\x0b\\x0c'."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122044d64d04dd0a352de493c946f66d2bfa5efcbfe4a0d84a5ebd4caf0aafc397e164736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xD6 0x4D DIV 0xDD EXP CALLDATALOAD 0x2D 0xE4 SWAP4 0xC9 CHAINID 0xF6 PUSH14 0x2BFA5EFCBFE4A0D84A5EBD4CAF0A 0xAF 0xC3 SWAP8 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "690:43561:31:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122044d64d04dd0a352de493c946f66d2bfa5efcbfe4a0d84a5ebd4caf0aafc397e164736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xD6 0x4D DIV 0xDD EXP CALLDATALOAD 0x2D 0xE4 SWAP4 0xC9 CHAINID 0xF6 PUSH14 0x2BFA5EFCBFE4A0D84A5EBD4CAF0A 0xAF 0xC3 SWAP8 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "690:43561:31:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"HexLengthInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringNot7BitASCII\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigForSmallString\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\",\"details\":\"Note: For performance and bytecode compactness, most of the string operations are restricted to byte strings (7-bit ASCII), except where otherwise specified. Usage of byte string operations on charsets with runes spanning two or more bytes can lead to undefined behavior.\",\"errors\":{\"HexLengthInsufficient()\":[{\"details\":\"The length of the output is too small to contain all the hex digits.\"}],\"StringNot7BitASCII()\":[{\"details\":\"The input string must be a 7-bit ASCII.\"}],\"TooBigForSmallString()\":[{\"details\":\"The length of the string is more than 32 bytes.\"}]},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ALPHANUMERIC_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"DIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789'.\"},\"HEXDIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefABCDEF'.\"},\"LETTERS_7_BIT_ASCII\":{\"details\":\"Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"LOWERCASE_7_BIT_ASCII\":{\"details\":\"Lookup for 'abcdefghijklmnopqrstuvwxyz'.\"},\"NOT_FOUND\":{\"details\":\"The constant returned when the `search` is not found in the string.\"},\"OCTDIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '01234567'.\"},\"PRINTABLE_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\"},\"PUNCTUATION_7_BIT_ASCII\":{\"details\":\"Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\"},\"UPPERCASE_7_BIT_ASCII\":{\"details\":\"Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"WHITESPACE_7_BIT_ASCII\":{\"details\":\"Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for converting numbers into strings and other string operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/utils/LibString.sol\":\"LibString\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for converting numbers into strings and other string operations.",
            "version": 1
          }
        }
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "SequenceProxyFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.",
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"An proxy factory that deploys upgradeable beacon proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/SequenceProxyFactory.sol\":\"SequenceProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "An proxy factory that deploys upgradeable beacon proxies.",
            "version": 1
          }
        }
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "ITransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "initialize(address,address,bytes)": "cf7a1d77"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"ITransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:33:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 2382,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payable": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_address_payablet_bytes": {
                  "entryPoint": 809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 2397,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 1796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1623,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 2190,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 5052,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 5003,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3321,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3820": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9589": {
                  "entryPoint": 3295,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 4604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 4809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95f": {
                  "entryPoint": 3491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3465,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 3021,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 4630,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 4256,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 673,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 2315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 4962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2908,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 89,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 338,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by": {
                  "entryPoint": 4373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 3557,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 248,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 18,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 424,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 288,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 3588,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 4404,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 931,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2303,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 508,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 2343,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1_to_bytes32": {
                  "entryPoint": 3560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 60,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 4376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 427,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 3930,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1445,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 919,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 891,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 708,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3905,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 4966,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 4279,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 611,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 1610,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__implementation": {
                  "entryPoint": 3993,
                  "id": 7902,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_admin": {
                  "entryPoint": 2170,
                  "id": 8231,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_changeAdmin": {
                  "entryPoint": 2226,
                  "id": 913,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 2791,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 1727,
                  "id": 8106,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1827,
                  "id": 8155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 1658,
                  "id": 8126,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchInitialize": {
                  "entryPoint": 1025,
                  "id": 7758,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 2071,
                  "id": 8189,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1985,
                  "id": 8221,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 107,
                  "id": 7836,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_fallback_8086": {
                  "entryPoint": 1132,
                  "id": 8086,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 3941,
                  "id": 1557,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1586": {
                  "entryPoint": 4322,
                  "id": 1586,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1442,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 382,
                  "id": 870,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 4487,
                  "id": 930,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 4448,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 2726,
                  "id": 7866,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation_7939": {
                  "entryPoint": 3973,
                  "id": 7939,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 1516,
                  "id": 7790,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 4223,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1485,
                  "id": 8243,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 5077,
                  "id": 1669,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 3149,
                  "id": 896,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBeacon": {
                  "entryPoint": 3632,
                  "id": 966,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 4696,
                  "id": 755,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeaconToAndCall": {
                  "entryPoint": 2445,
                  "id": 1004,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 4143,
                  "id": 770,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 2826,
                  "id": 800,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 4875,
                  "id": 1625,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 29,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 589,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3114,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 369,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1473,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 3046,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9589": {
                  "entryPoint": 3346,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 4655,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 4834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f95f": {
                  "entryPoint": 3516,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 569,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 466,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 461,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 574,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 516,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 511,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 2428,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 254,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 2355,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 332,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470": {
                  "entryPoint": 3217,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 4526,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3387,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3087,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 2361,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 533,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 243,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 4218,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 84,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:33:-:0;;;;;2853:63:9;1165:2219:33;2629:64:9;:::i;1165:2219:33:-;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;:::o;2210:701::-;2299:11;;:::i;:::-;:25;;2314:10;2322:1;2314:10;:::i;:::-;2299:25;:::i;:::-;;;:::i;:::-;;2295:561;;2340:16;;:::i;:::-;1165:2219;;;;2388:7;;;2413:66;;2425:54;;;2413:66;:::i;:::-;;;:::i;:::-;;2409:296;;2822:23;;;;;;;;;;;;:::i;:::-;;;;2409:296;2505:21;;:::i;:::-;2608:83;;;;;;1165:2219;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:8:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;1165:2219:33;;;;;3656:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;1165:2219:33:-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1365:274::-;1413:12;;:::i;:::-;;;;:::i;:::-;1607:4;1467:104;;1520:51;;1531:12;:8;;:12;1540:1;1531:12;:::i;:::-;;;;;:::i;:::-;1520:51;;:::i;:::-;;;;;:::i;:::-;1467:104;;;;;;:::i;:::-;;;:::i;:::-;;1592:5;1599:6;1607:4;;;:::i;:::-;1623:9;;:::i;:::-;;:::o;3518:1089:36:-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;1165:2219:33;;;;3668:7:36;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;1859:190:16:-;;:::o;1165:2219:33:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78:36;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;1645:352:33:-;;;1738:8;;:::i;:::-;:22;;1750:10;1758:1;1750:10;:::i;:::-;1738:22;:::i;:::-;;;:::i;:::-;;1734:174;;1930:5;1984;1930;;:::i;:::-;1978:4;1984:5;;;:::i;:::-;1645:352::o;1734:174::-;1874:23;2822;;;1874;;;;;;;;:::i;:::-;;;;2322:110:9;2407:17;;:::i;:::-;;:::i;1165:2219:33:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;5483:198:36:-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;1165:2219:33:-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;5792:216:36:-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;1165:2219:33:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254:36:-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;7029:93::-;7078:7;;:::i;:::-;7104:11;;;:::i;:::-;7097:18;:::o;1165:2219:33:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:8:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;1165:2219:33:-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;5728:313:8;;5845:9;;;:::i;:::-;5885;5870:25;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;5909:11;:4;:11;:::i;:::-;:15;;5923:1;5909:15;:::i;:::-;;;:::i;:::-;;:28;;;;;5728:313;5905:130;;;5728:313;;;:::o;5905:130::-;5982:35;:33;:18;:35;5990:9;5982:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;5953:71;5982:35;;;;;5905:130;6019:4;5953:71;;:::i;:::-;;5905:130;;;;5982:35;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;5909:28::-;5928:9;;5909:28;;;3079:302:33;3165:7;;:::i;:::-;3209:30;;;:::i;:::-;3253:14;:28;;3271:10;3279:1;3271:10;:::i;:::-;3253:28;:::i;:::-;;;:::i;:::-;;3249:80;;3345:29;;;:::i;:::-;3338:36;:::o;3249:80::-;3297:21;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2057:265:8;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;1165:2219:33;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:8:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:8:-;4719:66;;;:::i;:::-;4678:107;:::o;5054:371::-;5240:35;5054:371;5111:79;5119:29;5138:9;5119:29;:::i;:::-;5111:79;:::i;:::-;5240:35;:33;:18;5248:9;5240:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;5221:55;5200:150;5240:35;5360:58;5240:35;;;;;5054:371;5221:55;;:::i;:::-;5200:150;:::i;:::-;5360:46;:40;5387:12;;:::i;:::-;5360:40;:::i;:::-;:46;:58;:::i;:::-;5054:371::o;5240:35::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:13:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;884:140:35:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;1121:138:34:-;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1771:152:8:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;1165:2219:33:-;;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;1165:2219:33:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:13;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;1165:2219:33:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:8;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;1165:2219:33:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:13;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;1165:2219:33:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:13:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;1165:2219:33;;;;;;9324:20:13;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"TransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "BeaconProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b6102cf61002c82396102cf90f35b6026565b60405190565b600080fdfe608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C DUP3 CODECOPY PUSH2 0x2CF SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:34:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 235,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 281,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 112,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 22,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 529,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 76,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 100,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 501,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 64,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 150,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 454,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 662,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 623,
                  "id": 930,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 304,
                  "id": 7902,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 197,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 287,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 118,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "validator_revert_address": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 17,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:34:-:0;;;2407:17:9;;:::i;:::-;;:::i;806:967:34:-;;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;1121:138;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;806:967:34;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:8:-;4719:66;;;:::i;:::-;4678:107;:::o;4719:66::-;;;;:::o;:::-;806:967:34;;;;;4719:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1859:190:16:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/BeaconProxy.sol\":\"BeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "ERC1967Proxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61011561002c823961011590f35b6026565b60405190565b600080fdfe6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x2C DUP3 CODECOPY PUSH2 0x115 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:35:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "cleanup_bytes32": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 69,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 103,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 81,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 162,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 35,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 220,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 189,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 19,
                  "id": 7939,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 178,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 75,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 145,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 14,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:35:-:0;;;2407:17:9;;:::i;:::-;;:::i;758:269:35:-;;;:::o;884:140::-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;758:269:35;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1030:66::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;1859:190:16:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "ITransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "admin",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "changeAdmin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "upgradeToAndCall",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "admin()": "f851a440",
              "changeAdmin(address)": "8f283970",
              "implementation()": "5c60da1b",
              "upgradeTo(address)": "3659cfe6",
              "upgradeToAndCall(address,bytes)": "4f1ef286"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"ITransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b610db061002c8239610db090f35b6026565b60405190565b600080fdfe6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0xDB0 PUSH2 0x2C DUP3 CODECOPY PUSH2 0xDB0 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:36:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_payable": {
                  "entryPoint": 938,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1373,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 1338,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 953,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 1760,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 3342,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 3293,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 2739,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 3099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 2434,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 2226,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 2765,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1036,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 2878,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 556,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1873,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 3252,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2113,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 855,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 26,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 43,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 460,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 808,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 1686,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 1959,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 410,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 1990,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 892,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 1962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 817,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 2618,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 1012,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 984,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 1272,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2593,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 3256,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 2901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 629,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 55,
                  "id": 8086,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_changeAdmin": {
                  "entryPoint": 1796,
                  "id": 913,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 1651,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 739,
                  "id": 8106,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1139,
                  "id": 8155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 670,
                  "id": 8126,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 1529,
                  "id": 8189,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1443,
                  "id": 8221,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 543,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 2629,
                  "id": 1557,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1586": {
                  "entryPoint": 2944,
                  "id": 1586,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1628,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 504,
                  "id": 870,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 2034,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 1631,
                  "id": 7939,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 3000,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1729,
                  "id": 8243,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 3367,
                  "id": 1669,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 2366,
                  "id": 896,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 2831,
                  "id": 755,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 2440,
                  "id": 770,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 1877,
                  "id": 800,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 3165,
                  "id": 1625,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1717,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 2251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 2790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 3124,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 850,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 845,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1232,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 900,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 895,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2122,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 2661,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3033,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 2334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 365,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:36:-:0;;;;;2853:63:9;2857:4583:36;2629:64:9;:::i;2857:4583:36:-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;3518:1089::-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;2857:4583;;;;3668:7;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;2857:4583::-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:8:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;2857:4583:36;;;;;3656:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;2322:110:9:-;2407:17;;:::i;:::-;;:::i;2857:4583:36:-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;5483:198::-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;2857:4583::-;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;5792:216::-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;2857:4583::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254::-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;1859:190:16:-;;:::o;884:140:35:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2857:4583:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;2857:4583::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:8:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;2857:4583:36:-;;;:::o;2057:265:8:-;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;2857:4583:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;2857:4583:36:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:8:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;2857:4583:36:-;;;;:::o;1771:152:8:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;2857:4583:36:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:13:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;2857:4583:36:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:8;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;2857:4583:36:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:13;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;2857:4583:36:-;;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;2857:4583:36:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:13;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;2857:4583:36:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:13:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;2857:4583:36;;;;;;9324:20:13;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/ERC1155BaseToken.sol": {
        "ERC1155BaseToken": {
          "abi": [
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ArrayLengthsMismatch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC1155ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "TransferBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "TransferSingle",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "URI",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "owners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                }
              ],
              "name": "balanceOfBatch",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "balances",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "baseURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "batchBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "contractURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeBatchTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                }
              ],
              "name": "setBaseMetadataURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                }
              ],
              "name": "setContractName",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                }
              ],
              "name": "setContractURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "tokenSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "uri",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "ArrayLengthsMismatch()": [
                {
                  "details": "The lengths of the input arrays are not the same."
                }
              ],
              "InsufficientBalance()": [
                {
                  "details": "Insufficient balance."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the tokens."
                }
              ],
              "TransferToNonERC1155ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "TransferBatch(address,address,address,uint256[],uint256[])": {
                "details": "Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`."
              },
              "TransferSingle(address,address,address,uint256,uint256)": {
                "details": "Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`."
              },
              "URI(string,uint256)": {
                "details": "Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "balanceOf(address,uint256)": {
                "details": "Returns the amount of `id` owned by `owner`."
              },
              "balanceOfBatch(address[],uint256[])": {
                "details": "Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."
              },
              "batchBurn(uint256[],uint256[])": {
                "params": {
                  "amounts": "Array of the amount to be burned",
                  "tokenIds": "Array of token ids to burn"
                }
              },
              "burn(uint256,uint256)": {
                "params": {
                  "amount": "Amount of tokens to burn",
                  "tokenId": "Id of token to burn"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
                "details": "Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event."
              },
              "safeTransferFrom(address,address,uint256,uint256,bytes)": {
                "details": "Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."
              },
              "setBaseMetadataURI(string)": {
                "params": {
                  "tokenBaseURI": "New base URI of token's URI"
                }
              },
              "setContractName(string)": {
                "params": {
                  "tokenName": "New contract name"
                }
              },
              "setContractURI(string)": {
                "params": {
                  "tokenContractURI": "New contract URI of token's URI"
                }
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "uri(uint256)": {
                "details": "Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \"https://example.com/api/{id}.json\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "balanceOf(address,uint256)": "00fdd58e",
              "balanceOfBatch(address[],uint256[])": "4e1273f4",
              "baseURI()": "6c0360eb",
              "batchBurn(uint256[],uint256[])": "20ec271b",
              "burn(uint256,uint256)": "b390c0ab",
              "contractURI()": "e8a3d485",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
              "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
              "setApprovalForAll(address,bool)": "a22cb465",
              "setBaseMetadataURI(string)": "7e518ec8",
              "setContractName(string)": "0b5ee006",
              "setContractURI(string)": "938e3d7b",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7",
              "tokenSupply(uint256)": "2693ebf2",
              "totalSupply()": "18160ddd",
              "uri(uint256)": "0e89341c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"setContractName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"batchBurn(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Array of the amount to be burned\",\"tokenIds\":\"Array of token ids to burn\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to burn\",\"tokenId\":\"Id of token to burn\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"setBaseMetadataURI(string)\":{\"params\":{\"tokenBaseURI\":\"New base URI of token's URI\"}},\"setContractName(string)\":{\"params\":{\"tokenName\":\"New contract name\"}},\"setContractURI(string)\":{\"params\":{\"tokenContractURI\":\"New contract URI of token's URI\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"uri(uint256)\":{\"details\":\"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \\\"https://example.com/api/{id}.json\\\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidArrayLength()\":[{\"notice\":\"Invalid array input length.\"}]},\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"batchBurn(uint256[],uint256[])\":{\"notice\":\"Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\"},\"burn(uint256,uint256)\":{\"notice\":\"Allows the owner of the token to burn their tokens.\"},\"constructor\":{\"notice\":\"Deploy contract.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Update the base URI of token's URI.\"},\"setContractName(string)\":{\"notice\":\"Update the name of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"A standard base implementation of ERC-1155 for use in Sequence library contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/ERC1155BaseToken.sol\":\"ERC1155BaseToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// - The ERC1155 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The transfer functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                mstore(add(m, 0xc0), data.length)\\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, ids.length) } i {} {\\n                    i := sub(i, 0x20)\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0x40), ids.length)\\n                calldatacopy(add(m, 0x60), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x60, n))\\n                let o := add(add(m, n), 0x60)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Do the emit.\\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0xc0), ids.length)\\n                calldatacopy(add(m, 0xe0), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x80), add(0xc0, n))\\n                let o := add(add(m, n), 0xe0)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\\n                o := add(add(o, n), 0x20)\\n                mstore(o, data.length)\\n                calldatacopy(add(o, 0x20), data.offset, data.length)\\n                let nAll := add(0x104, add(data.length, add(n, n)))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let i := shl(5, ids.length)\\n            mstore(0x40, add(i, o))\\n            // Loop through all the `ids` and load the balances.\\n            for {} i {} {\\n                i := sub(i, 0x20)\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `from`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x306249cc3611727ffa9e15ec816282a60fd9629e5ea03ab1c780d638d1537c68\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/tokens/ERC1155/ERC1155BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\nimport { ERC1155, ERC1155Supply } from \\\"./extensions/supply/ERC1155Supply.sol\\\";\\n\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-1155 for use in Sequence library contracts.\\n */\\nabstract contract ERC1155BaseToken is ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string public name;\\n    string public baseURI;\\n    string public contractURI;\\n\\n    /**\\n     * Deploy contract.\\n     */\\n    constructor() { }\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner Owner address.\\n     * @param tokenName Token name.\\n     * @param tokenBaseURI Base URI for token metadata.\\n     * @param tokenContractURI Contract URI for token metadata.\\n     * @param implicitModeValidator Implicit session validator address.\\n     * @param implicitModeProjectId Implicit session project id.\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        name = tokenName;\\n        baseURI = tokenBaseURI;\\n        contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /// @inheritdoc ERC1155\\n    function uri(\\n        uint256 _id\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, LibString.toString(_id), \\\".json\\\"));\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        baseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the name of the contract.\\n     * @param tokenName New contract name\\n     */\\n    function setContractName(\\n        string memory tokenName\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        name = tokenName;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param tokenId Id of token to burn\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 tokenId, uint256 amount) public virtual {\\n        _burn(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\\n     * @param tokenIds Array of token ids to burn\\n     * @param amounts Array of the amount to be burned\\n     */\\n    function batchBurn(uint256[] memory tokenIds, uint256[] memory amounts) public virtual {\\n        super._batchBurn(msg.sender, tokenIds, amounts);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC1155Supply.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd8b3a384ddc6305b5663ddbb0622b1a46d01460412508a5c4e0933cf932af790\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC1155Supply, IERC1155SupplyFunctions } from \\\"./IERC1155Supply.sol\\\";\\n\\nimport { ERC1155 } from \\\"solady/tokens/ERC1155.sol\\\";\\n\\n/**\\n * An ERC-1155 extension that tracks token supply.\\n */\\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\\n\\n    // Current supply\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public tokenSupply;\\n\\n    /**\\n     * Mint _amount of tokens of a given id\\n     * @param _to The address to mint tokens to\\n     * @param _id Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual override {\\n        super._mint(_to, _id, _amount, _data);\\n\\n        totalSupply += _amount;\\n        tokenSupply[_id] += _amount;\\n    }\\n\\n    /**\\n     * Mint tokens for each ids in _ids\\n     * @param _to The address to mint tokens to\\n     * @param _ids Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override {\\n        super._batchMint(_to, _ids, _amounts, _data);\\n\\n        uint256 nMint = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nMint; i++) {\\n            totalAmount += _amounts[i];\\n            tokenSupply[_ids[i]] += _amounts[i];\\n        }\\n        totalSupply += totalAmount;\\n    }\\n\\n    /**\\n     * Burn _amount of tokens of a given token id\\n     * @param _from The address to burn tokens from\\n     * @param _id Token id to burn\\n     * @param _amount The amount to be burned\\n     */\\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual override {\\n        super._burn(_from, _id, _amount);\\n\\n        totalSupply -= _amount;\\n        tokenSupply[_id] -= _amount;\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from The address to burn tokens from\\n     * @param _ids Array of token ids to burn\\n     * @param _amounts Array of the amount to be burned\\n     */\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual override {\\n        super._batchBurn(_from, _ids, _amounts);\\n\\n        uint256 nBurn = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            tokenSupply[_ids[i]] -= _amounts[i];\\n            totalAmount += _amounts[i];\\n        }\\n        totalSupply -= totalAmount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155) returns (bool) {\\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2d8fb7c9d1dad11c794d157a148b27cd50b5a64db805a70fcfa131b7aeb72d5b\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidArrayLength()": [
                {
                  "notice": "Invalid array input length."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "batchBurn(uint256[],uint256[])": {
                "notice": "Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair."
              },
              "burn(uint256,uint256)": {
                "notice": "Allows the owner of the token to burn their tokens."
              },
              "constructor": {
                "notice": "Deploy contract."
              },
              "setBaseMetadataURI(string)": {
                "notice": "Update the base URI of token's URI."
              },
              "setContractName(string)": {
                "notice": "Update the name of the contract."
              },
              "setContractURI(string)": {
                "notice": "Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "A standard base implementation of ERC-1155 for use in Sequence library contracts.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol": {
        "ERC1155Supply": {
          "abi": [
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ArrayLengthsMismatch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC1155ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "TransferBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "TransferSingle",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "URI",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "owners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                }
              ],
              "name": "balanceOfBatch",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "balances",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeBatchTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "tokenSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "uri",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "ArrayLengthsMismatch()": [
                {
                  "details": "The lengths of the input arrays are not the same."
                }
              ],
              "InsufficientBalance()": [
                {
                  "details": "Insufficient balance."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the tokens."
                }
              ],
              "TransferToNonERC1155ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "TransferBatch(address,address,address,uint256[],uint256[])": {
                "details": "Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`."
              },
              "TransferSingle(address,address,address,uint256,uint256)": {
                "details": "Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`."
              },
              "URI(string,uint256)": {
                "details": "Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "kind": "dev",
            "methods": {
              "balanceOf(address,uint256)": {
                "details": "Returns the amount of `id` owned by `owner`."
              },
              "balanceOfBatch(address[],uint256[])": {
                "details": "Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
                "details": "Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event."
              },
              "safeTransferFrom(address,address,uint256,uint256,bytes)": {
                "details": "Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "uri(uint256)": {
                "details": "Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \"https://example.com/api/{id}.json\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "balanceOf(address,uint256)": "00fdd58e",
              "balanceOfBatch(address[],uint256[])": "4e1273f4",
              "isApprovedForAll(address,address)": "e985e9c5",
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
              "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "tokenSupply(uint256)": "2693ebf2",
              "totalSupply()": "18160ddd",
              "uri(uint256)": "0e89341c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"uri(uint256)\":{\"details\":\"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \\\"https://example.com/api/{id}.json\\\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidArrayLength()\":[{\"notice\":\"Invalid array input length.\"}]},\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"An ERC-1155 extension that tracks token supply.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol\":\"ERC1155Supply\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// - The ERC1155 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The transfer functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                mstore(add(m, 0xc0), data.length)\\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, ids.length) } i {} {\\n                    i := sub(i, 0x20)\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0x40), ids.length)\\n                calldatacopy(add(m, 0x60), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x60, n))\\n                let o := add(add(m, n), 0x60)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Do the emit.\\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0xc0), ids.length)\\n                calldatacopy(add(m, 0xe0), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x80), add(0xc0, n))\\n                let o := add(add(m, n), 0xe0)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\\n                o := add(add(o, n), 0x20)\\n                mstore(o, data.length)\\n                calldatacopy(add(o, 0x20), data.offset, data.length)\\n                let nAll := add(0x104, add(data.length, add(n, n)))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let i := shl(5, ids.length)\\n            mstore(0x40, add(i, o))\\n            // Loop through all the `ids` and load the balances.\\n            for {} i {} {\\n                i := sub(i, 0x20)\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `from`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x306249cc3611727ffa9e15ec816282a60fd9629e5ea03ab1c780d638d1537c68\",\"license\":\"MIT\"},\"src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC1155Supply, IERC1155SupplyFunctions } from \\\"./IERC1155Supply.sol\\\";\\n\\nimport { ERC1155 } from \\\"solady/tokens/ERC1155.sol\\\";\\n\\n/**\\n * An ERC-1155 extension that tracks token supply.\\n */\\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\\n\\n    // Current supply\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public tokenSupply;\\n\\n    /**\\n     * Mint _amount of tokens of a given id\\n     * @param _to The address to mint tokens to\\n     * @param _id Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual override {\\n        super._mint(_to, _id, _amount, _data);\\n\\n        totalSupply += _amount;\\n        tokenSupply[_id] += _amount;\\n    }\\n\\n    /**\\n     * Mint tokens for each ids in _ids\\n     * @param _to The address to mint tokens to\\n     * @param _ids Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override {\\n        super._batchMint(_to, _ids, _amounts, _data);\\n\\n        uint256 nMint = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nMint; i++) {\\n            totalAmount += _amounts[i];\\n            tokenSupply[_ids[i]] += _amounts[i];\\n        }\\n        totalSupply += totalAmount;\\n    }\\n\\n    /**\\n     * Burn _amount of tokens of a given token id\\n     * @param _from The address to burn tokens from\\n     * @param _id Token id to burn\\n     * @param _amount The amount to be burned\\n     */\\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual override {\\n        super._burn(_from, _id, _amount);\\n\\n        totalSupply -= _amount;\\n        tokenSupply[_id] -= _amount;\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from The address to burn tokens from\\n     * @param _ids Array of token ids to burn\\n     * @param _amounts Array of the amount to be burned\\n     */\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual override {\\n        super._batchBurn(_from, _ids, _amounts);\\n\\n        uint256 nBurn = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            tokenSupply[_ids[i]] -= _amounts[i];\\n            totalAmount += _amounts[i];\\n        }\\n        totalSupply -= totalAmount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155) returns (bool) {\\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2d8fb7c9d1dad11c794d157a148b27cd50b5a64db805a70fcfa131b7aeb72d5b\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidArrayLength()": [
                {
                  "notice": "Invalid array input length."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "An ERC-1155 extension that tracks token supply.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol": {
        "IERC1155Supply": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidArrayLength",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidArrayLength()\":[{\"notice\":\"Invalid array input length.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":\"IERC1155Supply\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidArrayLength()": [
                {
                  "notice": "Invalid array input length."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC1155SupplyFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "tokenSupply(uint256)": {
                "params": {
                  "tokenId": "The ERC1155 token id."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "tokenSupply(uint256)": "2693ebf2",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenSupply(uint256)\":{\"params\":{\"tokenId\":\"The ERC1155 token id.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenSupply(uint256)\":{\"notice\":\"Returns the total supply of a given ERC1155 token.\"},\"totalSupply()\":{\"notice\":\"Returns the total supply of ERC1155 tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":\"IERC1155SupplyFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "tokenSupply(uint256)": {
                "notice": "Returns the total supply of a given ERC1155 token."
              },
              "totalSupply()": {
                "notice": "Returns the total supply of ERC1155 tokens."
              }
            },
            "version": 1
          }
        },
        "IERC1155SupplySignals": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidArrayLength",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidArrayLength()\":[{\"notice\":\"Invalid array input length.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":\"IERC1155SupplySignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidArrayLength()": [
                {
                  "notice": "Invalid array input length."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/presets/items/ERC1155Items.sol": {
        "ERC1155Items": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ArrayLengthsMismatch",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InsufficientBalance",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidArrayLength",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC1155ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "TransferBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "TransferSingle",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "URI",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "owners",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                }
              ],
              "name": "balanceOfBatch",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "balances",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "baseURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "batchBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "batchMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "contractURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeBatchTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                }
              ],
              "name": "setBaseMetadataURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                }
              ],
              "name": "setContractName",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                }
              ],
              "name": "setContractURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "tokenSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_id",
                  "type": "uint256"
                }
              ],
              "name": "uri",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "ArrayLengthsMismatch()": [
                {
                  "details": "The lengths of the input arrays are not the same."
                }
              ],
              "InsufficientBalance()": [
                {
                  "details": "Insufficient balance."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the tokens."
                }
              ],
              "TransferToNonERC1155ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "TransferBatch(address,address,address,uint256[],uint256[])": {
                "details": "Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`."
              },
              "TransferSingle(address,address,address,uint256,uint256)": {
                "details": "Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`."
              },
              "URI(string,uint256)": {
                "details": "Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "balanceOf(address,uint256)": {
                "details": "Returns the amount of `id` owned by `owner`."
              },
              "balanceOfBatch(address[],uint256[])": {
                "details": "Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."
              },
              "batchBurn(uint256[],uint256[])": {
                "params": {
                  "amounts": "Array of the amount to be burned",
                  "tokenIds": "Array of token ids to burn"
                }
              },
              "batchMint(address,uint256[],uint256[],bytes)": {
                "params": {
                  "amounts": "Amounts of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenIds": "Token IDs to mint."
                }
              },
              "burn(uint256,uint256)": {
                "params": {
                  "amount": "Amount of tokens to burn",
                  "tokenId": "Id of token to burn"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "initialize(address,string,string,string,address,uint96,address,bytes32)": {
                "details": "This should be called immediately after deployment.",
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "owner": "Owner address",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenBaseURI": "Base URI for token metadata",
                  "tokenContractURI": "Contract URI for token metadata",
                  "tokenName": "Token name"
                }
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "mint(address,uint256,uint256,bytes)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token ID to mint."
                }
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
                "details": "Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event."
              },
              "safeTransferFrom(address,address,uint256,uint256,bytes)": {
                "details": "Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."
              },
              "setBaseMetadataURI(string)": {
                "params": {
                  "tokenBaseURI": "New base URI of token's URI"
                }
              },
              "setContractName(string)": {
                "params": {
                  "tokenName": "New contract name"
                }
              },
              "setContractURI(string)": {
                "params": {
                  "tokenContractURI": "New contract URI of token's URI"
                }
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "uri(uint256)": {
                "details": "Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \"https://example.com/api/{id}.json\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 47,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constructor_ERC1155Items": {
                  "entryPoint": 58,
                  "id": 8749,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 53,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60a060405234602b57600e603a565b6014602f565b614b866100418239608051816125da0152614b8690f35b6035565b60405190565b600080fd5b3360805256fe60806040526004361015610013575b611806565b61001e60003561024c565b8062fdd58e1461024757806301ffc9a71461024257806304634d8d1461023d57806306fdde03146102385780630b5ee006146102335780630bb310de1461022e5780630e89341c1461022957806318160ddd1461022457806320ec271b1461021f578063248a9ca31461021a5780632693ebf2146102155780632a55205a146102105780632eb2c2d61461020b5780632f2ff15d1461020657806336568abe146102015780634e1273f4146101fc5780635944c753146101f75780636c0360eb146101f2578063731133e9146101ed5780637e518ec8146101e85780638ff83ac1146101e35780639010d07c146101de57806391d14854146101d9578063938e3d7b146101d45780639d043a66146101cf578063a217fddf146101ca578063a22cb465146101c5578063b390c0ab146101c0578063b48ab8b6146101bb578063ca15c873146101b6578063d547741f146101b1578063e8a3d485146101ac578063e985e9c5146101a7578063ed4c2ac7146101a25763f242432a0361000e576117cc565b611728565b6116f2565b61168f565b61164b565b611616565b6115df565b61151b565b6114e7565b611460565b6113ed565b611325565b6112ef565b6112b9565b611238565b61113b565b611104565b610ff3565b610faf565b610f3b565b610dc7565b610d93565b610d28565b610bcb565b610b37565b610ab1565b610a14565b6108e5565b610875565b610823565b6107d1565b6106bf565b610465565b6103c7565b61031a565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61027b90610267565b90565b61028781610272565b0361028e57565b600080fd5b905035906102a08261027e565b565b90565b6102ae816102a2565b036102b557565b600080fd5b905035906102c7826102a5565b565b91906040838203126102f257806102e66102ef9260008601610293565b936020016102ba565b90565b61025d565b610300906102a2565b9052565b9190610318906000602085019401906102f7565b565b3461034b576103476103366103303660046102c9565b90611810565b61033e610252565b91829182610304565b0390f35b610258565b63ffffffff60e01b1690565b61036581610350565b0361036c57565b600080fd5b9050359061037e8261035c565b565b9060208282031261039a5761039791600001610371565b90565b61025d565b151590565b6103ad9061039f565b9052565b91906103c5906000602085019401906103a4565b565b346103f7576103f36103e26103dd366004610380565b611839565b6103ea610252565b918291826103b1565b0390f35b610258565b6bffffffffffffffffffffffff1690565b610416816103fc565b0361041d57565b600080fd5b9050359061042f8261040d565b565b919060408382031261045a578061044e6104579260008601610293565b93602001610422565b90565b61025d565b60000190565b346104945761047e610478366004610431565b906118db565b610486610252565b806104908161045f565b0390f35b610258565b60009103126104a457565b61025d565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156104f5575b60208310146104f057565b6104bf565b91607f16916104e5565b60209181520190565b600052602060002090565b906000929180549061052e610527836104d5565b80946104ff565b91600181169081600014610587575060011461054a575b505050565b6105579192939450610508565b916000925b81841061056f5750500190388080610545565b6001816020929593955484860152019101929061055c565b92949550505060ff1916825215156020020190388080610545565b906105ac91610513565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906105d9906105af565b810190811067ffffffffffffffff8211176105f357604052565b6105b9565b9061061861061192610608610252565b938480926105a2565b03836105cf565b565b9060001061062e5761062b906105f8565b90565b6104a9565b610640600860009061061a565b90565b5190565b60209181520190565b60005b838110610664575050906000910152565b806020918301518185015201610653565b61069461069d6020936106a29361068b81610643565b93848093610647565b95869101610650565b6105af565b0190565b6106bc9160208201916000818403910152610675565b90565b346106ef576106cf366004610499565b6106eb6106da610633565b6106e2610252565b918291826106a6565b0390f35b610258565b600080fd5b600080fd5b9061071161070a610252565b92836105cf565b565b67ffffffffffffffff81116107315761072d6020916105af565b0190565b6105b9565b90826000939282370152565b9092919261075761075282610713565b6106fe565b938185526020850190828401116107735761077192610736565b565b6106f9565b9080601f830112156107965781602061079393359101610742565b90565b6106f4565b906020828203126107cc57600082013567ffffffffffffffff81116107c7576107c49201610778565b90565b610262565b61025d565b346107ff576107e96107e436600461079b565b611b1c565b6107f1610252565b806107fb8161045f565b0390f35b610258565b9060208282031261081e5761081b91600001610293565b90565b61025d565b346108515761083b610836366004610804565b611bf9565b610843610252565b8061084d8161045f565b0390f35b610258565b906020828203126108705761086d916000016102ba565b90565b61025d565b346108a5576108a161089061088b366004610856565b611d23565b610898610252565b918291826106a6565b0390f35b610258565b1c90565b90565b6108c19060086108c693026108aa565b6108ae565b90565b906108d491546108b1565b90565b6108e26000806108c9565b90565b34610915576108f5366004610499565b6109116109006108d7565b610908610252565b91829182610304565b0390f35b610258565b67ffffffffffffffff81116109325760208091020190565b6105b9565b600080fd5b9092919261095161094c8261091a565b6106fe565b938185526020808601920283019281841161098e57915b8383106109755750505050565b6020809161098384866102ba565b815201920191610968565b610937565b9080601f830112156109b1578160206109ae9335910161093c565b90565b6106f4565b919091604081840312610a0f57600081013567ffffffffffffffff8111610a0a57836109e3918301610993565b92602082013567ffffffffffffffff8111610a0557610a029201610993565b90565b610262565b610262565b61025d565b34610a4357610a2d610a273660046109b6565b90611d6d565b610a35610252565b80610a3f8161045f565b0390f35b610258565b90565b610a5481610a48565b03610a5b57565b600080fd5b90503590610a6d82610a4b565b565b90602082820312610a8957610a8691600001610a60565b90565b61025d565b610a9790610a48565b9052565b9190610aaf90600060208501940190610a8e565b565b34610ae157610add610acc610ac7366004610a6f565b611dcf565b610ad4610252565b91829182610a9b565b0390f35b610258565b90565b610afd610af8610b02926102a2565b610ae6565b6102a2565b90565b90610b0f90610ae9565b600052602052604060002090565b610b3490610b2f600191600092610b05565b6108c9565b90565b34610b6757610b63610b52610b4d366004610856565b610b1d565b610b5a610252565b91829182610304565b0390f35b610258565b9190604083820312610b955780610b89610b9292600086016102ba565b936020016102ba565b90565b61025d565b610ba390610272565b9052565b916020610bc9929493610bc260408201966000830190610b9a565b01906102f7565b565b34610bfd57610be4610bde366004610b6c565b90611fc1565b90610bf9610bf0610252565b92839283610ba7565b0390f35b610258565b600080fd5b909182601f83011215610c415781359167ffffffffffffffff8311610c3c576020019260208302840111610c3757565b610937565b610c02565b6106f4565b909182601f83011215610c805781359167ffffffffffffffff8311610c7b576020019260018302840111610c7657565b610937565b610c02565b6106f4565b9160a083830312610d2357610c9d8260008501610293565b92610cab8360208301610293565b92604082013567ffffffffffffffff8111610d1e5781610ccc918401610c07565b929093606082013567ffffffffffffffff8111610d195783610cef918401610c07565b929093608082013567ffffffffffffffff8111610d1457610d109201610c46565b9091565b610262565b610262565b610262565b61025d565b34610d6057610d4a610d3b366004610c85565b9695909594919493929361209c565b610d52610252565b80610d5c8161045f565b0390f35b610258565b9190604083820312610d8e5780610d82610d8b9260008601610a60565b93602001610293565b90565b61025d565b34610dc257610dac610da6366004610d65565b90612338565b610db4610252565b80610dbe8161045f565b0390f35b610258565b34610df657610de0610dda366004610d65565b906123ee565b610de8610252565b80610df28161045f565b0390f35b610258565b909182601f83011215610e355781359167ffffffffffffffff8311610e30576020019260208302840111610e2b57565b610937565b610c02565b6106f4565b9091604082840312610e9557600082013567ffffffffffffffff8111610e905783610e66918401610dfb565b929093602082013567ffffffffffffffff8111610e8b57610e879201610c07565b9091565b610262565b610262565b61025d565b5190565b60209181520190565b60200190565b610eb6906102a2565b9052565b90610ec781602093610ead565b0190565b60200190565b90610eee610ee8610ee184610e9a565b8093610e9e565b92610ea7565b9060005b818110610eff5750505090565b909192610f18610f126001928651610eba565b94610ecb565b9101919091610ef2565b610f389160208201916000818403910152610ed1565b90565b34610f6f57610f6b610f5a610f51366004610e3a565b92919091612422565b610f62610252565b91829182610f22565b0390f35b610258565b9091606082840312610faa57610fa7610f9084600085016102ba565b93610f9e8160208601610293565b93604001610422565b90565b61025d565b34610fde57610fc8610fc2366004610f74565b916124bf565b610fd0610252565b80610fda8161045f565b0390f35b610258565b610ff0600960009061061a565b90565b3461102357611003366004610499565b61101f61100e610fe3565b611016610252565b918291826106a6565b0390f35b610258565b67ffffffffffffffff8111611046576110426020916105af565b0190565b6105b9565b9092919261106061105b82611028565b6106fe565b9381855260208501908284011161107c5761107a92610736565b565b6106f9565b9080601f8301121561109f5781602061109c9335910161104b565b90565b6106f4565b906080828203126110ff576110bc8160008401610293565b926110ca82602085016102ba565b926110d883604083016102ba565b92606082013567ffffffffffffffff81116110fa576110f79201611081565b90565b610262565b61025d565b34611136576111206111173660046110a4565b9291909161251e565b611128610252565b806111328161045f565b0390f35b610258565b346111695761115361114e36600461079b565b612554565b61115b610252565b806111658161045f565b0390f35b610258565b919061010083820312611233576111888160008501610293565b92602081013567ffffffffffffffff811161122e57826111a9918301610778565b92604082013567ffffffffffffffff811161122957836111ca918401610778565b92606083013567ffffffffffffffff811161122457816111eb918501610778565b926111f98260808301610293565b9261122161120a8460a08501610422565b936112188160c08601610293565b9360e001610a60565b90565b610262565b610262565b610262565b61025d565b346112705761125a61124b36600461116e565b969590959491949392936125cb565b611262610252565b8061126c8161045f565b0390f35b610258565b919060408382031261129e578061129261129b9260008601610a60565b936020016102ba565b90565b61025d565b91906112b790600060208501940190610b9a565b565b346112ea576112e66112d56112cf366004611275565b90612691565b6112dd610252565b918291826112a3565b0390f35b610258565b346113205761131c61130b611305366004610d65565b906126e9565b611313610252565b918291826103b1565b0390f35b610258565b346113535761133d61133836600461079b565b61273c565b611345610252565b8061134f8161045f565b0390f35b610258565b600080fd5b908160c091031261136b5790565b611358565b908160e091031261137e5790565b611358565b916060838303126113e85761139b8260008501610293565b92602081013567ffffffffffffffff81116113e357836113bc91830161135d565b92604082013567ffffffffffffffff81116113de576113db9201611370565b90565b610262565b610262565b61025d565b3461141e5761141a611409611403366004611383565b91612a9a565b611411610252565b91829182610a9b565b0390f35b610258565b90565b60001b90565b61144061143b61144592611423565b611426565b610a48565b90565b611452600061142c565b90565b61145d611448565b90565b3461149057611470366004610499565b61148c61147b611455565b611483610252565b91829182610a9b565b0390f35b610258565b61149e8161039f565b036114a557565b600080fd5b905035906114b782611495565b565b91906040838203126114e257806114d66114df9260008601610293565b936020016114aa565b90565b61025d565b34611516576115006114fa3660046114b9565b90612b3b565b611508610252565b806115128161045f565b0390f35b610258565b3461154a5761153461152e366004610b6c565b90612b8b565b61153c610252565b806115468161045f565b0390f35b610258565b906080828203126115da576115678160008401610293565b92602083013567ffffffffffffffff81116115d55782611588918501610993565b92604081013567ffffffffffffffff81116115d057836115a9918301610993565b92606082013567ffffffffffffffff81116115cb576115c89201611081565b90565b610262565b610262565b610262565b61025d565b34611611576115fb6115f236600461154f565b92919091612bc8565b611603610252565b8061160d8161045f565b0390f35b610258565b346116465761164261163161162c366004610a6f565b612bd6565b611639610252565b91829182610304565b0390f35b610258565b3461167a5761166461165e366004610d65565b90612c26565b61166c610252565b806116768161045f565b0390f35b610258565b61168c600a60009061061a565b90565b346116bf5761169f366004610499565b6116bb6116aa61167f565b6116b2610252565b918291826106a6565b0390f35b610258565b91906040838203126116ed57806116e16116ea9260008601610293565b93602001610293565b90565b61025d565b346117235761171f61170e6117083660046116c4565b90612c32565b611716610252565b918291826103b1565b0390f35b610258565b346117565761174061173b366004610a6f565b612cc1565b611748610252565b806117528161045f565b0390f35b610258565b91909160a0818403126117c7576117758360008301610293565b926117838160208401610293565b9261179182604085016102ba565b9261179f83606083016102ba565b92608082013567ffffffffffffffff81116117c2576117be9201610c46565b9091565b610262565b61025d565b34611801576117eb6117df36600461175b565b94939093929192612ccc565b6117f3610252565b806117fd8161045f565b0390f35b610258565b600080fd5b600090565b61181861180b565b50679a31110384e0b0c960205260145260005260406000205490565b600090565b611841611834565b5063c79b8b5f60e01b61185c61185683610350565b91610350565b148015611880575b908115611870575b5090565b61187a9150612e9b565b3861186c565b5061188a81612e9b565b611864565b7f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb01190565b906118cd916118c86118c361188f565b612edf565b6118cf565b565b906118d9916130f9565b565b906118e5916118b3565b565b7fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a590565b6119249061191f61191a6118e7565b612edf565b611b0f565b565b601f602091010490565b1b90565b9190600861195091029161194a60001984611930565b92611930565b9181191691161790565b90565b919061197361196e61197b93610ae9565b61195a565b908354611934565b9055565b6119919161198b61180b565b9161195d565b565b5b81811061199f575050565b806119ad600060019361197f565b01611994565b9190601f81116119c3575b505050565b6119cf6119f493610508565b9060206119db84611926565b830193106119fc575b6119ed90611926565b0190611993565b3880806119be565b91506119ed819290506119e4565b90611a1b90600019906008026108aa565b191690565b81611a2a91611a0a565b906002021790565b90611a3c81610643565b9067ffffffffffffffff8211611afe57611a6082611a5a85546104d5565b856119b3565b602090601f8311600114611a9557918091611a8493600092611a89575b5050611a20565b90555b565b90915001513880611a7d565b601f19831691611aa485610508565b9260005b818110611ae657509160029391856001969410611acc575b50505002019055611a87565b611adc910151601f841690611a0a565b9055388080611ac0565b91936020600181928787015181550195019201611aa8565b6105b9565b90611b0d91611a32565b565b611b1a906008611b03565b565b611b259061190b565b565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b611b6490611b5f611b5a611b27565b612edf565b611be4565b565b611b7a611b75611b7f92610267565b610ae6565b610267565b90565b611b8b90611b66565b90565b611b9790611b82565b90565b90611bab60018060a01b0391611426565b9181191691161790565b611bbe90611b82565b90565b90565b90611bd9611bd4611be092611bb5565b611bc1565b8254611b9a565b9055565b611bf0611bf791611b8e565b6006611bc4565b565b611c0290611b4b565b565b606090565b905090565b9060009291805490611c29611c22836104d5565b8094611c09565b91600181169081600014611c7d5750600114611c45575b505050565b611c529192939450610508565b6000905b838210611c695750500190388080611c40565b600181602092548486015201910190611c56565b92949550505060ff19168252801515020190388080611c40565b611cbc611cb392602092611caa81610643565b94858093611c09565b93849101610650565b0190565b60007f2e6a736f6e000000000000000000000000000000000000000000000000000000910152565b611cf460058092611c09565b611cfd81611cc0565b0190565b91611d12611d1d93611d1893611c0e565b90611c97565b611ce8565b90565b90565b611d6a90611d2f611c04565b50611d65611d3e600992613173565b91611d56611d4a610252565b93849260208401611d01565b602082018103825203826105cf565b611d20565b90565b611d7a91339190916132c1565b565b600090565b611d8a90610a48565b90565b90611d9790611d81565b600052602052604060002090565b60001c90565b90565b611dba611dbf91611da5565b611dab565b90565b611dcc9054611dae565b90565b6001611de8611dee92611de0611d7c565b506004611d8d565b01611dc2565b90565b600090565b90611e0090610ae9565b600052602052604060002090565b60018060a01b031690565b611e25611e2a91611da5565b611e0e565b90565b611e379054611e19565b90565b90611e4490610272565b9052565b60a01c90565b6bffffffffffffffffffffffff1690565b611e6b611e7091611e48565b611e4e565b90565b611e7d9054611e5f565b90565b90611e8a906103fc565b9052565b611e9860406106fe565b90565b90611ed2611ec96000611eac611e8e565b94611ec3611ebb838301611e2d565b838801611e3a565b01611e73565b60208401611e80565b565b611edd90611e9b565b90565b611eea9051610272565b90565b611f01611efc611f0692611423565b610ae6565b610267565b90565b611f1290611eed565b90565b611f1f90516103fc565b90565b611f36611f31611f3b926103fc565b610ae6565b6102a2565b90565b634e487b7160e01b600052601160045260246000fd5b611f63611f69919392936102a2565b926102a2565b91611f758382026102a2565b928184041490151715611f8457565b611f3e565b634e487b7160e01b600052601260045260246000fd5b611fab611fb1916102a2565b916102a2565b908115611fbc570490565b611f89565b611fe4611fe991939293611fd3611df1565b50611fdc61180b565b506003611df6565b611ed4565b91611ff660008401611ee0565b61201161200b6120066000611f09565b610272565b91610272565b1461205e575b600061205361203d61205a9361203761203260208901611f15565b611f22565b90611f54565b61204d6120486133cc565b611f22565b90611f9f565b9301611ee0565b9190565b915061205a600061205361203d6120756002611ed4565b959350505050612017565b61208b91369161093c565b90565b61209991369161104b565b90565b9693969590949192956120ad6133e3565b6122e6575b8287036122d85760601b679a31110384e0b0c9179460601b679a31110384e0b0c91791856020528560601c958360601c9384156122ca578733036122ae575b8860051b805b61224e57505050828660207f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb604051604081528b8d8160051b948286936040860152838d6060870137836060018286015260608486010190815201376080339380010190a46121646133f1565b612231575b50813b61217a575b50505050505050565b602080809786946000528060c06040519b8c9a63bc197c818c5233868d015260408c015260a060608c01528a8360051b998a9586948593015260e08d01378160c00160808c015260e0828c010192835284830137818060e0010160a08a01520101838152013780010161010401601c60405101600080515af115612222575b63bc197c8160e01b9051036122145738808080808080612171565b639c05499b6000526004601cfd5b3d156121f9573d6000823e3d90fd5b612248908690849086908a8c919287948b966133ff565b38612169565b60209003808b01358360205281880135600052604060002080548083116122a0578290039055826020526040600020908154908101908110612292578291556120f7565b6301336cea6000526004601cfd5b63f4d678b86000526004601cfd5b336000526034600c20546120f157634b6e7f186000526004601cfd5b63ea553b346000526004601cfd5b633b800a466000526004601cfd5b61230984886123038b87906122fd88948c96612080565b50612080565b5061208e565b506120b2565b9061232a9161232561232082611dcf565b612edf565b61232c565b565b9061233691613449565b565b906123429161230f565b565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b61239f602f604092610647565b6123a881612344565b0190565b6123c29060208101906000818303910152612392565b90565b156123cc57565b6123d4610252565b62461bcd60e51b8152806123ea600482016123ac565b0390fd5b9061241b916124168261241061240a612405613473565b610272565b91610272565b146123c5565b613480565b565b606090565b9392919061242e61241d565b5082036124855760405193828552602085019260051b808481016040525b6124565750505050565b602090038082013560601b679a31110384e0b0c91760205280830135600052806040600020548186015261244c565b633b800a466000526004601cfd5b906124ae92916124a96124a461188f565b612edf565b6124b0565b565b916124bd9291909161352e565b565b906124ca9291612493565b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b9061250c9392916125076125026124cc565b612edf565b61250e565b565b9161251c93919091926135b1565b565b9061252a9392916124f0565b565b6125459061254061253b6118e7565b612edf565b612547565b565b612552906009611b03565b565b61255d9061252c565b565b60ff1690565b61257161257691611da5565b61255f565b90565b6125839054612565565b90565b9061259260ff91611426565b9181191691161790565b6125a59061039f565b90565b90565b906125c06125bb6125c79261259c565b6125a8565b8254612586565b9055565b959694939294336126046125fe7f0000000000000000000000000000000000000000000000000000000000000000610272565b91610272565b14158015612666575b6126495761263b9761262e966126299489949091929394613607565b6130f9565b6126366124cc565b613449565b6126476001600b6125ab565b565b600063f92ee8a960e01b8152806126626004820161045f565b0390fd5b50612671600b612579565b61260d565b9061268090611d81565b600052602052604060002090565b90565b906126b16126ac6126b6936126a4611df1565b506005612676565b61268e565b6136a0565b90565b6126c290611b66565b90565b6126ce906126b9565b90565b906126db906126c5565b600052602052604060002090565b61271191600061270661270c936126fe611834565b506004611d8d565b016126d1565b612579565b90565b61272d906127286127236118e7565b612edf565b61272f565b565b61273a90600a611b03565b565b61274590612714565b565b60018060a01b031690565b61275e61276391611da5565b612747565b90565b6127709054612752565b90565b61277c906126b9565b90565b60e01b90565b9050519061279282610a4b565b565b906020828203126127ae576127ab91600001612785565b90565b61025d565b506127c2906020810190610293565b90565b6127ce90610272565b9052565b506127e1906020810190610371565b90565b6127ed90610350565b9052565b50612800906020810190610a60565b90565b61280c90610a48565b9052565b600080fd5b600080fd5b600080fd5b903560016020038236030381121561286057016020813591019167ffffffffffffffff821161285b57600182023603831361285657565b612815565b612810565b61281a565b60209181520190565b9190612888816128818161288d95612865565b8095610736565b6105af565b0190565b90356001604003823603038112156128a7570190565b61281a565b90356001602003823603038112156128ed57016020813591019167ffffffffffffffff82116128e85760018202360383136128e357565b612815565b612810565b61281a565b919061290c8161290581612911956104ff565b8095610736565b6105af565b0190565b67ffffffffffffffff1690565b61292b81612915565b0361293257565b600080fd5b9050359061294482612922565b565b50612955906020810190612937565b90565b61296190612915565b9052565b906129a390602061299b6129916040840161298360008801886128ac565b9086830360008801526128f2565b9482810190612946565b910190612958565b90565b612a5091612a42612a3760c083016129ce6129c460008701876127b3565b60008601906127c5565b6129e86129de60208701876127d2565b60208601906127e4565b612a026129f860408701876127f1565b6040860190612803565b612a1c612a1260608701876127f1565b6060860190612803565b612a29608086018661281f565b90858303608087015261286e565b9260a0810190612891565b9060a0818403910152612965565b90565b939290612a7f604091612a8794612a72606089019260008a0190610b9a565b87820360208901526129a6565b940190610a8e565b565b612a91610252565b3d6000823e3d90fd5b9150602090612aa7611d7c565b50612aba612ab56006612766565b612773565b612ae6633808a90b949294612af1612ad26007611dc2565b612ada610252565b9788968795869561277f565b855260048501612a53565b03915afa908115612b3657600091612b08575b5090565b612b29915060203d8111612b2f575b612b2181836105cf565b810190612794565b38612b04565b503d612b17565b612a89565b901515679a31110384e0b0c96020523360145281600052806034600c205560005260601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3565b612b9891339190916136d9565b565b90612bb6939291612bb1612bac6124cc565b612edf565b612bb8565b565b91612bc6939190919261372b565b565b90612bd4939291612b9a565b565b612bf5612bf0612bfa92612be861180b565b506005612676565b61268e565b613814565b90565b90612c1891612c13612c0e82611dcf565b612edf565b612c1a565b565b90612c2491613480565b565b90612c3091612bfd565b565b612c3a611834565b50679a31110384e0b0c96020526014526000526034600c205490565b612c6f90612c6a612c65611b27565b612edf565b612cb4565b565b90612c7e60001991611426565b9181191691161790565b612c9190611da5565b90565b90612ca9612ca4612cb092611d81565b612c88565b8254612c71565b9055565b612cbf906007612c94565b565b612cca90612c56565b565b94909194612cd86133e3565b612e76575b60601b679a31110384e0b0c9179160601b679a31110384e0b0c917918060205260601c928260601c928315612e6857843303612e4c575b8660005260406000208054808411612e3e5783900390556020526040600020805490828201918210612e305755806020528284337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a4612d766133f1565b612e0b575b823b612d8a575b505050505050565b602094829160405197889663f23a6e618852338989015260408801526060870152608086015260a0808601528160c086015260e085013760c401906000601c8401915af115612dfc575b63f23a6e6160e01b905103612dee57388080808080612d82565b639c05499b6000526004601cfd5b3d15612dd4573d6000823e3d90fd5b612e1486613834565b50612e1e81613834565b50612e2a85839061208e565b50612d7b565b6301336cea6000526004601cfd5b63f4d678b86000526004601cfd5b336000526034600c2054612d1457634b6e7f186000526004601cfd5b63ea553b346000526004601cfd5b612e7f86613834565b50612e8984613834565b50612e9585839061208e565b50612cdd565b612ea3611834565b50612ead81613854565b8015612ed0575b908115612ec0575b5090565b612eca91506138fa565b38612ebc565b50612eda81613894565b612eb4565b612ef190612eeb613473565b906139f1565b565b60207f2073616c65507269636500000000000000000000000000000000000000000000917f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201520152565b612f4e602a604092610647565b612f5781612ef3565b0190565b612f719060208101906000818303910152612f41565b90565b15612f7b57565b612f83610252565b62461bcd60e51b815280612f9960048201612f5b565b0390fd5b60007f455243323938313a20696e76616c696420726563656976657200000000000000910152565b612fd26019602092610647565b612fdb81612f9d565b0190565b612ff59060208101906000818303910152612fc5565b90565b15612fff57565b613007610252565b62461bcd60e51b81528061301d60048201612fdf565b0390fd5b61302b60406106fe565b90565b90565b9061304661304161304d926126c5565b61302e565b8254611b9a565b9055565b60a01b90565b906130716bffffffffffffffffffffffff60a01b91613051565b9181191691161790565b61308f61308a613094926103fc565b610ae6565b6103fc565b90565b90565b906130af6130aa6130b69261307b565b613097565b8254613057565b9055565b906130e5602060006130eb946130dd8282016130d7848801611ee0565b90613031565b019201611f15565b9061309a565b565b906130f7916130ba565b565b9061316a613171926131258361311e6131186131136133cc565b6103fc565b916103fc565b1115612f74565b61314b8161314461313e6131396000611f09565b610272565b91610272565b1415612ff8565b91613161613157613021565b9360008501611e3a565b60208301611e80565b60026130ed565b565b9061317c611c04565b506080604051019160208301604052600083528290600a6000198092955b01948181066030018653049384156131b95790600a919080929161319a565b93505082602091039203918252565b6131dc6131d76131e192611423565b610ae6565b6102a2565b90565b60016131f091016102a2565b90565b634e487b7160e01b600052603260045260246000fd5b9061321382610e9a565b811015613224576020809102010190565b6131f3565b61323390516102a2565b90565b61324261324791611da5565b6108ae565b90565b6132549054613236565b90565b61326661326c919392936102a2565b926102a2565b820391821161327757565b611f3e565b9061329161328c61329892610ae9565b61195a565b8254612c71565b9055565b6132ab6132b1919392936102a2565b926102a2565b82018092116132bc57565b611f3e565b6132d19093929193848391613a8a565b6132da83610e9a565b926132e560006131c8565b926132f060006131c8565b935b846133056132ff886102a2565b916102a2565b10156133825761337661337c9161335d613328613323888a90613209565b613229565b613357613348600161334261333d8d8c613209565b613229565b90610b05565b916133528361324a565b613257565b9061327c565b61337061336b878990613209565b613229565b9061329c565b946131e4565b936132f2565b915093506133a6925061339f915061339a600061324a565b613257565b600061327c565b565b600090565b90565b6133c46133bf6133c9926133ad565b610ae6565b6103fc565b90565b6133d46133a8565b506133e06127106133b0565b90565b6133eb611834565b50600090565b6133f9611834565b50600090565b5050949293909361340e6133f1565b61341b575b505050505050565b6134316134379361343d97969092939596612080565b50612080565b5061208e565b50388080808080613413565b9061346b6134666134709361345f818590613aa5565b6005612676565b61268e565b613b8c565b50565b61347b611df1565b503390565b906134a261349d6134a793613496818590613bc7565b6005612676565b61268e565b613c61565b50565b60007f455243323938313a20496e76616c696420706172616d65746572730000000000910152565b6134df601b602092610647565b6134e8816134aa565b0190565b61350290602081019060008183039101526134d2565b90565b1561350c57565b613514610252565b62461bcd60e51b81528061352a600482016134ec565b0390fd5b6135aa906135a36135af949361355e8561355761355161354c6133cc565b6103fc565b916103fc565b1115612f74565b6135848161357d6135776135726000611f09565b610272565b91610272565b1415613505565b9361359a613590613021565b9560008701611e3a565b60208501611e80565b6003611df6565b6130ed565b565b6135ff91926135cb613605956135f0939086849192613c9c565b6135e86135e1826135dc600061324a565b61329c565b600061327c565b926001610b05565b916135fa8361324a565b61329c565b9061327c565b565b919261362661366b969461361f61362d946008611b03565b6009611b03565b600a611b03565b61363f613638611448565b8290613449565b61365161364a61188f565b8290613449565b61366361365c6118e7565b8290613449565b919091613d9d565b565b90565b61367c61368191611da5565b610ae9565b90565b61369861369361369d926102a2565b610ae6565b610267565b90565b6136cc6136c76136d6936136c260006136d1956136bb611df1565b500161366d565b613e18565b613670565b613684565b6126b9565b90565b613714613729936136ef61372393858391613e3a565b61370c61370582613700600061324a565b613257565b600061327c565b926001610b05565b9161371e8361324a565b613257565b9061327c565b565b9261373c9194939085849192613e55565b61374583610e9a565b9161375060006131c8565b9061375b60006131c8565b915b8261377061376a876102a2565b916102a2565b10156137ee576137966137e89161379061378b878790613209565b613229565b9061329c565b926137e36137ad6137a8878490613209565b613229565b6137dd6137ce60016137c86137c38d8890613209565b613229565b90610b05565b916137d88361324a565b61329c565b9061327c565b6131e4565b9161375d565b91509350613812925061380b9150613806600061324a565b61329c565b600061327c565b565b61382c60006138319261382561180b565b500161366d565b613f98565b90565b9061383d61241d565b506040519160408301604052600183526020830152565b61385c611834565b50633e85e62f60e01b61387761387183610350565b91610350565b14908115613884575b5090565b61388e9150613fb0565b38613880565b61389c611834565b506138a681613fd7565b80156138eb575b80156138d0575b9081156138c0575b5090565b6138ca9150614017565b386138bc565b5060006138e56138df83610350565b91610350565b146138b4565b506138f581614017565b6138ad565b613902611834565b5061390c81614017565b908115613918575b5090565b6139229150614057565b38613914565b90565b61393f61393a61394492613928565b610ae6565b6102a2565b90565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b61397b60178092611c09565b61398481613947565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b6139bc60118092611c09565b6139c581613988565b0190565b6139e36139ee93926139dd6139e89361396f565b90611c97565b6139b0565b90611c97565b90565b90613a06613a008383906126e9565b1561039f565b613a0e575050565b613a8691613a64613a3d613a2d613a27613a69956140e5565b93613670565b613a37602061392b565b906142fe565b91613a55613a49610252565b938492602084016139c9565b602082018103825203826105cf565b611d20565b613a71610252565b91829162461bcd60e51b8352600483016106a6565b0390fd5b9091613aa392613a9a6000611f09565b92909192614479565b565b613ab9613ab38284906126e9565b1561039f565b613ac2575b5050565b613ae56001613ae06000613ad860048690611d8d565b0185906126d1565b6125ab565b90613aee613473565b90613b2b613b25613b1f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611d81565b926126c5565b926126c5565b92613b34610252565b80613b3e8161045f565b0390a43880613abe565b613b5190611b66565b90565b613b68613b63613b6d92610267565b610ae6565b6102a2565b90565b613b84613b7f613b89926102a2565b611426565b610a48565b90565b90613bbf613bb9613bb4613baf6000613bc496613ba7611834565b500194613b48565b613b54565b613b70565b9161366d565b614669565b90565b613bd28183906126e9565b613bdb575b5050565b613bfe6000613bf96000613bf160048690611d8d565b0185906126d1565b6125ab565b90613c07613473565b90613c44613c3e613c387ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611d81565b926126c5565b926126c5565b92613c4d610252565b80613c578161045f565b0390a43880613bd7565b90613c94613c8e613c89613c846000613c9996613c7c611834565b500194613b48565b613b54565b613b70565b9161366d565b614729565b90565b91929092613ca86133e3565b613d84575b8260601b8015613d7657679a31110384e0b0c960205283601452846000526040600020805490838201918210613d6857558160205260601c6000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604083a4613d156133f1565b613d4f575b613d2383614833565b613d2e575b50505050565b613d4693613d3c6000611f09565b9390919293614840565b38808080613d28565b613d5884613834565b50613d6281613834565b50613d1a565b6301336cea6000526004601cfd5b63ea553b346000526004601cfd5b613d8d84613834565b50613d9781613834565b50613cad565b90613db3613db89392613dae611b27565b613449565b6148d9565b565b5490565b600052602060002090565b613dd281613dba565b821015613ded57613de4600191613dbe565b91020190600090565b6131f3565b613e02906008613e0793026108aa565b611dab565b90565b90613e159154613df2565b90565b613e37916000613e3192613e2a611d7c565b5001613dc9565b90613e0a565b90565b9091613e5392613e4a6000611f09565b929091926148f9565b565b91929092613e616133e3565b613f93575b8051845103613f85578260601b8015613f775780679a31110384e0b0c917602052845160051b805b613f4057506000604051604081527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb81885160051b602001604082019081818c60045afa503d60400160208301523d01865160051b60200181818960045afa503d01039360601c933392a4613f016133f1565b613f3b575b613f0f83614833565b613f1a575b50505050565b613f3293613f286000611f09565b93909192936149fd565b38808080613f14565b613f06565b8083015190808701516000526040600020918254908101908110613f6957602092550380613e8e565b6301336cea6000526004601cfd5b63ea553b346000526004601cfd5b633b800a466000526004601cfd5b613e66565b6000613fad91613fa661180b565b5001613dba565b90565b613fb8611834565b5060e01c630e89341c8114906301ffc9a763d9b67a2682149114171790565b613fdf611834565b5080613ffa613ff463152a902d60e11b610350565b91610350565b14908115614007575b5090565b6140119150614ab4565b38614003565b61401f611834565b508061403a614034635a05180f60e01b610350565b91610350565b14908115614047575b5090565b6140519150614ada565b38614043565b61405f611834565b508061407a614074634e821d3360e11b610350565b91610350565b14908115614087575b5090565b6140919150613894565b38614083565b90565b60ff1690565b6140b46140af6140b992614097565b610ae6565b61409a565b90565b6140c660146140a0565b90565b6140dd6140d86140e29261409a565b610ae6565b6102a2565b90565b6141026140fd614118926140f7611c04565b50613b48565b613b54565b61411261410d6140bc565b6140c9565b906142fe565b90565b90565b61413261412d6141379261411b565b610ae6565b6102a2565b90565b9061414c61414783611028565b6106fe565b918252565b369037565b9061417b6141638361413a565b926020806141718693611028565b9201910390614151565b565b600360fc1b90565b5190565b9061419382614185565b8110156141a557600160209102010190565b6131f3565b600f60fb1b90565b90565b6141c96141c46141ce926141b2565b610ae6565b6102a2565b90565b6141da906102a2565b600081146141e9576001900390565b611f3e565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b61420d6141ee565b90565b90565b61422761422261422c92614210565b610ae6565b6102a2565b90565b60f81b90565b90565b61424c61424761425192614235565b610ae6565b61409a565b90565b6142739061426d6142676142789461409a565b916102a2565b906108aa565b6102a2565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b6142af60208092610647565b6142b88161427b565b0190565b6142d290602081019060008183039101526142a3565b90565b156142dc57565b6142e4610252565b62461bcd60e51b8152806142fa600482016142bc565b0390fd5b9190614308611c04565b506143a261439261433e6143396143296002614324879161411e565b611f54565b614333600261411e565b9061329c565b614156565b9261434761417d565b6143608561435a60009360001a936131c8565b90614189565b536143696141aa565b6143828561437c60019360001a936141b5565b90614189565b5361438d600261411e565b611f54565b61439c60016141b5565b9061329c565b925b836143b86143b260016141b5565b916102a2565b111561441f576143c6614205565b816143d1600f614213565b1691601083101561441a576143ed61440e92614414941a61422f565b6143fd8591889060001a92614189565b536144086004614238565b90614254565b936141d1565b926143a4565b6131f3565b6144479293506144429061443c61443660006131c8565b916102a2565b146142d5565b611d20565b90565b9061445c61445783610713565b6106fe565b918252565b61446b600061444a565b90565b614476614461565b90565b919392906144856133e3565b6145b1575b81518551036145a35760601b9182679a31110384e0b0c9176020528060601b83811490151715614581575b50835160051b805b61454b57507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6000939460405192839160408352805160051b60200180916040850192839160045afa503d60400160208401523d019081815160051b602001809260045afa503d01039260601c923392a46145366133f1565b61453d575b565b61454561446e565b5061453b565b80820151908086015160005260406000208054928381116145735760209303905503806144bd565b63f4d678b86000526004601cfd5b6000526034600c20541561459557386144b5565b634b6e7f186000526004601cfd5b633b800a466000526004601cfd5b6145b961446e565b5061448a565b90565b600052602060002090565b5490565b6145da816145cd565b8210156145f5576145ec6001916145c2565b91020190600090565b6131f3565b919061461061460b61461893611d81565b612c88565b908354611934565b9055565b908154916801000000000000000083101561464c578261464491600161464a950181556145d1565b906145fa565b565b6105b9565b9061465b90611d81565b600052602052604060002090565b614671611834565b50614686614680828490614b1a565b1561039f565b6000146146c9576146bf6146c4926146aa6146a3600085016145bf565b829061461c565b60016146b860008501613dba565b9301614651565b61327c565b600190565b5050600090565b634e487b7160e01b600052603160045260246000fd5b6146f8916146f2611d7c565b916145fa565b565b614703816145cd565b801561472457600190039061472161471b83836145d1565b906146e6565b55565b6146d0565b614731611834565b50614748614743600183018490614651565b61324a565b908161475d61475760006131c8565b916102a2565b141560001461482b576147dd9260016147d89284614786600096614780856141b5565b90613257565b6147a3614794888501613dba565b61479d866141b5565b90613257565b806147b66147b0846102a2565b916102a2565b036147e2575b5050506147d26147cd8683016145bf565b6146fa565b01614651565b61197f565b600190565b614823926148156148016147fb61481e948c8901613dc9565b90613e0a565b9361480f85918c8901613dc9565b906145fa565b91858501614651565b61327c565b3880806147bc565b505050600090565b61483b611834565b503b90565b919360209360405195869463f23a6e618652338787015260601b60601c60408601526060850152608084015260a08084015280518091818060c08701526148c5575b505060c401906000601c8401915af1156148b6575b63f23a6e6160e01b9051036148a857565b639c05499b6000526004601cfd5b3d15614897573d6000823e3d90fd5b818660e08701920160045afa508038614882565b906148f06148e96148f793611b8e565b6006611bc4565b6007612c94565b565b909291926149056133e3565b6149db575b60601b9081679a31110384e0b0c917602052818160601b148160601b1517156149b9575b50826000526040600020908154918284116149ab57836000930390558260205260601c337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604084a461497f6133f1565b614988575b5050565b61499461499a92613834565b50613834565b506149a361446e565b503880614984565b63f4d678b86000526004601cfd5b6000526034600c2054156149cd573861492e565b634b6e7f186000526004601cfd5b6149e484613834565b506149ee83613834565b506149f761446e565b5061490a565b919360209360405195869463bc197c818652338787015260601b60601c604086015260a06060860152805160051b8601809160c0870192839160045afa503d60a001908160808701523d019182815160051b8801809260045afa503d0160a08501523d01908181518601809260045afa50601c8301903d0103906000601c8401915af115614aa5575b63bc197c8160e01b905103614a9757565b639c05499b6000526004601cfd5b3d15614a86573d6000823e3d90fd5b614abc611834565b50614ad6614ad06301ffc9a760e01b610350565b91610350565b1490565b614ae2611834565b5080614afd614af7637965db0b60e01b610350565b91610350565b14908115614b0a575b5090565b614b149150613fd7565b38614b06565b614b38916001614b3392614b2c611834565b5001614651565b61324a565b614b4b614b4560006131c8565b916102a2565b14159056fea26469706673582212201008807002fe6072ba72743479d7976a506937a4e756aa0aef6ad714bef8804e64736f6c634300081b0033",
              "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x2B JUMPI PUSH1 0xE PUSH1 0x3A JUMP JUMPDEST PUSH1 0x14 PUSH1 0x2F JUMP JUMPDEST PUSH2 0x4B86 PUSH2 0x41 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x25DA ADD MSTORE PUSH2 0x4B86 SWAP1 RETURN JUMPDEST PUSH1 0x35 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x24C JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xB5EE006 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x20EC271B EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x2693EBF2 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x731133E9 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x8FF83AC1 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xB390C0AB EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xB48AB8B6 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xED4C2AC7 EQ PUSH2 0x1A2 JUMPI PUSH4 0xF242432A SUB PUSH2 0xE JUMPI PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1728 JUMP JUMPDEST PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0x168F JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST PUSH2 0x1616 JUMP JUMPDEST PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x151B JUMP JUMPDEST PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x1460 JUMP JUMPDEST PUSH2 0x13ED JUMP JUMPDEST PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x12EF JUMP JUMPDEST PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x1238 JUMP JUMPDEST PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0xFAF JUMP JUMPDEST PUSH2 0xF3B JUMP JUMPDEST PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0xD93 JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST PUSH2 0xBCB JUMP JUMPDEST PUSH2 0xB37 JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x8E5 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x6BF JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x27B SWAP1 PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x287 DUP2 PUSH2 0x272 JUMP JUMPDEST SUB PUSH2 0x28E JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2A0 DUP3 PUSH2 0x27E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AE DUP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x2B5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2C7 DUP3 PUSH2 0x2A5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x2F2 JUMPI DUP1 PUSH2 0x2E6 PUSH2 0x2EF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0x300 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x318 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x34B JUMPI PUSH2 0x347 PUSH2 0x336 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 PUSH2 0x1810 JUMP JUMPDEST PUSH2 0x33E PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x365 DUP2 PUSH2 0x350 JUMP JUMPDEST SUB PUSH2 0x36C JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x37E DUP3 PUSH2 0x35C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x39A JUMPI PUSH2 0x397 SWAP2 PUSH1 0x0 ADD PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3AD SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3C5 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x3A4 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x3F7 JUMPI PUSH2 0x3F3 PUSH2 0x3E2 PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x380 JUMP JUMPDEST PUSH2 0x1839 JUMP JUMPDEST PUSH2 0x3EA PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x416 DUP2 PUSH2 0x3FC JUMP JUMPDEST SUB PUSH2 0x41D JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x42F DUP3 PUSH2 0x40D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x45A JUMPI DUP1 PUSH2 0x44E PUSH2 0x457 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x494 JUMPI PUSH2 0x47E PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x431 JUMP JUMPDEST SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0x486 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x490 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4A4 JUMPI JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x4F5 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x4F0 JUMPI JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x52E PUSH2 0x527 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x4FF JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x587 JUMPI POP PUSH1 0x1 EQ PUSH2 0x54A JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x557 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x56F JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x55C JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST SWAP1 PUSH2 0x5AC SWAP2 PUSH2 0x513 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x5D9 SWAP1 PUSH2 0x5AF JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5F3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x618 PUSH2 0x611 SWAP3 PUSH2 0x608 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x5A2 JUMP JUMPDEST SUB DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 LT PUSH2 0x62E JUMPI PUSH2 0x62B SWAP1 PUSH2 0x5F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x640 PUSH1 0x8 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x664 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x653 JUMP JUMPDEST PUSH2 0x694 PUSH2 0x69D PUSH1 0x20 SWAP4 PUSH2 0x6A2 SWAP4 PUSH2 0x68B DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x647 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x6BC SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x675 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x6EF JUMPI PUSH2 0x6CF CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x6EB PUSH2 0x6DA PUSH2 0x633 JUMP JUMPDEST PUSH2 0x6E2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH2 0x711 PUSH2 0x70A PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x731 JUMPI PUSH2 0x72D PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x757 PUSH2 0x752 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x773 JUMPI PUSH2 0x771 SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x796 JUMPI DUP2 PUSH1 0x20 PUSH2 0x793 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x742 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x7CC JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7C7 JUMPI PUSH2 0x7C4 SWAP3 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x7FF JUMPI PUSH2 0x7E9 PUSH2 0x7E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x7FB DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x81E JUMPI PUSH2 0x81B SWAP2 PUSH1 0x0 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x851 JUMPI PUSH2 0x83B PUSH2 0x836 CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x1BF9 JUMP JUMPDEST PUSH2 0x843 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x84D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x870 JUMPI PUSH2 0x86D SWAP2 PUSH1 0x0 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x8A5 JUMPI PUSH2 0x8A1 PUSH2 0x890 PUSH2 0x88B CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x898 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8C1 SWAP1 PUSH1 0x8 PUSH2 0x8C6 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x8D4 SWAP2 SLOAD PUSH2 0x8B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E2 PUSH1 0x0 DUP1 PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x915 JUMPI PUSH2 0x8F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x911 PUSH2 0x900 PUSH2 0x8D7 JUMP JUMPDEST PUSH2 0x908 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x932 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x951 PUSH2 0x94C DUP3 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x98E JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x975 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x983 DUP5 DUP7 PUSH2 0x2BA JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x968 JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x9B1 JUMPI DUP2 PUSH1 0x20 PUSH2 0x9AE SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xA0F JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA0A JUMPI DUP4 PUSH2 0x9E3 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA05 JUMPI PUSH2 0xA02 SWAP3 ADD PUSH2 0x993 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xA43 JUMPI PUSH2 0xA2D PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 PUSH2 0x1D6D JUMP JUMPDEST PUSH2 0xA35 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xA3F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA54 DUP2 PUSH2 0xA48 JUMP JUMPDEST SUB PUSH2 0xA5B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA6D DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xA89 JUMPI PUSH2 0xA86 SWAP2 PUSH1 0x0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xA97 SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xAAF SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xAE1 JUMPI PUSH2 0xADD PUSH2 0xACC PUSH2 0xAC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0xAD4 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xAFD PUSH2 0xAF8 PUSH2 0xB02 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB0F SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xB34 SWAP1 PUSH2 0xB2F PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP3 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xB67 JUMPI PUSH2 0xB63 PUSH2 0xB52 PUSH2 0xB4D CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST PUSH2 0xB5A PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xB95 JUMPI DUP1 PUSH2 0xB89 PUSH2 0xB92 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xBA3 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xBC9 SWAP3 SWAP5 SWAP4 PUSH2 0xBC2 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xBFD JUMPI PUSH2 0xBE4 PUSH2 0xBDE CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH2 0xBF9 PUSH2 0xBF0 PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xBA7 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC41 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC3C JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xC37 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC80 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC7B JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0xC76 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP4 DUP4 SUB SLT PUSH2 0xD23 JUMPI PUSH2 0xC9D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0xCAB DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD1E JUMPI DUP2 PUSH2 0xCCC SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD19 JUMPI DUP4 PUSH2 0xCEF SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD14 JUMPI PUSH2 0xD10 SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xD60 JUMPI PUSH2 0xD4A PUSH2 0xD3B CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xD52 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xD5C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD8E JUMPI DUP1 PUSH2 0xD82 PUSH2 0xD8B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xDC2 JUMPI PUSH2 0xDAC PUSH2 0xDA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0xDB4 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDBE DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0xDF6 JUMPI PUSH2 0xDE0 PUSH2 0xDDA CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x23EE JUMP JUMPDEST PUSH2 0xDE8 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDF2 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xE35 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE30 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xE2B JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x40 DUP3 DUP5 SUB SLT PUSH2 0xE95 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE90 JUMPI DUP4 PUSH2 0xE66 SWAP2 DUP5 ADD PUSH2 0xDFB JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE8B JUMPI PUSH2 0xE87 SWAP3 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xEB6 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0xEC7 DUP2 PUSH1 0x20 SWAP4 PUSH2 0xEAD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEEE PUSH2 0xEE8 PUSH2 0xEE1 DUP5 PUSH2 0xE9A JUMP JUMPDEST DUP1 SWAP4 PUSH2 0xE9E JUMP JUMPDEST SWAP3 PUSH2 0xEA7 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xEFF JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH2 0xF18 PUSH2 0xF12 PUSH1 0x1 SWAP3 DUP7 MLOAD PUSH2 0xEBA JUMP JUMPDEST SWAP5 PUSH2 0xECB JUMP JUMPDEST SWAP2 ADD SWAP2 SWAP1 SWAP2 PUSH2 0xEF2 JUMP JUMPDEST PUSH2 0xF38 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xED1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF6F JUMPI PUSH2 0xF6B PUSH2 0xF5A PUSH2 0xF51 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2422 JUMP JUMPDEST PUSH2 0xF62 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xF22 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xFAA JUMPI PUSH2 0xFA7 PUSH2 0xF90 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH2 0xF9E DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xFDE JUMPI PUSH2 0xFC8 PUSH2 0xFC2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0xFD0 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xFDA DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0xFF0 PUSH1 0x9 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1023 JUMPI PUSH2 0x1003 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x101F PUSH2 0x100E PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0x1016 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1046 JUMPI PUSH2 0x1042 PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1060 PUSH2 0x105B DUP3 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x107C JUMPI PUSH2 0x107A SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x109F JUMPI DUP2 PUSH1 0x20 PUSH2 0x109C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10FF JUMPI PUSH2 0x10BC DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x10CA DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x10D8 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10FA JUMPI PUSH2 0x10F7 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1136 JUMPI PUSH2 0x1120 PUSH2 0x1117 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A4 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x251E JUMP JUMPDEST PUSH2 0x1128 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1132 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1169 JUMPI PUSH2 0x1153 PUSH2 0x114E CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x2554 JUMP JUMPDEST PUSH2 0x115B PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1165 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 DUP4 DUP3 SUB SLT PUSH2 0x1233 JUMPI PUSH2 0x1188 DUP2 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x122E JUMPI DUP3 PUSH2 0x11A9 SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1229 JUMPI DUP4 PUSH2 0x11CA SWAP2 DUP5 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1224 JUMPI DUP2 PUSH2 0x11EB SWAP2 DUP6 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH2 0x11F9 DUP3 PUSH1 0x80 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1221 PUSH2 0x120A DUP5 PUSH1 0xA0 DUP6 ADD PUSH2 0x422 JUMP JUMPDEST SWAP4 PUSH2 0x1218 DUP2 PUSH1 0xC0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0xE0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1270 JUMPI PUSH2 0x125A PUSH2 0x124B CALLDATASIZE PUSH1 0x4 PUSH2 0x116E JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x25CB JUMP JUMPDEST PUSH2 0x1262 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x126C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x129E JUMPI DUP1 PUSH2 0x1292 PUSH2 0x129B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12B7 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x12EA JUMPI PUSH2 0x12E6 PUSH2 0x12D5 PUSH2 0x12CF CALLDATASIZE PUSH1 0x4 PUSH2 0x1275 JUMP JUMPDEST SWAP1 PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x12A3 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1320 JUMPI PUSH2 0x131C PUSH2 0x130B PUSH2 0x1305 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x1313 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1353 JUMPI PUSH2 0x133D PUSH2 0x1338 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x273C JUMP JUMPDEST PUSH2 0x1345 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x134F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x136B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x137E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x13E8 JUMPI PUSH2 0x139B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13E3 JUMPI DUP4 PUSH2 0x13BC SWAP2 DUP4 ADD PUSH2 0x135D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13DE JUMPI PUSH2 0x13DB SWAP3 ADD PUSH2 0x1370 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x141E JUMPI PUSH2 0x141A PUSH2 0x1409 PUSH2 0x1403 CALLDATASIZE PUSH1 0x4 PUSH2 0x1383 JUMP JUMPDEST SWAP2 PUSH2 0x2A9A JUMP JUMPDEST PUSH2 0x1411 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1440 PUSH2 0x143B PUSH2 0x1445 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1452 PUSH1 0x0 PUSH2 0x142C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x145D PUSH2 0x1448 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1490 JUMPI PUSH2 0x1470 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x148C PUSH2 0x147B PUSH2 0x1455 JUMP JUMPDEST PUSH2 0x1483 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x149E DUP2 PUSH2 0x39F JUMP JUMPDEST SUB PUSH2 0x14A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x14B7 DUP3 PUSH2 0x1495 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x14E2 JUMPI DUP1 PUSH2 0x14D6 PUSH2 0x14DF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x14AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1516 JUMPI PUSH2 0x1500 PUSH2 0x14FA CALLDATASIZE PUSH1 0x4 PUSH2 0x14B9 JUMP JUMPDEST SWAP1 PUSH2 0x2B3B JUMP JUMPDEST PUSH2 0x1508 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1512 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x154A JUMPI PUSH2 0x1534 PUSH2 0x152E CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x2B8B JUMP JUMPDEST PUSH2 0x153C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1546 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x15DA JUMPI PUSH2 0x1567 DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D5 JUMPI DUP3 PUSH2 0x1588 SWAP2 DUP6 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D0 JUMPI DUP4 PUSH2 0x15A9 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15CB JUMPI PUSH2 0x15C8 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1611 JUMPI PUSH2 0x15FB PUSH2 0x15F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x154F JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2BC8 JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x160D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1646 JUMPI PUSH2 0x1642 PUSH2 0x1631 PUSH2 0x162C CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2BD6 JUMP JUMPDEST PUSH2 0x1639 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x167A JUMPI PUSH2 0x1664 PUSH2 0x165E CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x166C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1676 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x168C PUSH1 0xA PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x16BF JUMPI PUSH2 0x169F CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x16BB PUSH2 0x16AA PUSH2 0x167F JUMP JUMPDEST PUSH2 0x16B2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x16ED JUMPI DUP1 PUSH2 0x16E1 PUSH2 0x16EA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1723 JUMPI PUSH2 0x171F PUSH2 0x170E PUSH2 0x1708 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C4 JUMP JUMPDEST SWAP1 PUSH2 0x2C32 JUMP JUMPDEST PUSH2 0x1716 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1756 JUMPI PUSH2 0x1740 PUSH2 0x173B CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2CC1 JUMP JUMPDEST PUSH2 0x1748 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1752 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x17C7 JUMPI PUSH2 0x1775 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1783 DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1791 DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x179F DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x17C2 JUMPI PUSH2 0x17BE SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1801 JUMPI PUSH2 0x17EB PUSH2 0x17DF CALLDATASIZE PUSH1 0x4 PUSH2 0x175B JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x17F3 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x17FD DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1818 PUSH2 0x180B JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1841 PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0xC79B8B5F PUSH1 0xE0 SHL PUSH2 0x185C PUSH2 0x1856 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1880 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1870 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x187A SWAP2 POP PUSH2 0x2E9B JUMP JUMPDEST CODESIZE PUSH2 0x186C JUMP JUMPDEST POP PUSH2 0x188A DUP2 PUSH2 0x2E9B JUMP JUMPDEST PUSH2 0x1864 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18CD SWAP2 PUSH2 0x18C8 PUSH2 0x18C3 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x18CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18D9 SWAP2 PUSH2 0x30F9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18E5 SWAP2 PUSH2 0x18B3 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST PUSH2 0x1924 SWAP1 PUSH2 0x191F PUSH2 0x191A PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1B0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x1950 SWAP2 MUL SWAP2 PUSH2 0x194A PUSH1 0x0 NOT DUP5 PUSH2 0x1930 JUMP JUMPDEST SWAP3 PUSH2 0x1930 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1973 PUSH2 0x196E PUSH2 0x197B SWAP4 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1991 SWAP2 PUSH2 0x198B PUSH2 0x180B JUMP JUMPDEST SWAP2 PUSH2 0x195D JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x199F JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x19AD PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x197F JUMP JUMPDEST ADD PUSH2 0x1994 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x19C3 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x19CF PUSH2 0x19F4 SWAP4 PUSH2 0x508 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x19DB DUP5 PUSH2 0x1926 JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x19FC JUMPI JUMPDEST PUSH2 0x19ED SWAP1 PUSH2 0x1926 JUMP JUMPDEST ADD SWAP1 PUSH2 0x1993 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x19BE JUMP JUMPDEST SWAP2 POP PUSH2 0x19ED DUP2 SWAP3 SWAP1 POP PUSH2 0x19E4 JUMP JUMPDEST SWAP1 PUSH2 0x1A1B SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x8AA JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x1A2A SWAP2 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A3C DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1AFE JUMPI PUSH2 0x1A60 DUP3 PUSH2 0x1A5A DUP6 SLOAD PUSH2 0x4D5 JUMP JUMPDEST DUP6 PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1A95 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x1A84 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1A89 JUMPI JUMPDEST POP POP PUSH2 0x1A20 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1A7D JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x1AA4 DUP6 PUSH2 0x508 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1AE6 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1ACC JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x1A87 JUMP JUMPDEST PUSH2 0x1ADC SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1AC0 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x1AA8 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x1B0D SWAP2 PUSH2 0x1A32 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B1A SWAP1 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B25 SWAP1 PUSH2 0x190B JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x1B64 SWAP1 PUSH2 0x1B5F PUSH2 0x1B5A PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1BE4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1B75 PUSH2 0x1B7F SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8B SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B97 SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BAB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1BBE SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BD9 PUSH2 0x1BD4 PUSH2 0x1BE0 SWAP3 PUSH2 0x1BB5 JUMP JUMPDEST PUSH2 0x1BC1 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1BF0 PUSH2 0x1BF7 SWAP2 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1C02 SWAP1 PUSH2 0x1B4B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1C29 PUSH2 0x1C22 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1C09 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1C7D JUMPI POP PUSH1 0x1 EQ PUSH2 0x1C45 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C52 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1C69 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1C56 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE DUP1 ISZERO ISZERO MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH2 0x1CBC PUSH2 0x1CB3 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1CAA DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x1C09 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2E6A736F6E000000000000000000000000000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1CF4 PUSH1 0x5 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x1CFD DUP2 PUSH2 0x1CC0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1D12 PUSH2 0x1D1D SWAP4 PUSH2 0x1D18 SWAP4 PUSH2 0x1C0E JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x1CE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D6A SWAP1 PUSH2 0x1D2F PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x1D65 PUSH2 0x1D3E PUSH1 0x9 SWAP3 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x1D56 PUSH2 0x1D4A PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D7A SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x32C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1D8A SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D97 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBA PUSH2 0x1DBF SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DCC SWAP1 SLOAD PUSH2 0x1DAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1DE8 PUSH2 0x1DEE SWAP3 PUSH2 0x1DE0 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E00 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E25 PUSH2 0x1E2A SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1E0E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E37 SWAP1 SLOAD PUSH2 0x1E19 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E44 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E6B PUSH2 0x1E70 SWAP2 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x1E4E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E7D SWAP1 SLOAD PUSH2 0x1E5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E8A SWAP1 PUSH2 0x3FC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1E98 PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1ED2 PUSH2 0x1EC9 PUSH1 0x0 PUSH2 0x1EAC PUSH2 0x1E8E JUMP JUMPDEST SWAP5 PUSH2 0x1EC3 PUSH2 0x1EBB DUP4 DUP4 ADD PUSH2 0x1E2D JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x1E3A JUMP JUMPDEST ADD PUSH2 0x1E73 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x1E80 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EDD SWAP1 PUSH2 0x1E9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EEA SWAP1 MLOAD PUSH2 0x272 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F01 PUSH2 0x1EFC PUSH2 0x1F06 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F12 SWAP1 PUSH2 0x1EED JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F1F SWAP1 MLOAD PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F36 PUSH2 0x1F31 PUSH2 0x1F3B SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F63 PUSH2 0x1F69 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x1F75 DUP4 DUP3 MUL PUSH2 0x2A2 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1F84 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1FAB PUSH2 0x1FB1 SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1FBC JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x1FE4 PUSH2 0x1FE9 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1FD3 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH2 0x1FDC PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x1ED4 JUMP JUMPDEST SWAP2 PUSH2 0x1FF6 PUSH1 0x0 DUP5 ADD PUSH2 0x1EE0 JUMP JUMPDEST PUSH2 0x2011 PUSH2 0x200B PUSH2 0x2006 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x205E JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x205A SWAP4 PUSH2 0x2037 PUSH2 0x2032 PUSH1 0x20 DUP10 ADD PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x204D PUSH2 0x2048 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F9F JUMP JUMPDEST SWAP4 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x205A PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x2075 PUSH1 0x2 PUSH2 0x1ED4 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x2017 JUMP JUMPDEST PUSH2 0x208B SWAP2 CALLDATASIZE SWAP2 PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2099 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP7 SWAP4 SWAP7 SWAP6 SWAP1 SWAP5 SWAP2 SWAP3 SWAP6 PUSH2 0x20AD PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x22E6 JUMPI JUMPDEST DUP3 DUP8 SUB PUSH2 0x22D8 JUMPI PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP5 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP6 PUSH1 0x20 MSTORE DUP6 PUSH1 0x60 SHR SWAP6 DUP4 PUSH1 0x60 SHR SWAP4 DUP5 ISZERO PUSH2 0x22CA JUMPI DUP8 CALLER SUB PUSH2 0x22AE JUMPI JUMPDEST DUP9 PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x224E JUMPI POP POP POP DUP3 DUP7 PUSH1 0x20 PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE DUP12 DUP14 DUP2 PUSH1 0x5 SHL SWAP5 DUP3 DUP7 SWAP4 PUSH1 0x40 DUP7 ADD MSTORE DUP4 DUP14 PUSH1 0x60 DUP8 ADD CALLDATACOPY DUP4 PUSH1 0x60 ADD DUP3 DUP7 ADD MSTORE PUSH1 0x60 DUP5 DUP7 ADD ADD SWAP1 DUP2 MSTORE ADD CALLDATACOPY PUSH1 0x80 CALLER SWAP4 DUP1 ADD ADD SWAP1 LOG4 PUSH2 0x2164 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2231 JUMPI JUMPDEST POP DUP2 EXTCODESIZE PUSH2 0x217A JUMPI JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP1 SWAP8 DUP7 SWAP5 PUSH1 0x0 MSTORE DUP1 PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 PUSH4 0xBC197C81 DUP13 MSTORE CALLER DUP7 DUP14 ADD MSTORE PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP13 ADD MSTORE DUP11 DUP4 PUSH1 0x5 SHL SWAP10 DUP11 SWAP6 DUP7 SWAP5 DUP6 SWAP4 ADD MSTORE PUSH1 0xE0 DUP14 ADD CALLDATACOPY DUP2 PUSH1 0xC0 ADD PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xE0 DUP3 DUP13 ADD ADD SWAP3 DUP4 MSTORE DUP5 DUP4 ADD CALLDATACOPY DUP2 DUP1 PUSH1 0xE0 ADD ADD PUSH1 0xA0 DUP11 ADD MSTORE ADD ADD DUP4 DUP2 MSTORE ADD CALLDATACOPY DUP1 ADD ADD PUSH2 0x104 ADD PUSH1 0x1C PUSH1 0x40 MLOAD ADD PUSH1 0x0 DUP1 MLOAD GAS CALL ISZERO PUSH2 0x2222 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2214 JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2171 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x21F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2248 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP7 SWAP1 DUP11 DUP13 SWAP2 SWAP3 DUP8 SWAP5 DUP12 SWAP7 PUSH2 0x33FF JUMP JUMPDEST CODESIZE PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP12 ADD CALLDATALOAD DUP4 PUSH1 0x20 MSTORE DUP2 DUP9 ADD CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP4 GT PUSH2 0x22A0 JUMPI DUP3 SWAP1 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x2292 JUMPI DUP3 SWAP2 SSTORE PUSH2 0x20F7 JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x20F1 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2309 DUP5 DUP9 PUSH2 0x2303 DUP12 DUP8 SWAP1 PUSH2 0x22FD DUP9 SWAP5 DUP13 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x20B2 JUMP JUMPDEST SWAP1 PUSH2 0x232A SWAP2 PUSH2 0x2325 PUSH2 0x2320 DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x232C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2336 SWAP2 PUSH2 0x3449 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2342 SWAP2 PUSH2 0x230F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x239F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x23A8 DUP2 PUSH2 0x2344 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2392 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23CC JUMPI JUMP JUMPDEST PUSH2 0x23D4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23EA PUSH1 0x4 DUP3 ADD PUSH2 0x23AC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x241B SWAP2 PUSH2 0x2416 DUP3 PUSH2 0x2410 PUSH2 0x240A PUSH2 0x2405 PUSH2 0x3473 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x23C5 JUMP JUMPDEST PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x242E PUSH2 0x241D JUMP JUMPDEST POP DUP3 SUB PUSH2 0x2485 JUMPI PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP1 DUP5 DUP2 ADD PUSH1 0x40 MSTORE JUMPDEST PUSH2 0x2456 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP3 ADD CALLDATALOAD PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x0 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 DUP7 ADD MSTORE PUSH2 0x244C JUMP JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x24AE SWAP3 SWAP2 PUSH2 0x24A9 PUSH2 0x24A4 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x24B0 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x24BD SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x352E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x24CA SWAP3 SWAP2 PUSH2 0x2493 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x250C SWAP4 SWAP3 SWAP2 PUSH2 0x2507 PUSH2 0x2502 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x250E JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x251C SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x35B1 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x252A SWAP4 SWAP3 SWAP2 PUSH2 0x24F0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2545 SWAP1 PUSH2 0x2540 PUSH2 0x253B PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2547 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2552 SWAP1 PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x255D SWAP1 PUSH2 0x252C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2571 PUSH2 0x2576 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x255F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2583 SWAP1 SLOAD PUSH2 0x2565 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2592 PUSH1 0xFF SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x25A5 SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25C0 PUSH2 0x25BB PUSH2 0x25C7 SWAP3 PUSH2 0x259C JUMP JUMPDEST PUSH2 0x25A8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2586 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP6 SWAP7 SWAP5 SWAP4 SWAP3 SWAP5 CALLER PUSH2 0x2604 PUSH2 0x25FE PUSH32 0x0 PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2666 JUMPI JUMPDEST PUSH2 0x2649 JUMPI PUSH2 0x263B SWAP8 PUSH2 0x262E SWAP7 PUSH2 0x2629 SWAP5 DUP10 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x3607 JUMP JUMPDEST PUSH2 0x30F9 JUMP JUMPDEST PUSH2 0x2636 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x2647 PUSH1 0x1 PUSH1 0xB PUSH2 0x25AB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2662 PUSH1 0x4 DUP3 ADD PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2671 PUSH1 0xB PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x260D JUMP JUMPDEST SWAP1 PUSH2 0x2680 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26B1 PUSH2 0x26AC PUSH2 0x26B6 SWAP4 PUSH2 0x26A4 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x36A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C2 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26CE SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26DB SWAP1 PUSH2 0x26C5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2711 SWAP2 PUSH1 0x0 PUSH2 0x2706 PUSH2 0x270C SWAP4 PUSH2 0x26FE PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x2579 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x272D SWAP1 PUSH2 0x2728 PUSH2 0x2723 PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x272F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x273A SWAP1 PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2745 SWAP1 PUSH2 0x2714 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x275E PUSH2 0x2763 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x2747 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2770 SWAP1 SLOAD PUSH2 0x2752 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277C SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2792 DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x27AE JUMPI PUSH2 0x27AB SWAP2 PUSH1 0x0 ADD PUSH2 0x2785 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST POP PUSH2 0x27C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27CE SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x27E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27ED SWAP1 PUSH2 0x350 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2800 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x280C SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2860 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x285B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2856 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2888 DUP2 PUSH2 0x2881 DUP2 PUSH2 0x288D SWAP6 PUSH2 0x2865 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28A7 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x28E8 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x28E3 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x290C DUP2 PUSH2 0x2905 DUP2 PUSH2 0x2911 SWAP6 PUSH2 0x4FF JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x292B DUP2 PUSH2 0x2915 JUMP JUMPDEST SUB PUSH2 0x2932 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2944 DUP3 PUSH2 0x2922 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x2955 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2937 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2961 SWAP1 PUSH2 0x2915 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x29A3 SWAP1 PUSH1 0x20 PUSH2 0x299B PUSH2 0x2991 PUSH1 0x40 DUP5 ADD PUSH2 0x2983 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x28AC JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x28F2 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x2946 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x2958 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A50 SWAP2 PUSH2 0x2A42 PUSH2 0x2A37 PUSH1 0xC0 DUP4 ADD PUSH2 0x29CE PUSH2 0x29C4 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x27B3 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x27C5 JUMP JUMPDEST PUSH2 0x29E8 PUSH2 0x29DE PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x27D2 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x27E4 JUMP JUMPDEST PUSH2 0x2A02 PUSH2 0x29F8 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A1C PUSH2 0x2A12 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A29 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x281F JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x286E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x2891 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2965 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x2A7F PUSH1 0x40 SWAP2 PUSH2 0x2A87 SWAP5 PUSH2 0x2A72 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x29A6 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2A91 PUSH2 0x252 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x2AA7 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH2 0x2ABA PUSH2 0x2AB5 PUSH1 0x6 PUSH2 0x2766 JUMP JUMPDEST PUSH2 0x2773 JUMP JUMPDEST PUSH2 0x2AE6 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2AF1 PUSH2 0x2AD2 PUSH1 0x7 PUSH2 0x1DC2 JUMP JUMPDEST PUSH2 0x2ADA PUSH2 0x252 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x277F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2A53 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2B36 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2B08 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B29 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2B2F JUMPI JUMPDEST PUSH2 0x2B21 DUP2 DUP4 PUSH2 0x5CF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2794 JUMP JUMPDEST CODESIZE PUSH2 0x2B04 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2B17 JUMP JUMPDEST PUSH2 0x2A89 JUMP JUMPDEST SWAP1 ISZERO ISZERO PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE CALLER PUSH1 0x14 MSTORE DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x34 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH2 0x2B98 SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x36D9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BB6 SWAP4 SWAP3 SWAP2 PUSH2 0x2BB1 PUSH2 0x2BAC PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2BB8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x2BC6 SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x372B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BD4 SWAP4 SWAP3 SWAP2 PUSH2 0x2B9A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2BF5 PUSH2 0x2BF0 PUSH2 0x2BFA SWAP3 PUSH2 0x2BE8 PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3814 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C18 SWAP2 PUSH2 0x2C13 PUSH2 0x2C0E DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2C1A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C24 SWAP2 PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C30 SWAP2 PUSH2 0x2BFD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2C3A PUSH2 0x1834 JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2C6F SWAP1 PUSH2 0x2C6A PUSH2 0x2C65 PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2CB4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C7E PUSH1 0x0 NOT SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2C91 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CA9 PUSH2 0x2CA4 PUSH2 0x2CB0 SWAP3 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CBF SWAP1 PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2CCA SWAP1 PUSH2 0x2C56 JUMP JUMPDEST JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP5 PUSH2 0x2CD8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x2E76 JUMPI JUMPDEST PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP1 PUSH1 0x20 MSTORE PUSH1 0x60 SHR SWAP3 DUP3 PUSH1 0x60 SHR SWAP3 DUP4 ISZERO PUSH2 0x2E68 JUMPI DUP5 CALLER SUB PUSH2 0x2E4C JUMPI JUMPDEST DUP7 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP5 GT PUSH2 0x2E3E JUMPI DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP3 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x2E30 JUMPI SSTORE DUP1 PUSH1 0x20 MSTORE DUP3 DUP5 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 PUSH1 0x0 LOG4 PUSH2 0x2D76 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2E0B JUMPI JUMPDEST DUP3 EXTCODESIZE PUSH2 0x2D8A JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP3 SWAP2 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 PUSH4 0xF23A6E61 DUP9 MSTORE CALLER DUP10 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP1 DUP7 ADD MSTORE DUP2 PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD CALLDATACOPY PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x2DFC JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2DEE JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2D82 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2DD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2E14 DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E1E DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E2A DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2D7B JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x2D14 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2E7F DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E89 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E95 DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2CDD JUMP JUMPDEST PUSH2 0x2EA3 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x2EAD DUP2 PUSH2 0x3854 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2ED0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2EC0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2ECA SWAP2 POP PUSH2 0x38FA JUMP JUMPDEST CODESIZE PUSH2 0x2EBC JUMP JUMPDEST POP PUSH2 0x2EDA DUP2 PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x2EB4 JUMP JUMPDEST PUSH2 0x2EF1 SWAP1 PUSH2 0x2EEB PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x39F1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2F4E PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2F57 DUP2 PUSH2 0x2EF3 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F71 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2F41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2F7B JUMPI JUMP JUMPDEST PUSH2 0x2F83 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2F99 PUSH1 0x4 DUP3 ADD PUSH2 0x2F5B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2FD2 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2FDB DUP2 PUSH2 0x2F9D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2FF5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2FC5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2FFF JUMPI JUMP JUMPDEST PUSH2 0x3007 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x301D PUSH1 0x4 DUP3 ADD PUSH2 0x2FDF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x302B PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3046 PUSH2 0x3041 PUSH2 0x304D SWAP3 PUSH2 0x26C5 JUMP JUMPDEST PUSH2 0x302E JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3071 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x3051 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x308F PUSH2 0x308A PUSH2 0x3094 SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x30AF PUSH2 0x30AA PUSH2 0x30B6 SWAP3 PUSH2 0x307B JUMP JUMPDEST PUSH2 0x3097 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x3057 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x30E5 PUSH1 0x20 PUSH1 0x0 PUSH2 0x30EB SWAP5 PUSH2 0x30DD DUP3 DUP3 ADD PUSH2 0x30D7 DUP5 DUP9 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP1 PUSH2 0x3031 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x1F15 JUMP JUMPDEST SWAP1 PUSH2 0x309A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x30F7 SWAP2 PUSH2 0x30BA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x316A PUSH2 0x3171 SWAP3 PUSH2 0x3125 DUP4 PUSH2 0x311E PUSH2 0x3118 PUSH2 0x3113 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x314B DUP2 PUSH2 0x3144 PUSH2 0x313E PUSH2 0x3139 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 PUSH2 0x3161 PUSH2 0x3157 PUSH2 0x3021 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x317C PUSH2 0x1C04 JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x31B9 JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x319A JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x31DC PUSH2 0x31D7 PUSH2 0x31E1 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x31F0 SWAP2 ADD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x3213 DUP3 PUSH2 0xE9A JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3224 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3233 SWAP1 MLOAD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3242 PUSH2 0x3247 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 SLOAD PUSH2 0x3236 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3266 PUSH2 0x326C SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3277 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST SWAP1 PUSH2 0x3291 PUSH2 0x328C PUSH2 0x3298 SWAP3 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x32AB PUSH2 0x32B1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x32BC JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH2 0x32D1 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 DUP5 DUP4 SWAP2 PUSH2 0x3A8A JUMP JUMPDEST PUSH2 0x32DA DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0x32E5 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP3 PUSH2 0x32F0 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP4 JUMPDEST DUP5 PUSH2 0x3305 PUSH2 0x32FF DUP9 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x3382 JUMPI PUSH2 0x3376 PUSH2 0x337C SWAP2 PUSH2 0x335D PUSH2 0x3328 PUSH2 0x3323 DUP9 DUP11 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x3357 PUSH2 0x3348 PUSH1 0x1 PUSH2 0x3342 PUSH2 0x333D DUP14 DUP13 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x3352 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x3370 PUSH2 0x336B DUP8 DUP10 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP5 PUSH2 0x31E4 JUMP JUMPDEST SWAP4 PUSH2 0x32F2 JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x33A6 SWAP3 POP PUSH2 0x339F SWAP2 POP PUSH2 0x339A PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33C4 PUSH2 0x33BF PUSH2 0x33C9 SWAP3 PUSH2 0x33AD JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D4 PUSH2 0x33A8 JUMP JUMPDEST POP PUSH2 0x33E0 PUSH2 0x2710 PUSH2 0x33B0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33EB PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x33F9 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP SWAP5 SWAP3 SWAP4 SWAP1 SWAP4 PUSH2 0x340E PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x341B JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3431 PUSH2 0x3437 SWAP4 PUSH2 0x343D SWAP8 SWAP7 SWAP1 SWAP3 SWAP4 SWAP6 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x3413 JUMP JUMPDEST SWAP1 PUSH2 0x346B PUSH2 0x3466 PUSH2 0x3470 SWAP4 PUSH2 0x345F DUP2 DUP6 SWAP1 PUSH2 0x3AA5 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3B8C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x347B PUSH2 0x1DF1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x34A2 PUSH2 0x349D PUSH2 0x34A7 SWAP4 PUSH2 0x3496 DUP2 DUP6 SWAP1 PUSH2 0x3BC7 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3C61 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34DF PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x34E8 DUP2 PUSH2 0x34AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3502 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x34D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x350C JUMPI JUMP JUMPDEST PUSH2 0x3514 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x352A PUSH1 0x4 DUP3 ADD PUSH2 0x34EC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x35AA SWAP1 PUSH2 0x35A3 PUSH2 0x35AF SWAP5 SWAP4 PUSH2 0x355E DUP6 PUSH2 0x3557 PUSH2 0x3551 PUSH2 0x354C PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x3584 DUP2 PUSH2 0x357D PUSH2 0x3577 PUSH2 0x3572 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x3505 JUMP JUMPDEST SWAP4 PUSH2 0x359A PUSH2 0x3590 PUSH2 0x3021 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x35FF SWAP2 SWAP3 PUSH2 0x35CB PUSH2 0x3605 SWAP6 PUSH2 0x35F0 SWAP4 SWAP1 DUP7 DUP5 SWAP2 SWAP3 PUSH2 0x3C9C JUMP JUMPDEST PUSH2 0x35E8 PUSH2 0x35E1 DUP3 PUSH2 0x35DC PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x35FA DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x3626 PUSH2 0x366B SWAP7 SWAP5 PUSH2 0x361F PUSH2 0x362D SWAP5 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x363F PUSH2 0x3638 PUSH2 0x1448 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3651 PUSH2 0x364A PUSH2 0x188F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3663 PUSH2 0x365C PUSH2 0x18E7 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3D9D JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x367C PUSH2 0x3681 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0xAE9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3698 PUSH2 0x3693 PUSH2 0x369D SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36CC PUSH2 0x36C7 PUSH2 0x36D6 SWAP4 PUSH2 0x36C2 PUSH1 0x0 PUSH2 0x36D1 SWAP6 PUSH2 0x36BB PUSH2 0x1DF1 JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3E18 JUMP JUMPDEST PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3684 JUMP JUMPDEST PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3714 PUSH2 0x3729 SWAP4 PUSH2 0x36EF PUSH2 0x3723 SWAP4 DUP6 DUP4 SWAP2 PUSH2 0x3E3A JUMP JUMPDEST PUSH2 0x370C PUSH2 0x3705 DUP3 PUSH2 0x3700 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x371E DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP3 PUSH2 0x373C SWAP2 SWAP5 SWAP4 SWAP1 DUP6 DUP5 SWAP2 SWAP3 PUSH2 0x3E55 JUMP JUMPDEST PUSH2 0x3745 DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP2 PUSH2 0x3750 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x375B PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x3770 PUSH2 0x376A DUP8 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x37EE JUMPI PUSH2 0x3796 PUSH2 0x37E8 SWAP2 PUSH2 0x3790 PUSH2 0x378B DUP8 DUP8 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 PUSH2 0x37E3 PUSH2 0x37AD PUSH2 0x37A8 DUP8 DUP5 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x37DD PUSH2 0x37CE PUSH1 0x1 PUSH2 0x37C8 PUSH2 0x37C3 DUP14 DUP9 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x37D8 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x31E4 JUMP JUMPDEST SWAP2 PUSH2 0x375D JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x3812 SWAP3 POP PUSH2 0x380B SWAP2 POP PUSH2 0x3806 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x382C PUSH1 0x0 PUSH2 0x3831 SWAP3 PUSH2 0x3825 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3F98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x383D PUSH2 0x241D JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x385C PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0x3E85E62F PUSH1 0xE0 SHL PUSH2 0x3877 PUSH2 0x3871 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3884 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x388E SWAP2 POP PUSH2 0x3FB0 JUMP JUMPDEST CODESIZE PUSH2 0x3880 JUMP JUMPDEST PUSH2 0x389C PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x38A6 DUP2 PUSH2 0x3FD7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x38EB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x38D0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x38C0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x38CA SWAP2 POP PUSH2 0x4017 JUMP JUMPDEST CODESIZE PUSH2 0x38BC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x38E5 PUSH2 0x38DF DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ PUSH2 0x38B4 JUMP JUMPDEST POP PUSH2 0x38F5 DUP2 PUSH2 0x4017 JUMP JUMPDEST PUSH2 0x38AD JUMP JUMPDEST PUSH2 0x3902 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x390C DUP2 PUSH2 0x4017 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3918 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3922 SWAP2 POP PUSH2 0x4057 JUMP JUMPDEST CODESIZE PUSH2 0x3914 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x393F PUSH2 0x393A PUSH2 0x3944 SWAP3 PUSH2 0x3928 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x397B PUSH1 0x17 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x3984 DUP2 PUSH2 0x3947 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39BC PUSH1 0x11 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x39C5 DUP2 PUSH2 0x3988 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39E3 PUSH2 0x39EE SWAP4 SWAP3 PUSH2 0x39DD PUSH2 0x39E8 SWAP4 PUSH2 0x396F JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x39B0 JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3A06 PUSH2 0x3A00 DUP4 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3A0E JUMPI POP POP JUMP JUMPDEST PUSH2 0x3A86 SWAP2 PUSH2 0x3A64 PUSH2 0x3A3D PUSH2 0x3A2D PUSH2 0x3A27 PUSH2 0x3A69 SWAP6 PUSH2 0x40E5 JUMP JUMPDEST SWAP4 PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3A37 PUSH1 0x20 PUSH2 0x392B JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP2 PUSH2 0x3A55 PUSH2 0x3A49 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x39C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x3AA3 SWAP3 PUSH2 0x3A9A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x4479 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AB9 PUSH2 0x3AB3 DUP3 DUP5 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3AC2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3AE5 PUSH1 0x1 PUSH2 0x3AE0 PUSH1 0x0 PUSH2 0x3AD8 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3AEE PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3B2B PUSH2 0x3B25 PUSH2 0x3B1F PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3B34 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3B3E DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3ABE JUMP JUMPDEST PUSH2 0x3B51 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B68 PUSH2 0x3B63 PUSH2 0x3B6D SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B84 PUSH2 0x3B7F PUSH2 0x3B89 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3BBF PUSH2 0x3BB9 PUSH2 0x3BB4 PUSH2 0x3BAF PUSH1 0x0 PUSH2 0x3BC4 SWAP7 PUSH2 0x3BA7 PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 DUP2 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x3BDB JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3BFE PUSH1 0x0 PUSH2 0x3BF9 PUSH1 0x0 PUSH2 0x3BF1 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3C07 PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3C44 PUSH2 0x3C3E PUSH2 0x3C38 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3C4D PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3C57 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3BD7 JUMP JUMPDEST SWAP1 PUSH2 0x3C94 PUSH2 0x3C8E PUSH2 0x3C89 PUSH2 0x3C84 PUSH1 0x0 PUSH2 0x3C99 SWAP7 PUSH2 0x3C7C PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4729 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3CA8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3D84 JUMPI JUMPDEST DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3D76 JUMPI PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE DUP4 PUSH1 0x14 MSTORE DUP5 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP4 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x3D68 JUMPI SSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x60 SHR PUSH1 0x0 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP4 LOG4 PUSH2 0x3D15 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3D4F JUMPI JUMPDEST PUSH2 0x3D23 DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3D2E JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3D46 SWAP4 PUSH2 0x3D3C PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x4840 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3D28 JUMP JUMPDEST PUSH2 0x3D58 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D62 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D1A JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3D8D DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D97 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3CAD JUMP JUMPDEST SWAP1 PUSH2 0x3DB3 PUSH2 0x3DB8 SWAP4 SWAP3 PUSH2 0x3DAE PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x48D9 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3DD2 DUP2 PUSH2 0x3DBA JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3DED JUMPI PUSH2 0x3DE4 PUSH1 0x1 SWAP2 PUSH2 0x3DBE JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3E02 SWAP1 PUSH1 0x8 PUSH2 0x3E07 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3E15 SWAP2 SLOAD PUSH2 0x3DF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3E37 SWAP2 PUSH1 0x0 PUSH2 0x3E31 SWAP3 PUSH2 0x3E2A PUSH2 0x1D7C JUMP JUMPDEST POP ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3E53 SWAP3 PUSH2 0x3E4A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x48F9 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3E61 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3F93 JUMPI JUMPDEST DUP1 MLOAD DUP5 MLOAD SUB PUSH2 0x3F85 JUMPI DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3F77 JUMPI DUP1 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP5 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x3F40 JUMPI POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP2 DUP9 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD PUSH1 0x40 DUP3 ADD SWAP1 DUP2 DUP2 DUP13 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP4 ADD MSTORE RETURNDATASIZE ADD DUP7 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP2 DUP2 DUP10 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP4 PUSH1 0x60 SHR SWAP4 CALLER SWAP3 LOG4 PUSH2 0x3F01 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3F3B JUMPI JUMPDEST PUSH2 0x3F0F DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3F1A JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3F32 SWAP4 PUSH2 0x3F28 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x49FD JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST DUP1 DUP4 ADD MLOAD SWAP1 DUP1 DUP8 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x3F69 JUMPI PUSH1 0x20 SWAP3 SSTORE SUB DUP1 PUSH2 0x3E8E JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3E66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FAD SWAP2 PUSH2 0x3FA6 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FB8 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0xE89341C DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0xD9B67A26 DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x3FDF PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x3FFA PUSH2 0x3FF4 PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4007 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4011 SWAP2 POP PUSH2 0x4AB4 JUMP JUMPDEST CODESIZE PUSH2 0x4003 JUMP JUMPDEST PUSH2 0x401F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x403A PUSH2 0x4034 PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4047 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4051 SWAP2 POP PUSH2 0x4ADA JUMP JUMPDEST CODESIZE PUSH2 0x4043 JUMP JUMPDEST PUSH2 0x405F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x407A PUSH2 0x4074 PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4087 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4091 SWAP2 POP PUSH2 0x3894 JUMP JUMPDEST CODESIZE PUSH2 0x4083 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x40B4 PUSH2 0x40AF PUSH2 0x40B9 SWAP3 PUSH2 0x4097 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40C6 PUSH1 0x14 PUSH2 0x40A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40DD PUSH2 0x40D8 PUSH2 0x40E2 SWAP3 PUSH2 0x409A JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4102 PUSH2 0x40FD PUSH2 0x4118 SWAP3 PUSH2 0x40F7 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x4112 PUSH2 0x410D PUSH2 0x40BC JUMP JUMPDEST PUSH2 0x40C9 JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4132 PUSH2 0x412D PUSH2 0x4137 SWAP3 PUSH2 0x411B JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x414C PUSH2 0x4147 DUP4 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x417B PUSH2 0x4163 DUP4 PUSH2 0x413A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x4171 DUP7 SWAP4 PUSH2 0x1028 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x4151 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4193 DUP3 PUSH2 0x4185 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x41A5 JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41C9 PUSH2 0x41C4 PUSH2 0x41CE SWAP3 PUSH2 0x41B2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41DA SWAP1 PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x41E9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x420D PUSH2 0x41EE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4227 PUSH2 0x4222 PUSH2 0x422C SWAP3 PUSH2 0x4210 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x424C PUSH2 0x4247 PUSH2 0x4251 SWAP3 PUSH2 0x4235 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4273 SWAP1 PUSH2 0x426D PUSH2 0x4267 PUSH2 0x4278 SWAP5 PUSH2 0x409A JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x42AF PUSH1 0x20 DUP1 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x42B8 DUP2 PUSH2 0x427B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x42D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x42A3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x42DC JUMPI JUMP JUMPDEST PUSH2 0x42E4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x42FA PUSH1 0x4 DUP3 ADD PUSH2 0x42BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x4308 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x43A2 PUSH2 0x4392 PUSH2 0x433E PUSH2 0x4339 PUSH2 0x4329 PUSH1 0x2 PUSH2 0x4324 DUP8 SWAP2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x4333 PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST PUSH2 0x4156 JUMP JUMPDEST SWAP3 PUSH2 0x4347 PUSH2 0x417D JUMP JUMPDEST PUSH2 0x4360 DUP6 PUSH2 0x435A PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4369 PUSH2 0x41AA JUMP JUMPDEST PUSH2 0x4382 DUP6 PUSH2 0x437C PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x438D PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x439C PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x43B8 PUSH2 0x43B2 PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST GT ISZERO PUSH2 0x441F JUMPI PUSH2 0x43C6 PUSH2 0x4205 JUMP JUMPDEST DUP2 PUSH2 0x43D1 PUSH1 0xF PUSH2 0x4213 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x441A JUMPI PUSH2 0x43ED PUSH2 0x440E SWAP3 PUSH2 0x4414 SWAP5 BYTE PUSH2 0x422F JUMP JUMPDEST PUSH2 0x43FD DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4408 PUSH1 0x4 PUSH2 0x4238 JUMP JUMPDEST SWAP1 PUSH2 0x4254 JUMP JUMPDEST SWAP4 PUSH2 0x41D1 JUMP JUMPDEST SWAP3 PUSH2 0x43A4 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x4447 SWAP3 SWAP4 POP PUSH2 0x4442 SWAP1 PUSH2 0x443C PUSH2 0x4436 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x445C PUSH2 0x4457 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x446B PUSH1 0x0 PUSH2 0x444A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4476 PUSH2 0x4461 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x4485 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x45B1 JUMPI JUMPDEST DUP2 MLOAD DUP6 MLOAD SUB PUSH2 0x45A3 JUMPI PUSH1 0x60 SHL SWAP2 DUP3 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 PUSH1 0x60 SHL DUP4 DUP2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x4581 JUMPI JUMPDEST POP DUP4 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x454B JUMPI POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x0 SWAP4 SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x40 DUP4 MSTORE DUP1 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP2 PUSH1 0x40 DUP6 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP5 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP3 PUSH1 0x60 SHR SWAP3 CALLER SWAP3 LOG4 PUSH2 0x4536 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x453D JUMPI JUMPDEST JUMP JUMPDEST PUSH2 0x4545 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x453B JUMP JUMPDEST DUP1 DUP3 ADD MLOAD SWAP1 DUP1 DUP7 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP3 DUP4 DUP2 GT PUSH2 0x4573 JUMPI PUSH1 0x20 SWAP4 SUB SWAP1 SSTORE SUB DUP1 PUSH2 0x44BD JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x4595 JUMPI CODESIZE PUSH2 0x44B5 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x45B9 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x448A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x45DA DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x45F5 JUMPI PUSH2 0x45EC PUSH1 0x1 SWAP2 PUSH2 0x45C2 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x4610 PUSH2 0x460B PUSH2 0x4618 SWAP4 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x464C JUMPI DUP3 PUSH2 0x4644 SWAP2 PUSH1 0x1 PUSH2 0x464A SWAP6 ADD DUP2 SSTORE PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x465B SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x4671 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4686 PUSH2 0x4680 DUP3 DUP5 SWAP1 PUSH2 0x4B1A JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x46C9 JUMPI PUSH2 0x46BF PUSH2 0x46C4 SWAP3 PUSH2 0x46AA PUSH2 0x46A3 PUSH1 0x0 DUP6 ADD PUSH2 0x45BF JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x461C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x46B8 PUSH1 0x0 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP4 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x46F8 SWAP2 PUSH2 0x46F2 PUSH2 0x1D7C JUMP JUMPDEST SWAP2 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4703 DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4724 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x4721 PUSH2 0x471B DUP4 DUP4 PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x46E6 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x46D0 JUMP JUMPDEST PUSH2 0x4731 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4748 PUSH2 0x4743 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x475D PUSH2 0x4757 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x482B JUMPI PUSH2 0x47DD SWAP3 PUSH1 0x1 PUSH2 0x47D8 SWAP3 DUP5 PUSH2 0x4786 PUSH1 0x0 SWAP7 PUSH2 0x4780 DUP6 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST PUSH2 0x47A3 PUSH2 0x4794 DUP9 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH2 0x479D DUP7 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST DUP1 PUSH2 0x47B6 PUSH2 0x47B0 DUP5 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x47E2 JUMPI JUMPDEST POP POP POP PUSH2 0x47D2 PUSH2 0x47CD DUP7 DUP4 ADD PUSH2 0x45BF JUMP JUMPDEST PUSH2 0x46FA JUMP JUMPDEST ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x197F JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4823 SWAP3 PUSH2 0x4815 PUSH2 0x4801 PUSH2 0x47FB PUSH2 0x481E SWAP5 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP4 PUSH2 0x480F DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x47BC JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x483B PUSH2 0x1834 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xF23A6E61 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP1 DUP5 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xC0 DUP8 ADD MSTORE PUSH2 0x48C5 JUMPI JUMPDEST POP POP PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x48B6 JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x48A8 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4897 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP7 PUSH1 0xE0 DUP8 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x4882 JUMP JUMPDEST SWAP1 PUSH2 0x48F0 PUSH2 0x48E9 PUSH2 0x48F7 SWAP4 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x4905 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x49DB JUMPI JUMPDEST PUSH1 0x60 SHL SWAP1 DUP2 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP2 DUP2 PUSH1 0x60 SHL EQ DUP2 PUSH1 0x60 SHL ISZERO OR ISZERO PUSH2 0x49B9 JUMPI JUMPDEST POP DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 DUP3 DUP5 GT PUSH2 0x49AB JUMPI DUP4 PUSH1 0x0 SWAP4 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x60 SHR CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP5 LOG4 PUSH2 0x497F PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x4988 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4994 PUSH2 0x499A SWAP3 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49A3 PUSH2 0x446E JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x4984 JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x49CD JUMPI CODESIZE PUSH2 0x492E JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x49E4 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49EE DUP4 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49F7 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x490A JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xBC197C81 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP7 ADD MSTORE DUP1 MLOAD PUSH1 0x5 SHL DUP7 ADD DUP1 SWAP2 PUSH1 0xC0 DUP8 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0xA0 ADD SWAP1 DUP2 PUSH1 0x80 DUP8 ADD MSTORE RETURNDATASIZE ADD SWAP2 DUP3 DUP2 MLOAD PUSH1 0x5 SHL DUP9 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD PUSH1 0xA0 DUP6 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD DUP7 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP PUSH1 0x1C DUP4 ADD SWAP1 RETURNDATASIZE ADD SUB SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x4AA5 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x4A97 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4A86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4ABC PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4AD6 PUSH2 0x4AD0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x4AE2 PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x4AFD PUSH2 0x4AF7 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4B0A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4B14 SWAP2 POP PUSH2 0x3FD7 JUMP JUMPDEST CODESIZE PUSH2 0x4B06 JUMP JUMPDEST PUSH2 0x4B38 SWAP2 PUSH1 0x1 PUSH2 0x4B33 SWAP3 PUSH2 0x4B2C PUSH2 0x1834 JUMP JUMPDEST POP ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST PUSH2 0x4B4B PUSH2 0x4B45 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT ADDMOD DUP1 PUSH17 0x2FE6072BA72743479D7976A506937A4E7 JUMP 0xAA EXP 0xEF PUSH11 0xD714BEF8804E64736F6C63 NUMBER STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "305:2959:40:-:0;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;514:55;552:10;538:24;;514:55::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 1177,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 659,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 5828,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_array_uint256_dyn_calldatat_array_uint256_dyn_calldatat_bytes_calldata": {
                  "entryPoint": 3205,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 8
                },
                "abi_decode_addresst_addresst_uint256t_uint256t_bytes_calldata": {
                  "entryPoint": 5979,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_addresst_array_uint256_dynt_array_uint256_dynt_bytes": {
                  "entryPoint": 5455,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_addresst_bool": {
                  "entryPoint": 5305,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_stringt_stringt_stringt_addresst_uint96t_addresst_bytes32": {
                  "entryPoint": 4462,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 8
                },
                "abi_decode_addresst_struct_Attestation_calldatat_struct_Call_calldata": {
                  "entryPoint": 4995,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_uint256t_uint256t_bytes": {
                  "entryPoint": 4260,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_addresst_uint96": {
                  "entryPoint": 1073,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_array_address_dyn_calldata": {
                  "entryPoint": 3579,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_array_address_dyn_calldatat_array_uint256_dyn_calldata": {
                  "entryPoint": 3642,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_array_uint256_dyn": {
                  "entryPoint": 2451,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_array_uint256_dyn_calldata": {
                  "entryPoint": 3079,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_array_uint256_dynt_array_uint256_dyn": {
                  "entryPoint": 2486,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_array_uint256_dyn": {
                  "entryPoint": 2364,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 4171,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 1858,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bool": {
                  "entryPoint": 5290,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 4225,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 2671,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32_fromMemory": {
                  "entryPoint": 10132,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32t_address": {
                  "entryPoint": 3429,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes32t_uint256": {
                  "entryPoint": 4725,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes4": {
                  "entryPoint": 896,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes_calldata": {
                  "entryPoint": 3142,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_string": {
                  "entryPoint": 1947,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_string_memory_ptr": {
                  "entryPoint": 1912,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_struct_Attestation_calldata": {
                  "entryPoint": 4957,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_struct_Call_calldata": {
                  "entryPoint": 4976,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32": {
                  "entryPoint": 2656,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32_fromMemory": {
                  "entryPoint": 10117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes4": {
                  "entryPoint": 881,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 2052,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_uint256": {
                  "entryPoint": 2134,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 698,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256t_addresst_uint96": {
                  "entryPoint": 3956,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_uint256t_uint256": {
                  "entryPoint": 2924,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_uint64": {
                  "entryPoint": 10551,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint96": {
                  "entryPoint": 1058,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_string_storage": {
                  "entryPoint": 1442,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_uint256": {
                  "entryPoint": 3770,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 2970,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_struct_Attestation_calldata_bytes32": {
                  "entryPoint": 10835,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address": {
                  "entryPoint": 10181,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_uint256": {
                  "entryPoint": 2983,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_array_uint256_dyn": {
                  "entryPoint": 3874,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_array_uint256_dyn_memory_ptr": {
                  "entryPoint": 3793,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": 945,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 932,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32": {
                  "entryPoint": 10243,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 2702,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes4": {
                  "entryPoint": 10212,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_calldata": {
                  "entryPoint": 10350,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_string_storage_string_stringliteral": {
                  "entryPoint": 7425,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_stringliteral_da0d_string_stringliteral_f986_string": {
                  "entryPoint": 14793,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1702,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_calldata": {
                  "entryPoint": 10482,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 7319,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 1299,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage_to_string_nonPadded_inplace": {
                  "entryPoint": 7182,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 1653,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 7400,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_04fc": {
                  "entryPoint": 17059,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_d20a": {
                  "entryPoint": 13522,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_da0d": {
                  "entryPoint": 14703,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_dcda": {
                  "entryPoint": 12097,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f66a": {
                  "entryPoint": 12229,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f986": {
                  "entryPoint": 14768,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fb06": {
                  "entryPoint": 9106,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_struct_Attestation_calldata": {
                  "entryPoint": 10662,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_AuthData_calldata": {
                  "entryPoint": 10597,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 1119,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 4771,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_bytes32": {
                  "entryPoint": 2715,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_04fc": {
                  "entryPoint": 17084,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_d20a": {
                  "entryPoint": 13548,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_dcda": {
                  "entryPoint": 12123,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_f66a": {
                  "entryPoint": 12255,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_fb06": {
                  "entryPoint": 9132,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 772,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 3757,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint256_to_uint256_fromStack": {
                  "entryPoint": 759,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint64": {
                  "entryPoint": 10584,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 16726,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 16698,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 17482,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_RoyaltyInfo": {
                  "entryPoint": 7822,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_RoyaltyInfo_storage_ptr": {
                  "entryPoint": 12321,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 594,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_array_uint256_dyn": {
                  "entryPoint": 2330,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 4136,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage": {
                  "entryPoint": 15806,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 17858,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_uint256_dyn": {
                  "entryPoint": 3751,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 1288,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage": {
                  "entryPoint": 15802,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 17869,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_uint256_dyn": {
                  "entryPoint": 3738,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 16773,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 1603,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_nextElement_array_uint256_dyn": {
                  "entryPoint": 3787,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_pop_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 18170,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 17948,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "array_storeLengthForEncoding_array_uint256_dyn": {
                  "entryPoint": 3742,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 10341,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 1279,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_fromStack": {
                  "entryPoint": 1607,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_nonPadded_inplace": {
                  "entryPoint": 7177,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_address": {
                  "entryPoint": 10163,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes32": {
                  "entryPoint": 10225,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes4": {
                  "entryPoint": 10194,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes_calldata": {
                  "entryPoint": 10271,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_string_calldata": {
                  "entryPoint": 10412,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_struct_AuthData_calldata": {
                  "entryPoint": 10385,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_uint64": {
                  "entryPoint": 10566,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 12956,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_div_uint256": {
                  "entryPoint": 8095,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 8020,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 12887,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 6579,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_address": {
                  "entryPoint": 626,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 927,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 2632,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 848,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 7694,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bool": {
                  "entryPoint": 9567,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bytes32": {
                  "entryPoint": 7595,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_IImplicitProjectValidation": {
                  "entryPoint": 10055,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 2222,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint96": {
                  "entryPoint": 7758,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_0_by": {
                  "entryPoint": 5155,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_15_by": {
                  "entryPoint": 16912,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_1_by": {
                  "entryPoint": 16818,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_2_by": {
                  "entryPoint": 16667,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 16949,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 13229,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 14632,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 16535,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 615,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 674,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint64": {
                  "entryPoint": 10517,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 16538,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint96": {
                  "entryPoint": 1020,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 6547,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constant_ADDRESS_LENGTH": {
                  "entryPoint": 16572,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 5192,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLICIT_MODE_ADMIN_ROLE": {
                  "entryPoint": 6951,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_METADATA_ADMIN_ROLE": {
                  "entryPoint": 6375,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_MINTER_ROLE": {
                  "entryPoint": 9420,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_ROYALTY_ADMIN_ROLE": {
                  "entryPoint": 6287,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_SYMBOLS": {
                  "entryPoint": 16901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 9925,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 7054,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_uint160": {
                  "entryPoint": 15176,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr": {
                  "entryPoint": 17855,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_array_uint256_dyn_calldata_to_array_uint256_dyn": {
                  "entryPoint": 8320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "convert_array_bytes_calldata_to_bytes": {
                  "entryPoint": 8334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "convert_array_bytes_to_string": {
                  "entryPoint": 7456,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bool_to_bool": {
                  "entryPoint": 9628,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_bytes32": {
                  "entryPoint": 7553,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_uint256": {
                  "entryPoint": 13936,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_address": {
                  "entryPoint": 10099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 7093,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint256": {
                  "entryPoint": 12744,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_1_by_1_to_uint256": {
                  "entryPoint": 16821,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint256": {
                  "entryPoint": 16670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 7945,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 5164,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 7917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 16915,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 16952,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint96": {
                  "entryPoint": 13232,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_0448_to_bytes1": {
                  "entryPoint": 16765,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 17518,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_cb29_to_bytes16": {
                  "entryPoint": 16878,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_to_bytes1": {
                  "entryPoint": 16810,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_struct_AddressSet_storage_to_struct_AddressSet_ptr": {
                  "entryPoint": 9870,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_RoyaltyInfo_storage_to_struct_RoyaltyInfo": {
                  "entryPoint": 7892,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_Set_storage_to_struct_Set_ptr": {
                  "entryPoint": 13933,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 14635,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 16544,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 9913,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 7042,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 7014,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint256": {
                  "entryPoint": 15188,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_bytes32": {
                  "entryPoint": 15216,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint160": {
                  "entryPoint": 13956,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 2793,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_uint256": {
                  "entryPoint": 16585,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint96_to_uint256": {
                  "entryPoint": 7970,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint96_to_uint96": {
                  "entryPoint": 12411,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 1528,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 6706,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 1846,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 17505,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 1616,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_struct_to_storage_from_struct_RoyaltyInfo_to_struct_RoyaltyInfo": {
                  "entryPoint": 12474,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 16849,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "divide_by_ceil": {
                  "entryPoint": 6438,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 5216,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_acceptImplicitRequest": {
                  "entryPoint": 5101,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 794,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOfBatch": {
                  "entryPoint": 3899,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_baseURI": {
                  "entryPoint": 4083,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_batchBurn": {
                  "entryPoint": 2580,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_batchMint": {
                  "entryPoint": 5599,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_burn": {
                  "entryPoint": 5403,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_contractURI": {
                  "entryPoint": 5775,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleAdmin": {
                  "entryPoint": 2737,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMember": {
                  "entryPoint": 4793,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMemberCount": {
                  "entryPoint": 5654,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_grantRole": {
                  "entryPoint": 3475,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_hasRole": {
                  "entryPoint": 4847,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_initialize": {
                  "entryPoint": 4664,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_isApprovedForAll": {
                  "entryPoint": 5874,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mint": {
                  "entryPoint": 4356,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 1727,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceRole": {
                  "entryPoint": 3527,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_revokeRole": {
                  "entryPoint": 5707,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_royaltyInfo": {
                  "entryPoint": 3019,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeBatchTransferFrom": {
                  "entryPoint": 3368,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom": {
                  "entryPoint": 6092,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setApprovalForAll": {
                  "entryPoint": 5351,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setBaseMetadataURI": {
                  "entryPoint": 4411,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setContractName": {
                  "entryPoint": 2001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setContractURI": {
                  "entryPoint": 4901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setDefaultRoyalty": {
                  "entryPoint": 1125,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeProjectId": {
                  "entryPoint": 5928,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeValidator": {
                  "entryPoint": 2083,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setTokenRoyalty": {
                  "entryPoint": 4015,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 967,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenSupply": {
                  "entryPoint": 2871,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_totalSupply": {
                  "entryPoint": 2277,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_uri": {
                  "entryPoint": 2165,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_dynamict_bytes32": {
                  "entryPoint": 15858,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_dynamict_uint256": {
                  "entryPoint": 2225,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 7705,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bool": {
                  "entryPoint": 9573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bytes32": {
                  "entryPoint": 7598,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_IImplicitProjectValidation": {
                  "entryPoint": 10066,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 12854,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint96": {
                  "entryPoint": 7775,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": 6688,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1487,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__batchBurn": {
                  "entryPoint": 14986,
                  "id": 5620,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun__batchMint": {
                  "entryPoint": 15957,
                  "id": 5524,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun__burn": {
                  "entryPoint": 18681,
                  "id": 5597,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun__checkRole": {
                  "entryPoint": 11999,
                  "id": 92,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__grantRole": {
                  "entryPoint": 15013,
                  "id": 283,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__mint": {
                  "entryPoint": 13745,
                  "id": 8511,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun__revokeRole": {
                  "entryPoint": 13440,
                  "id": 439,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__setTokenRoyalty": {
                  "entryPoint": 13614,
                  "id": 1327,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_acceptImplicitRequest": {
                  "entryPoint": 10906,
                  "id": 5098,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_add": {
                  "entryPoint": 18025,
                  "id": 3172,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_add_3472": {
                  "entryPoint": 15244,
                  "id": 3472,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_afterTokenTransferCalldata": {
                  "entryPoint": 13311,
                  "id": 5933,
                  "parameterSlots": 8,
                  "returnSlots": 0
                },
                "fun_at": {
                  "entryPoint": 15896,
                  "id": 3306,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_at_3568": {
                  "entryPoint": 13984,
                  "id": 3568,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_balanceOf": {
                  "entryPoint": 6160,
                  "id": 5257,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_balanceOfBatch": {
                  "entryPoint": 9250,
                  "id": 5386,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_batchBurn": {
                  "entryPoint": 12993,
                  "id": 8670,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_batchBurn_5666": {
                  "entryPoint": 17529,
                  "id": 5666,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_batchBurn_8431": {
                  "entryPoint": 7533,
                  "id": 8431,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_batchMint": {
                  "entryPoint": 14123,
                  "id": 8577,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_batchMint_8854": {
                  "entryPoint": 11208,
                  "id": 8854,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_batchMint_inner": {
                  "entryPoint": 11192,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_burn": {
                  "entryPoint": 14041,
                  "id": 8607,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_burn_5545": {
                  "entryPoint": 15930,
                  "id": 5545,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_burn_8411": {
                  "entryPoint": 11147,
                  "id": 8411,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_checkOnERC1155BatchReceived": {
                  "entryPoint": 18941,
                  "id": 5977,
                  "parameterSlots": 5,
                  "returnSlots": 0
                },
                "fun_checkOnERC1155Received": {
                  "entryPoint": 18496,
                  "id": 5959,
                  "parameterSlots": 5,
                  "returnSlots": 0
                },
                "fun_checkRole": {
                  "entryPoint": 14833,
                  "id": 131,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_contains": {
                  "entryPoint": 19226,
                  "id": 3275,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_feeDenominator": {
                  "entryPoint": 13260,
                  "id": 1247,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getRoleAdmin": {
                  "entryPoint": 7631,
                  "id": 146,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getRoleMember": {
                  "entryPoint": 9873,
                  "id": 375,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getRoleMemberCount": {
                  "entryPoint": 11222,
                  "id": 391,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 13385,
                  "id": 415,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_166": {
                  "entryPoint": 9016,
                  "id": 166,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_inner": {
                  "entryPoint": 9004,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_hasCode": {
                  "entryPoint": 18483,
                  "id": 5943,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_hasRole": {
                  "entryPoint": 9961,
                  "id": 79,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 13831,
                  "id": 8330,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_initializeImplicitMode": {
                  "entryPoint": 15773,
                  "id": 9293,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_initializeSignalsImplicitMode": {
                  "entryPoint": 18649,
                  "id": 5070,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize_8806": {
                  "entryPoint": 9675,
                  "id": 8806,
                  "parameterSlots": 8,
                  "returnSlots": 0
                },
                "fun_isApprovedForAll": {
                  "entryPoint": 11314,
                  "id": 5269,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_length": {
                  "entryPoint": 16280,
                  "id": 3289,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_length_3541": {
                  "entryPoint": 14356,
                  "id": 3541,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_mint": {
                  "entryPoint": 15516,
                  "id": 5463,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_mint_8829": {
                  "entryPoint": 9502,
                  "id": 8829,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_mint_inner": {
                  "entryPoint": 9486,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 13427,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_remove": {
                  "entryPoint": 18217,
                  "id": 3256,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_remove_3499": {
                  "entryPoint": 15457,
                  "id": 3499,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_renounceRole": {
                  "entryPoint": 9198,
                  "id": 209,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole": {
                  "entryPoint": 11302,
                  "id": 186,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_314": {
                  "entryPoint": 15303,
                  "id": 314,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_inner": {
                  "entryPoint": 11290,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_royaltyInfo": {
                  "entryPoint": 8129,
                  "id": 1238,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "fun_safeBatchTransferFrom": {
                  "entryPoint": 8348,
                  "id": 5371,
                  "parameterSlots": 8,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 11468,
                  "id": 5328,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_setApprovalForAll": {
                  "entryPoint": 11067,
                  "id": 5279,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setBaseMetadataURI": {
                  "entryPoint": 9556,
                  "id": 8367,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBaseMetadataURI_inner": {
                  "entryPoint": 9543,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractName": {
                  "entryPoint": 6940,
                  "id": 8381,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractName_inner": {
                  "entryPoint": 6927,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractURI": {
                  "entryPoint": 10044,
                  "id": 8395,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractURI_inner": {
                  "entryPoint": 10031,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty": {
                  "entryPoint": 12537,
                  "id": 1281,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty_9176": {
                  "entryPoint": 6363,
                  "id": 9176,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty_inner": {
                  "entryPoint": 6351,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId": {
                  "entryPoint": 11457,
                  "id": 9323,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId_inner": {
                  "entryPoint": 11444,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator": {
                  "entryPoint": 7161,
                  "id": 9309,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator_inner": {
                  "entryPoint": 7140,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setTokenRoyalty": {
                  "entryPoint": 9407,
                  "id": 9196,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_setTokenRoyalty_inner": {
                  "entryPoint": 9392,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_single": {
                  "entryPoint": 14388,
                  "id": 5988,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface": {
                  "entryPoint": 19162,
                  "id": 60,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_1188": {
                  "entryPoint": 16343,
                  "id": 1188,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_2135": {
                  "entryPoint": 19124,
                  "id": 2135,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_356": {
                  "entryPoint": 16407,
                  "id": 356,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5133": {
                  "entryPoint": 16471,
                  "id": 5133,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5396": {
                  "entryPoint": 16304,
                  "id": 5396,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8459": {
                  "entryPoint": 11931,
                  "id": 8459,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8693": {
                  "entryPoint": 14420,
                  "id": 8693,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8882": {
                  "entryPoint": 6201,
                  "id": 8882,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_9230": {
                  "entryPoint": 14484,
                  "id": 9230,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_9345": {
                  "entryPoint": 14586,
                  "id": 9345,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toHexString": {
                  "entryPoint": 16613,
                  "id": 2086,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toHexString_2066": {
                  "entryPoint": 17150,
                  "id": 2066,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_toString": {
                  "entryPoint": 12659,
                  "id": 6719,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_uri": {
                  "entryPoint": 7459,
                  "id": 8353,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_useAfterTokenTransfer": {
                  "entryPoint": 13297,
                  "id": 5887,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_useBeforeTokenTransfer": {
                  "entryPoint": 13283,
                  "id": 5861,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 5205,
                  "id": 27,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_baseURI": {
                  "entryPoint": 4067,
                  "id": 8273,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_contractURI": {
                  "entryPoint": 5759,
                  "id": 8275,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_name": {
                  "entryPoint": 1587,
                  "id": 8271,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_tokenSupply": {
                  "entryPoint": 2845,
                  "id": 8478,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "getter_fun_totalSupply": {
                  "entryPoint": 2263,
                  "id": 8474,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 2790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_wrapping_uint256": {
                  "entryPoint": 12772,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_bool_of_address": {
                  "entryPoint": 9937,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_AddressSet_storage_of_bytes32": {
                  "entryPoint": 9846,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_RoleData_storage_of_bytes32": {
                  "entryPoint": 7565,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_uint256_of_bytes32": {
                  "entryPoint": 18001,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_struct_RoyaltyInfo_storage_of_uint256": {
                  "entryPoint": 7670,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_uint256_of_uint256": {
                  "entryPoint": 2821,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mask_bytes_dynamic": {
                  "entryPoint": 6666,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 16777,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint256_dyn": {
                  "entryPoint": 12809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "modifier_onlyRole": {
                  "entryPoint": 9456,
                  "id": 38,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "modifier_onlyRole_158": {
                  "entryPoint": 8975,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_178": {
                  "entryPoint": 11261,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8360": {
                  "entryPoint": 9516,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8374": {
                  "entryPoint": 6411,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8388": {
                  "entryPoint": 10004,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8844": {
                  "entryPoint": 11162,
                  "id": 38,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9168": {
                  "entryPoint": 6323,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9187": {
                  "entryPoint": 9363,
                  "id": 38,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9300": {
                  "entryPoint": 6987,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9316": {
                  "entryPoint": 11350,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x00": {
                  "entryPoint": 1193,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 7998,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x12": {
                  "entryPoint": 8073,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x22": {
                  "entryPoint": 1215,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x31": {
                  "entryPoint": 18128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 12787,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1465,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 12334,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bool": {
                  "entryPoint": 9640,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bytes32": {
                  "entryPoint": 11400,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_IImplicitProjectValidation": {
                  "entryPoint": 7105,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint256": {
                  "entryPoint": 6490,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint96": {
                  "entryPoint": 12439,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_address": {
                  "entryPoint": 7904,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint256": {
                  "entryPoint": 12841,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint96": {
                  "entryPoint": 7957,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_dynamic_split_string": {
                  "entryPoint": 1562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_reference_type_struct_RoyaltyInfo": {
                  "entryPoint": 7835,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_bytes32": {
                  "entryPoint": 15882,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_uint256": {
                  "entryPoint": 2249,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 7725,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": 9593,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bytes32": {
                  "entryPoint": 7618,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_IImplicitProjectValidation": {
                  "entryPoint": 10086,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 12874,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint96": {
                  "entryPoint": 7795,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 17109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_d20a": {
                  "entryPoint": 13573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_dcda": {
                  "entryPoint": 12148,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f66a": {
                  "entryPoint": 12280,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_fb06": {
                  "entryPoint": 9157,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2": {
                  "entryPoint": 10256,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
                  "entryPoint": 3074,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1780,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d": {
                  "entryPoint": 4952,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20": {
                  "entryPoint": 10261,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 6150,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
                  "entryPoint": 2359,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1785,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 600,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4": {
                  "entryPoint": 10266,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 605,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 10889,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 1455,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 5158,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_160": {
                  "entryPoint": 12369,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 10111,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_248": {
                  "entryPoint": 16943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 6448,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 7589,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_224_unsigned": {
                  "entryPoint": 588,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_uint256_uint8": {
                  "entryPoint": 16980,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 7752,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 2218,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_array_index_access_bytes32_dyn": {
                  "entryPoint": 15817,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_array_index_access_bytes32_dyn_ptr": {
                  "entryPoint": 17873,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_set_to_zero_bytes32": {
                  "entryPoint": 18150,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 6527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
                  "entryPoint": 17019,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972": {
                  "entryPoint": 7360,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084": {
                  "entryPoint": 13482,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
                  "entryPoint": 14663,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d": {
                  "entryPoint": 12019,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff": {
                  "entryPoint": 12189,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
                  "entryPoint": 14728,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
                  "entryPoint": 9028,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_1_shift": {
                  "entryPoint": 9606,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_20_shift": {
                  "entryPoint": 7066,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 6452,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 12375,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_0": {
                  "entryPoint": 11377,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_bytes32_to_bytes32": {
                  "entryPoint": 17914,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 12337,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": 9643,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bytes32_to_bytes32": {
                  "entryPoint": 11412,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 7108,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_string_to_string": {
                  "entryPoint": 6915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_struct_RoyaltyInfo_to_struct_RoyaltyInfo": {
                  "entryPoint": 12525,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 12924,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint96_to_uint96": {
                  "entryPoint": 12442,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 6493,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 638,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bool": {
                  "entryPoint": 5269,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 2635,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 860,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 677,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint64": {
                  "entryPoint": 10530,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint96": {
                  "entryPoint": 1037,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "write_to_memory_address": {
                  "entryPoint": 7738,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "write_to_memory_uint96": {
                  "entryPoint": 7808,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_memory_chunk_bytes1": {
                  "entryPoint": 16721,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 7665,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_array_uint256_dyn": {
                  "entryPoint": 9245,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 6196,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes32": {
                  "entryPoint": 7548,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_string": {
                  "entryPoint": 7172,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 6155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint96": {
                  "entryPoint": 13224,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {
                "8738": [
                  {
                    "length": 32,
                    "start": 9690
                  }
                ]
              },
              "linkReferences": {},
              "object": "60806040526004361015610013575b611806565b61001e60003561024c565b8062fdd58e1461024757806301ffc9a71461024257806304634d8d1461023d57806306fdde03146102385780630b5ee006146102335780630bb310de1461022e5780630e89341c1461022957806318160ddd1461022457806320ec271b1461021f578063248a9ca31461021a5780632693ebf2146102155780632a55205a146102105780632eb2c2d61461020b5780632f2ff15d1461020657806336568abe146102015780634e1273f4146101fc5780635944c753146101f75780636c0360eb146101f2578063731133e9146101ed5780637e518ec8146101e85780638ff83ac1146101e35780639010d07c146101de57806391d14854146101d9578063938e3d7b146101d45780639d043a66146101cf578063a217fddf146101ca578063a22cb465146101c5578063b390c0ab146101c0578063b48ab8b6146101bb578063ca15c873146101b6578063d547741f146101b1578063e8a3d485146101ac578063e985e9c5146101a7578063ed4c2ac7146101a25763f242432a0361000e576117cc565b611728565b6116f2565b61168f565b61164b565b611616565b6115df565b61151b565b6114e7565b611460565b6113ed565b611325565b6112ef565b6112b9565b611238565b61113b565b611104565b610ff3565b610faf565b610f3b565b610dc7565b610d93565b610d28565b610bcb565b610b37565b610ab1565b610a14565b6108e5565b610875565b610823565b6107d1565b6106bf565b610465565b6103c7565b61031a565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61027b90610267565b90565b61028781610272565b0361028e57565b600080fd5b905035906102a08261027e565b565b90565b6102ae816102a2565b036102b557565b600080fd5b905035906102c7826102a5565b565b91906040838203126102f257806102e66102ef9260008601610293565b936020016102ba565b90565b61025d565b610300906102a2565b9052565b9190610318906000602085019401906102f7565b565b3461034b576103476103366103303660046102c9565b90611810565b61033e610252565b91829182610304565b0390f35b610258565b63ffffffff60e01b1690565b61036581610350565b0361036c57565b600080fd5b9050359061037e8261035c565b565b9060208282031261039a5761039791600001610371565b90565b61025d565b151590565b6103ad9061039f565b9052565b91906103c5906000602085019401906103a4565b565b346103f7576103f36103e26103dd366004610380565b611839565b6103ea610252565b918291826103b1565b0390f35b610258565b6bffffffffffffffffffffffff1690565b610416816103fc565b0361041d57565b600080fd5b9050359061042f8261040d565b565b919060408382031261045a578061044e6104579260008601610293565b93602001610422565b90565b61025d565b60000190565b346104945761047e610478366004610431565b906118db565b610486610252565b806104908161045f565b0390f35b610258565b60009103126104a457565b61025d565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156104f5575b60208310146104f057565b6104bf565b91607f16916104e5565b60209181520190565b600052602060002090565b906000929180549061052e610527836104d5565b80946104ff565b91600181169081600014610587575060011461054a575b505050565b6105579192939450610508565b916000925b81841061056f5750500190388080610545565b6001816020929593955484860152019101929061055c565b92949550505060ff1916825215156020020190388080610545565b906105ac91610513565b90565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906105d9906105af565b810190811067ffffffffffffffff8211176105f357604052565b6105b9565b9061061861061192610608610252565b938480926105a2565b03836105cf565b565b9060001061062e5761062b906105f8565b90565b6104a9565b610640600860009061061a565b90565b5190565b60209181520190565b60005b838110610664575050906000910152565b806020918301518185015201610653565b61069461069d6020936106a29361068b81610643565b93848093610647565b95869101610650565b6105af565b0190565b6106bc9160208201916000818403910152610675565b90565b346106ef576106cf366004610499565b6106eb6106da610633565b6106e2610252565b918291826106a6565b0390f35b610258565b600080fd5b600080fd5b9061071161070a610252565b92836105cf565b565b67ffffffffffffffff81116107315761072d6020916105af565b0190565b6105b9565b90826000939282370152565b9092919261075761075282610713565b6106fe565b938185526020850190828401116107735761077192610736565b565b6106f9565b9080601f830112156107965781602061079393359101610742565b90565b6106f4565b906020828203126107cc57600082013567ffffffffffffffff81116107c7576107c49201610778565b90565b610262565b61025d565b346107ff576107e96107e436600461079b565b611b1c565b6107f1610252565b806107fb8161045f565b0390f35b610258565b9060208282031261081e5761081b91600001610293565b90565b61025d565b346108515761083b610836366004610804565b611bf9565b610843610252565b8061084d8161045f565b0390f35b610258565b906020828203126108705761086d916000016102ba565b90565b61025d565b346108a5576108a161089061088b366004610856565b611d23565b610898610252565b918291826106a6565b0390f35b610258565b1c90565b90565b6108c19060086108c693026108aa565b6108ae565b90565b906108d491546108b1565b90565b6108e26000806108c9565b90565b34610915576108f5366004610499565b6109116109006108d7565b610908610252565b91829182610304565b0390f35b610258565b67ffffffffffffffff81116109325760208091020190565b6105b9565b600080fd5b9092919261095161094c8261091a565b6106fe565b938185526020808601920283019281841161098e57915b8383106109755750505050565b6020809161098384866102ba565b815201920191610968565b610937565b9080601f830112156109b1578160206109ae9335910161093c565b90565b6106f4565b919091604081840312610a0f57600081013567ffffffffffffffff8111610a0a57836109e3918301610993565b92602082013567ffffffffffffffff8111610a0557610a029201610993565b90565b610262565b610262565b61025d565b34610a4357610a2d610a273660046109b6565b90611d6d565b610a35610252565b80610a3f8161045f565b0390f35b610258565b90565b610a5481610a48565b03610a5b57565b600080fd5b90503590610a6d82610a4b565b565b90602082820312610a8957610a8691600001610a60565b90565b61025d565b610a9790610a48565b9052565b9190610aaf90600060208501940190610a8e565b565b34610ae157610add610acc610ac7366004610a6f565b611dcf565b610ad4610252565b91829182610a9b565b0390f35b610258565b90565b610afd610af8610b02926102a2565b610ae6565b6102a2565b90565b90610b0f90610ae9565b600052602052604060002090565b610b3490610b2f600191600092610b05565b6108c9565b90565b34610b6757610b63610b52610b4d366004610856565b610b1d565b610b5a610252565b91829182610304565b0390f35b610258565b9190604083820312610b955780610b89610b9292600086016102ba565b936020016102ba565b90565b61025d565b610ba390610272565b9052565b916020610bc9929493610bc260408201966000830190610b9a565b01906102f7565b565b34610bfd57610be4610bde366004610b6c565b90611fc1565b90610bf9610bf0610252565b92839283610ba7565b0390f35b610258565b600080fd5b909182601f83011215610c415781359167ffffffffffffffff8311610c3c576020019260208302840111610c3757565b610937565b610c02565b6106f4565b909182601f83011215610c805781359167ffffffffffffffff8311610c7b576020019260018302840111610c7657565b610937565b610c02565b6106f4565b9160a083830312610d2357610c9d8260008501610293565b92610cab8360208301610293565b92604082013567ffffffffffffffff8111610d1e5781610ccc918401610c07565b929093606082013567ffffffffffffffff8111610d195783610cef918401610c07565b929093608082013567ffffffffffffffff8111610d1457610d109201610c46565b9091565b610262565b610262565b610262565b61025d565b34610d6057610d4a610d3b366004610c85565b9695909594919493929361209c565b610d52610252565b80610d5c8161045f565b0390f35b610258565b9190604083820312610d8e5780610d82610d8b9260008601610a60565b93602001610293565b90565b61025d565b34610dc257610dac610da6366004610d65565b90612338565b610db4610252565b80610dbe8161045f565b0390f35b610258565b34610df657610de0610dda366004610d65565b906123ee565b610de8610252565b80610df28161045f565b0390f35b610258565b909182601f83011215610e355781359167ffffffffffffffff8311610e30576020019260208302840111610e2b57565b610937565b610c02565b6106f4565b9091604082840312610e9557600082013567ffffffffffffffff8111610e905783610e66918401610dfb565b929093602082013567ffffffffffffffff8111610e8b57610e879201610c07565b9091565b610262565b610262565b61025d565b5190565b60209181520190565b60200190565b610eb6906102a2565b9052565b90610ec781602093610ead565b0190565b60200190565b90610eee610ee8610ee184610e9a565b8093610e9e565b92610ea7565b9060005b818110610eff5750505090565b909192610f18610f126001928651610eba565b94610ecb565b9101919091610ef2565b610f389160208201916000818403910152610ed1565b90565b34610f6f57610f6b610f5a610f51366004610e3a565b92919091612422565b610f62610252565b91829182610f22565b0390f35b610258565b9091606082840312610faa57610fa7610f9084600085016102ba565b93610f9e8160208601610293565b93604001610422565b90565b61025d565b34610fde57610fc8610fc2366004610f74565b916124bf565b610fd0610252565b80610fda8161045f565b0390f35b610258565b610ff0600960009061061a565b90565b3461102357611003366004610499565b61101f61100e610fe3565b611016610252565b918291826106a6565b0390f35b610258565b67ffffffffffffffff8111611046576110426020916105af565b0190565b6105b9565b9092919261106061105b82611028565b6106fe565b9381855260208501908284011161107c5761107a92610736565b565b6106f9565b9080601f8301121561109f5781602061109c9335910161104b565b90565b6106f4565b906080828203126110ff576110bc8160008401610293565b926110ca82602085016102ba565b926110d883604083016102ba565b92606082013567ffffffffffffffff81116110fa576110f79201611081565b90565b610262565b61025d565b34611136576111206111173660046110a4565b9291909161251e565b611128610252565b806111328161045f565b0390f35b610258565b346111695761115361114e36600461079b565b612554565b61115b610252565b806111658161045f565b0390f35b610258565b919061010083820312611233576111888160008501610293565b92602081013567ffffffffffffffff811161122e57826111a9918301610778565b92604082013567ffffffffffffffff811161122957836111ca918401610778565b92606083013567ffffffffffffffff811161122457816111eb918501610778565b926111f98260808301610293565b9261122161120a8460a08501610422565b936112188160c08601610293565b9360e001610a60565b90565b610262565b610262565b610262565b61025d565b346112705761125a61124b36600461116e565b969590959491949392936125cb565b611262610252565b8061126c8161045f565b0390f35b610258565b919060408382031261129e578061129261129b9260008601610a60565b936020016102ba565b90565b61025d565b91906112b790600060208501940190610b9a565b565b346112ea576112e66112d56112cf366004611275565b90612691565b6112dd610252565b918291826112a3565b0390f35b610258565b346113205761131c61130b611305366004610d65565b906126e9565b611313610252565b918291826103b1565b0390f35b610258565b346113535761133d61133836600461079b565b61273c565b611345610252565b8061134f8161045f565b0390f35b610258565b600080fd5b908160c091031261136b5790565b611358565b908160e091031261137e5790565b611358565b916060838303126113e85761139b8260008501610293565b92602081013567ffffffffffffffff81116113e357836113bc91830161135d565b92604082013567ffffffffffffffff81116113de576113db9201611370565b90565b610262565b610262565b61025d565b3461141e5761141a611409611403366004611383565b91612a9a565b611411610252565b91829182610a9b565b0390f35b610258565b90565b60001b90565b61144061143b61144592611423565b611426565b610a48565b90565b611452600061142c565b90565b61145d611448565b90565b3461149057611470366004610499565b61148c61147b611455565b611483610252565b91829182610a9b565b0390f35b610258565b61149e8161039f565b036114a557565b600080fd5b905035906114b782611495565b565b91906040838203126114e257806114d66114df9260008601610293565b936020016114aa565b90565b61025d565b34611516576115006114fa3660046114b9565b90612b3b565b611508610252565b806115128161045f565b0390f35b610258565b3461154a5761153461152e366004610b6c565b90612b8b565b61153c610252565b806115468161045f565b0390f35b610258565b906080828203126115da576115678160008401610293565b92602083013567ffffffffffffffff81116115d55782611588918501610993565b92604081013567ffffffffffffffff81116115d057836115a9918301610993565b92606082013567ffffffffffffffff81116115cb576115c89201611081565b90565b610262565b610262565b610262565b61025d565b34611611576115fb6115f236600461154f565b92919091612bc8565b611603610252565b8061160d8161045f565b0390f35b610258565b346116465761164261163161162c366004610a6f565b612bd6565b611639610252565b91829182610304565b0390f35b610258565b3461167a5761166461165e366004610d65565b90612c26565b61166c610252565b806116768161045f565b0390f35b610258565b61168c600a60009061061a565b90565b346116bf5761169f366004610499565b6116bb6116aa61167f565b6116b2610252565b918291826106a6565b0390f35b610258565b91906040838203126116ed57806116e16116ea9260008601610293565b93602001610293565b90565b61025d565b346117235761171f61170e6117083660046116c4565b90612c32565b611716610252565b918291826103b1565b0390f35b610258565b346117565761174061173b366004610a6f565b612cc1565b611748610252565b806117528161045f565b0390f35b610258565b91909160a0818403126117c7576117758360008301610293565b926117838160208401610293565b9261179182604085016102ba565b9261179f83606083016102ba565b92608082013567ffffffffffffffff81116117c2576117be9201610c46565b9091565b610262565b61025d565b34611801576117eb6117df36600461175b565b94939093929192612ccc565b6117f3610252565b806117fd8161045f565b0390f35b610258565b600080fd5b600090565b61181861180b565b50679a31110384e0b0c960205260145260005260406000205490565b600090565b611841611834565b5063c79b8b5f60e01b61185c61185683610350565b91610350565b148015611880575b908115611870575b5090565b61187a9150612e9b565b3861186c565b5061188a81612e9b565b611864565b7f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb01190565b906118cd916118c86118c361188f565b612edf565b6118cf565b565b906118d9916130f9565b565b906118e5916118b3565b565b7fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a590565b6119249061191f61191a6118e7565b612edf565b611b0f565b565b601f602091010490565b1b90565b9190600861195091029161194a60001984611930565b92611930565b9181191691161790565b90565b919061197361196e61197b93610ae9565b61195a565b908354611934565b9055565b6119919161198b61180b565b9161195d565b565b5b81811061199f575050565b806119ad600060019361197f565b01611994565b9190601f81116119c3575b505050565b6119cf6119f493610508565b9060206119db84611926565b830193106119fc575b6119ed90611926565b0190611993565b3880806119be565b91506119ed819290506119e4565b90611a1b90600019906008026108aa565b191690565b81611a2a91611a0a565b906002021790565b90611a3c81610643565b9067ffffffffffffffff8211611afe57611a6082611a5a85546104d5565b856119b3565b602090601f8311600114611a9557918091611a8493600092611a89575b5050611a20565b90555b565b90915001513880611a7d565b601f19831691611aa485610508565b9260005b818110611ae657509160029391856001969410611acc575b50505002019055611a87565b611adc910151601f841690611a0a565b9055388080611ac0565b91936020600181928787015181550195019201611aa8565b6105b9565b90611b0d91611a32565b565b611b1a906008611b03565b565b611b259061190b565b565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b611b6490611b5f611b5a611b27565b612edf565b611be4565b565b611b7a611b75611b7f92610267565b610ae6565b610267565b90565b611b8b90611b66565b90565b611b9790611b82565b90565b90611bab60018060a01b0391611426565b9181191691161790565b611bbe90611b82565b90565b90565b90611bd9611bd4611be092611bb5565b611bc1565b8254611b9a565b9055565b611bf0611bf791611b8e565b6006611bc4565b565b611c0290611b4b565b565b606090565b905090565b9060009291805490611c29611c22836104d5565b8094611c09565b91600181169081600014611c7d5750600114611c45575b505050565b611c529192939450610508565b6000905b838210611c695750500190388080611c40565b600181602092548486015201910190611c56565b92949550505060ff19168252801515020190388080611c40565b611cbc611cb392602092611caa81610643565b94858093611c09565b93849101610650565b0190565b60007f2e6a736f6e000000000000000000000000000000000000000000000000000000910152565b611cf460058092611c09565b611cfd81611cc0565b0190565b91611d12611d1d93611d1893611c0e565b90611c97565b611ce8565b90565b90565b611d6a90611d2f611c04565b50611d65611d3e600992613173565b91611d56611d4a610252565b93849260208401611d01565b602082018103825203826105cf565b611d20565b90565b611d7a91339190916132c1565b565b600090565b611d8a90610a48565b90565b90611d9790611d81565b600052602052604060002090565b60001c90565b90565b611dba611dbf91611da5565b611dab565b90565b611dcc9054611dae565b90565b6001611de8611dee92611de0611d7c565b506004611d8d565b01611dc2565b90565b600090565b90611e0090610ae9565b600052602052604060002090565b60018060a01b031690565b611e25611e2a91611da5565b611e0e565b90565b611e379054611e19565b90565b90611e4490610272565b9052565b60a01c90565b6bffffffffffffffffffffffff1690565b611e6b611e7091611e48565b611e4e565b90565b611e7d9054611e5f565b90565b90611e8a906103fc565b9052565b611e9860406106fe565b90565b90611ed2611ec96000611eac611e8e565b94611ec3611ebb838301611e2d565b838801611e3a565b01611e73565b60208401611e80565b565b611edd90611e9b565b90565b611eea9051610272565b90565b611f01611efc611f0692611423565b610ae6565b610267565b90565b611f1290611eed565b90565b611f1f90516103fc565b90565b611f36611f31611f3b926103fc565b610ae6565b6102a2565b90565b634e487b7160e01b600052601160045260246000fd5b611f63611f69919392936102a2565b926102a2565b91611f758382026102a2565b928184041490151715611f8457565b611f3e565b634e487b7160e01b600052601260045260246000fd5b611fab611fb1916102a2565b916102a2565b908115611fbc570490565b611f89565b611fe4611fe991939293611fd3611df1565b50611fdc61180b565b506003611df6565b611ed4565b91611ff660008401611ee0565b61201161200b6120066000611f09565b610272565b91610272565b1461205e575b600061205361203d61205a9361203761203260208901611f15565b611f22565b90611f54565b61204d6120486133cc565b611f22565b90611f9f565b9301611ee0565b9190565b915061205a600061205361203d6120756002611ed4565b959350505050612017565b61208b91369161093c565b90565b61209991369161104b565b90565b9693969590949192956120ad6133e3565b6122e6575b8287036122d85760601b679a31110384e0b0c9179460601b679a31110384e0b0c91791856020528560601c958360601c9384156122ca578733036122ae575b8860051b805b61224e57505050828660207f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb604051604081528b8d8160051b948286936040860152838d6060870137836060018286015260608486010190815201376080339380010190a46121646133f1565b612231575b50813b61217a575b50505050505050565b602080809786946000528060c06040519b8c9a63bc197c818c5233868d015260408c015260a060608c01528a8360051b998a9586948593015260e08d01378160c00160808c015260e0828c010192835284830137818060e0010160a08a01520101838152013780010161010401601c60405101600080515af115612222575b63bc197c8160e01b9051036122145738808080808080612171565b639c05499b6000526004601cfd5b3d156121f9573d6000823e3d90fd5b612248908690849086908a8c919287948b966133ff565b38612169565b60209003808b01358360205281880135600052604060002080548083116122a0578290039055826020526040600020908154908101908110612292578291556120f7565b6301336cea6000526004601cfd5b63f4d678b86000526004601cfd5b336000526034600c20546120f157634b6e7f186000526004601cfd5b63ea553b346000526004601cfd5b633b800a466000526004601cfd5b61230984886123038b87906122fd88948c96612080565b50612080565b5061208e565b506120b2565b9061232a9161232561232082611dcf565b612edf565b61232c565b565b9061233691613449565b565b906123429161230f565b565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b61239f602f604092610647565b6123a881612344565b0190565b6123c29060208101906000818303910152612392565b90565b156123cc57565b6123d4610252565b62461bcd60e51b8152806123ea600482016123ac565b0390fd5b9061241b916124168261241061240a612405613473565b610272565b91610272565b146123c5565b613480565b565b606090565b9392919061242e61241d565b5082036124855760405193828552602085019260051b808481016040525b6124565750505050565b602090038082013560601b679a31110384e0b0c91760205280830135600052806040600020548186015261244c565b633b800a466000526004601cfd5b906124ae92916124a96124a461188f565b612edf565b6124b0565b565b916124bd9291909161352e565b565b906124ca9291612493565b565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b9061250c9392916125076125026124cc565b612edf565b61250e565b565b9161251c93919091926135b1565b565b9061252a9392916124f0565b565b6125459061254061253b6118e7565b612edf565b612547565b565b612552906009611b03565b565b61255d9061252c565b565b60ff1690565b61257161257691611da5565b61255f565b90565b6125839054612565565b90565b9061259260ff91611426565b9181191691161790565b6125a59061039f565b90565b90565b906125c06125bb6125c79261259c565b6125a8565b8254612586565b9055565b959694939294336126046125fe7f0000000000000000000000000000000000000000000000000000000000000000610272565b91610272565b14158015612666575b6126495761263b9761262e966126299489949091929394613607565b6130f9565b6126366124cc565b613449565b6126476001600b6125ab565b565b600063f92ee8a960e01b8152806126626004820161045f565b0390fd5b50612671600b612579565b61260d565b9061268090611d81565b600052602052604060002090565b90565b906126b16126ac6126b6936126a4611df1565b506005612676565b61268e565b6136a0565b90565b6126c290611b66565b90565b6126ce906126b9565b90565b906126db906126c5565b600052602052604060002090565b61271191600061270661270c936126fe611834565b506004611d8d565b016126d1565b612579565b90565b61272d906127286127236118e7565b612edf565b61272f565b565b61273a90600a611b03565b565b61274590612714565b565b60018060a01b031690565b61275e61276391611da5565b612747565b90565b6127709054612752565b90565b61277c906126b9565b90565b60e01b90565b9050519061279282610a4b565b565b906020828203126127ae576127ab91600001612785565b90565b61025d565b506127c2906020810190610293565b90565b6127ce90610272565b9052565b506127e1906020810190610371565b90565b6127ed90610350565b9052565b50612800906020810190610a60565b90565b61280c90610a48565b9052565b600080fd5b600080fd5b600080fd5b903560016020038236030381121561286057016020813591019167ffffffffffffffff821161285b57600182023603831361285657565b612815565b612810565b61281a565b60209181520190565b9190612888816128818161288d95612865565b8095610736565b6105af565b0190565b90356001604003823603038112156128a7570190565b61281a565b90356001602003823603038112156128ed57016020813591019167ffffffffffffffff82116128e85760018202360383136128e357565b612815565b612810565b61281a565b919061290c8161290581612911956104ff565b8095610736565b6105af565b0190565b67ffffffffffffffff1690565b61292b81612915565b0361293257565b600080fd5b9050359061294482612922565b565b50612955906020810190612937565b90565b61296190612915565b9052565b906129a390602061299b6129916040840161298360008801886128ac565b9086830360008801526128f2565b9482810190612946565b910190612958565b90565b612a5091612a42612a3760c083016129ce6129c460008701876127b3565b60008601906127c5565b6129e86129de60208701876127d2565b60208601906127e4565b612a026129f860408701876127f1565b6040860190612803565b612a1c612a1260608701876127f1565b6060860190612803565b612a29608086018661281f565b90858303608087015261286e565b9260a0810190612891565b9060a0818403910152612965565b90565b939290612a7f604091612a8794612a72606089019260008a0190610b9a565b87820360208901526129a6565b940190610a8e565b565b612a91610252565b3d6000823e3d90fd5b9150602090612aa7611d7c565b50612aba612ab56006612766565b612773565b612ae6633808a90b949294612af1612ad26007611dc2565b612ada610252565b9788968795869561277f565b855260048501612a53565b03915afa908115612b3657600091612b08575b5090565b612b29915060203d8111612b2f575b612b2181836105cf565b810190612794565b38612b04565b503d612b17565b612a89565b901515679a31110384e0b0c96020523360145281600052806034600c205560005260601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3565b612b9891339190916136d9565b565b90612bb6939291612bb1612bac6124cc565b612edf565b612bb8565b565b91612bc6939190919261372b565b565b90612bd4939291612b9a565b565b612bf5612bf0612bfa92612be861180b565b506005612676565b61268e565b613814565b90565b90612c1891612c13612c0e82611dcf565b612edf565b612c1a565b565b90612c2491613480565b565b90612c3091612bfd565b565b612c3a611834565b50679a31110384e0b0c96020526014526000526034600c205490565b612c6f90612c6a612c65611b27565b612edf565b612cb4565b565b90612c7e60001991611426565b9181191691161790565b612c9190611da5565b90565b90612ca9612ca4612cb092611d81565b612c88565b8254612c71565b9055565b612cbf906007612c94565b565b612cca90612c56565b565b94909194612cd86133e3565b612e76575b60601b679a31110384e0b0c9179160601b679a31110384e0b0c917918060205260601c928260601c928315612e6857843303612e4c575b8660005260406000208054808411612e3e5783900390556020526040600020805490828201918210612e305755806020528284337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a4612d766133f1565b612e0b575b823b612d8a575b505050505050565b602094829160405197889663f23a6e618852338989015260408801526060870152608086015260a0808601528160c086015260e085013760c401906000601c8401915af115612dfc575b63f23a6e6160e01b905103612dee57388080808080612d82565b639c05499b6000526004601cfd5b3d15612dd4573d6000823e3d90fd5b612e1486613834565b50612e1e81613834565b50612e2a85839061208e565b50612d7b565b6301336cea6000526004601cfd5b63f4d678b86000526004601cfd5b336000526034600c2054612d1457634b6e7f186000526004601cfd5b63ea553b346000526004601cfd5b612e7f86613834565b50612e8984613834565b50612e9585839061208e565b50612cdd565b612ea3611834565b50612ead81613854565b8015612ed0575b908115612ec0575b5090565b612eca91506138fa565b38612ebc565b50612eda81613894565b612eb4565b612ef190612eeb613473565b906139f1565b565b60207f2073616c65507269636500000000000000000000000000000000000000000000917f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201520152565b612f4e602a604092610647565b612f5781612ef3565b0190565b612f719060208101906000818303910152612f41565b90565b15612f7b57565b612f83610252565b62461bcd60e51b815280612f9960048201612f5b565b0390fd5b60007f455243323938313a20696e76616c696420726563656976657200000000000000910152565b612fd26019602092610647565b612fdb81612f9d565b0190565b612ff59060208101906000818303910152612fc5565b90565b15612fff57565b613007610252565b62461bcd60e51b81528061301d60048201612fdf565b0390fd5b61302b60406106fe565b90565b90565b9061304661304161304d926126c5565b61302e565b8254611b9a565b9055565b60a01b90565b906130716bffffffffffffffffffffffff60a01b91613051565b9181191691161790565b61308f61308a613094926103fc565b610ae6565b6103fc565b90565b90565b906130af6130aa6130b69261307b565b613097565b8254613057565b9055565b906130e5602060006130eb946130dd8282016130d7848801611ee0565b90613031565b019201611f15565b9061309a565b565b906130f7916130ba565b565b9061316a613171926131258361311e6131186131136133cc565b6103fc565b916103fc565b1115612f74565b61314b8161314461313e6131396000611f09565b610272565b91610272565b1415612ff8565b91613161613157613021565b9360008501611e3a565b60208301611e80565b60026130ed565b565b9061317c611c04565b506080604051019160208301604052600083528290600a6000198092955b01948181066030018653049384156131b95790600a919080929161319a565b93505082602091039203918252565b6131dc6131d76131e192611423565b610ae6565b6102a2565b90565b60016131f091016102a2565b90565b634e487b7160e01b600052603260045260246000fd5b9061321382610e9a565b811015613224576020809102010190565b6131f3565b61323390516102a2565b90565b61324261324791611da5565b6108ae565b90565b6132549054613236565b90565b61326661326c919392936102a2565b926102a2565b820391821161327757565b611f3e565b9061329161328c61329892610ae9565b61195a565b8254612c71565b9055565b6132ab6132b1919392936102a2565b926102a2565b82018092116132bc57565b611f3e565b6132d19093929193848391613a8a565b6132da83610e9a565b926132e560006131c8565b926132f060006131c8565b935b846133056132ff886102a2565b916102a2565b10156133825761337661337c9161335d613328613323888a90613209565b613229565b613357613348600161334261333d8d8c613209565b613229565b90610b05565b916133528361324a565b613257565b9061327c565b61337061336b878990613209565b613229565b9061329c565b946131e4565b936132f2565b915093506133a6925061339f915061339a600061324a565b613257565b600061327c565b565b600090565b90565b6133c46133bf6133c9926133ad565b610ae6565b6103fc565b90565b6133d46133a8565b506133e06127106133b0565b90565b6133eb611834565b50600090565b6133f9611834565b50600090565b5050949293909361340e6133f1565b61341b575b505050505050565b6134316134379361343d97969092939596612080565b50612080565b5061208e565b50388080808080613413565b9061346b6134666134709361345f818590613aa5565b6005612676565b61268e565b613b8c565b50565b61347b611df1565b503390565b906134a261349d6134a793613496818590613bc7565b6005612676565b61268e565b613c61565b50565b60007f455243323938313a20496e76616c696420706172616d65746572730000000000910152565b6134df601b602092610647565b6134e8816134aa565b0190565b61350290602081019060008183039101526134d2565b90565b1561350c57565b613514610252565b62461bcd60e51b81528061352a600482016134ec565b0390fd5b6135aa906135a36135af949361355e8561355761355161354c6133cc565b6103fc565b916103fc565b1115612f74565b6135848161357d6135776135726000611f09565b610272565b91610272565b1415613505565b9361359a613590613021565b9560008701611e3a565b60208501611e80565b6003611df6565b6130ed565b565b6135ff91926135cb613605956135f0939086849192613c9c565b6135e86135e1826135dc600061324a565b61329c565b600061327c565b926001610b05565b916135fa8361324a565b61329c565b9061327c565b565b919261362661366b969461361f61362d946008611b03565b6009611b03565b600a611b03565b61363f613638611448565b8290613449565b61365161364a61188f565b8290613449565b61366361365c6118e7565b8290613449565b919091613d9d565b565b90565b61367c61368191611da5565b610ae9565b90565b61369861369361369d926102a2565b610ae6565b610267565b90565b6136cc6136c76136d6936136c260006136d1956136bb611df1565b500161366d565b613e18565b613670565b613684565b6126b9565b90565b613714613729936136ef61372393858391613e3a565b61370c61370582613700600061324a565b613257565b600061327c565b926001610b05565b9161371e8361324a565b613257565b9061327c565b565b9261373c9194939085849192613e55565b61374583610e9a565b9161375060006131c8565b9061375b60006131c8565b915b8261377061376a876102a2565b916102a2565b10156137ee576137966137e89161379061378b878790613209565b613229565b9061329c565b926137e36137ad6137a8878490613209565b613229565b6137dd6137ce60016137c86137c38d8890613209565b613229565b90610b05565b916137d88361324a565b61329c565b9061327c565b6131e4565b9161375d565b91509350613812925061380b9150613806600061324a565b61329c565b600061327c565b565b61382c60006138319261382561180b565b500161366d565b613f98565b90565b9061383d61241d565b506040519160408301604052600183526020830152565b61385c611834565b50633e85e62f60e01b61387761387183610350565b91610350565b14908115613884575b5090565b61388e9150613fb0565b38613880565b61389c611834565b506138a681613fd7565b80156138eb575b80156138d0575b9081156138c0575b5090565b6138ca9150614017565b386138bc565b5060006138e56138df83610350565b91610350565b146138b4565b506138f581614017565b6138ad565b613902611834565b5061390c81614017565b908115613918575b5090565b6139229150614057565b38613914565b90565b61393f61393a61394492613928565b610ae6565b6102a2565b90565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b61397b60178092611c09565b61398481613947565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b6139bc60118092611c09565b6139c581613988565b0190565b6139e36139ee93926139dd6139e89361396f565b90611c97565b6139b0565b90611c97565b90565b90613a06613a008383906126e9565b1561039f565b613a0e575050565b613a8691613a64613a3d613a2d613a27613a69956140e5565b93613670565b613a37602061392b565b906142fe565b91613a55613a49610252565b938492602084016139c9565b602082018103825203826105cf565b611d20565b613a71610252565b91829162461bcd60e51b8352600483016106a6565b0390fd5b9091613aa392613a9a6000611f09565b92909192614479565b565b613ab9613ab38284906126e9565b1561039f565b613ac2575b5050565b613ae56001613ae06000613ad860048690611d8d565b0185906126d1565b6125ab565b90613aee613473565b90613b2b613b25613b1f7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611d81565b926126c5565b926126c5565b92613b34610252565b80613b3e8161045f565b0390a43880613abe565b613b5190611b66565b90565b613b68613b63613b6d92610267565b610ae6565b6102a2565b90565b613b84613b7f613b89926102a2565b611426565b610a48565b90565b90613bbf613bb9613bb4613baf6000613bc496613ba7611834565b500194613b48565b613b54565b613b70565b9161366d565b614669565b90565b613bd28183906126e9565b613bdb575b5050565b613bfe6000613bf96000613bf160048690611d8d565b0185906126d1565b6125ab565b90613c07613473565b90613c44613c3e613c387ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611d81565b926126c5565b926126c5565b92613c4d610252565b80613c578161045f565b0390a43880613bd7565b90613c94613c8e613c89613c846000613c9996613c7c611834565b500194613b48565b613b54565b613b70565b9161366d565b614729565b90565b91929092613ca86133e3565b613d84575b8260601b8015613d7657679a31110384e0b0c960205283601452846000526040600020805490838201918210613d6857558160205260601c6000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604083a4613d156133f1565b613d4f575b613d2383614833565b613d2e575b50505050565b613d4693613d3c6000611f09565b9390919293614840565b38808080613d28565b613d5884613834565b50613d6281613834565b50613d1a565b6301336cea6000526004601cfd5b63ea553b346000526004601cfd5b613d8d84613834565b50613d9781613834565b50613cad565b90613db3613db89392613dae611b27565b613449565b6148d9565b565b5490565b600052602060002090565b613dd281613dba565b821015613ded57613de4600191613dbe565b91020190600090565b6131f3565b613e02906008613e0793026108aa565b611dab565b90565b90613e159154613df2565b90565b613e37916000613e3192613e2a611d7c565b5001613dc9565b90613e0a565b90565b9091613e5392613e4a6000611f09565b929091926148f9565b565b91929092613e616133e3565b613f93575b8051845103613f85578260601b8015613f775780679a31110384e0b0c917602052845160051b805b613f4057506000604051604081527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb81885160051b602001604082019081818c60045afa503d60400160208301523d01865160051b60200181818960045afa503d01039360601c933392a4613f016133f1565b613f3b575b613f0f83614833565b613f1a575b50505050565b613f3293613f286000611f09565b93909192936149fd565b38808080613f14565b613f06565b8083015190808701516000526040600020918254908101908110613f6957602092550380613e8e565b6301336cea6000526004601cfd5b63ea553b346000526004601cfd5b633b800a466000526004601cfd5b613e66565b6000613fad91613fa661180b565b5001613dba565b90565b613fb8611834565b5060e01c630e89341c8114906301ffc9a763d9b67a2682149114171790565b613fdf611834565b5080613ffa613ff463152a902d60e11b610350565b91610350565b14908115614007575b5090565b6140119150614ab4565b38614003565b61401f611834565b508061403a614034635a05180f60e01b610350565b91610350565b14908115614047575b5090565b6140519150614ada565b38614043565b61405f611834565b508061407a614074634e821d3360e11b610350565b91610350565b14908115614087575b5090565b6140919150613894565b38614083565b90565b60ff1690565b6140b46140af6140b992614097565b610ae6565b61409a565b90565b6140c660146140a0565b90565b6140dd6140d86140e29261409a565b610ae6565b6102a2565b90565b6141026140fd614118926140f7611c04565b50613b48565b613b54565b61411261410d6140bc565b6140c9565b906142fe565b90565b90565b61413261412d6141379261411b565b610ae6565b6102a2565b90565b9061414c61414783611028565b6106fe565b918252565b369037565b9061417b6141638361413a565b926020806141718693611028565b9201910390614151565b565b600360fc1b90565b5190565b9061419382614185565b8110156141a557600160209102010190565b6131f3565b600f60fb1b90565b90565b6141c96141c46141ce926141b2565b610ae6565b6102a2565b90565b6141da906102a2565b600081146141e9576001900390565b611f3e565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b61420d6141ee565b90565b90565b61422761422261422c92614210565b610ae6565b6102a2565b90565b60f81b90565b90565b61424c61424761425192614235565b610ae6565b61409a565b90565b6142739061426d6142676142789461409a565b916102a2565b906108aa565b6102a2565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b6142af60208092610647565b6142b88161427b565b0190565b6142d290602081019060008183039101526142a3565b90565b156142dc57565b6142e4610252565b62461bcd60e51b8152806142fa600482016142bc565b0390fd5b9190614308611c04565b506143a261439261433e6143396143296002614324879161411e565b611f54565b614333600261411e565b9061329c565b614156565b9261434761417d565b6143608561435a60009360001a936131c8565b90614189565b536143696141aa565b6143828561437c60019360001a936141b5565b90614189565b5361438d600261411e565b611f54565b61439c60016141b5565b9061329c565b925b836143b86143b260016141b5565b916102a2565b111561441f576143c6614205565b816143d1600f614213565b1691601083101561441a576143ed61440e92614414941a61422f565b6143fd8591889060001a92614189565b536144086004614238565b90614254565b936141d1565b926143a4565b6131f3565b6144479293506144429061443c61443660006131c8565b916102a2565b146142d5565b611d20565b90565b9061445c61445783610713565b6106fe565b918252565b61446b600061444a565b90565b614476614461565b90565b919392906144856133e3565b6145b1575b81518551036145a35760601b9182679a31110384e0b0c9176020528060601b83811490151715614581575b50835160051b805b61454b57507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6000939460405192839160408352805160051b60200180916040850192839160045afa503d60400160208401523d019081815160051b602001809260045afa503d01039260601c923392a46145366133f1565b61453d575b565b61454561446e565b5061453b565b80820151908086015160005260406000208054928381116145735760209303905503806144bd565b63f4d678b86000526004601cfd5b6000526034600c20541561459557386144b5565b634b6e7f186000526004601cfd5b633b800a466000526004601cfd5b6145b961446e565b5061448a565b90565b600052602060002090565b5490565b6145da816145cd565b8210156145f5576145ec6001916145c2565b91020190600090565b6131f3565b919061461061460b61461893611d81565b612c88565b908354611934565b9055565b908154916801000000000000000083101561464c578261464491600161464a950181556145d1565b906145fa565b565b6105b9565b9061465b90611d81565b600052602052604060002090565b614671611834565b50614686614680828490614b1a565b1561039f565b6000146146c9576146bf6146c4926146aa6146a3600085016145bf565b829061461c565b60016146b860008501613dba565b9301614651565b61327c565b600190565b5050600090565b634e487b7160e01b600052603160045260246000fd5b6146f8916146f2611d7c565b916145fa565b565b614703816145cd565b801561472457600190039061472161471b83836145d1565b906146e6565b55565b6146d0565b614731611834565b50614748614743600183018490614651565b61324a565b908161475d61475760006131c8565b916102a2565b141560001461482b576147dd9260016147d89284614786600096614780856141b5565b90613257565b6147a3614794888501613dba565b61479d866141b5565b90613257565b806147b66147b0846102a2565b916102a2565b036147e2575b5050506147d26147cd8683016145bf565b6146fa565b01614651565b61197f565b600190565b614823926148156148016147fb61481e948c8901613dc9565b90613e0a565b9361480f85918c8901613dc9565b906145fa565b91858501614651565b61327c565b3880806147bc565b505050600090565b61483b611834565b503b90565b919360209360405195869463f23a6e618652338787015260601b60601c60408601526060850152608084015260a08084015280518091818060c08701526148c5575b505060c401906000601c8401915af1156148b6575b63f23a6e6160e01b9051036148a857565b639c05499b6000526004601cfd5b3d15614897573d6000823e3d90fd5b818660e08701920160045afa508038614882565b906148f06148e96148f793611b8e565b6006611bc4565b6007612c94565b565b909291926149056133e3565b6149db575b60601b9081679a31110384e0b0c917602052818160601b148160601b1517156149b9575b50826000526040600020908154918284116149ab57836000930390558260205260601c337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604084a461497f6133f1565b614988575b5050565b61499461499a92613834565b50613834565b506149a361446e565b503880614984565b63f4d678b86000526004601cfd5b6000526034600c2054156149cd573861492e565b634b6e7f186000526004601cfd5b6149e484613834565b506149ee83613834565b506149f761446e565b5061490a565b919360209360405195869463bc197c818652338787015260601b60601c604086015260a06060860152805160051b8601809160c0870192839160045afa503d60a001908160808701523d019182815160051b8801809260045afa503d0160a08501523d01908181518601809260045afa50601c8301903d0103906000601c8401915af115614aa5575b63bc197c8160e01b905103614a9757565b639c05499b6000526004601cfd5b3d15614a86573d6000823e3d90fd5b614abc611834565b50614ad6614ad06301ffc9a760e01b610350565b91610350565b1490565b614ae2611834565b5080614afd614af7637965db0b60e01b610350565b91610350565b14908115614b0a575b5090565b614b149150613fd7565b38614b06565b614b38916001614b3392614b2c611834565b5001614651565b61324a565b614b4b614b4560006131c8565b916102a2565b14159056fea26469706673582212201008807002fe6072ba72743479d7976a506937a4e756aa0aef6ad714bef8804e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x24C JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xB5EE006 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x20EC271B EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x2693EBF2 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x731133E9 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x8FF83AC1 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xB390C0AB EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xB48AB8B6 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xED4C2AC7 EQ PUSH2 0x1A2 JUMPI PUSH4 0xF242432A SUB PUSH2 0xE JUMPI PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1728 JUMP JUMPDEST PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0x168F JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST PUSH2 0x1616 JUMP JUMPDEST PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x151B JUMP JUMPDEST PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x1460 JUMP JUMPDEST PUSH2 0x13ED JUMP JUMPDEST PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x12EF JUMP JUMPDEST PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x1238 JUMP JUMPDEST PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0xFAF JUMP JUMPDEST PUSH2 0xF3B JUMP JUMPDEST PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0xD93 JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST PUSH2 0xBCB JUMP JUMPDEST PUSH2 0xB37 JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x8E5 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x6BF JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x27B SWAP1 PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x287 DUP2 PUSH2 0x272 JUMP JUMPDEST SUB PUSH2 0x28E JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2A0 DUP3 PUSH2 0x27E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AE DUP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x2B5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2C7 DUP3 PUSH2 0x2A5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x2F2 JUMPI DUP1 PUSH2 0x2E6 PUSH2 0x2EF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0x300 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x318 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x34B JUMPI PUSH2 0x347 PUSH2 0x336 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 PUSH2 0x1810 JUMP JUMPDEST PUSH2 0x33E PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x365 DUP2 PUSH2 0x350 JUMP JUMPDEST SUB PUSH2 0x36C JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x37E DUP3 PUSH2 0x35C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x39A JUMPI PUSH2 0x397 SWAP2 PUSH1 0x0 ADD PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3AD SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3C5 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x3A4 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x3F7 JUMPI PUSH2 0x3F3 PUSH2 0x3E2 PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x380 JUMP JUMPDEST PUSH2 0x1839 JUMP JUMPDEST PUSH2 0x3EA PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x416 DUP2 PUSH2 0x3FC JUMP JUMPDEST SUB PUSH2 0x41D JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x42F DUP3 PUSH2 0x40D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x45A JUMPI DUP1 PUSH2 0x44E PUSH2 0x457 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x494 JUMPI PUSH2 0x47E PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x431 JUMP JUMPDEST SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0x486 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x490 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4A4 JUMPI JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x4F5 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x4F0 JUMPI JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x52E PUSH2 0x527 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x4FF JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x587 JUMPI POP PUSH1 0x1 EQ PUSH2 0x54A JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x557 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x56F JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x55C JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST SWAP1 PUSH2 0x5AC SWAP2 PUSH2 0x513 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x5D9 SWAP1 PUSH2 0x5AF JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5F3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x618 PUSH2 0x611 SWAP3 PUSH2 0x608 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x5A2 JUMP JUMPDEST SUB DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 LT PUSH2 0x62E JUMPI PUSH2 0x62B SWAP1 PUSH2 0x5F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x640 PUSH1 0x8 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x664 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x653 JUMP JUMPDEST PUSH2 0x694 PUSH2 0x69D PUSH1 0x20 SWAP4 PUSH2 0x6A2 SWAP4 PUSH2 0x68B DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x647 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x6BC SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x675 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x6EF JUMPI PUSH2 0x6CF CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x6EB PUSH2 0x6DA PUSH2 0x633 JUMP JUMPDEST PUSH2 0x6E2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH2 0x711 PUSH2 0x70A PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x731 JUMPI PUSH2 0x72D PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x757 PUSH2 0x752 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x773 JUMPI PUSH2 0x771 SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x796 JUMPI DUP2 PUSH1 0x20 PUSH2 0x793 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x742 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x7CC JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7C7 JUMPI PUSH2 0x7C4 SWAP3 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x7FF JUMPI PUSH2 0x7E9 PUSH2 0x7E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x7FB DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x81E JUMPI PUSH2 0x81B SWAP2 PUSH1 0x0 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x851 JUMPI PUSH2 0x83B PUSH2 0x836 CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x1BF9 JUMP JUMPDEST PUSH2 0x843 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x84D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x870 JUMPI PUSH2 0x86D SWAP2 PUSH1 0x0 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x8A5 JUMPI PUSH2 0x8A1 PUSH2 0x890 PUSH2 0x88B CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x898 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8C1 SWAP1 PUSH1 0x8 PUSH2 0x8C6 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x8D4 SWAP2 SLOAD PUSH2 0x8B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E2 PUSH1 0x0 DUP1 PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x915 JUMPI PUSH2 0x8F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x911 PUSH2 0x900 PUSH2 0x8D7 JUMP JUMPDEST PUSH2 0x908 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x932 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x951 PUSH2 0x94C DUP3 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x98E JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x975 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x983 DUP5 DUP7 PUSH2 0x2BA JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x968 JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x9B1 JUMPI DUP2 PUSH1 0x20 PUSH2 0x9AE SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xA0F JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA0A JUMPI DUP4 PUSH2 0x9E3 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA05 JUMPI PUSH2 0xA02 SWAP3 ADD PUSH2 0x993 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xA43 JUMPI PUSH2 0xA2D PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 PUSH2 0x1D6D JUMP JUMPDEST PUSH2 0xA35 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xA3F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA54 DUP2 PUSH2 0xA48 JUMP JUMPDEST SUB PUSH2 0xA5B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA6D DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xA89 JUMPI PUSH2 0xA86 SWAP2 PUSH1 0x0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xA97 SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xAAF SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xAE1 JUMPI PUSH2 0xADD PUSH2 0xACC PUSH2 0xAC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0xAD4 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xAFD PUSH2 0xAF8 PUSH2 0xB02 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB0F SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xB34 SWAP1 PUSH2 0xB2F PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP3 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xB67 JUMPI PUSH2 0xB63 PUSH2 0xB52 PUSH2 0xB4D CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST PUSH2 0xB5A PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xB95 JUMPI DUP1 PUSH2 0xB89 PUSH2 0xB92 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xBA3 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xBC9 SWAP3 SWAP5 SWAP4 PUSH2 0xBC2 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xBFD JUMPI PUSH2 0xBE4 PUSH2 0xBDE CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH2 0xBF9 PUSH2 0xBF0 PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xBA7 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC41 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC3C JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xC37 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC80 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC7B JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0xC76 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP4 DUP4 SUB SLT PUSH2 0xD23 JUMPI PUSH2 0xC9D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0xCAB DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD1E JUMPI DUP2 PUSH2 0xCCC SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD19 JUMPI DUP4 PUSH2 0xCEF SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD14 JUMPI PUSH2 0xD10 SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xD60 JUMPI PUSH2 0xD4A PUSH2 0xD3B CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xD52 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xD5C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD8E JUMPI DUP1 PUSH2 0xD82 PUSH2 0xD8B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xDC2 JUMPI PUSH2 0xDAC PUSH2 0xDA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0xDB4 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDBE DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0xDF6 JUMPI PUSH2 0xDE0 PUSH2 0xDDA CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x23EE JUMP JUMPDEST PUSH2 0xDE8 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDF2 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xE35 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE30 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xE2B JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x40 DUP3 DUP5 SUB SLT PUSH2 0xE95 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE90 JUMPI DUP4 PUSH2 0xE66 SWAP2 DUP5 ADD PUSH2 0xDFB JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE8B JUMPI PUSH2 0xE87 SWAP3 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xEB6 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0xEC7 DUP2 PUSH1 0x20 SWAP4 PUSH2 0xEAD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEEE PUSH2 0xEE8 PUSH2 0xEE1 DUP5 PUSH2 0xE9A JUMP JUMPDEST DUP1 SWAP4 PUSH2 0xE9E JUMP JUMPDEST SWAP3 PUSH2 0xEA7 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xEFF JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH2 0xF18 PUSH2 0xF12 PUSH1 0x1 SWAP3 DUP7 MLOAD PUSH2 0xEBA JUMP JUMPDEST SWAP5 PUSH2 0xECB JUMP JUMPDEST SWAP2 ADD SWAP2 SWAP1 SWAP2 PUSH2 0xEF2 JUMP JUMPDEST PUSH2 0xF38 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xED1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF6F JUMPI PUSH2 0xF6B PUSH2 0xF5A PUSH2 0xF51 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2422 JUMP JUMPDEST PUSH2 0xF62 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xF22 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xFAA JUMPI PUSH2 0xFA7 PUSH2 0xF90 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH2 0xF9E DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xFDE JUMPI PUSH2 0xFC8 PUSH2 0xFC2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0xFD0 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xFDA DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0xFF0 PUSH1 0x9 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1023 JUMPI PUSH2 0x1003 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x101F PUSH2 0x100E PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0x1016 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1046 JUMPI PUSH2 0x1042 PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1060 PUSH2 0x105B DUP3 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x107C JUMPI PUSH2 0x107A SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x109F JUMPI DUP2 PUSH1 0x20 PUSH2 0x109C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10FF JUMPI PUSH2 0x10BC DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x10CA DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x10D8 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10FA JUMPI PUSH2 0x10F7 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1136 JUMPI PUSH2 0x1120 PUSH2 0x1117 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A4 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x251E JUMP JUMPDEST PUSH2 0x1128 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1132 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1169 JUMPI PUSH2 0x1153 PUSH2 0x114E CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x2554 JUMP JUMPDEST PUSH2 0x115B PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1165 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 DUP4 DUP3 SUB SLT PUSH2 0x1233 JUMPI PUSH2 0x1188 DUP2 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x122E JUMPI DUP3 PUSH2 0x11A9 SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1229 JUMPI DUP4 PUSH2 0x11CA SWAP2 DUP5 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1224 JUMPI DUP2 PUSH2 0x11EB SWAP2 DUP6 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH2 0x11F9 DUP3 PUSH1 0x80 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1221 PUSH2 0x120A DUP5 PUSH1 0xA0 DUP6 ADD PUSH2 0x422 JUMP JUMPDEST SWAP4 PUSH2 0x1218 DUP2 PUSH1 0xC0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0xE0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1270 JUMPI PUSH2 0x125A PUSH2 0x124B CALLDATASIZE PUSH1 0x4 PUSH2 0x116E JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x25CB JUMP JUMPDEST PUSH2 0x1262 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x126C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x129E JUMPI DUP1 PUSH2 0x1292 PUSH2 0x129B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12B7 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x12EA JUMPI PUSH2 0x12E6 PUSH2 0x12D5 PUSH2 0x12CF CALLDATASIZE PUSH1 0x4 PUSH2 0x1275 JUMP JUMPDEST SWAP1 PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x12A3 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1320 JUMPI PUSH2 0x131C PUSH2 0x130B PUSH2 0x1305 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x1313 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1353 JUMPI PUSH2 0x133D PUSH2 0x1338 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x273C JUMP JUMPDEST PUSH2 0x1345 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x134F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x136B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x137E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x13E8 JUMPI PUSH2 0x139B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13E3 JUMPI DUP4 PUSH2 0x13BC SWAP2 DUP4 ADD PUSH2 0x135D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13DE JUMPI PUSH2 0x13DB SWAP3 ADD PUSH2 0x1370 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x141E JUMPI PUSH2 0x141A PUSH2 0x1409 PUSH2 0x1403 CALLDATASIZE PUSH1 0x4 PUSH2 0x1383 JUMP JUMPDEST SWAP2 PUSH2 0x2A9A JUMP JUMPDEST PUSH2 0x1411 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1440 PUSH2 0x143B PUSH2 0x1445 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1452 PUSH1 0x0 PUSH2 0x142C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x145D PUSH2 0x1448 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1490 JUMPI PUSH2 0x1470 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x148C PUSH2 0x147B PUSH2 0x1455 JUMP JUMPDEST PUSH2 0x1483 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x149E DUP2 PUSH2 0x39F JUMP JUMPDEST SUB PUSH2 0x14A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x14B7 DUP3 PUSH2 0x1495 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x14E2 JUMPI DUP1 PUSH2 0x14D6 PUSH2 0x14DF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x14AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1516 JUMPI PUSH2 0x1500 PUSH2 0x14FA CALLDATASIZE PUSH1 0x4 PUSH2 0x14B9 JUMP JUMPDEST SWAP1 PUSH2 0x2B3B JUMP JUMPDEST PUSH2 0x1508 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1512 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x154A JUMPI PUSH2 0x1534 PUSH2 0x152E CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x2B8B JUMP JUMPDEST PUSH2 0x153C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1546 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x15DA JUMPI PUSH2 0x1567 DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D5 JUMPI DUP3 PUSH2 0x1588 SWAP2 DUP6 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D0 JUMPI DUP4 PUSH2 0x15A9 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15CB JUMPI PUSH2 0x15C8 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1611 JUMPI PUSH2 0x15FB PUSH2 0x15F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x154F JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2BC8 JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x160D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1646 JUMPI PUSH2 0x1642 PUSH2 0x1631 PUSH2 0x162C CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2BD6 JUMP JUMPDEST PUSH2 0x1639 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x167A JUMPI PUSH2 0x1664 PUSH2 0x165E CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x166C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1676 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x168C PUSH1 0xA PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x16BF JUMPI PUSH2 0x169F CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x16BB PUSH2 0x16AA PUSH2 0x167F JUMP JUMPDEST PUSH2 0x16B2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x16ED JUMPI DUP1 PUSH2 0x16E1 PUSH2 0x16EA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1723 JUMPI PUSH2 0x171F PUSH2 0x170E PUSH2 0x1708 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C4 JUMP JUMPDEST SWAP1 PUSH2 0x2C32 JUMP JUMPDEST PUSH2 0x1716 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1756 JUMPI PUSH2 0x1740 PUSH2 0x173B CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2CC1 JUMP JUMPDEST PUSH2 0x1748 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1752 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x17C7 JUMPI PUSH2 0x1775 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1783 DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1791 DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x179F DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x17C2 JUMPI PUSH2 0x17BE SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1801 JUMPI PUSH2 0x17EB PUSH2 0x17DF CALLDATASIZE PUSH1 0x4 PUSH2 0x175B JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x17F3 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x17FD DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1818 PUSH2 0x180B JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1841 PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0xC79B8B5F PUSH1 0xE0 SHL PUSH2 0x185C PUSH2 0x1856 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1880 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1870 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x187A SWAP2 POP PUSH2 0x2E9B JUMP JUMPDEST CODESIZE PUSH2 0x186C JUMP JUMPDEST POP PUSH2 0x188A DUP2 PUSH2 0x2E9B JUMP JUMPDEST PUSH2 0x1864 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18CD SWAP2 PUSH2 0x18C8 PUSH2 0x18C3 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x18CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18D9 SWAP2 PUSH2 0x30F9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18E5 SWAP2 PUSH2 0x18B3 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST PUSH2 0x1924 SWAP1 PUSH2 0x191F PUSH2 0x191A PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1B0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x1950 SWAP2 MUL SWAP2 PUSH2 0x194A PUSH1 0x0 NOT DUP5 PUSH2 0x1930 JUMP JUMPDEST SWAP3 PUSH2 0x1930 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1973 PUSH2 0x196E PUSH2 0x197B SWAP4 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1991 SWAP2 PUSH2 0x198B PUSH2 0x180B JUMP JUMPDEST SWAP2 PUSH2 0x195D JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x199F JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x19AD PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x197F JUMP JUMPDEST ADD PUSH2 0x1994 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x19C3 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x19CF PUSH2 0x19F4 SWAP4 PUSH2 0x508 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x19DB DUP5 PUSH2 0x1926 JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x19FC JUMPI JUMPDEST PUSH2 0x19ED SWAP1 PUSH2 0x1926 JUMP JUMPDEST ADD SWAP1 PUSH2 0x1993 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x19BE JUMP JUMPDEST SWAP2 POP PUSH2 0x19ED DUP2 SWAP3 SWAP1 POP PUSH2 0x19E4 JUMP JUMPDEST SWAP1 PUSH2 0x1A1B SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x8AA JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x1A2A SWAP2 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A3C DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1AFE JUMPI PUSH2 0x1A60 DUP3 PUSH2 0x1A5A DUP6 SLOAD PUSH2 0x4D5 JUMP JUMPDEST DUP6 PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1A95 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x1A84 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1A89 JUMPI JUMPDEST POP POP PUSH2 0x1A20 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1A7D JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x1AA4 DUP6 PUSH2 0x508 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1AE6 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1ACC JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x1A87 JUMP JUMPDEST PUSH2 0x1ADC SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1AC0 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x1AA8 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x1B0D SWAP2 PUSH2 0x1A32 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B1A SWAP1 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B25 SWAP1 PUSH2 0x190B JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x1B64 SWAP1 PUSH2 0x1B5F PUSH2 0x1B5A PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1BE4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1B75 PUSH2 0x1B7F SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8B SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B97 SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BAB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1BBE SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BD9 PUSH2 0x1BD4 PUSH2 0x1BE0 SWAP3 PUSH2 0x1BB5 JUMP JUMPDEST PUSH2 0x1BC1 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1BF0 PUSH2 0x1BF7 SWAP2 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1C02 SWAP1 PUSH2 0x1B4B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1C29 PUSH2 0x1C22 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1C09 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1C7D JUMPI POP PUSH1 0x1 EQ PUSH2 0x1C45 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C52 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1C69 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1C56 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE DUP1 ISZERO ISZERO MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH2 0x1CBC PUSH2 0x1CB3 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1CAA DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x1C09 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2E6A736F6E000000000000000000000000000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1CF4 PUSH1 0x5 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x1CFD DUP2 PUSH2 0x1CC0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1D12 PUSH2 0x1D1D SWAP4 PUSH2 0x1D18 SWAP4 PUSH2 0x1C0E JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x1CE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D6A SWAP1 PUSH2 0x1D2F PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x1D65 PUSH2 0x1D3E PUSH1 0x9 SWAP3 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x1D56 PUSH2 0x1D4A PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D7A SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x32C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1D8A SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D97 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBA PUSH2 0x1DBF SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DCC SWAP1 SLOAD PUSH2 0x1DAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1DE8 PUSH2 0x1DEE SWAP3 PUSH2 0x1DE0 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E00 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E25 PUSH2 0x1E2A SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1E0E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E37 SWAP1 SLOAD PUSH2 0x1E19 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E44 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E6B PUSH2 0x1E70 SWAP2 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x1E4E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E7D SWAP1 SLOAD PUSH2 0x1E5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E8A SWAP1 PUSH2 0x3FC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1E98 PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1ED2 PUSH2 0x1EC9 PUSH1 0x0 PUSH2 0x1EAC PUSH2 0x1E8E JUMP JUMPDEST SWAP5 PUSH2 0x1EC3 PUSH2 0x1EBB DUP4 DUP4 ADD PUSH2 0x1E2D JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x1E3A JUMP JUMPDEST ADD PUSH2 0x1E73 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x1E80 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EDD SWAP1 PUSH2 0x1E9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EEA SWAP1 MLOAD PUSH2 0x272 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F01 PUSH2 0x1EFC PUSH2 0x1F06 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F12 SWAP1 PUSH2 0x1EED JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F1F SWAP1 MLOAD PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F36 PUSH2 0x1F31 PUSH2 0x1F3B SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F63 PUSH2 0x1F69 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x1F75 DUP4 DUP3 MUL PUSH2 0x2A2 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1F84 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1FAB PUSH2 0x1FB1 SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1FBC JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x1FE4 PUSH2 0x1FE9 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1FD3 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH2 0x1FDC PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x1ED4 JUMP JUMPDEST SWAP2 PUSH2 0x1FF6 PUSH1 0x0 DUP5 ADD PUSH2 0x1EE0 JUMP JUMPDEST PUSH2 0x2011 PUSH2 0x200B PUSH2 0x2006 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x205E JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x205A SWAP4 PUSH2 0x2037 PUSH2 0x2032 PUSH1 0x20 DUP10 ADD PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x204D PUSH2 0x2048 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F9F JUMP JUMPDEST SWAP4 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x205A PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x2075 PUSH1 0x2 PUSH2 0x1ED4 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x2017 JUMP JUMPDEST PUSH2 0x208B SWAP2 CALLDATASIZE SWAP2 PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2099 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP7 SWAP4 SWAP7 SWAP6 SWAP1 SWAP5 SWAP2 SWAP3 SWAP6 PUSH2 0x20AD PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x22E6 JUMPI JUMPDEST DUP3 DUP8 SUB PUSH2 0x22D8 JUMPI PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP5 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP6 PUSH1 0x20 MSTORE DUP6 PUSH1 0x60 SHR SWAP6 DUP4 PUSH1 0x60 SHR SWAP4 DUP5 ISZERO PUSH2 0x22CA JUMPI DUP8 CALLER SUB PUSH2 0x22AE JUMPI JUMPDEST DUP9 PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x224E JUMPI POP POP POP DUP3 DUP7 PUSH1 0x20 PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE DUP12 DUP14 DUP2 PUSH1 0x5 SHL SWAP5 DUP3 DUP7 SWAP4 PUSH1 0x40 DUP7 ADD MSTORE DUP4 DUP14 PUSH1 0x60 DUP8 ADD CALLDATACOPY DUP4 PUSH1 0x60 ADD DUP3 DUP7 ADD MSTORE PUSH1 0x60 DUP5 DUP7 ADD ADD SWAP1 DUP2 MSTORE ADD CALLDATACOPY PUSH1 0x80 CALLER SWAP4 DUP1 ADD ADD SWAP1 LOG4 PUSH2 0x2164 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2231 JUMPI JUMPDEST POP DUP2 EXTCODESIZE PUSH2 0x217A JUMPI JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP1 SWAP8 DUP7 SWAP5 PUSH1 0x0 MSTORE DUP1 PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 PUSH4 0xBC197C81 DUP13 MSTORE CALLER DUP7 DUP14 ADD MSTORE PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP13 ADD MSTORE DUP11 DUP4 PUSH1 0x5 SHL SWAP10 DUP11 SWAP6 DUP7 SWAP5 DUP6 SWAP4 ADD MSTORE PUSH1 0xE0 DUP14 ADD CALLDATACOPY DUP2 PUSH1 0xC0 ADD PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xE0 DUP3 DUP13 ADD ADD SWAP3 DUP4 MSTORE DUP5 DUP4 ADD CALLDATACOPY DUP2 DUP1 PUSH1 0xE0 ADD ADD PUSH1 0xA0 DUP11 ADD MSTORE ADD ADD DUP4 DUP2 MSTORE ADD CALLDATACOPY DUP1 ADD ADD PUSH2 0x104 ADD PUSH1 0x1C PUSH1 0x40 MLOAD ADD PUSH1 0x0 DUP1 MLOAD GAS CALL ISZERO PUSH2 0x2222 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2214 JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2171 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x21F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2248 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP7 SWAP1 DUP11 DUP13 SWAP2 SWAP3 DUP8 SWAP5 DUP12 SWAP7 PUSH2 0x33FF JUMP JUMPDEST CODESIZE PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP12 ADD CALLDATALOAD DUP4 PUSH1 0x20 MSTORE DUP2 DUP9 ADD CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP4 GT PUSH2 0x22A0 JUMPI DUP3 SWAP1 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x2292 JUMPI DUP3 SWAP2 SSTORE PUSH2 0x20F7 JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x20F1 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2309 DUP5 DUP9 PUSH2 0x2303 DUP12 DUP8 SWAP1 PUSH2 0x22FD DUP9 SWAP5 DUP13 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x20B2 JUMP JUMPDEST SWAP1 PUSH2 0x232A SWAP2 PUSH2 0x2325 PUSH2 0x2320 DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x232C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2336 SWAP2 PUSH2 0x3449 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2342 SWAP2 PUSH2 0x230F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x239F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x23A8 DUP2 PUSH2 0x2344 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2392 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23CC JUMPI JUMP JUMPDEST PUSH2 0x23D4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23EA PUSH1 0x4 DUP3 ADD PUSH2 0x23AC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x241B SWAP2 PUSH2 0x2416 DUP3 PUSH2 0x2410 PUSH2 0x240A PUSH2 0x2405 PUSH2 0x3473 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x23C5 JUMP JUMPDEST PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x242E PUSH2 0x241D JUMP JUMPDEST POP DUP3 SUB PUSH2 0x2485 JUMPI PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP1 DUP5 DUP2 ADD PUSH1 0x40 MSTORE JUMPDEST PUSH2 0x2456 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP3 ADD CALLDATALOAD PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x0 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 DUP7 ADD MSTORE PUSH2 0x244C JUMP JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x24AE SWAP3 SWAP2 PUSH2 0x24A9 PUSH2 0x24A4 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x24B0 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x24BD SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x352E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x24CA SWAP3 SWAP2 PUSH2 0x2493 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x250C SWAP4 SWAP3 SWAP2 PUSH2 0x2507 PUSH2 0x2502 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x250E JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x251C SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x35B1 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x252A SWAP4 SWAP3 SWAP2 PUSH2 0x24F0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2545 SWAP1 PUSH2 0x2540 PUSH2 0x253B PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2547 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2552 SWAP1 PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x255D SWAP1 PUSH2 0x252C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2571 PUSH2 0x2576 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x255F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2583 SWAP1 SLOAD PUSH2 0x2565 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2592 PUSH1 0xFF SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x25A5 SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25C0 PUSH2 0x25BB PUSH2 0x25C7 SWAP3 PUSH2 0x259C JUMP JUMPDEST PUSH2 0x25A8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2586 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP6 SWAP7 SWAP5 SWAP4 SWAP3 SWAP5 CALLER PUSH2 0x2604 PUSH2 0x25FE PUSH32 0x0 PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2666 JUMPI JUMPDEST PUSH2 0x2649 JUMPI PUSH2 0x263B SWAP8 PUSH2 0x262E SWAP7 PUSH2 0x2629 SWAP5 DUP10 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x3607 JUMP JUMPDEST PUSH2 0x30F9 JUMP JUMPDEST PUSH2 0x2636 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x2647 PUSH1 0x1 PUSH1 0xB PUSH2 0x25AB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2662 PUSH1 0x4 DUP3 ADD PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2671 PUSH1 0xB PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x260D JUMP JUMPDEST SWAP1 PUSH2 0x2680 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26B1 PUSH2 0x26AC PUSH2 0x26B6 SWAP4 PUSH2 0x26A4 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x36A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C2 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26CE SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26DB SWAP1 PUSH2 0x26C5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2711 SWAP2 PUSH1 0x0 PUSH2 0x2706 PUSH2 0x270C SWAP4 PUSH2 0x26FE PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x2579 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x272D SWAP1 PUSH2 0x2728 PUSH2 0x2723 PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x272F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x273A SWAP1 PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2745 SWAP1 PUSH2 0x2714 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x275E PUSH2 0x2763 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x2747 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2770 SWAP1 SLOAD PUSH2 0x2752 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277C SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2792 DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x27AE JUMPI PUSH2 0x27AB SWAP2 PUSH1 0x0 ADD PUSH2 0x2785 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST POP PUSH2 0x27C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27CE SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x27E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27ED SWAP1 PUSH2 0x350 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2800 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x280C SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2860 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x285B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2856 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2888 DUP2 PUSH2 0x2881 DUP2 PUSH2 0x288D SWAP6 PUSH2 0x2865 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28A7 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x28E8 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x28E3 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x290C DUP2 PUSH2 0x2905 DUP2 PUSH2 0x2911 SWAP6 PUSH2 0x4FF JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x292B DUP2 PUSH2 0x2915 JUMP JUMPDEST SUB PUSH2 0x2932 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2944 DUP3 PUSH2 0x2922 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x2955 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2937 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2961 SWAP1 PUSH2 0x2915 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x29A3 SWAP1 PUSH1 0x20 PUSH2 0x299B PUSH2 0x2991 PUSH1 0x40 DUP5 ADD PUSH2 0x2983 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x28AC JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x28F2 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x2946 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x2958 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A50 SWAP2 PUSH2 0x2A42 PUSH2 0x2A37 PUSH1 0xC0 DUP4 ADD PUSH2 0x29CE PUSH2 0x29C4 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x27B3 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x27C5 JUMP JUMPDEST PUSH2 0x29E8 PUSH2 0x29DE PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x27D2 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x27E4 JUMP JUMPDEST PUSH2 0x2A02 PUSH2 0x29F8 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A1C PUSH2 0x2A12 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A29 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x281F JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x286E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x2891 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2965 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x2A7F PUSH1 0x40 SWAP2 PUSH2 0x2A87 SWAP5 PUSH2 0x2A72 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x29A6 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2A91 PUSH2 0x252 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x2AA7 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH2 0x2ABA PUSH2 0x2AB5 PUSH1 0x6 PUSH2 0x2766 JUMP JUMPDEST PUSH2 0x2773 JUMP JUMPDEST PUSH2 0x2AE6 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2AF1 PUSH2 0x2AD2 PUSH1 0x7 PUSH2 0x1DC2 JUMP JUMPDEST PUSH2 0x2ADA PUSH2 0x252 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x277F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2A53 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2B36 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2B08 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B29 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2B2F JUMPI JUMPDEST PUSH2 0x2B21 DUP2 DUP4 PUSH2 0x5CF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2794 JUMP JUMPDEST CODESIZE PUSH2 0x2B04 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2B17 JUMP JUMPDEST PUSH2 0x2A89 JUMP JUMPDEST SWAP1 ISZERO ISZERO PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE CALLER PUSH1 0x14 MSTORE DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x34 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH2 0x2B98 SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x36D9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BB6 SWAP4 SWAP3 SWAP2 PUSH2 0x2BB1 PUSH2 0x2BAC PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2BB8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x2BC6 SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x372B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BD4 SWAP4 SWAP3 SWAP2 PUSH2 0x2B9A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2BF5 PUSH2 0x2BF0 PUSH2 0x2BFA SWAP3 PUSH2 0x2BE8 PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3814 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C18 SWAP2 PUSH2 0x2C13 PUSH2 0x2C0E DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2C1A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C24 SWAP2 PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C30 SWAP2 PUSH2 0x2BFD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2C3A PUSH2 0x1834 JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2C6F SWAP1 PUSH2 0x2C6A PUSH2 0x2C65 PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2CB4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C7E PUSH1 0x0 NOT SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2C91 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CA9 PUSH2 0x2CA4 PUSH2 0x2CB0 SWAP3 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CBF SWAP1 PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2CCA SWAP1 PUSH2 0x2C56 JUMP JUMPDEST JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP5 PUSH2 0x2CD8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x2E76 JUMPI JUMPDEST PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP1 PUSH1 0x20 MSTORE PUSH1 0x60 SHR SWAP3 DUP3 PUSH1 0x60 SHR SWAP3 DUP4 ISZERO PUSH2 0x2E68 JUMPI DUP5 CALLER SUB PUSH2 0x2E4C JUMPI JUMPDEST DUP7 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP5 GT PUSH2 0x2E3E JUMPI DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP3 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x2E30 JUMPI SSTORE DUP1 PUSH1 0x20 MSTORE DUP3 DUP5 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 PUSH1 0x0 LOG4 PUSH2 0x2D76 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2E0B JUMPI JUMPDEST DUP3 EXTCODESIZE PUSH2 0x2D8A JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP3 SWAP2 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 PUSH4 0xF23A6E61 DUP9 MSTORE CALLER DUP10 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP1 DUP7 ADD MSTORE DUP2 PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD CALLDATACOPY PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x2DFC JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2DEE JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2D82 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2DD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2E14 DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E1E DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E2A DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2D7B JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x2D14 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2E7F DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E89 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E95 DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2CDD JUMP JUMPDEST PUSH2 0x2EA3 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x2EAD DUP2 PUSH2 0x3854 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2ED0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2EC0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2ECA SWAP2 POP PUSH2 0x38FA JUMP JUMPDEST CODESIZE PUSH2 0x2EBC JUMP JUMPDEST POP PUSH2 0x2EDA DUP2 PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x2EB4 JUMP JUMPDEST PUSH2 0x2EF1 SWAP1 PUSH2 0x2EEB PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x39F1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2F4E PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2F57 DUP2 PUSH2 0x2EF3 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F71 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2F41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2F7B JUMPI JUMP JUMPDEST PUSH2 0x2F83 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2F99 PUSH1 0x4 DUP3 ADD PUSH2 0x2F5B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2FD2 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2FDB DUP2 PUSH2 0x2F9D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2FF5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2FC5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2FFF JUMPI JUMP JUMPDEST PUSH2 0x3007 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x301D PUSH1 0x4 DUP3 ADD PUSH2 0x2FDF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x302B PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3046 PUSH2 0x3041 PUSH2 0x304D SWAP3 PUSH2 0x26C5 JUMP JUMPDEST PUSH2 0x302E JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3071 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x3051 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x308F PUSH2 0x308A PUSH2 0x3094 SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x30AF PUSH2 0x30AA PUSH2 0x30B6 SWAP3 PUSH2 0x307B JUMP JUMPDEST PUSH2 0x3097 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x3057 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x30E5 PUSH1 0x20 PUSH1 0x0 PUSH2 0x30EB SWAP5 PUSH2 0x30DD DUP3 DUP3 ADD PUSH2 0x30D7 DUP5 DUP9 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP1 PUSH2 0x3031 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x1F15 JUMP JUMPDEST SWAP1 PUSH2 0x309A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x30F7 SWAP2 PUSH2 0x30BA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x316A PUSH2 0x3171 SWAP3 PUSH2 0x3125 DUP4 PUSH2 0x311E PUSH2 0x3118 PUSH2 0x3113 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x314B DUP2 PUSH2 0x3144 PUSH2 0x313E PUSH2 0x3139 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 PUSH2 0x3161 PUSH2 0x3157 PUSH2 0x3021 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x317C PUSH2 0x1C04 JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x31B9 JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x319A JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x31DC PUSH2 0x31D7 PUSH2 0x31E1 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x31F0 SWAP2 ADD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x3213 DUP3 PUSH2 0xE9A JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3224 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3233 SWAP1 MLOAD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3242 PUSH2 0x3247 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 SLOAD PUSH2 0x3236 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3266 PUSH2 0x326C SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3277 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST SWAP1 PUSH2 0x3291 PUSH2 0x328C PUSH2 0x3298 SWAP3 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x32AB PUSH2 0x32B1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x32BC JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH2 0x32D1 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 DUP5 DUP4 SWAP2 PUSH2 0x3A8A JUMP JUMPDEST PUSH2 0x32DA DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0x32E5 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP3 PUSH2 0x32F0 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP4 JUMPDEST DUP5 PUSH2 0x3305 PUSH2 0x32FF DUP9 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x3382 JUMPI PUSH2 0x3376 PUSH2 0x337C SWAP2 PUSH2 0x335D PUSH2 0x3328 PUSH2 0x3323 DUP9 DUP11 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x3357 PUSH2 0x3348 PUSH1 0x1 PUSH2 0x3342 PUSH2 0x333D DUP14 DUP13 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x3352 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x3370 PUSH2 0x336B DUP8 DUP10 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP5 PUSH2 0x31E4 JUMP JUMPDEST SWAP4 PUSH2 0x32F2 JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x33A6 SWAP3 POP PUSH2 0x339F SWAP2 POP PUSH2 0x339A PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33C4 PUSH2 0x33BF PUSH2 0x33C9 SWAP3 PUSH2 0x33AD JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D4 PUSH2 0x33A8 JUMP JUMPDEST POP PUSH2 0x33E0 PUSH2 0x2710 PUSH2 0x33B0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33EB PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x33F9 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP SWAP5 SWAP3 SWAP4 SWAP1 SWAP4 PUSH2 0x340E PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x341B JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3431 PUSH2 0x3437 SWAP4 PUSH2 0x343D SWAP8 SWAP7 SWAP1 SWAP3 SWAP4 SWAP6 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x3413 JUMP JUMPDEST SWAP1 PUSH2 0x346B PUSH2 0x3466 PUSH2 0x3470 SWAP4 PUSH2 0x345F DUP2 DUP6 SWAP1 PUSH2 0x3AA5 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3B8C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x347B PUSH2 0x1DF1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x34A2 PUSH2 0x349D PUSH2 0x34A7 SWAP4 PUSH2 0x3496 DUP2 DUP6 SWAP1 PUSH2 0x3BC7 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3C61 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34DF PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x34E8 DUP2 PUSH2 0x34AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3502 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x34D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x350C JUMPI JUMP JUMPDEST PUSH2 0x3514 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x352A PUSH1 0x4 DUP3 ADD PUSH2 0x34EC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x35AA SWAP1 PUSH2 0x35A3 PUSH2 0x35AF SWAP5 SWAP4 PUSH2 0x355E DUP6 PUSH2 0x3557 PUSH2 0x3551 PUSH2 0x354C PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x3584 DUP2 PUSH2 0x357D PUSH2 0x3577 PUSH2 0x3572 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x3505 JUMP JUMPDEST SWAP4 PUSH2 0x359A PUSH2 0x3590 PUSH2 0x3021 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x35FF SWAP2 SWAP3 PUSH2 0x35CB PUSH2 0x3605 SWAP6 PUSH2 0x35F0 SWAP4 SWAP1 DUP7 DUP5 SWAP2 SWAP3 PUSH2 0x3C9C JUMP JUMPDEST PUSH2 0x35E8 PUSH2 0x35E1 DUP3 PUSH2 0x35DC PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x35FA DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x3626 PUSH2 0x366B SWAP7 SWAP5 PUSH2 0x361F PUSH2 0x362D SWAP5 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x363F PUSH2 0x3638 PUSH2 0x1448 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3651 PUSH2 0x364A PUSH2 0x188F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3663 PUSH2 0x365C PUSH2 0x18E7 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3D9D JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x367C PUSH2 0x3681 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0xAE9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3698 PUSH2 0x3693 PUSH2 0x369D SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36CC PUSH2 0x36C7 PUSH2 0x36D6 SWAP4 PUSH2 0x36C2 PUSH1 0x0 PUSH2 0x36D1 SWAP6 PUSH2 0x36BB PUSH2 0x1DF1 JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3E18 JUMP JUMPDEST PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3684 JUMP JUMPDEST PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3714 PUSH2 0x3729 SWAP4 PUSH2 0x36EF PUSH2 0x3723 SWAP4 DUP6 DUP4 SWAP2 PUSH2 0x3E3A JUMP JUMPDEST PUSH2 0x370C PUSH2 0x3705 DUP3 PUSH2 0x3700 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x371E DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP3 PUSH2 0x373C SWAP2 SWAP5 SWAP4 SWAP1 DUP6 DUP5 SWAP2 SWAP3 PUSH2 0x3E55 JUMP JUMPDEST PUSH2 0x3745 DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP2 PUSH2 0x3750 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x375B PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x3770 PUSH2 0x376A DUP8 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x37EE JUMPI PUSH2 0x3796 PUSH2 0x37E8 SWAP2 PUSH2 0x3790 PUSH2 0x378B DUP8 DUP8 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 PUSH2 0x37E3 PUSH2 0x37AD PUSH2 0x37A8 DUP8 DUP5 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x37DD PUSH2 0x37CE PUSH1 0x1 PUSH2 0x37C8 PUSH2 0x37C3 DUP14 DUP9 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x37D8 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x31E4 JUMP JUMPDEST SWAP2 PUSH2 0x375D JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x3812 SWAP3 POP PUSH2 0x380B SWAP2 POP PUSH2 0x3806 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x382C PUSH1 0x0 PUSH2 0x3831 SWAP3 PUSH2 0x3825 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3F98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x383D PUSH2 0x241D JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x385C PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0x3E85E62F PUSH1 0xE0 SHL PUSH2 0x3877 PUSH2 0x3871 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3884 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x388E SWAP2 POP PUSH2 0x3FB0 JUMP JUMPDEST CODESIZE PUSH2 0x3880 JUMP JUMPDEST PUSH2 0x389C PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x38A6 DUP2 PUSH2 0x3FD7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x38EB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x38D0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x38C0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x38CA SWAP2 POP PUSH2 0x4017 JUMP JUMPDEST CODESIZE PUSH2 0x38BC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x38E5 PUSH2 0x38DF DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ PUSH2 0x38B4 JUMP JUMPDEST POP PUSH2 0x38F5 DUP2 PUSH2 0x4017 JUMP JUMPDEST PUSH2 0x38AD JUMP JUMPDEST PUSH2 0x3902 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x390C DUP2 PUSH2 0x4017 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3918 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3922 SWAP2 POP PUSH2 0x4057 JUMP JUMPDEST CODESIZE PUSH2 0x3914 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x393F PUSH2 0x393A PUSH2 0x3944 SWAP3 PUSH2 0x3928 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x397B PUSH1 0x17 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x3984 DUP2 PUSH2 0x3947 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39BC PUSH1 0x11 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x39C5 DUP2 PUSH2 0x3988 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39E3 PUSH2 0x39EE SWAP4 SWAP3 PUSH2 0x39DD PUSH2 0x39E8 SWAP4 PUSH2 0x396F JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x39B0 JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3A06 PUSH2 0x3A00 DUP4 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3A0E JUMPI POP POP JUMP JUMPDEST PUSH2 0x3A86 SWAP2 PUSH2 0x3A64 PUSH2 0x3A3D PUSH2 0x3A2D PUSH2 0x3A27 PUSH2 0x3A69 SWAP6 PUSH2 0x40E5 JUMP JUMPDEST SWAP4 PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3A37 PUSH1 0x20 PUSH2 0x392B JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP2 PUSH2 0x3A55 PUSH2 0x3A49 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x39C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x3AA3 SWAP3 PUSH2 0x3A9A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x4479 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AB9 PUSH2 0x3AB3 DUP3 DUP5 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3AC2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3AE5 PUSH1 0x1 PUSH2 0x3AE0 PUSH1 0x0 PUSH2 0x3AD8 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3AEE PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3B2B PUSH2 0x3B25 PUSH2 0x3B1F PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3B34 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3B3E DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3ABE JUMP JUMPDEST PUSH2 0x3B51 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B68 PUSH2 0x3B63 PUSH2 0x3B6D SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B84 PUSH2 0x3B7F PUSH2 0x3B89 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3BBF PUSH2 0x3BB9 PUSH2 0x3BB4 PUSH2 0x3BAF PUSH1 0x0 PUSH2 0x3BC4 SWAP7 PUSH2 0x3BA7 PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 DUP2 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x3BDB JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3BFE PUSH1 0x0 PUSH2 0x3BF9 PUSH1 0x0 PUSH2 0x3BF1 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3C07 PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3C44 PUSH2 0x3C3E PUSH2 0x3C38 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3C4D PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3C57 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3BD7 JUMP JUMPDEST SWAP1 PUSH2 0x3C94 PUSH2 0x3C8E PUSH2 0x3C89 PUSH2 0x3C84 PUSH1 0x0 PUSH2 0x3C99 SWAP7 PUSH2 0x3C7C PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4729 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3CA8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3D84 JUMPI JUMPDEST DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3D76 JUMPI PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE DUP4 PUSH1 0x14 MSTORE DUP5 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP4 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x3D68 JUMPI SSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x60 SHR PUSH1 0x0 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP4 LOG4 PUSH2 0x3D15 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3D4F JUMPI JUMPDEST PUSH2 0x3D23 DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3D2E JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3D46 SWAP4 PUSH2 0x3D3C PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x4840 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3D28 JUMP JUMPDEST PUSH2 0x3D58 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D62 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D1A JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3D8D DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D97 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3CAD JUMP JUMPDEST SWAP1 PUSH2 0x3DB3 PUSH2 0x3DB8 SWAP4 SWAP3 PUSH2 0x3DAE PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x48D9 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3DD2 DUP2 PUSH2 0x3DBA JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3DED JUMPI PUSH2 0x3DE4 PUSH1 0x1 SWAP2 PUSH2 0x3DBE JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3E02 SWAP1 PUSH1 0x8 PUSH2 0x3E07 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3E15 SWAP2 SLOAD PUSH2 0x3DF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3E37 SWAP2 PUSH1 0x0 PUSH2 0x3E31 SWAP3 PUSH2 0x3E2A PUSH2 0x1D7C JUMP JUMPDEST POP ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3E53 SWAP3 PUSH2 0x3E4A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x48F9 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3E61 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3F93 JUMPI JUMPDEST DUP1 MLOAD DUP5 MLOAD SUB PUSH2 0x3F85 JUMPI DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3F77 JUMPI DUP1 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP5 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x3F40 JUMPI POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP2 DUP9 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD PUSH1 0x40 DUP3 ADD SWAP1 DUP2 DUP2 DUP13 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP4 ADD MSTORE RETURNDATASIZE ADD DUP7 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP2 DUP2 DUP10 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP4 PUSH1 0x60 SHR SWAP4 CALLER SWAP3 LOG4 PUSH2 0x3F01 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3F3B JUMPI JUMPDEST PUSH2 0x3F0F DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3F1A JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3F32 SWAP4 PUSH2 0x3F28 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x49FD JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST DUP1 DUP4 ADD MLOAD SWAP1 DUP1 DUP8 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x3F69 JUMPI PUSH1 0x20 SWAP3 SSTORE SUB DUP1 PUSH2 0x3E8E JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3E66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FAD SWAP2 PUSH2 0x3FA6 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FB8 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0xE89341C DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0xD9B67A26 DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x3FDF PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x3FFA PUSH2 0x3FF4 PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4007 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4011 SWAP2 POP PUSH2 0x4AB4 JUMP JUMPDEST CODESIZE PUSH2 0x4003 JUMP JUMPDEST PUSH2 0x401F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x403A PUSH2 0x4034 PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4047 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4051 SWAP2 POP PUSH2 0x4ADA JUMP JUMPDEST CODESIZE PUSH2 0x4043 JUMP JUMPDEST PUSH2 0x405F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x407A PUSH2 0x4074 PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4087 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4091 SWAP2 POP PUSH2 0x3894 JUMP JUMPDEST CODESIZE PUSH2 0x4083 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x40B4 PUSH2 0x40AF PUSH2 0x40B9 SWAP3 PUSH2 0x4097 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40C6 PUSH1 0x14 PUSH2 0x40A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40DD PUSH2 0x40D8 PUSH2 0x40E2 SWAP3 PUSH2 0x409A JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4102 PUSH2 0x40FD PUSH2 0x4118 SWAP3 PUSH2 0x40F7 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x4112 PUSH2 0x410D PUSH2 0x40BC JUMP JUMPDEST PUSH2 0x40C9 JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4132 PUSH2 0x412D PUSH2 0x4137 SWAP3 PUSH2 0x411B JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x414C PUSH2 0x4147 DUP4 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x417B PUSH2 0x4163 DUP4 PUSH2 0x413A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x4171 DUP7 SWAP4 PUSH2 0x1028 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x4151 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4193 DUP3 PUSH2 0x4185 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x41A5 JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41C9 PUSH2 0x41C4 PUSH2 0x41CE SWAP3 PUSH2 0x41B2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41DA SWAP1 PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x41E9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x420D PUSH2 0x41EE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4227 PUSH2 0x4222 PUSH2 0x422C SWAP3 PUSH2 0x4210 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x424C PUSH2 0x4247 PUSH2 0x4251 SWAP3 PUSH2 0x4235 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4273 SWAP1 PUSH2 0x426D PUSH2 0x4267 PUSH2 0x4278 SWAP5 PUSH2 0x409A JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x42AF PUSH1 0x20 DUP1 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x42B8 DUP2 PUSH2 0x427B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x42D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x42A3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x42DC JUMPI JUMP JUMPDEST PUSH2 0x42E4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x42FA PUSH1 0x4 DUP3 ADD PUSH2 0x42BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x4308 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x43A2 PUSH2 0x4392 PUSH2 0x433E PUSH2 0x4339 PUSH2 0x4329 PUSH1 0x2 PUSH2 0x4324 DUP8 SWAP2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x4333 PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST PUSH2 0x4156 JUMP JUMPDEST SWAP3 PUSH2 0x4347 PUSH2 0x417D JUMP JUMPDEST PUSH2 0x4360 DUP6 PUSH2 0x435A PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4369 PUSH2 0x41AA JUMP JUMPDEST PUSH2 0x4382 DUP6 PUSH2 0x437C PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x438D PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x439C PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x43B8 PUSH2 0x43B2 PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST GT ISZERO PUSH2 0x441F JUMPI PUSH2 0x43C6 PUSH2 0x4205 JUMP JUMPDEST DUP2 PUSH2 0x43D1 PUSH1 0xF PUSH2 0x4213 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x441A JUMPI PUSH2 0x43ED PUSH2 0x440E SWAP3 PUSH2 0x4414 SWAP5 BYTE PUSH2 0x422F JUMP JUMPDEST PUSH2 0x43FD DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4408 PUSH1 0x4 PUSH2 0x4238 JUMP JUMPDEST SWAP1 PUSH2 0x4254 JUMP JUMPDEST SWAP4 PUSH2 0x41D1 JUMP JUMPDEST SWAP3 PUSH2 0x43A4 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x4447 SWAP3 SWAP4 POP PUSH2 0x4442 SWAP1 PUSH2 0x443C PUSH2 0x4436 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x445C PUSH2 0x4457 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x446B PUSH1 0x0 PUSH2 0x444A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4476 PUSH2 0x4461 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x4485 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x45B1 JUMPI JUMPDEST DUP2 MLOAD DUP6 MLOAD SUB PUSH2 0x45A3 JUMPI PUSH1 0x60 SHL SWAP2 DUP3 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 PUSH1 0x60 SHL DUP4 DUP2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x4581 JUMPI JUMPDEST POP DUP4 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x454B JUMPI POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x0 SWAP4 SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x40 DUP4 MSTORE DUP1 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP2 PUSH1 0x40 DUP6 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP5 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP3 PUSH1 0x60 SHR SWAP3 CALLER SWAP3 LOG4 PUSH2 0x4536 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x453D JUMPI JUMPDEST JUMP JUMPDEST PUSH2 0x4545 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x453B JUMP JUMPDEST DUP1 DUP3 ADD MLOAD SWAP1 DUP1 DUP7 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP3 DUP4 DUP2 GT PUSH2 0x4573 JUMPI PUSH1 0x20 SWAP4 SUB SWAP1 SSTORE SUB DUP1 PUSH2 0x44BD JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x4595 JUMPI CODESIZE PUSH2 0x44B5 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x45B9 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x448A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x45DA DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x45F5 JUMPI PUSH2 0x45EC PUSH1 0x1 SWAP2 PUSH2 0x45C2 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x4610 PUSH2 0x460B PUSH2 0x4618 SWAP4 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x464C JUMPI DUP3 PUSH2 0x4644 SWAP2 PUSH1 0x1 PUSH2 0x464A SWAP6 ADD DUP2 SSTORE PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x465B SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x4671 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4686 PUSH2 0x4680 DUP3 DUP5 SWAP1 PUSH2 0x4B1A JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x46C9 JUMPI PUSH2 0x46BF PUSH2 0x46C4 SWAP3 PUSH2 0x46AA PUSH2 0x46A3 PUSH1 0x0 DUP6 ADD PUSH2 0x45BF JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x461C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x46B8 PUSH1 0x0 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP4 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x46F8 SWAP2 PUSH2 0x46F2 PUSH2 0x1D7C JUMP JUMPDEST SWAP2 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4703 DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4724 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x4721 PUSH2 0x471B DUP4 DUP4 PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x46E6 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x46D0 JUMP JUMPDEST PUSH2 0x4731 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4748 PUSH2 0x4743 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x475D PUSH2 0x4757 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x482B JUMPI PUSH2 0x47DD SWAP3 PUSH1 0x1 PUSH2 0x47D8 SWAP3 DUP5 PUSH2 0x4786 PUSH1 0x0 SWAP7 PUSH2 0x4780 DUP6 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST PUSH2 0x47A3 PUSH2 0x4794 DUP9 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH2 0x479D DUP7 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST DUP1 PUSH2 0x47B6 PUSH2 0x47B0 DUP5 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x47E2 JUMPI JUMPDEST POP POP POP PUSH2 0x47D2 PUSH2 0x47CD DUP7 DUP4 ADD PUSH2 0x45BF JUMP JUMPDEST PUSH2 0x46FA JUMP JUMPDEST ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x197F JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4823 SWAP3 PUSH2 0x4815 PUSH2 0x4801 PUSH2 0x47FB PUSH2 0x481E SWAP5 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP4 PUSH2 0x480F DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x47BC JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x483B PUSH2 0x1834 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xF23A6E61 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP1 DUP5 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xC0 DUP8 ADD MSTORE PUSH2 0x48C5 JUMPI JUMPDEST POP POP PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x48B6 JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x48A8 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4897 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP7 PUSH1 0xE0 DUP8 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x4882 JUMP JUMPDEST SWAP1 PUSH2 0x48F0 PUSH2 0x48E9 PUSH2 0x48F7 SWAP4 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x4905 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x49DB JUMPI JUMPDEST PUSH1 0x60 SHL SWAP1 DUP2 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP2 DUP2 PUSH1 0x60 SHL EQ DUP2 PUSH1 0x60 SHL ISZERO OR ISZERO PUSH2 0x49B9 JUMPI JUMPDEST POP DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 DUP3 DUP5 GT PUSH2 0x49AB JUMPI DUP4 PUSH1 0x0 SWAP4 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x60 SHR CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP5 LOG4 PUSH2 0x497F PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x4988 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4994 PUSH2 0x499A SWAP3 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49A3 PUSH2 0x446E JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x4984 JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x49CD JUMPI CODESIZE PUSH2 0x492E JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x49E4 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49EE DUP4 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49F7 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x490A JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xBC197C81 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP7 ADD MSTORE DUP1 MLOAD PUSH1 0x5 SHL DUP7 ADD DUP1 SWAP2 PUSH1 0xC0 DUP8 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0xA0 ADD SWAP1 DUP2 PUSH1 0x80 DUP8 ADD MSTORE RETURNDATASIZE ADD SWAP2 DUP3 DUP2 MLOAD PUSH1 0x5 SHL DUP9 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD PUSH1 0xA0 DUP6 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD DUP7 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP PUSH1 0x1C DUP4 ADD SWAP1 RETURNDATASIZE ADD SUB SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x4AA5 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x4A97 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4A86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4ABC PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4AD6 PUSH2 0x4AD0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x4AE2 PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x4AFD PUSH2 0x4AF7 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4B0A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4B14 SWAP2 POP PUSH2 0x3FD7 JUMP JUMPDEST CODESIZE PUSH2 0x4B06 JUMP JUMPDEST PUSH2 0x4B38 SWAP2 PUSH1 0x1 PUSH2 0x4B33 SWAP3 PUSH2 0x4B2C PUSH2 0x1834 JUMP JUMPDEST POP ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST PUSH2 0x4B4B PUSH2 0x4B45 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT ADDMOD DUP1 PUSH17 0x2FE6072BA72743479D7976A506937A4E7 JUMP 0xAA EXP 0xEF PUSH11 0xD714BEF8804E64736F6C63 NUMBER STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "305:2959:40:-:0;;;;;;;;;-1:-1:-1;305:2959:40;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;-1:-1:-1;305:2959:40;;;;;:::i;:::-;;:::o;:::-;;:::i;686:18:37:-;;;;;;:::i;:::-;;:::o;305:2959:40:-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;347:26:38:-;;;;;:::i;:::-;;:::o;305:2959:40:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;379:46:38:-;;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;305:2959:40:-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;710:21:37:-;;;;;;:::i;:::-;;:::o;305:2959:40:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2153:49:0:-;2198:4;;;:::i;:::-;2153:49;:::o;:::-;;;:::i;:::-;;:::o;305:2959:40:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;737:25:37:-;;;;;;:::i;:::-;;:::o;305:2959:40:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;6070:334:29:-;6145:14;;:::i;:::-;6214:184;;;;;;;;;;;;6070:334;:::o;305:2959:40:-;;;:::o;2956:305::-;3073:4;;:::i;:::-;3096:40;;;;:55;;3140:11;3096:55;:::i;:::-;;;:::i;:::-;;:118;;;;2956:305;3096:158;;;;;2956:305;3089:165;;:::o;3096:158::-;3218:36;3242:11;;3218:36;:::i;:::-;3096:158;;;:118;3202:11;3167:47;3202:11;3167:47;:::i;:::-;3096:118;;496:78:44;543:31;496:78;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;961:18:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;877:163:44:-;;1020:12;877:163;1020:12;:::i;:::-;877:163::o;:::-;;;;;:::i;:::-;:::o;599:80:37:-;647:32;599:80;:::o;2589:76:0:-;2657:1;2589:76;2642:4;2556:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;305:2959:40:-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;2474:136:37:-;2587:16;2474:136;2587:16;;:::i;:::-;2474:136::o;:::-;;;;:::i;:::-;:::o;514:91:46:-;568:37;514:91;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1115:25:46;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;305:2959:40:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1030:179:46:-;1165:37;1152:50;1030:179;1165:37;:::i;:::-;1152:50;;:::i;:::-;1030:179::o;:::-;;;;:::i;:::-;:::o;305:2959:40:-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;1918:184:37:-;2028:67;1918:184;1996:13;;:::i;:::-;2052:7;2035:59;2061:23;2052:7;2080:3;2061:23;:::i;:::-;2035:59;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2028:67;:::i;:::-;2021:74;:::o;3489:151::-;3625:7;3489:151;3603:10;3615:8;3625:7;;;:::i;:::-;3489:151::o;305:2959:40:-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4504:129:0:-;4604:22;:12;:22;4504:129;4578:7;;:::i;:::-;4604:6;;:12;:::i;:::-;:22;;:::i;:::-;4597:29;:::o;305:2959:40:-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;1671:428:12:-;1823:26;1794:55;1671:428;;;;1766:7;;:::i;:::-;1775;;;:::i;:::-;1823:17;;:26;:::i;:::-;1794:55;:::i;:::-;1864:7;:16;;:7;:16;;:::i;:::-;:30;;1884:10;1892:1;1884:10;:::i;:::-;1864:30;:::i;:::-;;;:::i;:::-;;1860:90;;1671:428;2060:16;1984:57;1985:35;2060:16;1985:9;:35;1997:23;;:7;:23;;:::i;:::-;1985:35;:::i;:::-;;;:::i;:::-;1984:57;2024:17;;:::i;:::-;1984:57;:::i;:::-;;;:::i;:::-;2060:7;:16;;:::i;:::-;2052:40;;:::o;1860:90::-;1920:19;;2060:16;;1984:57;1985:35;1910:29;1920:19;1910:29;:::i;:::-;1860:90;;;;;;;;305:2959:40;;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;12785:5890:29:-;;;;;;;;;;12990:25;;:::i;:::-;12986:106;;12785:5890;13144:3349;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12785:5890;13144:3349;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16506:24;;:::i;:::-;16502:112;;13144:3349;16666:2003;;;;;13144:3349;12785:5890;;;;;;;:::o;16666:2003::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16502:112;16598:4;16574;;16580:2;;16584:3;;;;16589:7;;16598:4;;;;;;:::i;:::-;16502:112;;;13144:3349;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12986:106;13031:50;13062:3;;13031:50;13067:7;;13076:4;13031:50;13076:4;;;13031:50;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;12986:106;;2589:76:0;;2657:1;2589:76;2642:4;5012:18;5025:4;5012:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;4929:145::-;;5059:7;4929:145;5059:7;:::i;:::-;4929:145::o;:::-;;;;;:::i;:::-;:::o;305:2959:40:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;6038:214:0;;6237:7;6038:214;6125:83;6133:7;:23;;6144:12;;:::i;:::-;6133:23;:::i;:::-;;;:::i;:::-;;6125:83;:::i;:::-;6237:7;:::i;:::-;6038:214::o;305:2959:40:-;;;:::o;18822:1021:29:-;;;;;18958:25;;:::i;:::-;19042:795;;;;;;;;;;;;;;;;;;;;;;;;;;18822:1021;;;;:::o;19042:795::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2589:76:0;;2657:1;2589:76;;2642:4;1593:18:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;1464:215:44:-;;1659:12;1464:215;1649:8;1659:12;;;:::i;:::-;1464:215::o;:::-;;;;;;:::i;:::-;:::o;369:64:40:-;409:24;369:64;:::o;2589:76:0:-;;2657:1;2589:76;;;2642:4;2278:11:40;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2182:158:40:-;;2328:4;2182:158;;2320:6;2328:4;;;:::i;:::-;2182:158::o;:::-;;;;;;;:::i;:::-;:::o;2589:76:0:-;2657:1;2589:76;2642:4;2310:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2222:148:37:-;2341:22;2222:148;2341:22;;:::i;:::-;2222:148::o;:::-;;;;:::i;:::-;:::o;305:2959:40:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1192:730::-;;;;;;;1526:10;:25;;1540:11;1526:25;:::i;:::-;;;:::i;:::-;;;:40;;;;1192:730;1522:101;;1880:5;1675;1825:19;1675:5;1748:21;1675:5;;1682:9;1693:12;1707:16;1725:21;1748;;;:::i;:::-;1825:19;:::i;:::-;1867:11;;:::i;:::-;1880:5;:::i;:::-;1897:18;1911:4;1897:18;;:::i;:::-;1192:730::o;1522:101::-;1589:23;;;;;;;;;;;;:::i;:::-;;;;1526:40;1555:11;;;;:::i;:::-;1526:40;;305:2959;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;1431:151:1:-;;1547:21;:18;:28;1431:151;1521:7;;:::i;:::-;1547:12;;:18;:::i;:::-;:21;:::i;:::-;:28;:::i;:::-;1540:35;:::o;305:2959:40:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;3021:145:0:-;3130:29;3021:145;3130:20;:12;:29;3021:145;3107:4;;:::i;:::-;3130:6;;:12;:::i;:::-;:20;:29;:::i;:::-;;:::i;:::-;3123:36;:::o;2589:76::-;2657:1;2589:76;2642:4;2907:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2819:156:37:-;2938:30;2819:156;2938:30;;:::i;:::-;2819:156::o;:::-;;;;:::i;:::-;:::o;305:2959:40:-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;;;;;;;1171:295:27;;;1398:63;1171:295;1319:7;;:::i;:::-;1398:10;:30;:10;;;:::i;:::-;:30;:::i;:::-;:63;:30;1429:6;1437:11;1450:10;1398:63;1450:10;;;:::i;:::-;1398:63;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;1171:295;1391:70;;:::o;1398:63::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;7020:720:29:-;;7150:584;;;;;;;;;;;;;;;;;;;;;;;;;;;7020:720::o;3171:113:37:-;3270:6;3171:113;3249:10;3261:7;3270:6;;;:::i;:::-;3171:113::o;2589:76:0:-;;2657:1;2589:76;;;2642:4;2733:11:40;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2574:228:40:-;;2790:4;2574:228;;2781:7;2790:4;;;:::i;:::-;2574:228::o;:::-;;;;;;;:::i;:::-;:::o;1750:140:1:-;1856:25;:18;:27;1750:140;1830:7;;:::i;:::-;1856:12;;:18;:::i;:::-;:25;:::i;:::-;:27;:::i;:::-;1849:34;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;5438:18;5451:4;5438:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;5354:147::-;;5486:7;5354:147;5486:7;:::i;:::-;5354:147::o;:::-;;;;;:::i;:::-;:::o;6495:386:29:-;6615:11;;:::i;:::-;6685:190;;;;;;;;;;;;6495:386;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1486:25:46;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;305:2959:40:-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1401:151:46:-;1523:22;1401:151;1523:22;;:::i;:::-;1401:151::o;:::-;;;;:::i;:::-;:::o;8225:4012:29:-;;;;;8401:25;;:::i;:::-;8397:122;;8225:4012;8571:2095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8225:4012;8571:2095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10679:24;;:::i;:::-;10675:120;;8225:4012;10847:1384;;;;8225:4012;;;;;;;:::o;10847:1384::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10675:120;10749:11;10757:2;10749:11;:::i;:::-;;10762:15;10770:6;10762:15;:::i;:::-;;10719:65;10779:4;;10719:65;;:::i;:::-;;10675:120;;8571:2095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8397:122;8473:11;8481:2;8473:11;:::i;:::-;;8486:15;8494:6;8486:15;:::i;:::-;;8442:66;8503:4;;8442:66;;:::i;:::-;;8397:122;;3794:366:37;3958:4;;:::i;:::-;4013:11;3981:44;4013:11;3981:44;:::i;:::-;:96;;;;3794:366;3981:172;;;;;3794:366;3974:179;;:::o;3981:172::-;4093:60;4141:11;;4093:60;:::i;:::-;3981:172;;;:96;4065:11;4029:48;4065:11;4029:48;:::i;:::-;3981:96;;3460:103:0;3543:12;3460:103;3543:12;;:::i;:::-;;;:::i;:::-;3460:103::o;305:2959:40:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;:::o;2730:327:12:-;;3015:35;2993:57;2730:327;2824:88;2832:12;:33;;2848:17;;:::i;:::-;2832:33;:::i;:::-;;;:::i;:::-;;;2824:88;:::i;:::-;2922:60;2930:8;:22;;2942:10;2950:1;2942:10;:::i;:::-;2930:22;:::i;:::-;;;:::i;:::-;;;2922:60;:::i;:::-;3037:12;3015:35;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;2993:57;;:::i;:::-;2730:327::o;6111:1560:31:-;;6167:20;;:::i;:::-;6242:1423;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6111:1560::o;305:2959:40:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;2317:419:38:-;2468:8;2317:419;;;;;2462:4;2468:8;;;:::i;:::-;2504:11;:4;:11;:::i;:::-;2547:1;2525:23;2547:1;2525:23;:::i;:::-;2575:1;2563:13;2575:1;2563:13;:::i;:::-;2558:136;2589:3;2578:1;:9;;2582:5;2578:9;:::i;:::-;;;:::i;:::-;;;;;2657:26;2589:3;2632:8;2608:35;2632:11;;:8;2641:1;2632:11;;:::i;:::-;;:::i;:::-;2608:35;:20;:11;2620:7;;:4;;:7;:::i;:::-;;:::i;:::-;2608:20;;:::i;:::-;:35;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2672:11;;:8;2681:1;2672:11;;:::i;:::-;;:::i;:::-;2657:26;;:::i;:::-;2589:3;;:::i;:::-;2563:13;;;2578:9;;;;;2703:26;2578:9;;2703:26;2578:9;;2703:26;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2317:419::o;305:2959:40:-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2374:95:12:-;2432:6;;:::i;:::-;2457:5;2450:12;2457:5;2450:12;:::i;:::-;;:::o;41921:101:29:-;41987:4;;:::i;:::-;42010:5;;42003:12;:::o;42664:100::-;42729:4;;:::i;:::-;42752:5;;42745:12;:::o;43666:310::-;;;;;;;;43870:24;;:::i;:::-;43866:104;;43666:310;;;;;;;:::o;43866:104::-;43910:49;;43940:3;43910:49;43940:3;;43945:7;;43954:4;;43910:49;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;43866:104;;;;;;;;1978:166:1;;2106:22;:18;:31;1978:166;2088:7;2082:4;2088:7;;;:::i;:::-;2106:12;:18;:::i;:::-;:22;:::i;:::-;:31;:::i;:::-;;1978:166::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;2233:171:1:-;;2363:25;:18;:34;2233:171;2345:7;2339:4;2345:7;;;:::i;:::-;2363:12;:18;:::i;:::-;:25;:::i;:::-;:34;:::i;:::-;;2233:171::o;305:2959:40:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;3491:351:12;3771:26;3491:351;3800:35;3771:64;3491:351;;3600:88;3608:12;:33;;3624:17;;:::i;:::-;3608:33;:::i;:::-;;;:::i;:::-;;;3600:88;:::i;:::-;3698:62;3706:8;:22;;3718:10;3726:1;3718:10;:::i;:::-;3706:22;:::i;:::-;;;:::i;:::-;;;3698:62;:::i;:::-;3822:12;3800:35;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;3771:17;:26;:::i;:::-;:64;:::i;:::-;3491:351::o;678:228:38:-;872:27;678:228;;823:5;872:27;678:228;872:16;678:228;809:3;;814:7;823:5;;;:::i;:::-;840:22;;855:7;840:22;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;872:11;;:16;:::i;:::-;:27;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;678:228::o;1272:581:37:-;;;1554:22;1824:21;1272:581;;1528:16;1586:30;1272:581;1528:16;;:::i;:::-;1554:22;;:::i;:::-;1586:30;;:::i;:::-;1658:5;1638:18;;:::i;:::-;1658:5;;;:::i;:::-;1705;1685:18;;:::i;:::-;1705:5;;;:::i;:::-;1753;1732:19;;:::i;:::-;1753:5;;;:::i;:::-;1801:21;1824;;;:::i;:::-;1272:581::o;305:2959:40:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;9563:156:22:-;9679:31;9687:22;9663:49;9563:156;9687:22;9691:10;9671:40;9563:156;9637:7;;:::i;:::-;9691:3;:10;9687:22;:::i;:::-;;:::i;:::-;9679:31;:::i;:::-;9671:40;:::i;:::-;9663:49;:::i;:::-;9656:56;:::o;1862:205:38:-;2033:16;:27;1862:205;1982:7;2033:27;1862:205;1977:3;1982:7;;;:::i;:::-;2001:22;;2016:7;2001:22;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2033:11;;:16;:::i;:::-;:27;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;1862:205::o;1177:480::-;;1392:5;1177:480;;;1376:4;;1382:8;1392:5;;;:::i;:::-;1425:11;:4;:11;:::i;:::-;1468:1;1446:23;1468:1;1446:23;:::i;:::-;1496:1;1484:13;1496:1;1484:13;:::i;:::-;1479:136;1510:3;1499:1;:9;;1503:5;1499:9;:::i;:::-;;;:::i;:::-;;;;;1529:26;1510:3;1544:8;:11;;:8;1553:1;1544:11;;:::i;:::-;;:::i;:::-;1529:26;;:::i;:::-;1593:8;1569:35;1593:11;;:8;1602:1;1593:11;;:::i;:::-;;:::i;:::-;1569:35;:20;:11;1581:7;;:4;1586:1;1581:7;;:::i;:::-;;:::i;:::-;1569:20;;:::i;:::-;:35;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;1510:3;:::i;:::-;1484:13;;;1499:9;;;;;1624:26;1499:9;;1624:26;1499:9;;1624:26;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;1177:480::o;9106:115:22:-;9195:19;9203:10;9195:19;9106:115;9169:7;;:::i;:::-;9203:3;:10;9195:19;:::i;:::-;;:::i;:::-;9188:26;:::o;48030:303:29:-;;48080:23;;:::i;:::-;48158:169;;;;;;;;;;;;;;;;48030:303::o;2890:234:38:-;2998:4;;:::i;:::-;3021:41;;;;:56;;3066:11;3021:56;:::i;:::-;;;:::i;:::-;;:96;;;;;2890:234;3014:103;;:::o;3021:96::-;3081:36;3105:11;;3081:36;:::i;:::-;3021:96;;;1833:366:44;1966:4;;:::i;:::-;2015:11;1989:38;2015:11;1989:38;:::i;:::-;:96;;;;1833:366;1989:163;;;;1833:366;1989:203;;;;;1833:366;1982:210;;:::o;1989:203::-;2156:36;2180:11;;2156:36;:::i;:::-;1989:203;;;:163;2101:36;;:51;;2141:11;2101:51;:::i;:::-;;;:::i;:::-;;1989:163;;:96;2073:11;2031:54;2073:11;2031:54;:::i;:::-;1989:96;;1586:295:46;1731:4;;:::i;:::-;1808:11;1766:54;1808:11;1766:54;:::i;:::-;:108;;;;;1586:295;1747:127;;:::o;1766:108::-;1824:50;1862:11;;1824:50;:::i;:::-;1766:108;;;305:2959:40;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;:::o;3844:479:0:-;;3931:23;3932:22;3940:4;3946:7;3932:22;;:::i;:::-;3931:23;;:::i;:::-;3927:390;;3844:479;;:::o;3927:390::-;3970:336;4135:7;4022:252;4214:38;4234:13;4115:28;3994:298;4135:7;4115:28;:::i;:::-;4242:4;4234:13;:::i;:::-;4214:38;4249:2;4214:38;:::i;:::-;;;:::i;:::-;4022:252;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;3994:298;:::i;:::-;3970:336;;:::i;:::-;305:2959:40;;;;;;3970:336:0;;;;;;:::i;:::-;;;;28229:178:29;;;28392:7;28229:178;28369:10;28377:1;28369:10;:::i;:::-;28381:4;28387:3;28392:7;;;:::i;:::-;28229:178::o;7587:233:0:-;7669:23;7670:22;7678:4;7684:7;7670:22;;:::i;:::-;7669:23;;:::i;:::-;7665:149;;7587:233;;;:::o;7665:149::-;7708:36;7740:4;7708:29;:20;:12;:6;7715:4;7708:12;;:::i;:::-;:20;7729:7;7708:29;;:::i;:::-;:36;:::i;:::-;7781:7;7790:12;;:::i;:::-;7763:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;7665:149;;;;305:2959:40;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;8305:150:22:-;;8398:50;8415:32;8423:23;8431:14;8403:10;8398:50;8305:150;8375:4;;:::i;:::-;8403:3;:10;8439:5;8431:14;:::i;:::-;8423:23;:::i;:::-;8415:32;:::i;:::-;8398:50;;:::i;:::-;;:::i;:::-;8391:57;:::o;7991:234:0:-;8074:22;8082:4;8088:7;8074:22;;:::i;:::-;8070:149;;7991:234;;;:::o;8070:149::-;8112:37;8144:5;8112:29;:20;:12;:6;8119:4;8112:12;;:::i;:::-;:20;8133:7;8112:29;;:::i;:::-;:37;:::i;:::-;8186:7;8195:12;;:::i;:::-;8168:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;8070:149;;;;8623:156:22;;8719:53;8739:32;8747:23;8755:14;8727:10;8719:53;8623:156;8696:4;;:::i;:::-;8727:3;:10;8763:5;8755:14;:::i;:::-;8747:23;:::i;:::-;8739:32;:::i;:::-;8719:53;;:::i;:::-;;:::i;:::-;8712:60;:::o;21034:1574:29:-;;;;;21139:25;;:::i;:::-;21135:128;;21034:1574;21315:1067;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22395:24;;:::i;:::-;22391:126;;21034:1574;22530:12;22539:2;22530:12;:::i;:::-;22526:75;;21034:1574;;;;;:::o;22526:75::-;22596:4;22576:1;22568:10;22576:1;22568:10;:::i;:::-;22580:2;22584;22588:6;22596:4;;;:::i;:::-;22526:75;;;;;;22391:126;22471:11;22479:2;22471:11;:::i;:::-;;22484:15;22492:6;22484:15;:::i;:::-;;22391:126;;21315:1067;;;;;;;;;;;;;;21135:128;21217:11;21225:2;21217:11;:::i;:::-;;21230:15;21238:6;21230:15;:::i;:::-;;21135:128;;612:218:46;;755:5;813:9;612:218;;728:25;;:::i;:::-;755:5;:::i;:::-;813:9;:::i;:::-;612:218::o;305:2959:40:-;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;4912:118:22:-;5005:18;4912:118;5005:11;:18;4912:118;4979:7;;:::i;:::-;5005:3;:11;:18;:::i;:::-;;;:::i;:::-;4998:25;:::o;26059:126:29:-;;;26171:6;26059:126;26149:10;26157:1;26149:10;:::i;:::-;26161:4;26167:2;26171:6;;;:::i;:::-;26059:126::o;22985:2719::-;;;;;23153:25;;:::i;:::-;23149:112;;22985:2719;23313:2174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25500:24;;:::i;:::-;25496:110;;23313:2174;25619:12;25628:2;25619:12;:::i;:::-;25615:82;;23313:2174;22985:2719;;;;:::o;25615:82::-;25692:4;25670:1;25662:10;25670:1;25662:10;:::i;:::-;25674:2;25678:3;25683:7;25692:4;;;:::i;:::-;25615:82;;;;;;25496:110;;;23313:2174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23149:112;;;4463:107:22;4545:11;:18;4463:107;4519:7;;:::i;:::-;4545:3;:11;:18;:::i;:::-;4538:25;:::o;20052:385:29:-;20128:11;;:::i;:::-;20194:237;;;;;;;;;;;;;;;20052:385;:::o;1408:213:12:-;1510:4;;:::i;:::-;1533:11;;:41;;1548:26;;;1533:41;:::i;:::-;;;:::i;:::-;;:81;;;;;1408:213;1526:88;;:::o;1533:81::-;1578:36;1602:11;;1578:36;:::i;:::-;1533:81;;;634:212:1;719:4;;:::i;:::-;742:11;;:57;;757:42;;;742:57;:::i;:::-;;;:::i;:::-;;:97;;;;;634:212;735:104;;:::o;742:97::-;803:36;827:11;;803:36;:::i;:::-;742:97;;;1899:210:27;1992:4;;:::i;:::-;2011:11;;:53;;2026:38;;;2011:53;:::i;:::-;;;:::i;:::-;;:93;;;;;1899:210;2004:100;;:::o;2011:93::-;2068:36;2092:11;;2068:36;:::i;:::-;2011:93;;;305:2959:40;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;302:43:17:-;343:2;;;:::i;:::-;302:43;:::o;343:2::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2407:149::-;2509:22;2517:13;2497:52;2407:149;2465:13;;:::i;:::-;2525:4;2517:13;:::i;:::-;2509:22;:::i;:::-;2497:52;2533:15;;:::i;:::-;2497:52;:::i;:::-;;;:::i;:::-;2490:59;:::o;305:2959:40:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;242:54:17:-;278:18;;:::i;:::-;242:54;:::o;278:18::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;305:2959:40;;;278:18:17;;;;;;;;:::i;:::-;;;;1818:437;;;1893:13;;:::i;:::-;1950:1;2042:14;:10;1940:25;1950:14;:10;:1;:10;1954:6;1950:10;;:::i;:::-;;:::i;:::-;:14;1963:1;1950:14;:::i;:::-;;;:::i;:::-;1940:25;:::i;:::-;1975:15;;;:::i;:::-;;:6;:15;1982:1;1975:15;;;;;:::i;:::-;;;:::i;:::-;;2000;;:::i;:::-;;:6;:15;2007:1;2000:15;;;;;:::i;:::-;;;:::i;:::-;;2042:10;:1;:10;:::i;:::-;;:::i;:::-;:14;2055:1;2042:14;:::i;:::-;;;:::i;:::-;2025:128;2065:3;2058:1;:5;;2062:1;2058:5;:::i;:::-;;;:::i;:::-;;;;;2096:8;;:::i;:::-;2105:5;:11;2113:3;2105:11;:::i;:::-;;2096:21;;;;;;;;2131:11;2096:21;2065:3;2096:21;;;:::i;:::-;2084:33;:6;2091:1;;2084:33;;;;;:::i;:::-;;2131:11;2141:1;2131:11;:::i;:::-;;;:::i;:::-;2065:3;;:::i;:::-;2030:26;;;2096:21;;:::i;2058:5::-;2234:14;2058:5;;;2162:55;2058:5;2170:10;;2179:1;2170:10;:::i;:::-;;;:::i;:::-;;2162:55;:::i;:::-;2234:14;:::i;:::-;2227:21;:::o;305:2959:40:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;28780:2807:29:-;;;;;28925:25;;:::i;:::-;28921:112;;28780:2807;29085:2377;;;;;;;;;;;;;;;;;;;;;;;;;;;28780:2807;29085:2377;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31475:24;;:::i;:::-;31471:110;;29085:2377;28780:2807::o;31471:110::-;31515:55;;:::i;:::-;;31471:110;;29085:2377;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28921:112;28966:56;;:::i;:::-;;28921:112;;305:2959:40;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::o;2214:404:22:-;2277:4;;:::i;:::-;2308:3;2297:22;2298:21;2308:3;2313:5;2298:21;;:::i;:::-;2297:22;;:::i;:::-;2293:319;;;;2493:19;:40;2335:3;:23;:16;:11;:3;:11;:16;:::i;:::-;2352:5;2335:23;;:::i;:::-;2493:12;2515:18;:11;:3;:11;:18;:::i;:::-;2493:3;:12;:19;:::i;:::-;:40;:::i;:::-;2554:4;2547:11;:::o;2293:319::-;2596:5;;;2589:12;:::o;305:2959:40:-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::i;2786:1388:22:-;2852:4;;:::i;:::-;2989:3;:19;;:12;:3;:12;3002:5;2989:19;;:::i;:::-;;:::i;:::-;3023:10;;:15;;3037:1;3023:15;:::i;:::-;;;:::i;:::-;;;3019:1149;;;;4062:26;3416:10;4069:12;:19;3416:10;;:14;4062:26;3416:10;:14;3429:1;3416:14;:::i;:::-;;;:::i;:::-;3464:22;:18;:3;;:11;:18;:::i;:::-;:22;3485:1;3464:22;:::i;:::-;;;:::i;:::-;3505:9;:26;;3518:13;3505:26;:::i;:::-;;;:::i;:::-;;3501:398;;3019:1149;3977:3;;;:15;;:3;;:11;:15;:::i;:::-;;:::i;:::-;4069:12;:19;:::i;:::-;4062:26;:::i;:::-;4110:4;4103:11;:::o;3501:398::-;3805:36;3571:3;3693:38;3571:22;;3805:23;3571:3;;;:11;:22;:::i;:::-;;;:::i;:::-;3722:9;3693:26;3722:9;3693:3;;;:11;:26;:::i;:::-;:38;;:::i;:::-;3805:3;;;:12;:23;:::i;:::-;:36;:::i;:::-;3501:398;;;;;3019:1149;4152:5;;;;4145:12;:::o;44043:212:29:-;44094:11;;:::i;:::-;44160:89;;44043:212;:::o;44416:1433::-;;;44629:1214;44416:1433;44629:1214;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44416:1433;44629:1214;;;;;;;;;;;;;;;44416:1433;44629:1214;;;;;;;;44416:1433::o;44629:1214::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;952:176:27;;1045:50;1058:37;1101:22;952:176;1058:37;:::i;:::-;1045:50;;:::i;:::-;1101:22;;:::i;:::-;952:176::o;26498:1652:29:-;;;;;26598:25;;:::i;:::-;26594:128;;26498:1652;26774:1235;;;;;;;;;;;;;;;;;;;;;26498:1652;26774:1235;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28022:24;;:::i;:::-;28018:126;;26498:1652;;;:::o;28018:126::-;28100:11;28113:15;28108:2;28100:11;:::i;:::-;;28113:15;:::i;:::-;;28062:71;;:::i;:::-;;28018:126;;;;26774:1235;;;;;;;;;;;;;;;;;;;;;;;;;;;26594:128;26678:11;26686:2;26678:11;:::i;:::-;;26691:15;26699:6;26691:15;:::i;:::-;;26639:72;;:::i;:::-;;26594:128;;46015:1949;;;46253:1705;46015:1949;46253:1705;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46015:1949;46253:1705;;;;;;;;46015:1949::o;46253:1705::-;;;;;;;;;;;;;;;;;;;829:155:18;914:4;;:::i;:::-;937:11;:40;;20194:237:29;952:25:18;;937:40;:::i;:::-;;;:::i;:::-;;930:47;:::o;2732:202:0:-;2817:4;;:::i;:::-;2840:11;;:47;;2855:32;;;2840:47;:::i;:::-;;;:::i;:::-;;:87;;;;;2732:202;2833:94;;:::o;2840:87::-;2891:36;2915:11;;2891:36;:::i;:::-;2840:87;;;4255:127:22;4351:19;4255:127;4351:12;:19;4255:127;4328:4;;:::i;:::-;4351:3;:12;:19;:::i;:::-;;:::i;:::-;:24;;4374:1;4351:24;:::i;:::-;;;:::i;:::-;;;4344:31;:::o"
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "balanceOf(address,uint256)": "00fdd58e",
              "balanceOfBatch(address[],uint256[])": "4e1273f4",
              "baseURI()": "6c0360eb",
              "batchBurn(uint256[],uint256[])": "20ec271b",
              "batchMint(address,uint256[],uint256[],bytes)": "b48ab8b6",
              "burn(uint256,uint256)": "b390c0ab",
              "contractURI()": "e8a3d485",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "initialize(address,string,string,string,address,uint96,address,bytes32)": "8ff83ac1",
              "isApprovedForAll(address,address)": "e985e9c5",
              "mint(address,uint256,uint256,bytes)": "731133e9",
              "name()": "06fdde03",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
              "safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
              "setApprovalForAll(address,bool)": "a22cb465",
              "setBaseMetadataURI(string)": "7e518ec8",
              "setContractName(string)": "0b5ee006",
              "setContractURI(string)": "938e3d7b",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7",
              "tokenSupply(uint256)": "2693ebf2",
              "totalSupply()": "18160ddd",
              "uri(uint256)": "0e89341c"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"name\":\"setContractName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"batchBurn(uint256[],uint256[])\":{\"params\":{\"amounts\":\"Array of the amount to be burned\",\"tokenIds\":\"Array of token ids to burn\"}},\"batchMint(address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"Amounts of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenIds\":\"Token IDs to mint.\"}},\"burn(uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to burn\",\"tokenId\":\"Id of token to burn\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,string,string,address,uint96,address,bytes32)\":{\"details\":\"This should be called immediately after deployment.\",\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"owner\":\"Owner address\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenBaseURI\":\"Base URI for token metadata\",\"tokenContractURI\":\"Contract URI for token metadata\",\"tokenName\":\"Token name\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"mint(address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token ID to mint.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Received}, which is called upon a batch transfer. Emits a {TransferSingle} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"setBaseMetadataURI(string)\":{\"params\":{\"tokenBaseURI\":\"New base URI of token's URI\"}},\"setContractName(string)\":{\"params\":{\"tokenName\":\"New contract name\"}},\"setContractURI(string)\":{\"params\":{\"tokenContractURI\":\"New contract URI of token's URI\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"uri(uint256)\":{\"details\":\"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \\\"https://example.com/api/{id}.json\\\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidArrayLength()\":[{\"notice\":\"Invalid array input length.\"}],\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"batchBurn(uint256[],uint256[])\":{\"notice\":\"Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\"},\"batchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Mint tokens.\"},\"burn(uint256,uint256)\":{\"notice\":\"Allows the owner of the token to burn their tokens.\"},\"initialize(address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Initialize the contract.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Mint tokens.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Update the base URI of token's URI.\"},\"setContractName(string)\":{\"notice\":\"Update the name of the contract.\"},\"setContractURI(string)\":{\"notice\":\"Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"An implementation of ERC-1155 capable of minting when role provided.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/ERC1155Items.sol\":\"ERC1155Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// - The ERC1155 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The transfer functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                mstore(add(m, 0xc0), data.length)\\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, ids.length) } i {} {\\n                    i := sub(i, 0x20)\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0x40), ids.length)\\n                calldatacopy(add(m, 0x60), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x60, n))\\n                let o := add(add(m, n), 0x60)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Do the emit.\\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0xc0), ids.length)\\n                calldatacopy(add(m, 0xe0), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x80), add(0xc0, n))\\n                let o := add(add(m, n), 0xe0)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\\n                o := add(add(o, n), 0x20)\\n                mstore(o, data.length)\\n                calldatacopy(add(o, 0x20), data.offset, data.length)\\n                let nAll := add(0x104, add(data.length, add(n, n)))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let i := shl(5, ids.length)\\n            mstore(0x40, add(i, o))\\n            // Loop through all the `ids` and load the balances.\\n            for {} i {} {\\n                i := sub(i, 0x20)\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `from`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x306249cc3611727ffa9e15ec816282a60fd9629e5ea03ab1c780d638d1537c68\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/tokens/ERC1155/ERC1155BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\nimport { ERC1155, ERC1155Supply } from \\\"./extensions/supply/ERC1155Supply.sol\\\";\\n\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-1155 for use in Sequence library contracts.\\n */\\nabstract contract ERC1155BaseToken is ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string public name;\\n    string public baseURI;\\n    string public contractURI;\\n\\n    /**\\n     * Deploy contract.\\n     */\\n    constructor() { }\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner Owner address.\\n     * @param tokenName Token name.\\n     * @param tokenBaseURI Base URI for token metadata.\\n     * @param tokenContractURI Contract URI for token metadata.\\n     * @param implicitModeValidator Implicit session validator address.\\n     * @param implicitModeProjectId Implicit session project id.\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        name = tokenName;\\n        baseURI = tokenBaseURI;\\n        contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /// @inheritdoc ERC1155\\n    function uri(\\n        uint256 _id\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, LibString.toString(_id), \\\".json\\\"));\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        baseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the name of the contract.\\n     * @param tokenName New contract name\\n     */\\n    function setContractName(\\n        string memory tokenName\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        name = tokenName;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param tokenId Id of token to burn\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 tokenId, uint256 amount) public virtual {\\n        _burn(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\\n     * @param tokenIds Array of token ids to burn\\n     * @param amounts Array of the amount to be burned\\n     */\\n    function batchBurn(uint256[] memory tokenIds, uint256[] memory amounts) public virtual {\\n        super._batchBurn(msg.sender, tokenIds, amounts);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC1155Supply.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd8b3a384ddc6305b5663ddbb0622b1a46d01460412508a5c4e0933cf932af790\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC1155Supply, IERC1155SupplyFunctions } from \\\"./IERC1155Supply.sol\\\";\\n\\nimport { ERC1155 } from \\\"solady/tokens/ERC1155.sol\\\";\\n\\n/**\\n * An ERC-1155 extension that tracks token supply.\\n */\\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\\n\\n    // Current supply\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public tokenSupply;\\n\\n    /**\\n     * Mint _amount of tokens of a given id\\n     * @param _to The address to mint tokens to\\n     * @param _id Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual override {\\n        super._mint(_to, _id, _amount, _data);\\n\\n        totalSupply += _amount;\\n        tokenSupply[_id] += _amount;\\n    }\\n\\n    /**\\n     * Mint tokens for each ids in _ids\\n     * @param _to The address to mint tokens to\\n     * @param _ids Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override {\\n        super._batchMint(_to, _ids, _amounts, _data);\\n\\n        uint256 nMint = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nMint; i++) {\\n            totalAmount += _amounts[i];\\n            tokenSupply[_ids[i]] += _amounts[i];\\n        }\\n        totalSupply += totalAmount;\\n    }\\n\\n    /**\\n     * Burn _amount of tokens of a given token id\\n     * @param _from The address to burn tokens from\\n     * @param _id Token id to burn\\n     * @param _amount The amount to be burned\\n     */\\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual override {\\n        super._burn(_from, _id, _amount);\\n\\n        totalSupply -= _amount;\\n        tokenSupply[_id] -= _amount;\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from The address to burn tokens from\\n     * @param _ids Array of token ids to burn\\n     * @param _amounts Array of the amount to be burned\\n     */\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual override {\\n        super._batchBurn(_from, _ids, _amounts);\\n\\n        uint256 nBurn = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            tokenSupply[_ids[i]] -= _amounts[i];\\n            totalAmount += _amounts[i];\\n        }\\n        totalSupply -= totalAmount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155) returns (bool) {\\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2d8fb7c9d1dad11c794d157a148b27cd50b5a64db805a70fcfa131b7aeb72d5b\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/ERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC1155BaseToken, ERC2981Controlled } from \\\"../../ERC1155BaseToken.sol\\\";\\nimport { IERC1155Items, IERC1155ItemsFunctions } from \\\"./IERC1155Items.sol\\\";\\n\\n/**\\n * An implementation of ERC-1155 capable of minting when role provided.\\n */\\ncontract ERC1155Items is ERC1155BaseToken, IERC1155Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable initializer;\\n    bool private initialized;\\n\\n    constructor() {\\n        initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner Owner address\\n     * @param tokenName Token name\\n     * @param tokenBaseURI Base URI for token metadata\\n     * @param tokenContractURI Contract URI for token metadata\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != initializer || initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC1155BaseToken._initialize(\\n            owner, tokenName, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\\n        );\\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId, amount, data);\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(\\n        address to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external onlyRole(MINTER_ROLE) {\\n        _batchMint(to, tokenIds, amounts, data);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155BaseToken) returns (bool) {\\n        return type(IERC1155ItemsFunctions).interfaceId == interfaceId\\n            || ERC1155BaseToken.supportsInterface(interfaceId) || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4b516b7cd7dfd9987fc44257e5e1781017b44afe2e348e5db2e8d9691bc699a7\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\\n\\n}\\n\\ninterface IERC1155ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\\n\",\"keccak256\":\"0x4b05643201f0416f2beab08c2679e2a166a2e9b7f91021b9758fc9802f2c49ce\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidArrayLength()": [
                {
                  "notice": "Invalid array input length."
                }
              ],
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "batchBurn(uint256[],uint256[])": {
                "notice": "Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair."
              },
              "batchMint(address,uint256[],uint256[],bytes)": {
                "notice": "Mint tokens."
              },
              "burn(uint256,uint256)": {
                "notice": "Allows the owner of the token to burn their tokens."
              },
              "initialize(address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Initialize the contract."
              },
              "mint(address,uint256,uint256,bytes)": {
                "notice": "Mint tokens."
              },
              "setBaseMetadataURI(string)": {
                "notice": "Update the base URI of token's URI."
              },
              "setContractName(string)": {
                "notice": "Update the name of the contract."
              },
              "setContractURI(string)": {
                "notice": "Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "An implementation of ERC-1155 capable of minting when role provided.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol": {
        "ERC1155ItemsFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "factoryOwner",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC1155ItemsDeployed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "params": {
                  "factoryOwner": "The owner of the ERC-1155 Items Factory"
                }
              },
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple": {
                  "entryPoint": 283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 730,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_ERC1155ItemsFactory": {
                  "entryPoint": 361,
                  "id": 8922,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "constructor_Ownable": {
                  "entryPoint": 468,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_SequenceProxyFactory": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC1155Items_to_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 337,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_UpgradeableBeacon": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 309,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_ERC1155ItemsFactory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize": {
                  "entryPoint": 613,
                  "id": 7576,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 711,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transferOwnership": {
                  "entryPoint": 821,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 306,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 786,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_UpgradeableBeacon": {
                  "entryPoint": 578,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 761,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 289,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 581,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 706,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x271A PUSH2 0x397 DUP3 CODECOPY PUSH2 0x271A SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0x811A DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x34 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x144 PUSH2 0x14E SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15A SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x166 SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x171 PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x179 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x4BC7 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1C5 JUMPI PUSH2 0x1A1 DUP3 SWAP2 PUSH2 0x4BC7 PUSH2 0x2AB1 DUP5 CODECOPY PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x1C0 JUMPI PUSH2 0x1B9 PUSH2 0x1BE SWAP3 PUSH2 0x15D JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x1DF PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EF SWAP1 PUSH2 0xAB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x207 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x220 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x209 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x233 SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23F SWAP1 PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25A PUSH2 0x255 PUSH2 0x261 SWAP3 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x26D PUSH2 0x34 JUMP JUMPDEST SWAP1 PUSH2 0xAA2 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2BD JUMPI DUP3 SWAP2 PUSH2 0x297 SWAP2 PUSH2 0xAA2 PUSH2 0x7678 DUP6 CODECOPY PUSH2 0x1F3 JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x2B8 JUMPI PUSH2 0x2B1 PUSH2 0x2B6 SWAP3 PUSH1 0x1 PUSH2 0x245 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C2 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x2F6 SWAP2 PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x303 SWAP1 SLOAD PUSH2 0x2E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x32A PUSH2 0x325 PUSH2 0x331 SWAP3 PUSH2 0x306 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33F PUSH1 0x0 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x34A DUP3 PUSH1 0x0 PUSH2 0x315 JUMP JUMPDEST SWAP1 PUSH2 0x37E PUSH2 0x378 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x387 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x391 DUP2 PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x580 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59A347BD EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0xCFCC5941 EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x54D JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST PUSH2 0x4D9 JUMP JUMPDEST PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xFD JUMPI PUSH2 0xFA SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x136 JUMPI PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH2 0x128 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x132 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x146 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x16A SWAP1 PUSH1 0x8 PUSH2 0x16F SWAP4 MUL PUSH2 0x14B JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17D SWAP2 SLOAD PUSH2 0x15A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18D PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x172 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0x1A2 PUSH2 0x1AC SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C4 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D0 SWAP1 PUSH2 0x1BB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E8 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1C7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21A JUMPI PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x216 PUSH2 0x205 PUSH2 0x180 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D4 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x253 SWAP1 PUSH2 0x229 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x26D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST SWAP1 PUSH2 0x285 PUSH2 0x27E PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x249 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2A5 JUMPI PUSH2 0x2A1 PUSH1 0x20 SWAP2 PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2CB PUSH2 0x2C6 DUP3 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x2E7 JUMPI PUSH2 0x2E5 SWAP3 PUSH2 0x2AA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x30A JUMPI DUP2 PUSH1 0x20 PUSH2 0x307 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2B6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x329 DUP2 PUSH2 0x30F JUMP JUMPDEST SUB PUSH2 0x330 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x342 DUP3 PUSH2 0x320 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x350 DUP2 PUSH2 0x344 JUMP JUMPDEST SUB PUSH2 0x357 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x369 DUP3 PUSH2 0x347 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x120 DUP3 DUP5 SUB SLT PUSH2 0x43F JUMPI PUSH2 0x385 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x393 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43A JUMPI DUP3 PUSH2 0x3B4 SWAP2 DUP4 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x435 JUMPI DUP4 PUSH2 0x3D5 SWAP2 DUP5 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x430 JUMPI DUP2 PUSH2 0x3F6 SWAP2 DUP6 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH2 0x404 DUP3 PUSH1 0xA0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x42D PUSH2 0x415 DUP5 PUSH1 0xC0 DUP6 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 PUSH2 0x423 DUP2 PUSH1 0xE0 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH2 0x100 ADD PUSH2 0x35C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x44D SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x465 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4A1 JUMPI PUSH2 0x49D PUSH2 0x48C PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x36B JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x7EE JUMP JUMPDEST PUSH2 0x494 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4D4 JUMPI PUSH2 0x4B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x4BE PUSH2 0x985 JUMP JUMPDEST PUSH2 0x4C6 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x4D0 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x509 JUMPI PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x505 PUSH2 0x4F4 PUSH2 0x9BB JUMP JUMPDEST PUSH2 0x4FC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x548 JUMPI PUSH2 0x544 PUSH2 0x533 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x36B JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x53B PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x57B JUMPI PUSH2 0x565 PUSH2 0x560 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x56D PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x577 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x596 SWAP1 PUSH2 0x591 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x5AA PUSH2 0x5AF SWAP2 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5BC SWAP1 SLOAD PUSH2 0x59E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x5D5 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5FD PUSH2 0x5F8 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x679 JUMPI PUSH2 0x635 SWAP3 PUSH2 0x62A PUSH1 0x0 DUP1 SWAP5 PUSH2 0x61E PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x5C4 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x451 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x674 JUMPI PUSH2 0x647 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x667 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x66D JUMPI JUMPDEST PUSH2 0x65F DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0x644 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x655 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x687 SWAP1 PUSH2 0x585 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x6AF JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x69E JUMP JUMPDEST PUSH2 0x6DF PUSH2 0x6E8 PUSH1 0x20 SWAP4 PUSH2 0x6ED SWAP4 PUSH2 0x6D6 DUP2 PUSH2 0x68E JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x692 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x6FA SWAP1 PUSH2 0x30F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x707 SWAP1 PUSH2 0x344 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP4 SWAP6 PUSH2 0x774 PUSH2 0x769 PUSH1 0xE0 SWAP8 SWAP12 SWAP11 SWAP9 PUSH2 0x75B PUSH2 0x788 SWAP8 PUSH2 0x74D DUP11 PUSH2 0x78F SWAP15 SWAP10 PUSH2 0x73F PUSH2 0x77E SWAP11 PUSH1 0x0 PUSH2 0x100 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST DUP13 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP1 DUP11 DUP3 SUB PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x60 DUP11 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP11 PUSH1 0x80 DUP8 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x6F1 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST ADD SWAP1 PUSH2 0x6FE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x7AD PUSH2 0x7A8 DUP4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x7BC PUSH1 0x0 PUSH2 0x79B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7C7 PUSH2 0x7B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7D3 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7DF SWAP1 PUSH2 0x7CA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EB SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x85E SWAP1 SWAP9 SWAP5 SWAP9 SWAP8 SWAP7 SWAP4 SWAP8 SWAP6 SWAP3 SWAP6 PUSH2 0x804 PUSH2 0x689 JUMP JUMPDEST POP DUP9 PUSH2 0x83C DUP5 PUSH2 0x82D DUP14 DUP11 DUP14 DUP14 SWAP7 SWAP3 DUP12 SWAP1 DUP14 SWAP3 SWAP4 SWAP5 PUSH2 0x821 PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 PUSH1 0x20 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0x84E PUSH2 0x848 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x858 PUSH2 0x7BF JUMP JUMPDEST SWAP2 PUSH2 0xD5D JUMP JUMPDEST SWAP8 PUSH2 0x870 PUSH2 0x86B DUP11 PUSH2 0x7D6 JUMP JUMPDEST PUSH2 0x7E2 JUMP JUMPDEST SWAP5 PUSH4 0x8FF83AC1 SWAP3 SWAP7 SWAP9 SWAP2 SWAP4 SWAP5 SWAP8 DUP7 EXTCODESIZE ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 SWAP9 PUSH2 0x8A5 SWAP7 DUP11 SWAP7 PUSH2 0x8B0 SWAP6 PUSH2 0x899 PUSH2 0x93 JUMP JUMPDEST SWAP14 DUP15 SWAP13 DUP14 SWAP12 DUP13 SWAP11 PUSH2 0x5C4 JUMP JUMPDEST DUP11 MSTORE PUSH1 0x4 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x92A JUMPI PUSH2 0x8FD JUMPI JUMPDEST POP DUP1 PUSH2 0x8F7 PUSH32 0x28A530EB465A41FAF2A923830D2CD4E0301E87B2CDDC112BDA1A86048C3A54B2 SWAP2 PUSH2 0x8EE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x91D SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x923 JUMPI JUMPDEST PUSH2 0x915 DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0x8BF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x90B JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x93C PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x944 PUSH2 0x971 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95D PUSH2 0x958 PUSH2 0x962 SWAP3 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x96E SWAP1 PUSH2 0x949 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x983 PUSH2 0x97E PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x98D PUSH2 0x934 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x9A6 PUSH2 0x9AB SWAP2 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x98F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B8 SWAP1 SLOAD PUSH2 0x99A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C3 PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0x9CE PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP7 PUSH2 0xA08 SWAP4 SWAP7 PUSH2 0xA17 SWAP7 PUSH2 0xA39 SWAP11 SWAP4 SWAP7 SWAP5 SWAP7 PUSH2 0x9EB PUSH2 0x689 JUMP JUMPDEST POP SWAP7 SWAP9 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x9FC PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 PUSH1 0x20 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xA29 PUSH2 0xA23 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xA33 PUSH2 0x7BF JUMP JUMPDEST SWAP2 PUSH2 0xF4D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA4D SWAP1 PUSH2 0xA48 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAF9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAAA PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0xAB3 DUP2 PUSH2 0xA4F JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xACD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA9D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAD7 JUMPI JUMP JUMPDEST PUSH2 0xADF PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xAF5 PUSH1 0x4 DUP3 ADD PUSH2 0xAB7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB28 SWAP1 PUSH2 0xB23 DUP2 PUSH2 0xB1C PUSH2 0xB16 PUSH2 0xB11 PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xAD0 JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xB33 SWAP1 PUSH2 0xA3C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xB69 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB8C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB96 JUMPI JUMP JUMPDEST PUSH2 0xB9E PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xBB4 PUSH1 0x4 DUP3 ADD PUSH2 0xB76 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE2 PUSH2 0xBC3 PUSH2 0x9BB JUMP JUMPDEST PUSH2 0xBDC PUSH2 0xBD6 PUSH2 0xBD1 PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xB8F JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBF3 PUSH2 0xBF8 SWAP2 PUSH2 0x344 JUMP JUMPDEST PUSH2 0xBE4 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC0B SWAP1 PUSH2 0xBFC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC17 SWAP1 PUSH2 0xC02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC26 PUSH2 0xC2B SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xC0E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC59 PUSH2 0xC50 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xC47 DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xC2F JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xC81 PUSH1 0x20 DUP5 PUSH2 0xC79 PUSH2 0xC89 SWAP7 PUSH2 0xC90 SWAP12 SWAP11 SWAP9 PUSH2 0xBE7 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC1A JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC1A JUMP JUMPDEST ADD SWAP1 PUSH2 0xC34 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCAA PUSH2 0xCA5 PUSH2 0xCAF SWAP3 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCBB SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCC7 SWAP1 PUSH2 0xCB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCD3 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCDF SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCEB SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xD16 PUSH2 0xD1F PUSH1 0x20 SWAP4 PUSH2 0xD24 SWAP4 PUSH2 0xD0D DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xCEE JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD4D PUSH2 0xD5A SWAP5 SWAP3 SWAP4 PUSH2 0xD43 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCF7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDED SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xD6D PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0xDAD DUP6 SWAP2 PUSH2 0xD9E PUSH2 0xD88 PUSH2 0xD83 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xD92 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xDBF PUSH2 0xDB9 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xDCF PUSH1 0x20 DUP3 ADD PUSH2 0x272 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x125B PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xDE8 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xC96 JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST SWAP3 PUSH2 0xE07 PUSH2 0xE02 PUSH2 0xDFD DUP7 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xE20 PUSH2 0xE1B PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xE97 JUMPI PUSH1 0x0 PUSH2 0xE48 SWAP2 PUSH2 0xE53 DUP3 SWAP7 PUSH2 0xE3C PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x5C4 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xD28 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE92 JUMPI PUSH2 0xE65 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xE85 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE8B JUMPI JUMPDEST PUSH2 0xE7D DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0xE62 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEB3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xE9C JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xEC6 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEE1 PUSH2 0xEDC PUSH2 0xEE8 SWAP3 PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xEC9 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xEA2 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEF6 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xF01 DUP3 PUSH1 0x0 PUSH2 0xECC JUMP JUMPDEST SWAP1 PUSH2 0xF35 PUSH2 0xF2F PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xEBD JUMP JUMPDEST SWAP2 PUSH2 0xEBD JUMP JUMPDEST SWAP2 PUSH2 0xF3E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xF48 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0xFE0 SWAP3 SWAP2 PUSH2 0xF8A PUSH2 0xF99 SWAP3 PUSH2 0xF61 PUSH2 0x689 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xF76 PUSH2 0xF71 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST PUSH2 0xF7E PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xFAB PUSH2 0xFA5 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xFBB PUSH1 0x20 DUP3 ADD PUSH2 0x272 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x125B PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xFD9 PUSH2 0xFD3 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x1210 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFEB PUSH2 0x689 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0xFF9 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1031 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x103A DUP2 PUSH2 0xFFC JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1054 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1024 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x105E JUMPI JUMP JUMPDEST PUSH2 0x1066 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x107C PUSH1 0x4 DUP3 ADD PUSH2 0x103E JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10B4 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x10BD DUP2 PUSH2 0x1080 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x10D7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x10E1 JUMPI JUMP JUMPDEST PUSH2 0x10E9 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10FF PUSH1 0x4 DUP3 ADD PUSH2 0x10C1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1138 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x1103 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x115B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x112B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1165 JUMPI JUMP JUMPDEST PUSH2 0x116D PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1183 PUSH1 0x4 DUP3 ADD PUSH2 0x1145 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1192 PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0x11B9 PUSH2 0x119F ADDRESS PUSH2 0xFF0 JUMP JUMPDEST BALANCE PUSH2 0x11B2 PUSH2 0x11AC DUP5 PUSH2 0xC93 JUMP JUMPDEST SWAP2 PUSH2 0xC93 JUMP JUMPDEST LT ISZERO PUSH2 0x1057 JUMP JUMPDEST PUSH2 0x11DF PUSH2 0x11C5 DUP4 PUSH2 0x797 JUMP JUMPDEST PUSH2 0x11D8 PUSH2 0x11D2 PUSH1 0x0 PUSH2 0xC96 JUMP JUMPDEST SWAP2 PUSH2 0xC93 JUMP JUMPDEST EQ ISZERO PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x120E DUP3 PUSH2 0x1207 PUSH2 0x1201 PUSH2 0x11FC PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x115E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x122E SWAP2 PUSH2 0x121D PUSH2 0x689 JUMP JUMPDEST POP SWAP1 PUSH2 0x1228 ADDRESS PUSH2 0xFF0 JUMP JUMPDEST SWAP2 PUSH2 0x1231 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x1240 PUSH2 0x689 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 MSTORE8 LOG2 DUP11 STOP LOG0 SWAP4 SWAP4 0xE3 0xBD 0xD3 CALLDATACOPY 0xEF PUSH13 0x721C7F72D7EBAD899D5249255D 0xD6 0xE7 EXTCODEHASH GASLIMIT 0xD0 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x2B JUMPI PUSH1 0xE PUSH1 0x3A JUMP JUMPDEST PUSH1 0x14 PUSH1 0x2F JUMP JUMPDEST PUSH2 0x4B86 PUSH2 0x41 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x25DA ADD MSTORE PUSH2 0x4B86 SWAP1 RETURN JUMPDEST PUSH1 0x35 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x24C JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xB5EE006 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x20EC271B EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x2693EBF2 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x731133E9 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x8FF83AC1 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xB390C0AB EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xB48AB8B6 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xED4C2AC7 EQ PUSH2 0x1A2 JUMPI PUSH4 0xF242432A SUB PUSH2 0xE JUMPI PUSH2 0x17CC JUMP JUMPDEST PUSH2 0x1728 JUMP JUMPDEST PUSH2 0x16F2 JUMP JUMPDEST PUSH2 0x168F JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST PUSH2 0x1616 JUMP JUMPDEST PUSH2 0x15DF JUMP JUMPDEST PUSH2 0x151B JUMP JUMPDEST PUSH2 0x14E7 JUMP JUMPDEST PUSH2 0x1460 JUMP JUMPDEST PUSH2 0x13ED JUMP JUMPDEST PUSH2 0x1325 JUMP JUMPDEST PUSH2 0x12EF JUMP JUMPDEST PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x1238 JUMP JUMPDEST PUSH2 0x113B JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST PUSH2 0xFF3 JUMP JUMPDEST PUSH2 0xFAF JUMP JUMPDEST PUSH2 0xF3B JUMP JUMPDEST PUSH2 0xDC7 JUMP JUMPDEST PUSH2 0xD93 JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST PUSH2 0xBCB JUMP JUMPDEST PUSH2 0xB37 JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x8E5 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x6BF JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST PUSH2 0x3C7 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x27B SWAP1 PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x287 DUP2 PUSH2 0x272 JUMP JUMPDEST SUB PUSH2 0x28E JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2A0 DUP3 PUSH2 0x27E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AE DUP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x2B5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2C7 DUP3 PUSH2 0x2A5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x2F2 JUMPI DUP1 PUSH2 0x2E6 PUSH2 0x2EF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0x300 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x318 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x34B JUMPI PUSH2 0x347 PUSH2 0x336 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C9 JUMP JUMPDEST SWAP1 PUSH2 0x1810 JUMP JUMPDEST PUSH2 0x33E PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x365 DUP2 PUSH2 0x350 JUMP JUMPDEST SUB PUSH2 0x36C JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x37E DUP3 PUSH2 0x35C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x39A JUMPI PUSH2 0x397 SWAP2 PUSH1 0x0 ADD PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3AD SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3C5 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x3A4 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x3F7 JUMPI PUSH2 0x3F3 PUSH2 0x3E2 PUSH2 0x3DD CALLDATASIZE PUSH1 0x4 PUSH2 0x380 JUMP JUMPDEST PUSH2 0x1839 JUMP JUMPDEST PUSH2 0x3EA PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x416 DUP2 PUSH2 0x3FC JUMP JUMPDEST SUB PUSH2 0x41D JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x42F DUP3 PUSH2 0x40D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x45A JUMPI DUP1 PUSH2 0x44E PUSH2 0x457 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x494 JUMPI PUSH2 0x47E PUSH2 0x478 CALLDATASIZE PUSH1 0x4 PUSH2 0x431 JUMP JUMPDEST SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0x486 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x490 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4A4 JUMPI JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x4F5 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x4F0 JUMPI JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x52E PUSH2 0x527 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x4FF JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x587 JUMPI POP PUSH1 0x1 EQ PUSH2 0x54A JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x557 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x56F JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x55C JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x545 JUMP JUMPDEST SWAP1 PUSH2 0x5AC SWAP2 PUSH2 0x513 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x5D9 SWAP1 PUSH2 0x5AF JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5F3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x618 PUSH2 0x611 SWAP3 PUSH2 0x608 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x5A2 JUMP JUMPDEST SUB DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 LT PUSH2 0x62E JUMPI PUSH2 0x62B SWAP1 PUSH2 0x5F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x640 PUSH1 0x8 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x664 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x653 JUMP JUMPDEST PUSH2 0x694 PUSH2 0x69D PUSH1 0x20 SWAP4 PUSH2 0x6A2 SWAP4 PUSH2 0x68B DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x647 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x6BC SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x675 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x6EF JUMPI PUSH2 0x6CF CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x6EB PUSH2 0x6DA PUSH2 0x633 JUMP JUMPDEST PUSH2 0x6E2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH2 0x711 PUSH2 0x70A PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5CF JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x731 JUMPI PUSH2 0x72D PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x757 PUSH2 0x752 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x773 JUMPI PUSH2 0x771 SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x796 JUMPI DUP2 PUSH1 0x20 PUSH2 0x793 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x742 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x7CC JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7C7 JUMPI PUSH2 0x7C4 SWAP3 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x7FF JUMPI PUSH2 0x7E9 PUSH2 0x7E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x7FB DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x81E JUMPI PUSH2 0x81B SWAP2 PUSH1 0x0 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x851 JUMPI PUSH2 0x83B PUSH2 0x836 CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x1BF9 JUMP JUMPDEST PUSH2 0x843 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x84D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x870 JUMPI PUSH2 0x86D SWAP2 PUSH1 0x0 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x8A5 JUMPI PUSH2 0x8A1 PUSH2 0x890 PUSH2 0x88B CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x898 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8C1 SWAP1 PUSH1 0x8 PUSH2 0x8C6 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x8D4 SWAP2 SLOAD PUSH2 0x8B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8E2 PUSH1 0x0 DUP1 PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x915 JUMPI PUSH2 0x8F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x911 PUSH2 0x900 PUSH2 0x8D7 JUMP JUMPDEST PUSH2 0x908 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x932 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x951 PUSH2 0x94C DUP3 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x98E JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x975 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x983 DUP5 DUP7 PUSH2 0x2BA JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x968 JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x9B1 JUMPI DUP2 PUSH1 0x20 PUSH2 0x9AE SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xA0F JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA0A JUMPI DUP4 PUSH2 0x9E3 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA05 JUMPI PUSH2 0xA02 SWAP3 ADD PUSH2 0x993 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xA43 JUMPI PUSH2 0xA2D PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 PUSH2 0x1D6D JUMP JUMPDEST PUSH2 0xA35 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xA3F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA54 DUP2 PUSH2 0xA48 JUMP JUMPDEST SUB PUSH2 0xA5B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA6D DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xA89 JUMPI PUSH2 0xA86 SWAP2 PUSH1 0x0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xA97 SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xAAF SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xAE1 JUMPI PUSH2 0xADD PUSH2 0xACC PUSH2 0xAC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0xAD4 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xAFD PUSH2 0xAF8 PUSH2 0xB02 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB0F SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xB34 SWAP1 PUSH2 0xB2F PUSH1 0x1 SWAP2 PUSH1 0x0 SWAP3 PUSH2 0xB05 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xB67 JUMPI PUSH2 0xB63 PUSH2 0xB52 PUSH2 0xB4D CALLDATASIZE PUSH1 0x4 PUSH2 0x856 JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST PUSH2 0xB5A PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xB95 JUMPI DUP1 PUSH2 0xB89 PUSH2 0xB92 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST PUSH2 0xBA3 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xBC9 SWAP3 SWAP5 SWAP4 PUSH2 0xBC2 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST ADD SWAP1 PUSH2 0x2F7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xBFD JUMPI PUSH2 0xBE4 PUSH2 0xBDE CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH2 0xBF9 PUSH2 0xBF0 PUSH2 0x252 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xBA7 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC41 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC3C JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xC37 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xC80 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xC7B JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0xC76 JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP2 PUSH1 0xA0 DUP4 DUP4 SUB SLT PUSH2 0xD23 JUMPI PUSH2 0xC9D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0xCAB DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD1E JUMPI DUP2 PUSH2 0xCCC SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD19 JUMPI DUP4 PUSH2 0xCEF SWAP2 DUP5 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD14 JUMPI PUSH2 0xD10 SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xD60 JUMPI PUSH2 0xD4A PUSH2 0xD3B CALLDATASIZE PUSH1 0x4 PUSH2 0xC85 JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xD52 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xD5C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD8E JUMPI DUP1 PUSH2 0xD82 PUSH2 0xD8B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xDC2 JUMPI PUSH2 0xDAC PUSH2 0xDA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2338 JUMP JUMPDEST PUSH2 0xDB4 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDBE DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0xDF6 JUMPI PUSH2 0xDE0 PUSH2 0xDDA CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x23EE JUMP JUMPDEST PUSH2 0xDE8 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xDF2 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xE35 JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE30 JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0xE2B JUMPI JUMP JUMPDEST PUSH2 0x937 JUMP JUMPDEST PUSH2 0xC02 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x40 DUP3 DUP5 SUB SLT PUSH2 0xE95 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE90 JUMPI DUP4 PUSH2 0xE66 SWAP2 DUP5 ADD PUSH2 0xDFB JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE8B JUMPI PUSH2 0xE87 SWAP3 ADD PUSH2 0xC07 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xEB6 SWAP1 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0xEC7 DUP2 PUSH1 0x20 SWAP4 PUSH2 0xEAD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEEE PUSH2 0xEE8 PUSH2 0xEE1 DUP5 PUSH2 0xE9A JUMP JUMPDEST DUP1 SWAP4 PUSH2 0xE9E JUMP JUMPDEST SWAP3 PUSH2 0xEA7 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xEFF JUMPI POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH2 0xF18 PUSH2 0xF12 PUSH1 0x1 SWAP3 DUP7 MLOAD PUSH2 0xEBA JUMP JUMPDEST SWAP5 PUSH2 0xECB JUMP JUMPDEST SWAP2 ADD SWAP2 SWAP1 SWAP2 PUSH2 0xEF2 JUMP JUMPDEST PUSH2 0xF38 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xED1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF6F JUMPI PUSH2 0xF6B PUSH2 0xF5A PUSH2 0xF51 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2422 JUMP JUMPDEST PUSH2 0xF62 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xF22 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xFAA JUMPI PUSH2 0xFA7 PUSH2 0xF90 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP4 PUSH2 0xF9E DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x422 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0xFDE JUMPI PUSH2 0xFC8 PUSH2 0xFC2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x24BF JUMP JUMPDEST PUSH2 0xFD0 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0xFDA DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0xFF0 PUSH1 0x9 PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1023 JUMPI PUSH2 0x1003 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x101F PUSH2 0x100E PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0x1016 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1046 JUMPI PUSH2 0x1042 PUSH1 0x20 SWAP2 PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1060 PUSH2 0x105B DUP3 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x107C JUMPI PUSH2 0x107A SWAP3 PUSH2 0x736 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6F9 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x109F JUMPI DUP2 PUSH1 0x20 PUSH2 0x109C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F4 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10FF JUMPI PUSH2 0x10BC DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x10CA DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x10D8 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10FA JUMPI PUSH2 0x10F7 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1136 JUMPI PUSH2 0x1120 PUSH2 0x1117 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A4 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x251E JUMP JUMPDEST PUSH2 0x1128 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1132 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1169 JUMPI PUSH2 0x1153 PUSH2 0x114E CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x2554 JUMP JUMPDEST PUSH2 0x115B PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1165 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 DUP4 DUP3 SUB SLT PUSH2 0x1233 JUMPI PUSH2 0x1188 DUP2 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x122E JUMPI DUP3 PUSH2 0x11A9 SWAP2 DUP4 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1229 JUMPI DUP4 PUSH2 0x11CA SWAP2 DUP5 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1224 JUMPI DUP2 PUSH2 0x11EB SWAP2 DUP6 ADD PUSH2 0x778 JUMP JUMPDEST SWAP3 PUSH2 0x11F9 DUP3 PUSH1 0x80 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1221 PUSH2 0x120A DUP5 PUSH1 0xA0 DUP6 ADD PUSH2 0x422 JUMP JUMPDEST SWAP4 PUSH2 0x1218 DUP2 PUSH1 0xC0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0xE0 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1270 JUMPI PUSH2 0x125A PUSH2 0x124B CALLDATASIZE PUSH1 0x4 PUSH2 0x116E JUMP JUMPDEST SWAP7 SWAP6 SWAP1 SWAP6 SWAP5 SWAP2 SWAP5 SWAP4 SWAP3 SWAP4 PUSH2 0x25CB JUMP JUMPDEST PUSH2 0x1262 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x126C DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x129E JUMPI DUP1 PUSH2 0x1292 PUSH2 0x129B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0xA60 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12B7 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x12EA JUMPI PUSH2 0x12E6 PUSH2 0x12D5 PUSH2 0x12CF CALLDATASIZE PUSH1 0x4 PUSH2 0x1275 JUMP JUMPDEST SWAP1 PUSH2 0x2691 JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x12A3 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1320 JUMPI PUSH2 0x131C PUSH2 0x130B PUSH2 0x1305 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x1313 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1353 JUMPI PUSH2 0x133D PUSH2 0x1338 CALLDATASIZE PUSH1 0x4 PUSH2 0x79B JUMP JUMPDEST PUSH2 0x273C JUMP JUMPDEST PUSH2 0x1345 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x134F DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x136B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x137E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x1358 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x13E8 JUMPI PUSH2 0x139B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13E3 JUMPI DUP4 PUSH2 0x13BC SWAP2 DUP4 ADD PUSH2 0x135D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13DE JUMPI PUSH2 0x13DB SWAP3 ADD PUSH2 0x1370 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x141E JUMPI PUSH2 0x141A PUSH2 0x1409 PUSH2 0x1403 CALLDATASIZE PUSH1 0x4 PUSH2 0x1383 JUMP JUMPDEST SWAP2 PUSH2 0x2A9A JUMP JUMPDEST PUSH2 0x1411 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1440 PUSH2 0x143B PUSH2 0x1445 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1452 PUSH1 0x0 PUSH2 0x142C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x145D PUSH2 0x1448 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1490 JUMPI PUSH2 0x1470 CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x148C PUSH2 0x147B PUSH2 0x1455 JUMP JUMPDEST PUSH2 0x1483 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xA9B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x149E DUP2 PUSH2 0x39F JUMP JUMPDEST SUB PUSH2 0x14A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x14B7 DUP3 PUSH2 0x1495 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x14E2 JUMPI DUP1 PUSH2 0x14D6 PUSH2 0x14DF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x14AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1516 JUMPI PUSH2 0x1500 PUSH2 0x14FA CALLDATASIZE PUSH1 0x4 PUSH2 0x14B9 JUMP JUMPDEST SWAP1 PUSH2 0x2B3B JUMP JUMPDEST PUSH2 0x1508 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1512 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x154A JUMPI PUSH2 0x1534 PUSH2 0x152E CALLDATASIZE PUSH1 0x4 PUSH2 0xB6C JUMP JUMPDEST SWAP1 PUSH2 0x2B8B JUMP JUMPDEST PUSH2 0x153C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1546 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x15DA JUMPI PUSH2 0x1567 DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D5 JUMPI DUP3 PUSH2 0x1588 SWAP2 DUP6 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15D0 JUMPI DUP4 PUSH2 0x15A9 SWAP2 DUP4 ADD PUSH2 0x993 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x15CB JUMPI PUSH2 0x15C8 SWAP3 ADD PUSH2 0x1081 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1611 JUMPI PUSH2 0x15FB PUSH2 0x15F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x154F JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2BC8 JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x160D DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1646 JUMPI PUSH2 0x1642 PUSH2 0x1631 PUSH2 0x162C CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2BD6 JUMP JUMPDEST PUSH2 0x1639 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x304 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x167A JUMPI PUSH2 0x1664 PUSH2 0x165E CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST SWAP1 PUSH2 0x2C26 JUMP JUMPDEST PUSH2 0x166C PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1676 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH2 0x168C PUSH1 0xA PUSH1 0x0 SWAP1 PUSH2 0x61A JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x16BF JUMPI PUSH2 0x169F CALLDATASIZE PUSH1 0x4 PUSH2 0x499 JUMP JUMPDEST PUSH2 0x16BB PUSH2 0x16AA PUSH2 0x167F JUMP JUMPDEST PUSH2 0x16B2 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x16ED JUMPI DUP1 PUSH2 0x16E1 PUSH2 0x16EA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x293 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1723 JUMPI PUSH2 0x171F PUSH2 0x170E PUSH2 0x1708 CALLDATASIZE PUSH1 0x4 PUSH2 0x16C4 JUMP JUMPDEST SWAP1 PUSH2 0x2C32 JUMP JUMPDEST PUSH2 0x1716 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST CALLVALUE PUSH2 0x1756 JUMPI PUSH2 0x1740 PUSH2 0x173B CALLDATASIZE PUSH1 0x4 PUSH2 0xA6F JUMP JUMPDEST PUSH2 0x2CC1 JUMP JUMPDEST PUSH2 0x1748 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x1752 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x17C7 JUMPI PUSH2 0x1775 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1783 DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x293 JUMP JUMPDEST SWAP3 PUSH2 0x1791 DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH2 0x179F DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x17C2 JUMPI PUSH2 0x17BE SWAP3 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x262 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST CALLVALUE PUSH2 0x1801 JUMPI PUSH2 0x17EB PUSH2 0x17DF CALLDATASIZE PUSH1 0x4 PUSH2 0x175B JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x2CCC JUMP JUMPDEST PUSH2 0x17F3 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x17FD DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1818 PUSH2 0x180B JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1841 PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0xC79B8B5F PUSH1 0xE0 SHL PUSH2 0x185C PUSH2 0x1856 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1880 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1870 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x187A SWAP2 POP PUSH2 0x2E9B JUMP JUMPDEST CODESIZE PUSH2 0x186C JUMP JUMPDEST POP PUSH2 0x188A DUP2 PUSH2 0x2E9B JUMP JUMPDEST PUSH2 0x1864 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18CD SWAP2 PUSH2 0x18C8 PUSH2 0x18C3 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x18CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18D9 SWAP2 PUSH2 0x30F9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x18E5 SWAP2 PUSH2 0x18B3 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST PUSH2 0x1924 SWAP1 PUSH2 0x191F PUSH2 0x191A PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1B0F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x1950 SWAP2 MUL SWAP2 PUSH2 0x194A PUSH1 0x0 NOT DUP5 PUSH2 0x1930 JUMP JUMPDEST SWAP3 PUSH2 0x1930 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1973 PUSH2 0x196E PUSH2 0x197B SWAP4 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1991 SWAP2 PUSH2 0x198B PUSH2 0x180B JUMP JUMPDEST SWAP2 PUSH2 0x195D JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x199F JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x19AD PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x197F JUMP JUMPDEST ADD PUSH2 0x1994 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x19C3 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x19CF PUSH2 0x19F4 SWAP4 PUSH2 0x508 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x19DB DUP5 PUSH2 0x1926 JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x19FC JUMPI JUMPDEST PUSH2 0x19ED SWAP1 PUSH2 0x1926 JUMP JUMPDEST ADD SWAP1 PUSH2 0x1993 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x19BE JUMP JUMPDEST SWAP2 POP PUSH2 0x19ED DUP2 SWAP3 SWAP1 POP PUSH2 0x19E4 JUMP JUMPDEST SWAP1 PUSH2 0x1A1B SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x8AA JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x1A2A SWAP2 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A3C DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1AFE JUMPI PUSH2 0x1A60 DUP3 PUSH2 0x1A5A DUP6 SLOAD PUSH2 0x4D5 JUMP JUMPDEST DUP6 PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1A95 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x1A84 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1A89 JUMPI JUMPDEST POP POP PUSH2 0x1A20 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1A7D JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x1AA4 DUP6 PUSH2 0x508 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1AE6 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1ACC JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x1A87 JUMP JUMPDEST PUSH2 0x1ADC SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1A0A JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1AC0 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x1AA8 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x1B0D SWAP2 PUSH2 0x1A32 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B1A SWAP1 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B25 SWAP1 PUSH2 0x190B JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x1B64 SWAP1 PUSH2 0x1B5F PUSH2 0x1B5A PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x1BE4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1B75 PUSH2 0x1B7F SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8B SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B97 SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BAB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1BBE SWAP1 PUSH2 0x1B82 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1BD9 PUSH2 0x1BD4 PUSH2 0x1BE0 SWAP3 PUSH2 0x1BB5 JUMP JUMPDEST PUSH2 0x1BC1 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1BF0 PUSH2 0x1BF7 SWAP2 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1C02 SWAP1 PUSH2 0x1B4B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1C29 PUSH2 0x1C22 DUP4 PUSH2 0x4D5 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1C09 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1C7D JUMPI POP PUSH1 0x1 EQ PUSH2 0x1C45 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C52 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x508 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1C69 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x1C56 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE DUP1 ISZERO ISZERO MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1C40 JUMP JUMPDEST PUSH2 0x1CBC PUSH2 0x1CB3 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x1CAA DUP2 PUSH2 0x643 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x1C09 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x650 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2E6A736F6E000000000000000000000000000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1CF4 PUSH1 0x5 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x1CFD DUP2 PUSH2 0x1CC0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1D12 PUSH2 0x1D1D SWAP4 PUSH2 0x1D18 SWAP4 PUSH2 0x1C0E JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x1CE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D6A SWAP1 PUSH2 0x1D2F PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x1D65 PUSH2 0x1D3E PUSH1 0x9 SWAP3 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x1D56 PUSH2 0x1D4A PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1D01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D7A SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x32C1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1D8A SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D97 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBA PUSH2 0x1DBF SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DCC SWAP1 SLOAD PUSH2 0x1DAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1DE8 PUSH2 0x1DEE SWAP3 PUSH2 0x1DE0 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x1DC2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E00 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E25 PUSH2 0x1E2A SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x1E0E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E37 SWAP1 SLOAD PUSH2 0x1E19 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E44 SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E6B PUSH2 0x1E70 SWAP2 PUSH2 0x1E48 JUMP JUMPDEST PUSH2 0x1E4E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E7D SWAP1 SLOAD PUSH2 0x1E5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E8A SWAP1 PUSH2 0x3FC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1E98 PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1ED2 PUSH2 0x1EC9 PUSH1 0x0 PUSH2 0x1EAC PUSH2 0x1E8E JUMP JUMPDEST SWAP5 PUSH2 0x1EC3 PUSH2 0x1EBB DUP4 DUP4 ADD PUSH2 0x1E2D JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x1E3A JUMP JUMPDEST ADD PUSH2 0x1E73 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x1E80 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EDD SWAP1 PUSH2 0x1E9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EEA SWAP1 MLOAD PUSH2 0x272 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F01 PUSH2 0x1EFC PUSH2 0x1F06 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F12 SWAP1 PUSH2 0x1EED JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F1F SWAP1 MLOAD PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F36 PUSH2 0x1F31 PUSH2 0x1F3B SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F63 PUSH2 0x1F69 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x1F75 DUP4 DUP3 MUL PUSH2 0x2A2 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1F84 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1FAB PUSH2 0x1FB1 SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1FBC JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x1FE4 PUSH2 0x1FE9 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1FD3 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH2 0x1FDC PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x1ED4 JUMP JUMPDEST SWAP2 PUSH2 0x1FF6 PUSH1 0x0 DUP5 ADD PUSH2 0x1EE0 JUMP JUMPDEST PUSH2 0x2011 PUSH2 0x200B PUSH2 0x2006 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x205E JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x205A SWAP4 PUSH2 0x2037 PUSH2 0x2032 PUSH1 0x20 DUP10 ADD PUSH2 0x1F15 JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x204D PUSH2 0x2048 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x1F22 JUMP JUMPDEST SWAP1 PUSH2 0x1F9F JUMP JUMPDEST SWAP4 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x205A PUSH1 0x0 PUSH2 0x2053 PUSH2 0x203D PUSH2 0x2075 PUSH1 0x2 PUSH2 0x1ED4 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x2017 JUMP JUMPDEST PUSH2 0x208B SWAP2 CALLDATASIZE SWAP2 PUSH2 0x93C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2099 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x104B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP7 SWAP4 SWAP7 SWAP6 SWAP1 SWAP5 SWAP2 SWAP3 SWAP6 PUSH2 0x20AD PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x22E6 JUMPI JUMPDEST DUP3 DUP8 SUB PUSH2 0x22D8 JUMPI PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP5 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP6 PUSH1 0x20 MSTORE DUP6 PUSH1 0x60 SHR SWAP6 DUP4 PUSH1 0x60 SHR SWAP4 DUP5 ISZERO PUSH2 0x22CA JUMPI DUP8 CALLER SUB PUSH2 0x22AE JUMPI JUMPDEST DUP9 PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x224E JUMPI POP POP POP DUP3 DUP7 PUSH1 0x20 PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE DUP12 DUP14 DUP2 PUSH1 0x5 SHL SWAP5 DUP3 DUP7 SWAP4 PUSH1 0x40 DUP7 ADD MSTORE DUP4 DUP14 PUSH1 0x60 DUP8 ADD CALLDATACOPY DUP4 PUSH1 0x60 ADD DUP3 DUP7 ADD MSTORE PUSH1 0x60 DUP5 DUP7 ADD ADD SWAP1 DUP2 MSTORE ADD CALLDATACOPY PUSH1 0x80 CALLER SWAP4 DUP1 ADD ADD SWAP1 LOG4 PUSH2 0x2164 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2231 JUMPI JUMPDEST POP DUP2 EXTCODESIZE PUSH2 0x217A JUMPI JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP1 SWAP8 DUP7 SWAP5 PUSH1 0x0 MSTORE DUP1 PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP11 PUSH4 0xBC197C81 DUP13 MSTORE CALLER DUP7 DUP14 ADD MSTORE PUSH1 0x40 DUP13 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP13 ADD MSTORE DUP11 DUP4 PUSH1 0x5 SHL SWAP10 DUP11 SWAP6 DUP7 SWAP5 DUP6 SWAP4 ADD MSTORE PUSH1 0xE0 DUP14 ADD CALLDATACOPY DUP2 PUSH1 0xC0 ADD PUSH1 0x80 DUP13 ADD MSTORE PUSH1 0xE0 DUP3 DUP13 ADD ADD SWAP3 DUP4 MSTORE DUP5 DUP4 ADD CALLDATACOPY DUP2 DUP1 PUSH1 0xE0 ADD ADD PUSH1 0xA0 DUP11 ADD MSTORE ADD ADD DUP4 DUP2 MSTORE ADD CALLDATACOPY DUP1 ADD ADD PUSH2 0x104 ADD PUSH1 0x1C PUSH1 0x40 MLOAD ADD PUSH1 0x0 DUP1 MLOAD GAS CALL ISZERO PUSH2 0x2222 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2214 JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2171 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x21F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2248 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP7 SWAP1 DUP11 DUP13 SWAP2 SWAP3 DUP8 SWAP5 DUP12 SWAP7 PUSH2 0x33FF JUMP JUMPDEST CODESIZE PUSH2 0x2169 JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP12 ADD CALLDATALOAD DUP4 PUSH1 0x20 MSTORE DUP2 DUP9 ADD CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP4 GT PUSH2 0x22A0 JUMPI DUP3 SWAP1 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x2292 JUMPI DUP3 SWAP2 SSTORE PUSH2 0x20F7 JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x20F1 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2309 DUP5 DUP9 PUSH2 0x2303 DUP12 DUP8 SWAP1 PUSH2 0x22FD DUP9 SWAP5 DUP13 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x20B2 JUMP JUMPDEST SWAP1 PUSH2 0x232A SWAP2 PUSH2 0x2325 PUSH2 0x2320 DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x232C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2336 SWAP2 PUSH2 0x3449 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2342 SWAP2 PUSH2 0x230F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x239F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x23A8 DUP2 PUSH2 0x2344 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2392 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23CC JUMPI JUMP JUMPDEST PUSH2 0x23D4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23EA PUSH1 0x4 DUP3 ADD PUSH2 0x23AC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x241B SWAP2 PUSH2 0x2416 DUP3 PUSH2 0x2410 PUSH2 0x240A PUSH2 0x2405 PUSH2 0x3473 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ PUSH2 0x23C5 JUMP JUMPDEST PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x242E PUSH2 0x241D JUMP JUMPDEST POP DUP3 SUB PUSH2 0x2485 JUMPI PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 PUSH1 0x5 SHL DUP1 DUP5 DUP2 ADD PUSH1 0x40 MSTORE JUMPDEST PUSH2 0x2456 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP1 SUB DUP1 DUP3 ADD CALLDATALOAD PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x0 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 DUP7 ADD MSTORE PUSH2 0x244C JUMP JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x24AE SWAP3 SWAP2 PUSH2 0x24A9 PUSH2 0x24A4 PUSH2 0x188F JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x24B0 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x24BD SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x352E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x24CA SWAP3 SWAP2 PUSH2 0x2493 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x250C SWAP4 SWAP3 SWAP2 PUSH2 0x2507 PUSH2 0x2502 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x250E JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x251C SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x35B1 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x252A SWAP4 SWAP3 SWAP2 PUSH2 0x24F0 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2545 SWAP1 PUSH2 0x2540 PUSH2 0x253B PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2547 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2552 SWAP1 PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x255D SWAP1 PUSH2 0x252C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2571 PUSH2 0x2576 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x255F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2583 SWAP1 SLOAD PUSH2 0x2565 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2592 PUSH1 0xFF SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x25A5 SWAP1 PUSH2 0x39F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25C0 PUSH2 0x25BB PUSH2 0x25C7 SWAP3 PUSH2 0x259C JUMP JUMPDEST PUSH2 0x25A8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2586 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP6 SWAP7 SWAP5 SWAP4 SWAP3 SWAP5 CALLER PUSH2 0x2604 PUSH2 0x25FE PUSH32 0x0 PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2666 JUMPI JUMPDEST PUSH2 0x2649 JUMPI PUSH2 0x263B SWAP8 PUSH2 0x262E SWAP7 PUSH2 0x2629 SWAP5 DUP10 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x3607 JUMP JUMPDEST PUSH2 0x30F9 JUMP JUMPDEST PUSH2 0x2636 PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x2647 PUSH1 0x1 PUSH1 0xB PUSH2 0x25AB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2662 PUSH1 0x4 DUP3 ADD PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2671 PUSH1 0xB PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x260D JUMP JUMPDEST SWAP1 PUSH2 0x2680 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26B1 PUSH2 0x26AC PUSH2 0x26B6 SWAP4 PUSH2 0x26A4 PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x36A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C2 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26CE SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x26DB SWAP1 PUSH2 0x26C5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2711 SWAP2 PUSH1 0x0 PUSH2 0x2706 PUSH2 0x270C SWAP4 PUSH2 0x26FE PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x1D8D JUMP JUMPDEST ADD PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x2579 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x272D SWAP1 PUSH2 0x2728 PUSH2 0x2723 PUSH2 0x18E7 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x272F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x273A SWAP1 PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2745 SWAP1 PUSH2 0x2714 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x275E PUSH2 0x2763 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x2747 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2770 SWAP1 SLOAD PUSH2 0x2752 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277C SWAP1 PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2792 DUP3 PUSH2 0xA4B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x27AE JUMPI PUSH2 0x27AB SWAP2 PUSH1 0x0 ADD PUSH2 0x2785 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25D JUMP JUMPDEST POP PUSH2 0x27C2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x293 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27CE SWAP1 PUSH2 0x272 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x27E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x371 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27ED SWAP1 PUSH2 0x350 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2800 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x280C SWAP1 PUSH2 0xA48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2860 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x285B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2856 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2888 DUP2 PUSH2 0x2881 DUP2 PUSH2 0x288D SWAP6 PUSH2 0x2865 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28A7 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x28ED JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x28E8 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x28E3 JUMPI JUMP JUMPDEST PUSH2 0x2815 JUMP JUMPDEST PUSH2 0x2810 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x290C DUP2 PUSH2 0x2905 DUP2 PUSH2 0x2911 SWAP6 PUSH2 0x4FF JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x736 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x292B DUP2 PUSH2 0x2915 JUMP JUMPDEST SUB PUSH2 0x2932 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2944 DUP3 PUSH2 0x2922 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x2955 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2937 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2961 SWAP1 PUSH2 0x2915 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x29A3 SWAP1 PUSH1 0x20 PUSH2 0x299B PUSH2 0x2991 PUSH1 0x40 DUP5 ADD PUSH2 0x2983 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x28AC JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x28F2 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x2946 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x2958 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A50 SWAP2 PUSH2 0x2A42 PUSH2 0x2A37 PUSH1 0xC0 DUP4 ADD PUSH2 0x29CE PUSH2 0x29C4 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x27B3 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x27C5 JUMP JUMPDEST PUSH2 0x29E8 PUSH2 0x29DE PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x27D2 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x27E4 JUMP JUMPDEST PUSH2 0x2A02 PUSH2 0x29F8 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A1C PUSH2 0x2A12 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x27F1 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x2A29 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x281F JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x286E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x2891 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2965 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x2A7F PUSH1 0x40 SWAP2 PUSH2 0x2A87 SWAP5 PUSH2 0x2A72 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0xB9A JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x29A6 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0xA8E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2A91 PUSH2 0x252 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x2AA7 PUSH2 0x1D7C JUMP JUMPDEST POP PUSH2 0x2ABA PUSH2 0x2AB5 PUSH1 0x6 PUSH2 0x2766 JUMP JUMPDEST PUSH2 0x2773 JUMP JUMPDEST PUSH2 0x2AE6 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2AF1 PUSH2 0x2AD2 PUSH1 0x7 PUSH2 0x1DC2 JUMP JUMPDEST PUSH2 0x2ADA PUSH2 0x252 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x277F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2A53 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x2B36 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2B08 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B29 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2B2F JUMPI JUMPDEST PUSH2 0x2B21 DUP2 DUP4 PUSH2 0x5CF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2794 JUMP JUMPDEST CODESIZE PUSH2 0x2B04 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2B17 JUMP JUMPDEST PUSH2 0x2A89 JUMP JUMPDEST SWAP1 ISZERO ISZERO PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE CALLER PUSH1 0x14 MSTORE DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x34 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH2 0x2B98 SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x36D9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BB6 SWAP4 SWAP3 SWAP2 PUSH2 0x2BB1 PUSH2 0x2BAC PUSH2 0x24CC JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2BB8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x2BC6 SWAP4 SWAP2 SWAP1 SWAP2 SWAP3 PUSH2 0x372B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2BD4 SWAP4 SWAP3 SWAP2 PUSH2 0x2B9A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2BF5 PUSH2 0x2BF0 PUSH2 0x2BFA SWAP3 PUSH2 0x2BE8 PUSH2 0x180B JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3814 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C18 SWAP2 PUSH2 0x2C13 PUSH2 0x2C0E DUP3 PUSH2 0x1DCF JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2C1A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C24 SWAP2 PUSH2 0x3480 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C30 SWAP2 PUSH2 0x2BFD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2C3A PUSH2 0x1834 JUMP JUMPDEST POP PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE PUSH1 0x14 MSTORE PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2C6F SWAP1 PUSH2 0x2C6A PUSH2 0x2C65 PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2CB4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2C7E PUSH1 0x0 NOT SWAP2 PUSH2 0x1426 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2C91 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CA9 PUSH2 0x2CA4 PUSH2 0x2CB0 SWAP3 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CBF SWAP1 PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2CCA SWAP1 PUSH2 0x2C56 JUMP JUMPDEST JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP5 PUSH2 0x2CD8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x2E76 JUMPI JUMPDEST PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 PUSH1 0x60 SHL PUSH8 0x9A31110384E0B0C9 OR SWAP2 DUP1 PUSH1 0x20 MSTORE PUSH1 0x60 SHR SWAP3 DUP3 PUSH1 0x60 SHR SWAP3 DUP4 ISZERO PUSH2 0x2E68 JUMPI DUP5 CALLER SUB PUSH2 0x2E4C JUMPI JUMPDEST DUP7 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 DUP5 GT PUSH2 0x2E3E JUMPI DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP3 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x2E30 JUMPI SSTORE DUP1 PUSH1 0x20 MSTORE DUP3 DUP5 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 PUSH1 0x0 LOG4 PUSH2 0x2D76 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x2E0B JUMPI JUMPDEST DUP3 EXTCODESIZE PUSH2 0x2D8A JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP3 SWAP2 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 PUSH4 0xF23A6E61 DUP9 MSTORE CALLER DUP10 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP1 DUP7 ADD MSTORE DUP2 PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD CALLDATACOPY PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x2DFC JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x2DEE JUMPI CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x2D82 JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2DD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2E14 DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E1E DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E2A DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2D7B JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x2D14 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x2E7F DUP7 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E89 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x2E95 DUP6 DUP4 SWAP1 PUSH2 0x208E JUMP JUMPDEST POP PUSH2 0x2CDD JUMP JUMPDEST PUSH2 0x2EA3 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x2EAD DUP2 PUSH2 0x3854 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2ED0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2EC0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2ECA SWAP2 POP PUSH2 0x38FA JUMP JUMPDEST CODESIZE PUSH2 0x2EBC JUMP JUMPDEST POP PUSH2 0x2EDA DUP2 PUSH2 0x3894 JUMP JUMPDEST PUSH2 0x2EB4 JUMP JUMPDEST PUSH2 0x2EF1 SWAP1 PUSH2 0x2EEB PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x39F1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2F4E PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2F57 DUP2 PUSH2 0x2EF3 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F71 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2F41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2F7B JUMPI JUMP JUMPDEST PUSH2 0x2F83 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2F99 PUSH1 0x4 DUP3 ADD PUSH2 0x2F5B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2FD2 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x2FDB DUP2 PUSH2 0x2F9D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2FF5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2FC5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2FFF JUMPI JUMP JUMPDEST PUSH2 0x3007 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x301D PUSH1 0x4 DUP3 ADD PUSH2 0x2FDF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x302B PUSH1 0x40 PUSH2 0x6FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3046 PUSH2 0x3041 PUSH2 0x304D SWAP3 PUSH2 0x26C5 JUMP JUMPDEST PUSH2 0x302E JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B9A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3071 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x3051 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x308F PUSH2 0x308A PUSH2 0x3094 SWAP3 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x30AF PUSH2 0x30AA PUSH2 0x30B6 SWAP3 PUSH2 0x307B JUMP JUMPDEST PUSH2 0x3097 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x3057 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x30E5 PUSH1 0x20 PUSH1 0x0 PUSH2 0x30EB SWAP5 PUSH2 0x30DD DUP3 DUP3 ADD PUSH2 0x30D7 DUP5 DUP9 ADD PUSH2 0x1EE0 JUMP JUMPDEST SWAP1 PUSH2 0x3031 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x1F15 JUMP JUMPDEST SWAP1 PUSH2 0x309A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x30F7 SWAP2 PUSH2 0x30BA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x316A PUSH2 0x3171 SWAP3 PUSH2 0x3125 DUP4 PUSH2 0x311E PUSH2 0x3118 PUSH2 0x3113 PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x314B DUP2 PUSH2 0x3144 PUSH2 0x313E PUSH2 0x3139 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x2FF8 JUMP JUMPDEST SWAP2 PUSH2 0x3161 PUSH2 0x3157 PUSH2 0x3021 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x317C PUSH2 0x1C04 JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x31B9 JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x319A JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x31DC PUSH2 0x31D7 PUSH2 0x31E1 SWAP3 PUSH2 0x1423 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x31F0 SWAP2 ADD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x3213 DUP3 PUSH2 0xE9A JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3224 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3233 SWAP1 MLOAD PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3242 PUSH2 0x3247 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 SLOAD PUSH2 0x3236 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3266 PUSH2 0x326C SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3277 JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST SWAP1 PUSH2 0x3291 PUSH2 0x328C PUSH2 0x3298 SWAP3 PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C71 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x32AB PUSH2 0x32B1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x2A2 JUMP JUMPDEST SWAP3 PUSH2 0x2A2 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x32BC JUMPI JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH2 0x32D1 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 DUP5 DUP4 SWAP2 PUSH2 0x3A8A JUMP JUMPDEST PUSH2 0x32DA DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP3 PUSH2 0x32E5 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP3 PUSH2 0x32F0 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP4 JUMPDEST DUP5 PUSH2 0x3305 PUSH2 0x32FF DUP9 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x3382 JUMPI PUSH2 0x3376 PUSH2 0x337C SWAP2 PUSH2 0x335D PUSH2 0x3328 PUSH2 0x3323 DUP9 DUP11 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x3357 PUSH2 0x3348 PUSH1 0x1 PUSH2 0x3342 PUSH2 0x333D DUP14 DUP13 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x3352 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x3370 PUSH2 0x336B DUP8 DUP10 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP5 PUSH2 0x31E4 JUMP JUMPDEST SWAP4 PUSH2 0x32F2 JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x33A6 SWAP3 POP PUSH2 0x339F SWAP2 POP PUSH2 0x339A PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33C4 PUSH2 0x33BF PUSH2 0x33C9 SWAP3 PUSH2 0x33AD JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D4 PUSH2 0x33A8 JUMP JUMPDEST POP PUSH2 0x33E0 PUSH2 0x2710 PUSH2 0x33B0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33EB PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x33F9 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP SWAP5 SWAP3 SWAP4 SWAP1 SWAP4 PUSH2 0x340E PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x341B JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3431 PUSH2 0x3437 SWAP4 PUSH2 0x343D SWAP8 SWAP7 SWAP1 SWAP3 SWAP4 SWAP6 SWAP7 PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x2080 JUMP JUMPDEST POP PUSH2 0x208E JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x3413 JUMP JUMPDEST SWAP1 PUSH2 0x346B PUSH2 0x3466 PUSH2 0x3470 SWAP4 PUSH2 0x345F DUP2 DUP6 SWAP1 PUSH2 0x3AA5 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3B8C JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x347B PUSH2 0x1DF1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x34A2 PUSH2 0x349D PUSH2 0x34A7 SWAP4 PUSH2 0x3496 DUP2 DUP6 SWAP1 PUSH2 0x3BC7 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x268E JUMP JUMPDEST PUSH2 0x3C61 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34DF PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x34E8 DUP2 PUSH2 0x34AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3502 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x34D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x350C JUMPI JUMP JUMPDEST PUSH2 0x3514 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x352A PUSH1 0x4 DUP3 ADD PUSH2 0x34EC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x35AA SWAP1 PUSH2 0x35A3 PUSH2 0x35AF SWAP5 SWAP4 PUSH2 0x355E DUP6 PUSH2 0x3557 PUSH2 0x3551 PUSH2 0x354C PUSH2 0x33CC JUMP JUMPDEST PUSH2 0x3FC JUMP JUMPDEST SWAP2 PUSH2 0x3FC JUMP JUMPDEST GT ISZERO PUSH2 0x2F74 JUMP JUMPDEST PUSH2 0x3584 DUP2 PUSH2 0x357D PUSH2 0x3577 PUSH2 0x3572 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 PUSH2 0x272 JUMP JUMPDEST EQ ISZERO PUSH2 0x3505 JUMP JUMPDEST SWAP4 PUSH2 0x359A PUSH2 0x3590 PUSH2 0x3021 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x1E80 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x30ED JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x35FF SWAP2 SWAP3 PUSH2 0x35CB PUSH2 0x3605 SWAP6 PUSH2 0x35F0 SWAP4 SWAP1 DUP7 DUP5 SWAP2 SWAP3 PUSH2 0x3C9C JUMP JUMPDEST PUSH2 0x35E8 PUSH2 0x35E1 DUP3 PUSH2 0x35DC PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x35FA DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x3626 PUSH2 0x366B SWAP7 SWAP5 PUSH2 0x361F PUSH2 0x362D SWAP5 PUSH1 0x8 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x9 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0xA PUSH2 0x1B03 JUMP JUMPDEST PUSH2 0x363F PUSH2 0x3638 PUSH2 0x1448 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3651 PUSH2 0x364A PUSH2 0x188F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x3663 PUSH2 0x365C PUSH2 0x18E7 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3449 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3D9D JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x367C PUSH2 0x3681 SWAP2 PUSH2 0x1DA5 JUMP JUMPDEST PUSH2 0xAE9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3698 PUSH2 0x3693 PUSH2 0x369D SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36CC PUSH2 0x36C7 PUSH2 0x36D6 SWAP4 PUSH2 0x36C2 PUSH1 0x0 PUSH2 0x36D1 SWAP6 PUSH2 0x36BB PUSH2 0x1DF1 JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3E18 JUMP JUMPDEST PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3684 JUMP JUMPDEST PUSH2 0x26B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3714 PUSH2 0x3729 SWAP4 PUSH2 0x36EF PUSH2 0x3723 SWAP4 DUP6 DUP4 SWAP2 PUSH2 0x3E3A JUMP JUMPDEST PUSH2 0x370C PUSH2 0x3705 DUP3 PUSH2 0x3700 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x371E DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x3257 JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST SWAP3 PUSH2 0x373C SWAP2 SWAP5 SWAP4 SWAP1 DUP6 DUP5 SWAP2 SWAP3 PUSH2 0x3E55 JUMP JUMPDEST PUSH2 0x3745 DUP4 PUSH2 0xE9A JUMP JUMPDEST SWAP2 PUSH2 0x3750 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x375B PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x3770 PUSH2 0x376A DUP8 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST LT ISZERO PUSH2 0x37EE JUMPI PUSH2 0x3796 PUSH2 0x37E8 SWAP2 PUSH2 0x3790 PUSH2 0x378B DUP8 DUP8 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 PUSH2 0x37E3 PUSH2 0x37AD PUSH2 0x37A8 DUP8 DUP5 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST PUSH2 0x37DD PUSH2 0x37CE PUSH1 0x1 PUSH2 0x37C8 PUSH2 0x37C3 DUP14 DUP9 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH2 0x3229 JUMP JUMPDEST SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP2 PUSH2 0x37D8 DUP4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH2 0x31E4 JUMP JUMPDEST SWAP2 PUSH2 0x375D JUMP JUMPDEST SWAP2 POP SWAP4 POP PUSH2 0x3812 SWAP3 POP PUSH2 0x380B SWAP2 POP PUSH2 0x3806 PUSH1 0x0 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x329C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x382C PUSH1 0x0 PUSH2 0x3831 SWAP3 PUSH2 0x3825 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x366D JUMP JUMPDEST PUSH2 0x3F98 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x383D PUSH2 0x241D JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x385C PUSH2 0x1834 JUMP JUMPDEST POP PUSH4 0x3E85E62F PUSH1 0xE0 SHL PUSH2 0x3877 PUSH2 0x3871 DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3884 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x388E SWAP2 POP PUSH2 0x3FB0 JUMP JUMPDEST CODESIZE PUSH2 0x3880 JUMP JUMPDEST PUSH2 0x389C PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x38A6 DUP2 PUSH2 0x3FD7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x38EB JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x38D0 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x38C0 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x38CA SWAP2 POP PUSH2 0x4017 JUMP JUMPDEST CODESIZE PUSH2 0x38BC JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x38E5 PUSH2 0x38DF DUP4 PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ PUSH2 0x38B4 JUMP JUMPDEST POP PUSH2 0x38F5 DUP2 PUSH2 0x4017 JUMP JUMPDEST PUSH2 0x38AD JUMP JUMPDEST PUSH2 0x3902 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x390C DUP2 PUSH2 0x4017 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3918 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3922 SWAP2 POP PUSH2 0x4057 JUMP JUMPDEST CODESIZE PUSH2 0x3914 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x393F PUSH2 0x393A PUSH2 0x3944 SWAP3 PUSH2 0x3928 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x397B PUSH1 0x17 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x3984 DUP2 PUSH2 0x3947 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39BC PUSH1 0x11 DUP1 SWAP3 PUSH2 0x1C09 JUMP JUMPDEST PUSH2 0x39C5 DUP2 PUSH2 0x3988 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39E3 PUSH2 0x39EE SWAP4 SWAP3 PUSH2 0x39DD PUSH2 0x39E8 SWAP4 PUSH2 0x396F JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST PUSH2 0x39B0 JUMP JUMPDEST SWAP1 PUSH2 0x1C97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3A06 PUSH2 0x3A00 DUP4 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3A0E JUMPI POP POP JUMP JUMPDEST PUSH2 0x3A86 SWAP2 PUSH2 0x3A64 PUSH2 0x3A3D PUSH2 0x3A2D PUSH2 0x3A27 PUSH2 0x3A69 SWAP6 PUSH2 0x40E5 JUMP JUMPDEST SWAP4 PUSH2 0x3670 JUMP JUMPDEST PUSH2 0x3A37 PUSH1 0x20 PUSH2 0x392B JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP2 PUSH2 0x3A55 PUSH2 0x3A49 PUSH2 0x252 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x39C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x5CF JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x252 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x6A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x3AA3 SWAP3 PUSH2 0x3A9A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x4479 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3AB9 PUSH2 0x3AB3 DUP3 DUP5 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH2 0x3AC2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3AE5 PUSH1 0x1 PUSH2 0x3AE0 PUSH1 0x0 PUSH2 0x3AD8 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3AEE PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3B2B PUSH2 0x3B25 PUSH2 0x3B1F PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3B34 PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3B3E DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3ABE JUMP JUMPDEST PUSH2 0x3B51 SWAP1 PUSH2 0x1B66 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B68 PUSH2 0x3B63 PUSH2 0x3B6D SWAP3 PUSH2 0x267 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B84 PUSH2 0x3B7F PUSH2 0x3B89 SWAP3 PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x1426 JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3BBF PUSH2 0x3BB9 PUSH2 0x3BB4 PUSH2 0x3BAF PUSH1 0x0 PUSH2 0x3BC4 SWAP7 PUSH2 0x3BA7 PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 DUP2 DUP4 SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH2 0x3BDB JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3BFE PUSH1 0x0 PUSH2 0x3BF9 PUSH1 0x0 PUSH2 0x3BF1 PUSH1 0x4 DUP7 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x26D1 JUMP JUMPDEST PUSH2 0x25AB JUMP JUMPDEST SWAP1 PUSH2 0x3C07 PUSH2 0x3473 JUMP JUMPDEST SWAP1 PUSH2 0x3C44 PUSH2 0x3C3E PUSH2 0x3C38 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x1D81 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x26C5 JUMP JUMPDEST SWAP3 PUSH2 0x3C4D PUSH2 0x252 JUMP JUMPDEST DUP1 PUSH2 0x3C57 DUP2 PUSH2 0x45F JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3BD7 JUMP JUMPDEST SWAP1 PUSH2 0x3C94 PUSH2 0x3C8E PUSH2 0x3C89 PUSH2 0x3C84 PUSH1 0x0 PUSH2 0x3C99 SWAP7 PUSH2 0x3C7C PUSH2 0x1834 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x3B70 JUMP JUMPDEST SWAP2 PUSH2 0x366D JUMP JUMPDEST PUSH2 0x4729 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3CA8 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3D84 JUMPI JUMPDEST DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3D76 JUMPI PUSH8 0x9A31110384E0B0C9 PUSH1 0x20 MSTORE DUP4 PUSH1 0x14 MSTORE DUP5 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP4 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x3D68 JUMPI SSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x60 SHR PUSH1 0x0 CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP4 LOG4 PUSH2 0x3D15 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3D4F JUMPI JUMPDEST PUSH2 0x3D23 DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3D2E JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3D46 SWAP4 PUSH2 0x3D3C PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x4840 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3D28 JUMP JUMPDEST PUSH2 0x3D58 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D62 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D1A JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3D8D DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3D97 DUP2 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3CAD JUMP JUMPDEST SWAP1 PUSH2 0x3DB3 PUSH2 0x3DB8 SWAP4 SWAP3 PUSH2 0x3DAE PUSH2 0x1B27 JUMP JUMPDEST PUSH2 0x3449 JUMP JUMPDEST PUSH2 0x48D9 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3DD2 DUP2 PUSH2 0x3DBA JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3DED JUMPI PUSH2 0x3DE4 PUSH1 0x1 SWAP2 PUSH2 0x3DBE JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x3E02 SWAP1 PUSH1 0x8 PUSH2 0x3E07 SWAP4 MUL PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x1DAB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3E15 SWAP2 SLOAD PUSH2 0x3DF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3E37 SWAP2 PUSH1 0x0 PUSH2 0x3E31 SWAP3 PUSH2 0x3E2A PUSH2 0x1D7C JUMP JUMPDEST POP ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3E53 SWAP3 PUSH2 0x3E4A PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x48F9 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3E61 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x3F93 JUMPI JUMPDEST DUP1 MLOAD DUP5 MLOAD SUB PUSH2 0x3F85 JUMPI DUP3 PUSH1 0x60 SHL DUP1 ISZERO PUSH2 0x3F77 JUMPI DUP1 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP5 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x3F40 JUMPI POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 MSTORE PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP2 DUP9 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD PUSH1 0x40 DUP3 ADD SWAP1 DUP2 DUP2 DUP13 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP4 ADD MSTORE RETURNDATASIZE ADD DUP7 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP2 DUP2 DUP10 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP4 PUSH1 0x60 SHR SWAP4 CALLER SWAP3 LOG4 PUSH2 0x3F01 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x3F3B JUMPI JUMPDEST PUSH2 0x3F0F DUP4 PUSH2 0x4833 JUMP JUMPDEST PUSH2 0x3F1A JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x3F32 SWAP4 PUSH2 0x3F28 PUSH1 0x0 PUSH2 0x1F09 JUMP JUMPDEST SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x49FD JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST DUP1 DUP4 ADD MLOAD SWAP1 DUP1 DUP8 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD SWAP1 DUP2 ADD SWAP1 DUP2 LT PUSH2 0x3F69 JUMPI PUSH1 0x20 SWAP3 SSTORE SUB DUP1 PUSH2 0x3E8E JUMP JUMPDEST PUSH4 0x1336CEA PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xEA553B34 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x3E66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FAD SWAP2 PUSH2 0x3FA6 PUSH2 0x180B JUMP JUMPDEST POP ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FB8 PUSH2 0x1834 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0xE89341C DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0xD9B67A26 DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x3FDF PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x3FFA PUSH2 0x3FF4 PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4007 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4011 SWAP2 POP PUSH2 0x4AB4 JUMP JUMPDEST CODESIZE PUSH2 0x4003 JUMP JUMPDEST PUSH2 0x401F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x403A PUSH2 0x4034 PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4047 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4051 SWAP2 POP PUSH2 0x4ADA JUMP JUMPDEST CODESIZE PUSH2 0x4043 JUMP JUMPDEST PUSH2 0x405F PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x407A PUSH2 0x4074 PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4087 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4091 SWAP2 POP PUSH2 0x3894 JUMP JUMPDEST CODESIZE PUSH2 0x4083 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x40B4 PUSH2 0x40AF PUSH2 0x40B9 SWAP3 PUSH2 0x4097 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40C6 PUSH1 0x14 PUSH2 0x40A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x40DD PUSH2 0x40D8 PUSH2 0x40E2 SWAP3 PUSH2 0x409A JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4102 PUSH2 0x40FD PUSH2 0x4118 SWAP3 PUSH2 0x40F7 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x3B48 JUMP JUMPDEST PUSH2 0x3B54 JUMP JUMPDEST PUSH2 0x4112 PUSH2 0x410D PUSH2 0x40BC JUMP JUMPDEST PUSH2 0x40C9 JUMP JUMPDEST SWAP1 PUSH2 0x42FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4132 PUSH2 0x412D PUSH2 0x4137 SWAP3 PUSH2 0x411B JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x414C PUSH2 0x4147 DUP4 PUSH2 0x1028 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x417B PUSH2 0x4163 DUP4 PUSH2 0x413A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x4171 DUP7 SWAP4 PUSH2 0x1028 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x4151 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4193 DUP3 PUSH2 0x4185 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x41A5 JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41C9 PUSH2 0x41C4 PUSH2 0x41CE SWAP3 PUSH2 0x41B2 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x41DA SWAP1 PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x41E9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1F3E JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x420D PUSH2 0x41EE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4227 PUSH2 0x4222 PUSH2 0x422C SWAP3 PUSH2 0x4210 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x424C PUSH2 0x4247 PUSH2 0x4251 SWAP3 PUSH2 0x4235 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH2 0x409A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4273 SWAP1 PUSH2 0x426D PUSH2 0x4267 PUSH2 0x4278 SWAP5 PUSH2 0x409A JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SWAP1 PUSH2 0x8AA JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x42AF PUSH1 0x20 DUP1 SWAP3 PUSH2 0x647 JUMP JUMPDEST PUSH2 0x42B8 DUP2 PUSH2 0x427B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x42D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x42A3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x42DC JUMPI JUMP JUMPDEST PUSH2 0x42E4 PUSH2 0x252 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x42FA PUSH1 0x4 DUP3 ADD PUSH2 0x42BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x4308 PUSH2 0x1C04 JUMP JUMPDEST POP PUSH2 0x43A2 PUSH2 0x4392 PUSH2 0x433E PUSH2 0x4339 PUSH2 0x4329 PUSH1 0x2 PUSH2 0x4324 DUP8 SWAP2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x4333 PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST PUSH2 0x4156 JUMP JUMPDEST SWAP3 PUSH2 0x4347 PUSH2 0x417D JUMP JUMPDEST PUSH2 0x4360 DUP6 PUSH2 0x435A PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x31C8 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4369 PUSH2 0x41AA JUMP JUMPDEST PUSH2 0x4382 DUP6 PUSH2 0x437C PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x438D PUSH1 0x2 PUSH2 0x411E JUMP JUMPDEST PUSH2 0x1F54 JUMP JUMPDEST PUSH2 0x439C PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x329C JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x43B8 PUSH2 0x43B2 PUSH1 0x1 PUSH2 0x41B5 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST GT ISZERO PUSH2 0x441F JUMPI PUSH2 0x43C6 PUSH2 0x4205 JUMP JUMPDEST DUP2 PUSH2 0x43D1 PUSH1 0xF PUSH2 0x4213 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x441A JUMPI PUSH2 0x43ED PUSH2 0x440E SWAP3 PUSH2 0x4414 SWAP5 BYTE PUSH2 0x422F JUMP JUMPDEST PUSH2 0x43FD DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x4189 JUMP JUMPDEST MSTORE8 PUSH2 0x4408 PUSH1 0x4 PUSH2 0x4238 JUMP JUMPDEST SWAP1 PUSH2 0x4254 JUMP JUMPDEST SWAP4 PUSH2 0x41D1 JUMP JUMPDEST SWAP3 PUSH2 0x43A4 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST PUSH2 0x4447 SWAP3 SWAP4 POP PUSH2 0x4442 SWAP1 PUSH2 0x443C PUSH2 0x4436 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ PUSH2 0x42D5 JUMP JUMPDEST PUSH2 0x1D20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x445C PUSH2 0x4457 DUP4 PUSH2 0x713 JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x446B PUSH1 0x0 PUSH2 0x444A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4476 PUSH2 0x4461 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x4485 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x45B1 JUMPI JUMPDEST DUP2 MLOAD DUP6 MLOAD SUB PUSH2 0x45A3 JUMPI PUSH1 0x60 SHL SWAP2 DUP3 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP1 PUSH1 0x60 SHL DUP4 DUP2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x4581 JUMPI JUMPDEST POP DUP4 MLOAD PUSH1 0x5 SHL DUP1 JUMPDEST PUSH2 0x454B JUMPI POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB PUSH1 0x0 SWAP4 SWAP5 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x40 DUP4 MSTORE DUP1 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP2 PUSH1 0x40 DUP6 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0x40 ADD PUSH1 0x20 DUP5 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD PUSH1 0x5 SHL PUSH1 0x20 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD SUB SWAP3 PUSH1 0x60 SHR SWAP3 CALLER SWAP3 LOG4 PUSH2 0x4536 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x453D JUMPI JUMPDEST JUMP JUMPDEST PUSH2 0x4545 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x453B JUMP JUMPDEST DUP1 DUP3 ADD MLOAD SWAP1 DUP1 DUP7 ADD MLOAD PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP3 DUP4 DUP2 GT PUSH2 0x4573 JUMPI PUSH1 0x20 SWAP4 SUB SWAP1 SSTORE SUB DUP1 PUSH2 0x44BD JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x4595 JUMPI CODESIZE PUSH2 0x44B5 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0x3B800A46 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x45B9 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x448A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x45DA DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x45F5 JUMPI PUSH2 0x45EC PUSH1 0x1 SWAP2 PUSH2 0x45C2 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x31F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x4610 PUSH2 0x460B PUSH2 0x4618 SWAP4 PUSH2 0x1D81 JUMP JUMPDEST PUSH2 0x2C88 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x1934 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x464C JUMPI DUP3 PUSH2 0x4644 SWAP2 PUSH1 0x1 PUSH2 0x464A SWAP6 ADD DUP2 SSTORE PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST SWAP1 PUSH2 0x465B SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x4671 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4686 PUSH2 0x4680 DUP3 DUP5 SWAP1 PUSH2 0x4B1A JUMP JUMPDEST ISZERO PUSH2 0x39F JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x46C9 JUMPI PUSH2 0x46BF PUSH2 0x46C4 SWAP3 PUSH2 0x46AA PUSH2 0x46A3 PUSH1 0x0 DUP6 ADD PUSH2 0x45BF JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x461C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x46B8 PUSH1 0x0 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST SWAP4 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x46F8 SWAP2 PUSH2 0x46F2 PUSH2 0x1D7C JUMP JUMPDEST SWAP2 PUSH2 0x45FA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4703 DUP2 PUSH2 0x45CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4724 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x4721 PUSH2 0x471B DUP4 DUP4 PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH2 0x46E6 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x46D0 JUMP JUMPDEST PUSH2 0x4731 PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4748 PUSH2 0x4743 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x475D PUSH2 0x4757 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x482B JUMPI PUSH2 0x47DD SWAP3 PUSH1 0x1 PUSH2 0x47D8 SWAP3 DUP5 PUSH2 0x4786 PUSH1 0x0 SWAP7 PUSH2 0x4780 DUP6 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST PUSH2 0x47A3 PUSH2 0x4794 DUP9 DUP6 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH2 0x479D DUP7 PUSH2 0x41B5 JUMP JUMPDEST SWAP1 PUSH2 0x3257 JUMP JUMPDEST DUP1 PUSH2 0x47B6 PUSH2 0x47B0 DUP5 PUSH2 0x2A2 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST SUB PUSH2 0x47E2 JUMPI JUMPDEST POP POP POP PUSH2 0x47D2 PUSH2 0x47CD DUP7 DUP4 ADD PUSH2 0x45BF JUMP JUMPDEST PUSH2 0x46FA JUMP JUMPDEST ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x197F JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4823 SWAP3 PUSH2 0x4815 PUSH2 0x4801 PUSH2 0x47FB PUSH2 0x481E SWAP5 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x3E0A JUMP JUMPDEST SWAP4 PUSH2 0x480F DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x3DC9 JUMP JUMPDEST SWAP1 PUSH2 0x45FA JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x327C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x47BC JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x483B PUSH2 0x1834 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xF23A6E61 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP1 DUP5 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xC0 DUP8 ADD MSTORE PUSH2 0x48C5 JUMPI JUMPDEST POP POP PUSH1 0xC4 ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x48B6 JUMPI JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x48A8 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4897 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP7 PUSH1 0xE0 DUP8 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x4882 JUMP JUMPDEST SWAP1 PUSH2 0x48F0 PUSH2 0x48E9 PUSH2 0x48F7 SWAP4 PUSH2 0x1B8E JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1BC4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x2C94 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x4905 PUSH2 0x33E3 JUMP JUMPDEST PUSH2 0x49DB JUMPI JUMPDEST PUSH1 0x60 SHL SWAP1 DUP2 PUSH8 0x9A31110384E0B0C9 OR PUSH1 0x20 MSTORE DUP2 DUP2 PUSH1 0x60 SHL EQ DUP2 PUSH1 0x60 SHL ISZERO OR ISZERO PUSH2 0x49B9 JUMPI JUMPDEST POP DUP3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 DUP3 DUP5 GT PUSH2 0x49AB JUMPI DUP4 PUSH1 0x0 SWAP4 SUB SWAP1 SSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x60 SHR CALLER PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 DUP5 LOG4 PUSH2 0x497F PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x4988 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4994 PUSH2 0x499A SWAP3 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49A3 PUSH2 0x446E JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x4984 JUMP JUMPDEST PUSH4 0xF4D678B8 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x34 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x49CD JUMPI CODESIZE PUSH2 0x492E JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x49E4 DUP5 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49EE DUP4 PUSH2 0x3834 JUMP JUMPDEST POP PUSH2 0x49F7 PUSH2 0x446E JUMP JUMPDEST POP PUSH2 0x490A JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 PUSH4 0xBC197C81 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP7 ADD MSTORE DUP1 MLOAD PUSH1 0x5 SHL DUP7 ADD DUP1 SWAP2 PUSH1 0xC0 DUP8 ADD SWAP3 DUP4 SWAP2 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE PUSH1 0xA0 ADD SWAP1 DUP2 PUSH1 0x80 DUP8 ADD MSTORE RETURNDATASIZE ADD SWAP2 DUP3 DUP2 MLOAD PUSH1 0x5 SHL DUP9 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP RETURNDATASIZE ADD PUSH1 0xA0 DUP6 ADD MSTORE RETURNDATASIZE ADD SWAP1 DUP2 DUP2 MLOAD DUP7 ADD DUP1 SWAP3 PUSH1 0x4 GAS STATICCALL POP PUSH1 0x1C DUP4 ADD SWAP1 RETURNDATASIZE ADD SUB SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x4AA5 JUMPI JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x4A97 JUMPI JUMP JUMPDEST PUSH4 0x9C05499B PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4A86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4ABC PUSH2 0x1834 JUMP JUMPDEST POP PUSH2 0x4AD6 PUSH2 0x4AD0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x4AE2 PUSH2 0x1834 JUMP JUMPDEST POP DUP1 PUSH2 0x4AFD PUSH2 0x4AF7 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x350 JUMP JUMPDEST SWAP2 PUSH2 0x350 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x4B0A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x4B14 SWAP2 POP PUSH2 0x3FD7 JUMP JUMPDEST CODESIZE PUSH2 0x4B06 JUMP JUMPDEST PUSH2 0x4B38 SWAP2 PUSH1 0x1 PUSH2 0x4B33 SWAP3 PUSH2 0x4B2C PUSH2 0x1834 JUMP JUMPDEST POP ADD PUSH2 0x4651 JUMP JUMPDEST PUSH2 0x324A JUMP JUMPDEST PUSH2 0x4B4B PUSH2 0x4B45 PUSH1 0x0 PUSH2 0x31C8 JUMP JUMPDEST SWAP2 PUSH2 0x2A2 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT ADDMOD DUP1 PUSH17 0x2FE6072BA72743479D7976A506937A4E7 JUMP 0xAA EXP 0xEF PUSH11 0xD714BEF8804E64736F6C63 NUMBER STOP ADDMOD SHL STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "347:2366:41:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;554:174::-;;;:::i;:::-;632:18;;:::i;:::-;;;;;;;347:2366;;;;;632:18;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;693:13;708:12;612:38;693:13;:::i;:::-;708:12;:::i;:::-;554:174::o;632:18::-;;:::i;:::-;;:::i;689:2159:32:-;;;:::i;:::-;:::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;347:2366:41:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;961:189:32:-;1056:37;;:::i;:::-;;;;;;;;347:2366:41;;;;;1056:37:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1047:46;1130:12;1047:46;;;:::i;:::-;1130:12;:::i;:::-;961:189::o;1056:37::-;;:::i;:::-;;:::i;347:2366:41:-;;;:::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;347:2366:41:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 315,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 212,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_stringt_stringt_stringt_addresst_uint96t_addresst_bytes32": {
                  "entryPoint": 875,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 9
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 694,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 860,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 1482,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_string": {
                  "entryPoint": 748,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint96": {
                  "entryPoint": 821,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_bytes": {
                  "entryPoint": 3368,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_string_string_string_address_uint96_address_bytes32": {
                  "entryPoint": 1803,
                  "id": null,
                  "parameterSlots": 9,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address_nonPadded_inplace": {
                  "entryPoint": 3098,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes": {
                  "entryPoint": 3124,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bytes32": {
                  "entryPoint": 3047,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1790,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_memory_ptr": {
                  "entryPoint": 3319,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon": {
                  "entryPoint": 468,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_packed_bytes32_address_address_bytes": {
                  "entryPoint": 3165,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1728,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2934,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1247": {
                  "entryPoint": 4264,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 2717,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8714": {
                  "entryPoint": 4395,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 2909,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f": {
                  "entryPoint": 4158,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4132,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 258,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1105,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 4421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_1247": {
                  "entryPoint": 4289,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 2743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint96": {
                  "entryPoint": 1777,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_memory": {
                  "entryPoint": 626,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1947,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 647,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_bytes": {
                  "entryPoint": 1937,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 1678,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 3310,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes_nonPadded_inplace": {
                  "entryPoint": 3119,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 1682,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 179,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 836,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 2447,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_UpgradeableBeacon": {
                  "entryPoint": 335,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 2374,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 168,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 3219,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint96": {
                  "entryPoint": 783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_payable_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3286,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 3773,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address_payable": {
                  "entryPoint": 3262,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_ERC1155Items": {
                  "entryPoint": 2006,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_Create2_to_address": {
                  "entryPoint": 4080,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC1155Items_to_address": {
                  "entryPoint": 2018,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ITransparentUpgradeableBeaconProxy_to_address": {
                  "entryPoint": 3298,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 443,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2405,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2377,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 3222,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1983,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 431,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address_payable": {
                  "entryPoint": 3250,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ERC1155Items": {
                  "entryPoint": 1994,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3274,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 682,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1970,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 1691,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_beacon": {
                  "entryPoint": 490,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_deploy": {
                  "entryPoint": 1127,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_determineAddress": {
                  "entryPoint": 1294,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 1241,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 1190,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 1357,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeBeacon": {
                  "entryPoint": 264,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_contract_UpgradeableBeacon": {
                  "entryPoint": 346,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 2458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_UpgradeableBeacon": {
                  "entryPoint": 1438,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 585,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__transferOwnership": {
                  "entryPoint": 3820,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 3000,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_computeAddress": {
                  "entryPoint": 4657,
                  "id": 1772,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_computeAddress_1758": {
                  "entryPoint": 4624,
                  "id": 1758,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_computeProxyAddress": {
                  "entryPoint": 3917,
                  "id": 7678,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_createProxy": {
                  "entryPoint": 3421,
                  "id": 7635,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy": {
                  "entryPoint": 4487,
                  "id": 1738,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy_8991": {
                  "entryPoint": 2030,
                  "id": 8991,
                  "parameterSlots": 9,
                  "returnSlots": 1
                },
                "fun_determineAddress": {
                  "entryPoint": 2513,
                  "id": 9038,
                  "parameterSlots": 9,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 4067,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 2491,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 2437,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 2417,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 2858,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 2809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon": {
                  "entryPoint": 1662,
                  "id": 7693,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon_inner": {
                  "entryPoint": 1515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "getter_fun_beacon": {
                  "entryPoint": 384,
                  "id": 7553,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 400,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_address": {
                  "entryPoint": 3086,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_bytes32": {
                  "entryPoint": 3044,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_uint160": {
                  "entryPoint": 3074,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 1413,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_597": {
                  "entryPoint": 2356,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 2620,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 563,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3785,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_contract_UpgradeableBeacon": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 2478,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_UpgradeableBeacon": {
                  "entryPoint": 1458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 4314,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 2768,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_8714": {
                  "entryPoint": 4446,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9924": {
                  "entryPoint": 2959,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f94f": {
                  "entryPoint": 4183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 1471,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 543,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1408,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 548,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 163,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 1498,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 553,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 3740,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 1476,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_96": {
                  "entryPoint": 3068,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 1432,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 331,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "store_literal_in_memory_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0": {
                  "entryPoint": 4224,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 2639,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676": {
                  "entryPoint": 4355,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 2869,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3746,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3788,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 839,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint96": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 1673,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610580565b61001e60003561008d565b80631bce45831461008857806359659e901461008357806359a347bd1461007e578063715018a6146100795780638da5cb5b14610074578063cfcc59411461006f5763f2fde38b0361000e5761054d565b61050e565b6104d9565b6104a6565b610467565b6101ea565b610108565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b6100bc906100a8565b90565b6100c8816100b3565b036100cf57565b600080fd5b905035906100e1826100bf565b565b906020828203126100fd576100fa916000016100d4565b90565b61009e565b60000190565b346101365761012061011b3660046100e3565b61067e565b610128610093565b8061013281610102565b0390f35b610099565b600091031261014657565b61009e565b1c90565b60018060a01b031690565b61016a90600861016f930261014b565b61014f565b90565b9061017d915461015a565b90565b61018d6001600090610172565b90565b90565b6101a76101a26101ac926100a8565b610190565b6100a8565b90565b6101b890610193565b90565b6101c4906101af565b90565b6101d0906101bb565b9052565b91906101e8906000602085019401906101c7565b565b3461021a576101fa36600461013b565b610216610205610180565b61020d610093565b918291826101d4565b0390f35b610099565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061025390610229565b810190811067ffffffffffffffff82111761026d57604052565b610233565b9061028561027e610093565b9283610249565b565b67ffffffffffffffff81116102a5576102a1602091610229565b0190565b610233565b90826000939282370152565b909291926102cb6102c682610287565b610272565b938185526020850190828401116102e7576102e5926102aa565b565b610224565b9080601f8301121561030a57816020610307933591016102b6565b90565b61021f565b6bffffffffffffffffffffffff1690565b6103298161030f565b0361033057565b600080fd5b9050359061034282610320565b565b90565b61035081610344565b0361035757565b600080fd5b9050359061036982610347565b565b90916101208284031261043f5761038583600084016100d4565b9261039381602085016100d4565b92604081013567ffffffffffffffff811161043a57826103b49183016102ec565b92606082013567ffffffffffffffff811161043557836103d59184016102ec565b92608083013567ffffffffffffffff811161043057816103f69185016102ec565b926104048260a083016100d4565b9261042d6104158460c08501610335565b936104238160e086016100d4565b936101000161035c565b90565b6100a3565b6100a3565b6100a3565b61009e565b61044d906100b3565b9052565b919061046590600060208501940190610444565b565b346104a15761049d61048c61047d36600461036b565b979690969591959492946107ee565b610494610093565b91829182610451565b0390f35b610099565b346104d4576104b636600461013b565b6104be610985565b6104c6610093565b806104d081610102565b0390f35b610099565b34610509576104e936600461013b565b6105056104f46109bb565b6104fc610093565b91829182610451565b0390f35b610099565b346105485761054461053361052436600461036b565b979690969591959492946109d1565b61053b610093565b91829182610451565b0390f35b610099565b3461057b576105656105603660046100e3565b610b2a565b61056d610093565b8061057781610102565b0390f35b610099565b600080fd5b61059690610591610bb8565b6105eb565b565b60001c90565b6105aa6105af91610598565b61014f565b90565b6105bc905461059e565b90565b600080fd5b60e01b90565b60009103126105d557565b61009e565b6105e2610093565b3d6000823e3d90fd5b6105fd6105f860016105b2565b6101bb565b90633659cfe690823b15610679576106359261062a6000809461061e610093565b968795869485936105c4565b835260048301610451565b03925af1801561067457610647575b50565b6106679060003d811161066d575b61065f8183610249565b8101906105ca565b38610644565b503d610655565b6105da565b6105bf565b61068790610585565b565b600090565b5190565b60209181520190565b60005b8381106106af575050906000910152565b80602091830151818501520161069e565b6106df6106e86020936106ed936106d68161068e565b93848093610692565b9586910161069b565b610229565b0190565b6106fa9061030f565b9052565b61070790610344565b9052565b939561077461076960e0979b9a9861075b6107889761074d8a61078f9e9961073f61077e9a60006101008501940190610444565b8c60208184039101526106c0565b908a820360408c01526106c0565b9088820360608a01526106c0565b9a6080870190610444565b60a08501906106f1565b60c0830190610444565b01906106fe565b565b60200190565b5190565b906107ad6107a883610287565b610272565b918252565b6107bc600061079b565b90565b6107c76107b2565b90565b6107d390610193565b90565b6107df906107ca565b90565b6107eb906101af565b90565b61085e9098949897969397959295610804610689565b508861083c8461082d8d8a8d8d96928b908d929394610821610093565b998a9860208a0161070b565b60208201810382520382610249565b61084e61084882610797565b91610791565b20906108586107bf565b91610d5d565b9761087061086b8a6107d6565b6107e2565b94638ff83ac192969891939497863b1561092f576000986108a5968a966108b095610899610093565b9d8e9c8d9b8c9a6105c4565b8a5260048a0161070b565b03925af1801561092a576108fd575b50806108f77f28a530eb465a41faf2a923830d2cd4e0301e87b2cddc112bda1a86048c3a54b2916108ee610093565b91829182610451565b0390a190565b61091d9060003d8111610923575b6109158183610249565b8101906105ca565b386108bf565b503d61090b565b6105da565b6105bf565b61093c610bb8565b610944610971565b565b90565b61095d61095861096292610946565b610190565b6100a8565b90565b61096e90610949565b90565b61098361097e6000610965565b610eec565b565b61098d610934565b565b60018060a01b031690565b6109a66109ab91610598565b61098f565b90565b6109b8905461099a565b90565b6109c3610689565b506109ce60006109ae565b90565b96610a089396610a1796610a399a939694966109eb610689565b5096989490919293946109fc610093565b998a9860208a0161070b565b60208201810382520382610249565b610a29610a2382610797565b91610791565b2090610a336107bf565b91610f4d565b90565b610a4d90610a48610bb8565b610af9565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610aaa6026604092610692565b610ab381610a4f565b0190565b610acd9060208101906000818303910152610a9d565b90565b15610ad757565b610adf610093565b62461bcd60e51b815280610af560048201610ab7565b0390fd5b610b2890610b2381610b1c610b16610b116000610965565b6100b3565b916100b3565b1415610ad0565b610eec565b565b610b3390610a3c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610b6960208092610692565b610b7281610b35565b0190565b610b8c9060208101906000818303910152610b5d565b90565b15610b9657565b610b9e610093565b62461bcd60e51b815280610bb460048201610b76565b0390fd5b610be2610bc36109bb565b610bdc610bd6610bd1610fe3565b6100b3565b916100b3565b14610b8f565b565b90565b610bf3610bf891610344565b610be4565b9052565b60601b90565b610c0b90610bfc565b90565b610c1790610c02565b90565b610c26610c2b916100b3565b610c0e565b9052565b905090565b610c59610c5092602092610c4781610797565b94858093610c2f565b9384910161069b565b0190565b60148093610c81602084610c79610c8996610c909b9a98610be7565b018092610c1a565b018092610c1a565b0190610c34565b90565b90565b610caa610ca5610caf92610946565b610190565b610c93565b90565b610cbb90610193565b90565b610cc790610cb2565b90565b610cd390610193565b90565b610cdf90610cca565b90565b610ceb906101af565b90565b60209181520190565b610d16610d1f602093610d2493610d0d81610797565b93848093610cee565b9586910161069b565b610229565b0190565b610d4d610d5a949293610d4360608401956000850190610444565b6020830190610444565b6040818403910152610cf7565b90565b610ded9093929193610d6d610689565b50610dad8591610d9e610d88610d8360016105b2565b6101bb565b8690610d92610093565b95869460208601610c5d565b60208201810382520382610249565b610dbf610db982610797565b91610791565b2061148a610dcf60208201610272565b9080825261125b6020830139610de86000929192610c96565b611187565b92610e07610e02610dfd86610cbe565b610cd6565b610ce2565b63cf7a1d779190610e20610e1b60016105b2565b6101bb565b9392813b15610e97576000610e4891610e538296610e3c610093565b988997889687956105c4565b855260048501610d28565b03925af18015610e9257610e65575b50565b610e859060003d8111610e8b575b610e7d8183610249565b8101906105ca565b38610e62565b503d610e73565b6105da565b6105bf565b60001b90565b90610eb360018060a01b0391610e9c565b9181191691161790565b610ec6906101af565b90565b90565b90610ee1610edc610ee892610ebd565b610ec9565b8254610ea2565b9055565b610ef660006109ae565b610f01826000610ecc565b90610f35610f2f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610ebd565b91610ebd565b91610f3e610093565b80610f4881610102565b0390a3565b610fe09291610f8a610f9992610f61610689565b509193610f76610f7160016105b2565b6101bb565b610f7e610093565b95869460208601610c5d565b60208201810382520382610249565b610fab610fa582610797565b91610791565b2061148a610fbb60208201610272565b9080825261125b6020830139610fd9610fd382610797565b91610791565b2090611210565b90565b610feb610689565b503390565b610ff9906101af565b90565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b611031601d602092610692565b61103a81610ffc565b0190565b6110549060208101906000818303910152611024565b90565b1561105e57565b611066610093565b62461bcd60e51b81528061107c6004820161103e565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b6110b460208092610692565b6110bd81611080565b0190565b6110d790602081019060008183039101526110a8565b90565b156110e157565b6110e9610093565b62461bcd60e51b8152806110ff600482016110c1565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b6111386019602092610692565b61114181611103565b0190565b61115b906020810190600081830391015261112b565b90565b1561116557565b61116d610093565b62461bcd60e51b81528061118360048201611145565b0390fd5b919091611192610689565b506111b961119f30610ff0565b316111b26111ac84610c93565b91610c93565b1015611057565b6111df6111c583610797565b6111d86111d26000610c96565b91610c93565b14156110da565b60208251920190f59061120e826112076112016111fc6000610965565b6100b3565b916100b3565b141561115e565b565b9061122e9161121d610689565b509061122830610ff0565b91611231565b90565b90605592600b92611240610689565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a2646970667358221220d353a28a00a09393e3bdd337ef6c721c7f72d7ebad899d5249255dd6e73f45d064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x580 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59A347BD EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0xCFCC5941 EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x54D JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST PUSH2 0x4D9 JUMP JUMPDEST PUSH2 0x4A6 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xFD JUMPI PUSH2 0xFA SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x136 JUMPI PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x67E JUMP JUMPDEST PUSH2 0x128 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x132 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x146 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x16A SWAP1 PUSH1 0x8 PUSH2 0x16F SWAP4 MUL PUSH2 0x14B JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17D SWAP2 SLOAD PUSH2 0x15A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18D PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x172 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0x1A2 PUSH2 0x1AC SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C4 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D0 SWAP1 PUSH2 0x1BB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E8 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1C7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21A JUMPI PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x216 PUSH2 0x205 PUSH2 0x180 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D4 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x253 SWAP1 PUSH2 0x229 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x26D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST SWAP1 PUSH2 0x285 PUSH2 0x27E PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x249 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2A5 JUMPI PUSH2 0x2A1 PUSH1 0x20 SWAP2 PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2CB PUSH2 0x2C6 DUP3 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x2E7 JUMPI PUSH2 0x2E5 SWAP3 PUSH2 0x2AA JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x30A JUMPI DUP2 PUSH1 0x20 PUSH2 0x307 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2B6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x329 DUP2 PUSH2 0x30F JUMP JUMPDEST SUB PUSH2 0x330 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x342 DUP3 PUSH2 0x320 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x350 DUP2 PUSH2 0x344 JUMP JUMPDEST SUB PUSH2 0x357 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x369 DUP3 PUSH2 0x347 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x120 DUP3 DUP5 SUB SLT PUSH2 0x43F JUMPI PUSH2 0x385 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x393 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43A JUMPI DUP3 PUSH2 0x3B4 SWAP2 DUP4 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x435 JUMPI DUP4 PUSH2 0x3D5 SWAP2 DUP5 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x430 JUMPI DUP2 PUSH2 0x3F6 SWAP2 DUP6 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP3 PUSH2 0x404 DUP3 PUSH1 0xA0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x42D PUSH2 0x415 DUP5 PUSH1 0xC0 DUP6 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 PUSH2 0x423 DUP2 PUSH1 0xE0 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH2 0x100 ADD PUSH2 0x35C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x44D SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x465 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4A1 JUMPI PUSH2 0x49D PUSH2 0x48C PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x36B JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x7EE JUMP JUMPDEST PUSH2 0x494 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4D4 JUMPI PUSH2 0x4B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x4BE PUSH2 0x985 JUMP JUMPDEST PUSH2 0x4C6 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x4D0 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x509 JUMPI PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x505 PUSH2 0x4F4 PUSH2 0x9BB JUMP JUMPDEST PUSH2 0x4FC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x548 JUMPI PUSH2 0x544 PUSH2 0x533 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x36B JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x53B PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x57B JUMPI PUSH2 0x565 PUSH2 0x560 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x56D PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x577 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x596 SWAP1 PUSH2 0x591 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x5AA PUSH2 0x5AF SWAP2 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5BC SWAP1 SLOAD PUSH2 0x59E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x5D5 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5FD PUSH2 0x5F8 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x679 JUMPI PUSH2 0x635 SWAP3 PUSH2 0x62A PUSH1 0x0 DUP1 SWAP5 PUSH2 0x61E PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x5C4 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x451 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x674 JUMPI PUSH2 0x647 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x667 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x66D JUMPI JUMPDEST PUSH2 0x65F DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0x644 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x655 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x687 SWAP1 PUSH2 0x585 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x6AF JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x69E JUMP JUMPDEST PUSH2 0x6DF PUSH2 0x6E8 PUSH1 0x20 SWAP4 PUSH2 0x6ED SWAP4 PUSH2 0x6D6 DUP2 PUSH2 0x68E JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x692 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x6FA SWAP1 PUSH2 0x30F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x707 SWAP1 PUSH2 0x344 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP4 SWAP6 PUSH2 0x774 PUSH2 0x769 PUSH1 0xE0 SWAP8 SWAP12 SWAP11 SWAP9 PUSH2 0x75B PUSH2 0x788 SWAP8 PUSH2 0x74D DUP11 PUSH2 0x78F SWAP15 SWAP10 PUSH2 0x73F PUSH2 0x77E SWAP11 PUSH1 0x0 PUSH2 0x100 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST DUP13 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP1 DUP11 DUP3 SUB PUSH1 0x40 DUP13 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x60 DUP11 ADD MSTORE PUSH2 0x6C0 JUMP JUMPDEST SWAP11 PUSH1 0x80 DUP8 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x6F1 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST ADD SWAP1 PUSH2 0x6FE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x7AD PUSH2 0x7A8 DUP4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x7BC PUSH1 0x0 PUSH2 0x79B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7C7 PUSH2 0x7B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7D3 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7DF SWAP1 PUSH2 0x7CA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EB SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x85E SWAP1 SWAP9 SWAP5 SWAP9 SWAP8 SWAP7 SWAP4 SWAP8 SWAP6 SWAP3 SWAP6 PUSH2 0x804 PUSH2 0x689 JUMP JUMPDEST POP DUP9 PUSH2 0x83C DUP5 PUSH2 0x82D DUP14 DUP11 DUP14 DUP14 SWAP7 SWAP3 DUP12 SWAP1 DUP14 SWAP3 SWAP4 SWAP5 PUSH2 0x821 PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 PUSH1 0x20 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0x84E PUSH2 0x848 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x858 PUSH2 0x7BF JUMP JUMPDEST SWAP2 PUSH2 0xD5D JUMP JUMPDEST SWAP8 PUSH2 0x870 PUSH2 0x86B DUP11 PUSH2 0x7D6 JUMP JUMPDEST PUSH2 0x7E2 JUMP JUMPDEST SWAP5 PUSH4 0x8FF83AC1 SWAP3 SWAP7 SWAP9 SWAP2 SWAP4 SWAP5 SWAP8 DUP7 EXTCODESIZE ISZERO PUSH2 0x92F JUMPI PUSH1 0x0 SWAP9 PUSH2 0x8A5 SWAP7 DUP11 SWAP7 PUSH2 0x8B0 SWAP6 PUSH2 0x899 PUSH2 0x93 JUMP JUMPDEST SWAP14 DUP15 SWAP13 DUP14 SWAP12 DUP13 SWAP11 PUSH2 0x5C4 JUMP JUMPDEST DUP11 MSTORE PUSH1 0x4 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x92A JUMPI PUSH2 0x8FD JUMPI JUMPDEST POP DUP1 PUSH2 0x8F7 PUSH32 0x28A530EB465A41FAF2A923830D2CD4E0301E87B2CDDC112BDA1A86048C3A54B2 SWAP2 PUSH2 0x8EE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x451 JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x91D SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x923 JUMPI JUMPDEST PUSH2 0x915 DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0x8BF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x90B JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH2 0x93C PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x944 PUSH2 0x971 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95D PUSH2 0x958 PUSH2 0x962 SWAP3 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x96E SWAP1 PUSH2 0x949 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x983 PUSH2 0x97E PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x98D PUSH2 0x934 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x9A6 PUSH2 0x9AB SWAP2 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x98F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B8 SWAP1 SLOAD PUSH2 0x99A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C3 PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0x9CE PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP7 PUSH2 0xA08 SWAP4 SWAP7 PUSH2 0xA17 SWAP7 PUSH2 0xA39 SWAP11 SWAP4 SWAP7 SWAP5 SWAP7 PUSH2 0x9EB PUSH2 0x689 JUMP JUMPDEST POP SWAP7 SWAP9 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x9FC PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 PUSH1 0x20 DUP11 ADD PUSH2 0x70B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xA29 PUSH2 0xA23 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xA33 PUSH2 0x7BF JUMP JUMPDEST SWAP2 PUSH2 0xF4D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA4D SWAP1 PUSH2 0xA48 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAF9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAAA PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0xAB3 DUP2 PUSH2 0xA4F JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xACD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA9D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAD7 JUMPI JUMP JUMPDEST PUSH2 0xADF PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xAF5 PUSH1 0x4 DUP3 ADD PUSH2 0xAB7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB28 SWAP1 PUSH2 0xB23 DUP2 PUSH2 0xB1C PUSH2 0xB16 PUSH2 0xB11 PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xAD0 JUMP JUMPDEST PUSH2 0xEEC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xB33 SWAP1 PUSH2 0xA3C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xB69 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0xB72 DUP2 PUSH2 0xB35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB8C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB96 JUMPI JUMP JUMPDEST PUSH2 0xB9E PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xBB4 PUSH1 0x4 DUP3 ADD PUSH2 0xB76 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE2 PUSH2 0xBC3 PUSH2 0x9BB JUMP JUMPDEST PUSH2 0xBDC PUSH2 0xBD6 PUSH2 0xBD1 PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xB8F JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBF3 PUSH2 0xBF8 SWAP2 PUSH2 0x344 JUMP JUMPDEST PUSH2 0xBE4 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC0B SWAP1 PUSH2 0xBFC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC17 SWAP1 PUSH2 0xC02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC26 PUSH2 0xC2B SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xC0E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC59 PUSH2 0xC50 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xC47 DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xC2F JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xC81 PUSH1 0x20 DUP5 PUSH2 0xC79 PUSH2 0xC89 SWAP7 PUSH2 0xC90 SWAP12 SWAP11 SWAP9 PUSH2 0xBE7 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC1A JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC1A JUMP JUMPDEST ADD SWAP1 PUSH2 0xC34 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCAA PUSH2 0xCA5 PUSH2 0xCAF SWAP3 PUSH2 0x946 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCBB SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCC7 SWAP1 PUSH2 0xCB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCD3 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCDF SWAP1 PUSH2 0xCCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCEB SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xD16 PUSH2 0xD1F PUSH1 0x20 SWAP4 PUSH2 0xD24 SWAP4 PUSH2 0xD0D DUP2 PUSH2 0x797 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xCEE JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x69B JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD4D PUSH2 0xD5A SWAP5 SWAP3 SWAP4 PUSH2 0xD43 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCF7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDED SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xD6D PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0xDAD DUP6 SWAP2 PUSH2 0xD9E PUSH2 0xD88 PUSH2 0xD83 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xD92 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xDBF PUSH2 0xDB9 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xDCF PUSH1 0x20 DUP3 ADD PUSH2 0x272 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x125B PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xDE8 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xC96 JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST SWAP3 PUSH2 0xE07 PUSH2 0xE02 PUSH2 0xDFD DUP7 PUSH2 0xCBE JUMP JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xE20 PUSH2 0xE1B PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xE97 JUMPI PUSH1 0x0 PUSH2 0xE48 SWAP2 PUSH2 0xE53 DUP3 SWAP7 PUSH2 0xE3C PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x5C4 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xD28 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE92 JUMPI PUSH2 0xE65 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xE85 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE8B JUMPI JUMPDEST PUSH2 0xE7D DUP2 DUP4 PUSH2 0x249 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5CA JUMP JUMPDEST CODESIZE PUSH2 0xE62 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEB3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xE9C JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xEC6 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEE1 PUSH2 0xEDC PUSH2 0xEE8 SWAP3 PUSH2 0xEBD JUMP JUMPDEST PUSH2 0xEC9 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xEA2 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEF6 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0xF01 DUP3 PUSH1 0x0 PUSH2 0xECC JUMP JUMPDEST SWAP1 PUSH2 0xF35 PUSH2 0xF2F PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xEBD JUMP JUMPDEST SWAP2 PUSH2 0xEBD JUMP JUMPDEST SWAP2 PUSH2 0xF3E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xF48 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0xFE0 SWAP3 SWAP2 PUSH2 0xF8A PUSH2 0xF99 SWAP3 PUSH2 0xF61 PUSH2 0x689 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xF76 PUSH2 0xF71 PUSH1 0x1 PUSH2 0x5B2 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST PUSH2 0xF7E PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC5D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x249 JUMP JUMPDEST PUSH2 0xFAB PUSH2 0xFA5 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xFBB PUSH1 0x20 DUP3 ADD PUSH2 0x272 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x125B PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xFD9 PUSH2 0xFD3 DUP3 PUSH2 0x797 JUMP JUMPDEST SWAP2 PUSH2 0x791 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x1210 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFEB PUSH2 0x689 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0xFF9 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1031 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x103A DUP2 PUSH2 0xFFC JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1054 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1024 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x105E JUMPI JUMP JUMPDEST PUSH2 0x1066 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x107C PUSH1 0x4 DUP3 ADD PUSH2 0x103E JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10B4 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x10BD DUP2 PUSH2 0x1080 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x10D7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x10E1 JUMPI JUMP JUMPDEST PUSH2 0x10E9 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10FF PUSH1 0x4 DUP3 ADD PUSH2 0x10C1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1138 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x692 JUMP JUMPDEST PUSH2 0x1141 DUP2 PUSH2 0x1103 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x115B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x112B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1165 JUMPI JUMP JUMPDEST PUSH2 0x116D PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1183 PUSH1 0x4 DUP3 ADD PUSH2 0x1145 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1192 PUSH2 0x689 JUMP JUMPDEST POP PUSH2 0x11B9 PUSH2 0x119F ADDRESS PUSH2 0xFF0 JUMP JUMPDEST BALANCE PUSH2 0x11B2 PUSH2 0x11AC DUP5 PUSH2 0xC93 JUMP JUMPDEST SWAP2 PUSH2 0xC93 JUMP JUMPDEST LT ISZERO PUSH2 0x1057 JUMP JUMPDEST PUSH2 0x11DF PUSH2 0x11C5 DUP4 PUSH2 0x797 JUMP JUMPDEST PUSH2 0x11D8 PUSH2 0x11D2 PUSH1 0x0 PUSH2 0xC96 JUMP JUMPDEST SWAP2 PUSH2 0xC93 JUMP JUMPDEST EQ ISZERO PUSH2 0x10DA JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x120E DUP3 PUSH2 0x1207 PUSH2 0x1201 PUSH2 0x11FC PUSH1 0x0 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x115E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x122E SWAP2 PUSH2 0x121D PUSH2 0x689 JUMP JUMPDEST POP SWAP1 PUSH2 0x1228 ADDRESS PUSH2 0xFF0 JUMP JUMPDEST SWAP2 PUSH2 0x1231 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x1240 PUSH2 0x689 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 MSTORE8 LOG2 DUP11 STOP LOG0 SWAP4 SWAP4 0xE3 0xBD 0xD3 CALLDATACOPY 0xEF PUSH13 0x721C7F72D7EBAD899D5249255D 0xD6 0xE7 EXTCODEHASH GASLIMIT 0xD0 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "347:2366:41:-:0;;;;;;;;;-1:-1:-1;347:2366:41;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;746:31:32:-;;;;;;:::i;:::-;;:::o;347:2366:41:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;347:2366:41:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;2718:127:32;2806:16;:6;;;:::i;:::-;:16;:::i;:::-;;;2823:14;2806:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;2718:127;;:::o;2806:32::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;2718:127::-;;;;:::i;:::-;:::o;347:2366:41:-;;;:::o;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;784:1099::-;1496:34;784:1099;;;;;;;;;;;1121:17;;:::i;:::-;1216:10;;1188:276;1216:10;1188:276;1244:4;;;;1266:7;1291:11;1320:15;1353:19;;1390:21;1429;1188:276;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1165:309;;;;:::i;:::-;;;:::i;:::-;;1515:10;1496:34;;:::i;:::-;;;:::i;:::-;1553:9;1540:34;:23;1553:9;1540:23;:::i;:::-;:34;:::i;:::-;;;1588:10;1612:4;1630:7;1651:11;1676:15;1705:19;1738:21;1540:264;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;784:1099;1840:9;;1819:31;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1860:16;:::o;1540:264::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;347:2366:41:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;347:2366:41:-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1201:85:4:-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1939:771:41:-;;2358:276;1939:771;;2358:276;1939:771;2661:42;1939:771;;;;;2291:17;;:::i;:::-;2386:10;2414:4;2436:7;2461:11;2490:15;2523:19;2560:21;2599;2358:276;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2335:309;;;;:::i;:::-;;;:::i;:::-;;2688:10;2661:42;;:::i;:::-;;;:::i;:::-;2654:49;:::o;1063:62:4:-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;347:2366:41:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;347:2366:41:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;347:2366:41:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;1424:523:32:-;1786:39;1424:523;;;;;1550:20;;:::i;:::-;1630:5;1613:60;1637:11;1658:6;1613:60;1650:15;1658:6;;;:::i;:::-;1650:15;:::i;:::-;1667:5;1613:60;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1603:71;;;;:::i;:::-;;;:::i;:::-;;1708:52;;;;;;:::i;:::-;;;;;;;;;;1786:39;1801:1;1804:10;1816:8;1786:39;;:::i;:::-;;:::i;:::-;1878:12;1835:68;:57;1870:21;1878:12;1870:21;:::i;:::-;1835:57;:::i;:::-;:68;:::i;:::-;;1904:11;1925:6;1917:15;1925:6;;;:::i;:::-;1917:15;:::i;:::-;1934:5;1835:105;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;1424:523;;:::o;1835:105::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;347:2366:41:-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;2174:419:32:-;2538:48;2174:419;;2363:60;;2174:419;2313:7;;:::i;:::-;2380:5;2387:11;2408:6;2400:15;2408:6;;;:::i;:::-;2400:15;:::i;:::-;2363:60;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2353:71;;;;:::i;:::-;;;:::i;:::-;;2467:52;;;;;;:::i;:::-;;;;;;;;;;2457:63;;;;:::i;:::-;;;:::i;:::-;;2538:48;;:::i;:::-;2531:55;:::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;347:2366:41:-;;;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1081:484:15;;;;1168:12;;:::i;:::-;1208:4;1192:73;1200:13;1208:4;1200:13;:::i;:::-;:21;:31;;1225:6;1200:31;:::i;:::-;;;:::i;:::-;;;1192:73;:::i;:::-;1275:65;1283:15;:8;:15;:::i;:::-;:20;;1302:1;1283:20;:::i;:::-;;;:::i;:::-;;;1275:65;:::i;:::-;1393:100;;;;;;;1510:4;1502:56;1510:4;:18;;1518:10;1526:1;1518:10;:::i;:::-;1510:18;:::i;:::-;;;:::i;:::-;;;1502:56;:::i;:::-;1081:484::o;1769:165::-;;1878:49;1769:165;1852:7;;:::i;:::-;1893:4;1899:12;1913:13;1921:4;1913:13;:::i;:::-;1878:49;;:::i;:::-;1871:56;:::o;2177:1772::-;;2345:1598;2177:1772;2345:1598;2177:1772;2278:12;;:::i;:::-;2345:1598;;;;;;;;;;;;;;;;;;;2177:1772;:::o"
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": "59a347bd",
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": "cfcc5941",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC1155ItemsDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryOwner\":\"The owner of the ERC-1155 Items Factory\"}},\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-1155 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates an ERC-1155 Items Factory.\"},\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-1155 Items proxy.\"},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"},\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"Deployer of ERC-1155 Items proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol\":\"ERC1155ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// - The ERC1155 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - The transfer functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                mstore(add(m, 0xc0), data.length)\\n                calldatacopy(add(m, 0xe0), data.offset, data.length)\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, ids.length) } i {} {\\n                    i := sub(i, 0x20)\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0x40), ids.length)\\n                calldatacopy(add(m, 0x60), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x60, n))\\n                let o := add(add(m, n), 0x60)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Do the emit.\\n                log4(m, add(add(n, n), 0x80), _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                mstore(0x00, to) // Cache `to` to prevent stack too deep.\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := shl(5, ids.length)\\n                mstore(add(m, 0xc0), ids.length)\\n                calldatacopy(add(m, 0xe0), ids.offset, n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x80), add(0xc0, n))\\n                let o := add(add(m, n), 0xe0)\\n                mstore(o, ids.length)\\n                calldatacopy(add(o, 0x20), amounts.offset, n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(add(0xe0, n), n))\\n                o := add(add(o, n), 0x20)\\n                mstore(o, data.length)\\n                calldatacopy(add(o, 0x20), data.offset, data.length)\\n                let nAll := add(0x104, add(data.length, add(n, n)))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), mload(0x00), 0, add(mload(0x40), 0x1c), nAll, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(m, 0x00, returndatasize())\\n                        revert(m, returndatasize())\\n                    }\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let i := shl(5, ids.length)\\n            mstore(0x40, add(i, o))\\n            // Loop through all the `ids` and load the balances.\\n            for {} i {} {\\n                i := sub(i, 0x20)\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `from`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Received}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferSingle} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReceived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                for { let i := shl(5, mload(ids)) } i { i := sub(i, 0x20) } {\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// This is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x306249cc3611727ffa9e15ec816282a60fd9629e5ea03ab1c780d638d1537c68\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"},\"src/tokens/ERC1155/ERC1155BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\nimport { ERC1155, ERC1155Supply } from \\\"./extensions/supply/ERC1155Supply.sol\\\";\\n\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-1155 for use in Sequence library contracts.\\n */\\nabstract contract ERC1155BaseToken is ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string public name;\\n    string public baseURI;\\n    string public contractURI;\\n\\n    /**\\n     * Deploy contract.\\n     */\\n    constructor() { }\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner Owner address.\\n     * @param tokenName Token name.\\n     * @param tokenBaseURI Base URI for token metadata.\\n     * @param tokenContractURI Contract URI for token metadata.\\n     * @param implicitModeValidator Implicit session validator address.\\n     * @param implicitModeProjectId Implicit session project id.\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        name = tokenName;\\n        baseURI = tokenBaseURI;\\n        contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /// @inheritdoc ERC1155\\n    function uri(\\n        uint256 _id\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, LibString.toString(_id), \\\".json\\\"));\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        baseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the name of the contract.\\n     * @param tokenName New contract name\\n     */\\n    function setContractName(\\n        string memory tokenName\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        name = tokenName;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param tokenId Id of token to burn\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 tokenId, uint256 amount) public virtual {\\n        _burn(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\\n     * @param tokenIds Array of token ids to burn\\n     * @param amounts Array of the amount to be burned\\n     */\\n    function batchBurn(uint256[] memory tokenIds, uint256[] memory amounts) public virtual {\\n        super._batchBurn(msg.sender, tokenIds, amounts);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Supply, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC1155Supply.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd8b3a384ddc6305b5663ddbb0622b1a46d01460412508a5c4e0933cf932af790\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC1155Supply, IERC1155SupplyFunctions } from \\\"./IERC1155Supply.sol\\\";\\n\\nimport { ERC1155 } from \\\"solady/tokens/ERC1155.sol\\\";\\n\\n/**\\n * An ERC-1155 extension that tracks token supply.\\n */\\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\\n\\n    // Current supply\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public tokenSupply;\\n\\n    /**\\n     * Mint _amount of tokens of a given id\\n     * @param _to The address to mint tokens to\\n     * @param _id Token id to mint\\n     * @param _amount The amount to be minted\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual override {\\n        super._mint(_to, _id, _amount, _data);\\n\\n        totalSupply += _amount;\\n        tokenSupply[_id] += _amount;\\n    }\\n\\n    /**\\n     * Mint tokens for each ids in _ids\\n     * @param _to The address to mint tokens to\\n     * @param _ids Array of ids to mint\\n     * @param _amounts Array of amount of tokens to mint per id\\n     * @param _data Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override {\\n        super._batchMint(_to, _ids, _amounts, _data);\\n\\n        uint256 nMint = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nMint; i++) {\\n            totalAmount += _amounts[i];\\n            tokenSupply[_ids[i]] += _amounts[i];\\n        }\\n        totalSupply += totalAmount;\\n    }\\n\\n    /**\\n     * Burn _amount of tokens of a given token id\\n     * @param _from The address to burn tokens from\\n     * @param _id Token id to burn\\n     * @param _amount The amount to be burned\\n     */\\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual override {\\n        super._burn(_from, _id, _amount);\\n\\n        totalSupply -= _amount;\\n        tokenSupply[_id] -= _amount;\\n    }\\n\\n    /**\\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from The address to burn tokens from\\n     * @param _ids Array of token ids to burn\\n     * @param _amounts Array of the amount to be burned\\n     */\\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual override {\\n        super._batchBurn(_from, _ids, _amounts);\\n\\n        uint256 nBurn = _ids.length;\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            tokenSupply[_ids[i]] -= _amounts[i];\\n            totalAmount += _amounts[i];\\n        }\\n        totalSupply -= totalAmount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155) returns (bool) {\\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2d8fb7c9d1dad11c794d157a148b27cd50b5a64db805a70fcfa131b7aeb72d5b\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155SupplyFunctions {\\n\\n    /**\\n     * Returns the total supply of ERC1155 tokens.\\n     */\\n    function totalSupply() external returns (uint256);\\n\\n    /**\\n     * Returns the total supply of a given ERC1155 token.\\n     * @param tokenId The ERC1155 token id.\\n     */\\n    function tokenSupply(\\n        uint256 tokenId\\n    ) external returns (uint256);\\n\\n}\\n\\ninterface IERC1155SupplySignals {\\n\\n    /**\\n     * Invalid array input length.\\n     */\\n    error InvalidArrayLength();\\n\\n}\\n\\ninterface IERC1155Supply is IERC1155SupplySignals { }\\n\",\"keccak256\":\"0x135a8948daebd1229d6bada5ada73f2b3496c9bd9f8cfc78d7a68a0f117e55b5\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/ERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC1155BaseToken, ERC2981Controlled } from \\\"../../ERC1155BaseToken.sol\\\";\\nimport { IERC1155Items, IERC1155ItemsFunctions } from \\\"./IERC1155Items.sol\\\";\\n\\n/**\\n * An implementation of ERC-1155 capable of minting when role provided.\\n */\\ncontract ERC1155Items is ERC1155BaseToken, IERC1155Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable initializer;\\n    bool private initialized;\\n\\n    constructor() {\\n        initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner Owner address\\n     * @param tokenName Token name\\n     * @param tokenBaseURI Base URI for token metadata\\n     * @param tokenContractURI Contract URI for token metadata\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != initializer || initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC1155BaseToken._initialize(\\n            owner, tokenName, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\\n        );\\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId, amount, data);\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(\\n        address to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external onlyRole(MINTER_ROLE) {\\n        _batchMint(to, tokenIds, amounts, data);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155BaseToken) returns (bool) {\\n        return type(IERC1155ItemsFunctions).interfaceId == interfaceId\\n            || ERC1155BaseToken.supportsInterface(interfaceId) || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4b516b7cd7dfd9987fc44257e5e1781017b44afe2e348e5db2e8d9691bc699a7\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SequenceProxyFactory } from \\\"../../../../proxies/SequenceProxyFactory.sol\\\";\\nimport { ERC1155Items } from \\\"./ERC1155Items.sol\\\";\\nimport { IERC1155ItemsFactory, IERC1155ItemsFactoryFunctions } from \\\"./IERC1155ItemsFactory.sol\\\";\\n\\n/**\\n * Deployer of ERC-1155 Items proxies.\\n */\\ncontract ERC1155ItemsFactory is IERC1155ItemsFactory, SequenceProxyFactory {\\n\\n    /**\\n     * Creates an ERC-1155 Items Factory.\\n     * @param factoryOwner The owner of the ERC-1155 Items Factory\\n     */\\n    constructor(\\n        address factoryOwner\\n    ) {\\n        ERC1155Items impl = new ERC1155Items();\\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\\n    }\\n\\n    /// @inheritdoc IERC1155ItemsFactoryFunctions\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr) {\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                tokenOwner,\\n                name,\\n                baseURI,\\n                contractURI,\\n                royaltyReceiver,\\n                royaltyFeeNumerator,\\n                implicitModeValidator,\\n                implicitModeProjectId\\n            )\\n        );\\n        proxyAddr = _createProxy(salt, proxyOwner, \\\"\\\");\\n        ERC1155Items(proxyAddr).initialize(\\n            tokenOwner,\\n            name,\\n            baseURI,\\n            contractURI,\\n            royaltyReceiver,\\n            royaltyFeeNumerator,\\n            implicitModeValidator,\\n            implicitModeProjectId\\n        );\\n        emit ERC1155ItemsDeployed(proxyAddr);\\n        return proxyAddr;\\n    }\\n\\n    /// @inheritdoc IERC1155ItemsFactoryFunctions\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr) {\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                tokenOwner,\\n                name,\\n                baseURI,\\n                contractURI,\\n                royaltyReceiver,\\n                royaltyFeeNumerator,\\n                implicitModeValidator,\\n                implicitModeProjectId\\n            )\\n        );\\n        return _computeProxyAddress(salt, proxyOwner, \\\"\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb4bf0686111a0b453272d7ca073a22d886570152f17df8b31387ebf5dbf93886\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\\n\\n}\\n\\ninterface IERC1155ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\\n\",\"keccak256\":\"0x4b05643201f0416f2beab08c2679e2a166a2e9b7f91021b9758fc9802f2c49ce\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-1155 Items proxy.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-1155 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC1155ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactory is IERC1155ItemsFactoryFunctions, IERC1155ItemsFactorySignals { }\\n\",\"keccak256\":\"0xc1a35b5c8723997243d2ab8ceb96a04d55595f073b41b9f015a1b4497d3ec7c1\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-1155 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "constructor": {
                "notice": "Creates an ERC-1155 Items Factory."
              },
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-1155 Items proxy."
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              },
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "Deployer of ERC-1155 Items proxies.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/presets/items/IERC1155Items.sol": {
        "IERC1155Items": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "batchMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "batchMint(address,uint256[],uint256[],bytes)": {
                "params": {
                  "amounts": "Amounts of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenIds": "Token IDs to mint."
                }
              },
              "mint(address,uint256,uint256,bytes)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token ID to mint."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "batchMint(address,uint256[],uint256[],bytes)": "b48ab8b6",
              "mint(address,uint256,uint256,bytes)": "731133e9"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"Amounts of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenIds\":\"Token IDs to mint.\"}},\"mint(address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token ID to mint.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Mint tokens.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Mint tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":\"IERC1155Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\\n\\n}\\n\\ninterface IERC1155ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\\n\",\"keccak256\":\"0x4b05643201f0416f2beab08c2679e2a166a2e9b7f91021b9758fc9802f2c49ce\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "batchMint(address,uint256[],uint256[],bytes)": {
                "notice": "Mint tokens."
              },
              "mint(address,uint256,uint256,bytes)": {
                "notice": "Mint tokens."
              }
            },
            "version": 1
          }
        },
        "IERC1155ItemsFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "batchMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "batchMint(address,uint256[],uint256[],bytes)": {
                "params": {
                  "amounts": "Amounts of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenIds": "Token IDs to mint."
                }
              },
              "mint(address,uint256,uint256,bytes)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "data": "Data to pass if receiver is contract.",
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token ID to mint."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "batchMint(address,uint256[],uint256[],bytes)": "b48ab8b6",
              "mint(address,uint256,uint256,bytes)": "731133e9"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"Amounts of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenIds\":\"Token IDs to mint.\"}},\"mint(address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"data\":\"Data to pass if receiver is contract.\",\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token ID to mint.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Mint tokens.\"},\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Mint tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":\"IERC1155ItemsFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\\n\\n}\\n\\ninterface IERC1155ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\\n\",\"keccak256\":\"0x4b05643201f0416f2beab08c2679e2a166a2e9b7f91021b9758fc9802f2c49ce\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "batchMint(address,uint256[],uint256[],bytes)": {
                "notice": "Mint tokens."
              },
              "mint(address,uint256,uint256,bytes)": {
                "notice": "Mint tokens."
              }
            },
            "version": 1
          }
        },
        "IERC1155ItemsSignals": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":\"IERC1155ItemsSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token ID to mint.\\n     * @param amount Amount of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenIds Token IDs to mint.\\n     * @param amounts Amounts of tokens to mint.\\n     * @param data Data to pass if receiver is contract.\\n     */\\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\\n\\n}\\n\\ninterface IERC1155ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals { }\\n\",\"keccak256\":\"0x4b05643201f0416f2beab08c2679e2a166a2e9b7f91021b9758fc9802f2c49ce\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol": {
        "IERC1155ItemsFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC1155ItemsDeployed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": "59a347bd",
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": "cfcc5941"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC1155ItemsDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-1155 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-1155 Items proxy.\"},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":\"IERC1155ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-1155 Items proxy.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-1155 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC1155ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactory is IERC1155ItemsFactoryFunctions, IERC1155ItemsFactorySignals { }\\n\",\"keccak256\":\"0xc1a35b5c8723997243d2ab8ceb96a04d55595f073b41b9f015a1b4497d3ec7c1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-1155 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-1155 Items proxy."
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC1155ItemsFactoryFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-1155 Items proxy",
                  "contractURI": "The contract URI of the ERC-1155 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-1155 Items proxy",
                  "proxyOwner": "The owner of the ERC-1155 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenOwner": "The owner of the ERC-1155 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-1155 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": "59a347bd",
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": "cfcc5941"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-1155 Items proxy\",\"contractURI\":\"The contract URI of the ERC-1155 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-1155 Items proxy\",\"proxyOwner\":\"The owner of the ERC-1155 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenOwner\":\"The owner of the ERC-1155 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-1155 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-1155 Items proxy.\"},\"determineAddress(address,address,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":\"IERC1155ItemsFactoryFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-1155 Items proxy.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-1155 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC1155ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactory is IERC1155ItemsFactoryFunctions, IERC1155ItemsFactorySignals { }\\n\",\"keccak256\":\"0xc1a35b5c8723997243d2ab8ceb96a04d55595f073b41b9f015a1b4497d3ec7c1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-1155 Items proxy."
              },
              "determineAddress(address,address,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC1155ItemsFactorySignals": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC1155ItemsDeployed",
              "type": "event"
            }
          ],
          "devdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC1155ItemsDeployed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ERC1155ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-1155 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":\"IERC1155ItemsFactorySignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC1155ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-1155 Items proxy.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-1155 Items proxy\\n     * @param tokenOwner The owner of the ERC-1155 Items implementation\\n     * @param name The name of the ERC-1155 Items proxy\\n     * @param baseURI The base URI of the ERC-1155 Items proxy\\n     * @param contractURI The contract URI of the ERC-1155 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-1155 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-1155 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC1155ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC1155ItemsFactory is IERC1155ItemsFactoryFunctions, IERC1155ItemsFactorySignals { }\\n\",\"keccak256\":\"0xc1a35b5c8723997243d2ab8ceb96a04d55595f073b41b9f015a1b4497d3ec7c1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC1155ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-1155 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "ERC2981Controlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"An implementation of ERC-2981 that allows updates by roles.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/ERC2981Controlled.sol\":\"ERC2981Controlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "An implementation of ERC-2981 that allows updates by roles.",
            "version": 1
          }
        }
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "IERC2981Controlled": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IERC2981Controlled.sol\":\"IERC2981Controlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              }
            },
            "version": 1
          }
        },
        "IERC2981ControlledFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IERC2981Controlled.sol\":\"IERC2981ControlledFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              }
            },
            "version": 1
          }
        }
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "SignalsImplicitModeControlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"}},\"notice\":\"An abstract contract that allows implicit session access for a given project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/SignalsImplicitModeControlled.sol\":\"SignalsImplicitModeControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              }
            },
            "notice": "An abstract contract that allows implicit session access for a given project.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "id": 0
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "id": 1
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "id": 2
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "id": 3
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "id": 4
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 5
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "id": 6
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 7
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "id": 8
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 9
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 10
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "id": 11
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "id": 12
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 13
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 14
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "id": 15
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 16
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "id": 17
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "id": 18
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 19
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "id": 20
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "id": 21
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "id": 22
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "id": 23
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "id": 24
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "id": 25
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "id": 26
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "id": 27
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "id": 28
      },
      "lib/solady/src/tokens/ERC1155.sol": {
        "id": 29
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "id": 30
      },
      "lib/solady/src/utils/LibString.sol": {
        "id": 31
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "id": 32
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "id": 33
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "id": 34
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "id": 35
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "id": 36
      },
      "src/tokens/ERC1155/ERC1155BaseToken.sol": {
        "id": 37
      },
      "src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol": {
        "id": 38
      },
      "src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol": {
        "id": 39
      },
      "src/tokens/ERC1155/presets/items/ERC1155Items.sol": {
        "id": 40
      },
      "src/tokens/ERC1155/presets/items/ERC1155ItemsFactory.sol": {
        "id": 41
      },
      "src/tokens/ERC1155/presets/items/IERC1155Items.sol": {
        "id": 42
      },
      "src/tokens/ERC1155/presets/items/IERC1155ItemsFactory.sol": {
        "id": 43
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "id": 44
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "id": 45
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "id": 46
      }
    }
  },
  "solcLongVersion": "0.8.27+commit.40a35a09",
  "solcVersion": "0.8.27"
}
