{
  "id": "a0824756e15ab6fd0151b0bc1a8211f7fd34cb3c",
  "source_id_to_path": {
    "0": "src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol",
    "1": "src/proxies/SequenceProxyFactory.sol",
    "2": "src/tokens/ERC721/presets/items/ERC721Items.sol",
    "3": "src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol",
    "4": "src/proxies/TransparentUpgradeableBeaconProxy.sol",
    "5": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
    "6": "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol",
    "7": "lib/openzeppelin-contracts/contracts/utils/Create2.sol",
    "8": "src/tokens/ERC721/ERC721BaseToken.sol",
    "9": "src/tokens/ERC721/presets/items/IERC721Items.sol",
    "10": "src/proxies/openzeppelin/BeaconProxy.sol",
    "11": "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol",
    "12": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
    "13": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol",
    "14": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
    "15": "src/tokens/common/ERC2981Controlled.sol",
    "16": "src/tokens/common/SignalsImplicitModeControlled.sol",
    "17": "lib/solady/src/tokens/ERC721.sol",
    "18": "lib/solady/src/utils/LibString.sol",
    "19": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "20": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol",
    "21": "src/proxies/openzeppelin/ERC1967Proxy.sol",
    "22": "src/tokens/common/IERC2981Controlled.sol",
    "23": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
    "24": "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol",
    "25": "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol",
    "26": "lib/solady/src/utils/LibBytes.sol",
    "27": "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol",
    "28": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol",
    "29": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
    "30": "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol",
    "31": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
    "32": "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
    "33": "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol",
    "34": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
    "35": "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol",
    "36": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol",
    "37": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol",
    "38": "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol",
    "39": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
    "40": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
    "41": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
    "42": "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol",
    "43": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
    "44": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
  },
  "language": "Solidity",
  "_format": "ethers-rs-sol-build-info-1",
  "input": {
    "version": "0.8.27",
    "language": "Solidity",
    "sources": {
      "src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { SequenceProxyFactory } from \"../../../../proxies/SequenceProxyFactory.sol\";\nimport { ERC721Items } from \"./ERC721Items.sol\";\nimport { IERC721ItemsFactory, IERC721ItemsFactoryFunctions } from \"./IERC721ItemsFactory.sol\";\n\n/**\n * Deployer of ERC-721 Items proxies.\n */\ncontract ERC721ItemsFactory is IERC721ItemsFactory, SequenceProxyFactory {\n\n    /**\n     * Creates an ERC-721 Items Factory.\n     * @param factoryOwner The owner of the ERC-721 Items Factory\n     */\n    constructor(\n        address factoryOwner\n    ) {\n        ERC721Items impl = new ERC721Items();\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\n    }\n\n    /// @inheritdoc IERC721ItemsFactoryFunctions\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                name,\n                symbol,\n                baseURI,\n                contractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                implicitModeValidator,\n                implicitModeProjectId\n            )\n        );\n        proxyAddr = _createProxy(salt, proxyOwner, \"\");\n        ERC721Items(proxyAddr).initialize(\n            tokenOwner,\n            name,\n            symbol,\n            baseURI,\n            contractURI,\n            royaltyReceiver,\n            royaltyFeeNumerator,\n            implicitModeValidator,\n            implicitModeProjectId\n        );\n        emit ERC721ItemsDeployed(proxyAddr);\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IERC721ItemsFactoryFunctions\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external view returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                name,\n                symbol,\n                baseURI,\n                contractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                implicitModeValidator,\n                implicitModeProjectId\n            )\n        );\n        return _computeProxyAddress(salt, proxyOwner, \"\");\n    }\n\n}\n"
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    ITransparentUpgradeableBeaconProxy,\n    TransparentUpgradeableBeaconProxy\n} from \"./TransparentUpgradeableBeaconProxy.sol\";\n\nimport { Ownable } from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport { UpgradeableBeacon } from \"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { Create2 } from \"openzeppelin-contracts/contracts/utils/Create2.sol\";\n\n/**\n * An proxy factory that deploys upgradeable beacon proxies.\n * @dev The factory owner is able to upgrade the beacon implementation.\n * @dev Proxy deployers are able to override the beacon reference with their own.\n */\nabstract contract SequenceProxyFactory is Ownable {\n\n    UpgradeableBeacon public beacon;\n\n    /**\n     * Initialize a Sequence Proxy Factory.\n     * @param implementation The initial beacon implementation.\n     * @param factoryOwner The owner of the factory.\n     */\n    function _initialize(address implementation, address factoryOwner) internal {\n        beacon = new UpgradeableBeacon(implementation);\n        Ownable._transferOwnership(factoryOwner);\n    }\n\n    /**\n     * Deploys and initializes a new proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @param _data The initialization data.\n     * @return proxyAddress The address of the deployed proxy.\n     */\n    function _createProxy(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal returns (address proxyAddress) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\n\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\n    }\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @return proxy The expected address of the deployed proxy.\n     */\n    function _computeProxyAddress(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal view returns (address) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\n\n        return Create2.computeAddress(saltedHash, bytecodeHash);\n    }\n\n    /**\n     * Upgrades the beacon implementation.\n     * @param implementation The new beacon implementation.\n     */\n    function upgradeBeacon(\n        address implementation\n    ) public onlyOwner {\n        beacon.upgradeTo(implementation);\n    }\n\n}\n"
      },
      "src/tokens/ERC721/presets/items/ERC721Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { ERC721BaseToken } from \"../../ERC721BaseToken.sol\";\nimport { IERC721Items, IERC721ItemsFunctions } from \"./IERC721Items.sol\";\n\n/**\n * An implementation of ERC-721 capable of minting when role provided.\n */\ncontract ERC721Items is ERC721BaseToken, IERC721Items {\n\n    bytes32 internal constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    address private immutable _initializer;\n    bool private _initialized;\n\n    uint256 private _nextSequentialId;\n    uint256 private _totalSupply;\n\n    /**\n     * Deploy contract.\n     */\n    constructor() ERC721BaseToken() {\n        _initializer = msg.sender;\n    }\n\n    /**\n     * Initialize contract.\n     * @param owner The owner of the contract\n     * @param tokenName Name of the token\n     * @param tokenSymbol Symbol of the token\n     * @param tokenBaseURI Base URI of the token\n     * @param tokenContractURI Contract URI of the token\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenSymbol,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) public virtual {\n        if (msg.sender != _initializer || _initialized) {\n            revert InvalidInitialization();\n        }\n\n        ERC721BaseToken._initialize(\n            owner, tokenName, tokenSymbol, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\n        );\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\n\n        _grantRole(MINTER_ROLE, owner);\n\n        _initialized = true;\n    }\n\n    //\n    // Minting\n    //\n\n    /// @inheritdoc IERC721ItemsFunctions\n    function mint(address to, uint256 tokenId) external onlyRole(MINTER_ROLE) {\n        _mint(to, tokenId);\n        _totalSupply++;\n        while (_exists(_nextSequentialId)) {\n            _nextSequentialId++;\n        }\n    }\n\n    /// @inheritdoc IERC721ItemsFunctions\n    function mintSequential(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\n        for (uint256 i = 0; i < amount; i++) {\n            while (_exists(_nextSequentialId)) {\n                _nextSequentialId++;\n            }\n            _mint(to, _nextSequentialId);\n            _nextSequentialId++;\n        }\n        _totalSupply += amount;\n    }\n\n    //\n    // Views\n    //\n\n    /// @inheritdoc IERC721ItemsFunctions\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return type(IERC721ItemsFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC721ItemsFactoryFunctions {\n\n    /**\n     * Creates an ERC-721 Items proxy.\n     * @param proxyOwner The owner of the ERC-721 Items proxy\n     * @param tokenOwner The owner of the ERC-721 Items implementation\n     * @param name The name of the ERC-721 Items proxy\n     * @param symbol The symbol of the ERC-721 Items proxy\n     * @param baseURI The base URI of the ERC-721 Items proxy\n     * @param contractURI The contract URI of the ERC-721 Items proxy\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-721 Items Proxy\n     */\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param proxyOwner The owner of the ERC-721 Items proxy\n     * @param tokenOwner The owner of the ERC-721 Items implementation\n     * @param name The name of the ERC-721 Items proxy\n     * @param symbol The symbol of the ERC-721 Items proxy\n     * @param baseURI The base URI of the ERC-721 Items proxy\n     * @param contractURI The contract URI of the ERC-721 Items proxy\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-721 Items Proxy\n     */\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        string memory baseURI,\n        string memory contractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n}\n\ninterface IERC721ItemsFactorySignals {\n\n    /**\n     * Event emitted when a new ERC-721 Items proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event ERC721ItemsDeployed(address proxyAddr);\n\n}\n\ninterface IERC721ItemsFactory is IERC721ItemsFactoryFunctions, IERC721ItemsFactorySignals { }\n"
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { BeaconProxy, Proxy } from \"./openzeppelin/BeaconProxy.sol\";\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \"./openzeppelin/TransparentUpgradeableProxy.sol\";\n\ninterface ITransparentUpgradeableBeaconProxy {\n\n    function initialize(address admin, address beacon, bytes memory data) external;\n\n}\n\nerror InvalidInitialization();\n\n/**\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * The proxy selectors are:\n * - 0xcf7a1d77: initialize\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\n */\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\n\n    /**\n     * Decode the initialization data from the msg.data and call the initialize function.\n     */\n    function _dispatchInitialize() private returns (bytes memory) {\n        _requireZeroValue();\n\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\n        initialize(admin, beacon, data);\n\n        return \"\";\n    }\n\n    function initialize(address admin, address beacon, bytes memory data) internal {\n        if (_admin() != address(0)) {\n            // Redundant call. This function can only be called when the admin is not set.\n            revert InvalidInitialization();\n        }\n        _changeAdmin(admin);\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\n     */\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\n        if (_getAdmin() == address(0)) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\n                ret = _dispatchInitialize();\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    return(add(ret, 0x20), mload(ret))\n                }\n            }\n            // When the admin is not set, the fallback function is used to initialize the proxy.\n            revert InvalidInitialization();\n        }\n        TransparentUpgradeableProxy._fallback();\n    }\n\n    /**\n     * Returns the current implementation address.\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\n     */\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\n        address implementation = ERC1967Proxy._implementation();\n        if (implementation != address(0)) {\n            return implementation;\n        }\n        return BeaconProxy._implementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
      },
      "src/tokens/ERC721/ERC721BaseToken.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { ERC2981Controlled } from \"../common/ERC2981Controlled.sol\";\nimport { SignalsImplicitModeControlled } from \"../common/SignalsImplicitModeControlled.sol\";\n\nimport { ERC721 } from \"solady/tokens/ERC721.sol\";\nimport { LibString } from \"solady/utils/LibString.sol\";\n\nerror InvalidInitialization();\n\n/**\n * A standard base implementation of ERC-721 for use in Sequence library contracts.\n */\nabstract contract ERC721BaseToken is ERC721, ERC2981Controlled, SignalsImplicitModeControlled {\n\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\"METADATA_ADMIN_ROLE\");\n\n    string private _tokenBaseURI;\n    string private _tokenName;\n    string private _tokenSymbol;\n    string private _contractURI;\n\n    /**\n     * Initialize contract.\n     * @param owner The owner of the contract\n     * @param tokenName Name of the token\n     * @param tokenSymbol Symbol of the token\n     * @param tokenBaseURI Base URI of the token\n     * @param tokenContractURI Contract URI of the token\n     * @param implicitModeValidator Implicit session validator address\n     * @param implicitModeProjectId Implicit session project id\n     * @dev This should be called immediately after deployment.\n     */\n    function _initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenSymbol,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) internal {\n        _tokenName = tokenName;\n        _tokenSymbol = tokenSymbol;\n        _tokenBaseURI = tokenBaseURI;\n        _contractURI = tokenContractURI;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n        _grantRole(METADATA_ADMIN_ROLE, owner);\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\n\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\n    }\n\n    //\n    // Metadata\n    //\n\n    /**\n     * Set name and symbol of token.\n     * @param tokenName Name of token.\n     * @param tokenSymbol Symbol of token.\n     */\n    function setNameAndSymbol(\n        string memory tokenName,\n        string memory tokenSymbol\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        _tokenName = tokenName;\n        _tokenSymbol = tokenSymbol;\n    }\n\n    /**\n     * Update the base URI of token's URI.\n     * @param tokenBaseURI New base URI of token's URI\n     */\n    function setBaseMetadataURI(\n        string memory tokenBaseURI\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        _tokenBaseURI = tokenBaseURI;\n    }\n\n    /**\n     * Update the contract URI of token's URI.\n     * @param tokenContractURI New contract URI of token's URI\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function setContractURI(\n        string memory tokenContractURI\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\n        _contractURI = tokenContractURI;\n    }\n\n    //\n    // Burn\n    //\n\n    /**\n     * Allows the owner of the token to burn their token.\n     * @param tokenId Id of token to burn\n     */\n    function burn(\n        uint256 tokenId\n    ) public virtual {\n        _burn(msg.sender, tokenId);\n    }\n\n    /**\n     * Allows the owner of the tokens to burn their tokens.\n     * @param tokenIds Array of token ids to burn\n     */\n    function batchBurn(\n        uint256[] memory tokenIds\n    ) public virtual {\n        uint256 nBurn = tokenIds.length;\n        for (uint256 i = 0; i < nBurn; i++) {\n            _burn(msg.sender, tokenIds[i]);\n        }\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Get the contract URI of token's URI.\n     * @return Contract URI of token's URI\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC721, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\n        return ERC721.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\n    }\n\n    //\n    // ERC721 Overrides\n    //\n\n    /// @inheritdoc ERC721\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override(ERC721) returns (string memory) {\n        if (!_exists(tokenId)) {\n            revert TokenDoesNotExist();\n        }\n\n        return bytes(_tokenBaseURI).length != 0 ? LibString.concat(_tokenBaseURI, LibString.toString(tokenId)) : \"\";\n    }\n\n    /// @inheritdoc ERC721\n    function name() public view override(ERC721) returns (string memory) {\n        return _tokenName;\n    }\n\n    /// @inheritdoc ERC721\n    function symbol() public view override(ERC721) returns (string memory) {\n        return _tokenSymbol;\n    }\n\n}\n"
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC721ItemsFunctions {\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token id to mint.\n     */\n    function mint(address to, uint256 tokenId) external;\n\n    /**\n     * Mint a sequential token.\n     * @param to Address to mint token to.\n     * @param amount Amount of tokens to mint.\n     */\n    function mintSequential(address to, uint256 amount) external;\n\n    /**\n     * Get the total supply of tokens.\n     * @return totalSupply The total supply of tokens.\n     */\n    function totalSupply() external view returns (uint256 totalSupply);\n\n}\n\ninterface IERC721ItemsSignals {\n\n    /**\n     * Invalid initialization error.\n     */\n    error InvalidInitialization();\n\n}\n\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\n"
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n}\n"
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\n/// - Pragma updated\n/// - Imports updated\n/// - Constructor removed\n/// - Allows admin to call implementation\n\npragma solidity ^0.8.19;\n\nimport \"./ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(\n        address\n    ) external;\n\n    function upgradeTo(\n        address\n    ) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\n * This potentially exposes the admin to a proxy selector attack. See\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\n * The proxy selectors are:\n * - 0x3659cfe6: upgradeTo\n * - 0x4f1ef286: upgradeToAndCall\n * - 0x8f283970: changeAdmin\n * - 0xf851a440: admin\n * - 0x5c60da1b: implementation\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                // Call implementation\n                return super._fallback();\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() internal {\n        require(msg.value == 0);\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IERC2981Controlled } from \"./IERC2981Controlled.sol\";\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport { ERC2981 } from \"openzeppelin-contracts/contracts/token/common/ERC2981.sol\";\n\n/**\n * An implementation of ERC-2981 that allows updates by roles.\n */\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\n\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\"ROYALTY_ADMIN_ROLE\");\n\n    //\n    // Royalty\n    //\n\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport {\n    IERC165,\n    IImplicitProjectValidation,\n    SignalsImplicitMode\n} from \"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\";\n\n/**\n * An abstract contract that allows implicit session access for a given project.\n */\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\n\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\"IMPLICIT_MODE_ADMIN_ROLE\");\n\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\n        _initializeSignalsImplicitMode(validator, projectId);\n    }\n\n    /**\n     * Updates the validator for implicit mode validation.\n     * @param validator The validator address.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeValidator(\n        address validator\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _validator = IImplicitProjectValidation(validator);\n    }\n\n    /**\n     * Updates the settings for implicit mode validation.\n     * @param projectId The project id.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeProjectId(\n        bytes32 projectId\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _projectId = projectId;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\n        return\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "lib/solady/src/tokens/ERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple ERC721 implementation with storage hitchhiking.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\n///\n/// @dev Note:\n/// - The ERC721 standard allows for self-approvals.\n///   For performance, this implementation WILL NOT revert for such actions.\n///   Please add any checks with overrides if desired.\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\n/// - The `safeTransfer` functions use the identity precompile (0x4)\n///   to copy memory internally.\n///\n/// If you are overriding:\n/// - NEVER violate the ERC721 invariant:\n///   the balance of an owner MUST always be equal to their number of ownership slots.\n///   The transfer functions do not have an underflow guard for user token balances.\n/// - Make sure all variables written to storage are properly cleaned\n///   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\n/// - Check that the overridden function is actually used in the function you want to\n///   change the behavior of. Much of the code has been manually inlined for performance.\nabstract contract ERC721 {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev An account can hold up to 4294967295 tokens.\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Only the token owner or an approved account can manage the token.\n    error NotOwnerNorApproved();\n\n    /// @dev The token does not exist.\n    error TokenDoesNotExist();\n\n    /// @dev The token already exists.\n    error TokenAlreadyExists();\n\n    /// @dev Cannot query the balance for the zero address.\n    error BalanceQueryForZeroAddress();\n\n    /// @dev Cannot mint or transfer to the zero address.\n    error TransferToZeroAddress();\n\n    /// @dev The token must be owned by `from`.\n    error TransferFromIncorrectOwner();\n\n    /// @dev The recipient's balance has overflowed.\n    error AccountBalanceOverflow();\n\n    /// @dev Cannot safely transfer to a contract that does not implement\n    /// the ERC721Receiver interface.\n    error TransferToNonERC721ReceiverImplementer();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\n\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\n\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership data slot of `id` is given by:\n    /// ```\n    ///     mstore(0x00, id)\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n    /// ```\n    /// Bits Layout:\n    /// - [0..159]   `addr`\n    /// - [160..255] `extraData`\n    ///\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\n    ///\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\n    ///\n    /// The balance slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n    ///     mstore(0x00, owner)\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\n    /// ```\n    /// Bits Layout:\n    /// - [0..31]   `balance`\n    /// - [32..255] `aux`\n    ///\n    /// The `operator` approval slot of `owner` is given by:\n    /// ```\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\n    ///     mstore(0x00, owner)\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\n    /// ```\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\n\n    /// @dev Pre-shifted and pre-masked constant.\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC721 METADATA                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the token collection name.\n    function name() public view virtual returns (string memory);\n\n    /// @dev Returns the token collection symbol.\n    function symbol() public view virtual returns (string memory);\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           ERC721                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function ownerOf(uint256 id) public view virtual returns (address result) {\n        result = _ownerOf(id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(result) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Returns the number of tokens owned by `owner`.\n    ///\n    /// Requirements:\n    /// - `owner` must not be the zero address.\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Revert if the `owner` is the zero address.\n            if iszero(owner) {\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\n                revert(0x1c, 0x04)\n            }\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\n        }\n    }\n\n    /// @dev Returns the account approved to manage token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function getApproved(uint256 id) public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            if iszero(shl(96, sload(ownershipSlot))) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            result := sload(add(1, ownershipSlot))\n        }\n    }\n\n    /// @dev Sets `account` as the approved account to manage token `id`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    /// - The caller must be the owner of the token,\n    ///   or an approved operator for the token owner.\n    ///\n    /// Emits an {Approval} event.\n    function approve(address account, uint256 id) public payable virtual {\n        _approve(msg.sender, account, id);\n    }\n\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, operator)\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\n            mstore(0x00, owner)\n            result := sload(keccak256(0x0c, 0x30))\n        }\n    }\n\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\n    ///\n    /// Emits an {ApprovalForAll} event.\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`msg.sender`, `operator`).\n            mstore(0x1c, operator)\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x30), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            // forgefmt: disable-next-item\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\n        }\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\n        _beforeTokenTransfer(from, to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            from := and(bitmaskAddress, from)\n            to := and(bitmaskAddress, to)\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            let owner := and(bitmaskAddress, ownershipPacked)\n            // Revert if the token does not exist, or if `from` is not the owner.\n            if iszero(mul(owner, eq(owner, from))) {\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\n                revert(0x1c, 0x04)\n            }\n            // Load, check, and update the token approval.\n            {\n                mstore(0x00, from)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // Revert if the caller is not the owner, nor approved.\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Update with the new owner.\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\n            // Decrement the balance of `from`.\n            {\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\n            }\n            // Increment the balance of `to`.\n            {\n                mstore(0x00, to)\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\n                // Revert if `to` is the zero address, or if the account balance overflows.\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\n        }\n        _afterTokenTransfer(from, to, id);\n    }\n\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \"\")`.\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\n        transferFrom(from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\n        public\n        payable\n        virtual\n    {\n        transferFrom(from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\n    /// See: https://eips.ethereum.org/EIPS/eip-165\n    /// This function call must use less than 30000 gas.\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let s := shr(224, interfaceId)\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL QUERY FUNCTIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns if token `id` exists.\n    function _exists(uint256 id) internal view virtual returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\n        }\n    }\n\n    /// @dev Returns the owner of token `id`.\n    /// Returns the zero address instead of reverting if the token does not exist.\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // For performance, no events are emitted for the hitchhiking setters.\n    // Please emit your own events if required.\n\n    /// @dev Returns the auxiliary data for `owner`.\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\n        }\n    }\n\n    /// @dev Set the auxiliary data for `owner` to `value`.\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\n    function _setAux(address owner, uint224 value) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            mstore(0x00, owner)\n            let balanceSlot := keccak256(0x0c, 0x1c)\n            let packed := sload(balanceSlot)\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\n        }\n    }\n\n    /// @dev Returns the extra data for token `id`.\n    /// Minting, transferring, burning a token will not change the extra data.\n    /// The extra data can be set on a non-existent token.\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\n        }\n    }\n\n    /// @dev Sets the extra data for token `id` to `value`.\n    /// Minting, transferring, burning a token will not change the extra data.\n    /// The extra data can be set on a non-existent token.\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let packed := sload(ownershipSlot)\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL MINT FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Mints token `id` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must not exist.\n    /// - `to` cannot be the zero address.\n    ///\n    /// Emits a {Transfer} event.\n    function _mint(address to, uint256 id) internal virtual {\n        _beforeTokenTransfer(address(0), to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            to := shr(96, shl(96, to))\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            // Revert if the token already exists.\n            if shl(96, ownershipPacked) {\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\n                revert(0x1c, 0x04)\n            }\n            // Update with the owner.\n            sstore(ownershipSlot, or(ownershipPacked, to))\n            // Increment the balance of the owner.\n            {\n                mstore(0x00, to)\n                let balanceSlot := keccak256(0x0c, 0x1c)\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\n                // Revert if `to` is the zero address, or if the account balance overflows.\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\n                    revert(0x1c, 0x04)\n                }\n                sstore(balanceSlot, balanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\n        }\n        _afterTokenTransfer(address(0), to, id);\n    }\n\n    /// @dev Mints token `id` to `to`, and updates the extra data for token `id` to `value`.\n    /// Does NOT check if token `id` already exists (assumes `id` is auto-incrementing).\n    ///\n    /// Requirements:\n    ///\n    /// - `to` cannot be the zero address.\n    ///\n    /// Emits a {Transfer} event.\n    function _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value) internal virtual {\n        _beforeTokenTransfer(address(0), to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            to := shr(96, shl(96, to))\n            // Update with the owner and extra data.\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            sstore(add(id, add(id, keccak256(0x00, 0x20))), or(shl(160, value), to))\n            // Increment the balance of the owner.\n            {\n                mstore(0x00, to)\n                let balanceSlot := keccak256(0x0c, 0x1c)\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\n                // Revert if `to` is the zero address, or if the account balance overflows.\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\n                    revert(0x1c, 0x04)\n                }\n                sstore(balanceSlot, balanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\n        }\n        _afterTokenTransfer(address(0), to, id);\n    }\n\n    /// @dev Equivalent to `_safeMint(to, id, \"\")`.\n    function _safeMint(address to, uint256 id) internal virtual {\n        _safeMint(to, id, \"\");\n    }\n\n    /// @dev Mints token `id` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must not exist.\n    /// - `to` cannot be the zero address.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  INTERNAL BURN FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_burn(address(0), id)`.\n    function _burn(uint256 id) internal virtual {\n        _burn(address(0), id);\n    }\n\n    /// @dev Destroys token `id`, using `by`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function _burn(address by, uint256 id) internal virtual {\n        address owner = ownerOf(id);\n        _beforeTokenTransfer(owner, address(0), id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            by := shr(96, shl(96, by))\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\n            owner := shr(96, shl(96, ownershipPacked))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // Load and check the token approval.\n            {\n                mstore(0x00, owner)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // If `by` is not the zero address, do the authorization check.\n                // Revert if the `by` is not the owner, nor approved.\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Clear the owner.\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\n            // Decrement the balance of `owner`.\n            {\n                let balanceSlot := keccak256(0x0c, 0x1c)\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\n        }\n        _afterTokenTransfer(owner, address(0), id);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    function _isApprovedOrOwner(address account, uint256 id)\n        internal\n        view\n        virtual\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            // Clear the upper 96 bits.\n            account := shr(96, shl(96, account))\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // Check if `account` is the `owner`.\n            if iszero(eq(account, owner)) {\n                mstore(0x00, owner)\n                // Check if `account` is approved to manage the token.\n                if iszero(sload(keccak256(0x0c, 0x30))) {\n                    result := eq(account, sload(add(1, ownershipSlot)))\n                }\n            }\n        }\n    }\n\n    /// @dev Returns the account approved to manage token `id`.\n    /// Returns the zero address instead of reverting if the token does not exist.\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, id)\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\n        }\n    }\n\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\n    function _approve(address account, uint256 id) internal virtual {\n        _approve(address(0), account, id);\n    }\n\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\n    ///\n    /// Requirements:\n    /// - Token `id` must exist.\n    /// - If `by` is not the zero address, `by` must be the owner\n    ///   or an approved operator for the token owner.\n    ///\n    /// Emits a {Approval} event.\n    function _approve(address by, address account, uint256 id) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            account := and(bitmaskAddress, account)\n            by := and(bitmaskAddress, by)\n            // Load the owner of the token.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\n            // Revert if the token does not exist.\n            if iszero(owner) {\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\n                revert(0x1c, 0x04)\n            }\n            // If `by` is not the zero address, do the authorization check.\n            // Revert if `by` is not the owner, nor approved.\n            if iszero(or(iszero(by), eq(by, owner))) {\n                mstore(0x00, owner)\n                if iszero(sload(keccak256(0x0c, 0x30))) {\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n            // Sets `account` as the approved account to manage `id`.\n            sstore(add(1, ownershipSlot), account)\n            // Emit the {Approval} event.\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\n        }\n    }\n\n    /// @dev Approve or remove the `operator` as an operator for `by`,\n    /// without authorization checks.\n    ///\n    /// Emits an {ApprovalForAll} event.\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            by := shr(96, shl(96, by))\n            operator := shr(96, shl(96, operator))\n            // Convert to 0 or 1.\n            isApproved := iszero(iszero(isApproved))\n            // Update the `isApproved` for (`by`, `operator`).\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\n            mstore(0x00, by)\n            sstore(keccak256(0x0c, 0x30), isApproved)\n            // Emit the {ApprovalForAll} event.\n            mstore(0x00, isApproved)\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\n    function _transfer(address from, address to, uint256 id) internal virtual {\n        _transfer(address(0), from, to, id);\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    ///\n    /// Emits a {Transfer} event.\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\n        _beforeTokenTransfer(from, to, id);\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clear the upper 96 bits.\n            let bitmaskAddress := shr(96, not(0))\n            from := and(bitmaskAddress, from)\n            to := and(bitmaskAddress, to)\n            by := and(bitmaskAddress, by)\n            // Load the ownership data.\n            mstore(0x00, id)\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\n            let ownershipPacked := sload(ownershipSlot)\n            let owner := and(bitmaskAddress, ownershipPacked)\n            // Revert if the token does not exist, or if `from` is not the owner.\n            if iszero(mul(owner, eq(owner, from))) {\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\n                revert(0x1c, 0x04)\n            }\n            // Load, check, and update the token approval.\n            {\n                mstore(0x00, from)\n                let approvedAddress := sload(add(1, ownershipSlot))\n                // If `by` is not the zero address, do the authorization check.\n                // Revert if the `by` is not the owner, nor approved.\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\n                        revert(0x1c, 0x04)\n                    }\n                }\n                // Delete the approved address if any.\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\n            }\n            // Update with the new owner.\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\n            // Decrement the balance of `from`.\n            {\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\n            }\n            // Increment the balance of `to`.\n            {\n                mstore(0x00, to)\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\n                // Revert if `to` is the zero address, or if the account balance overflows.\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\n                    revert(0x1c, 0x04)\n                }\n                sstore(toBalanceSlot, toBalanceSlotPacked)\n            }\n            // Emit the {Transfer} event.\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\n        }\n        _afterTokenTransfer(from, to, id);\n    }\n\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \"\")`.\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\n        _safeTransfer(from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - The caller must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\n        internal\n        virtual\n    {\n        _transfer(address(0), from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \"\")`.\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\n        _safeTransfer(by, from, to, id, \"\");\n    }\n\n    /// @dev Transfers token `id` from `from` to `to`.\n    ///\n    /// Requirements:\n    ///\n    /// - Token `id` must exist.\n    /// - `from` must be the owner of the token.\n    /// - `to` cannot be the zero address.\n    /// - If `by` is not the zero address,\n    ///   it must be the owner of the token, or be approved to manage the token.\n    /// - If `to` refers to a smart contract, it must implement\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n    ///\n    /// Emits a {Transfer} event.\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\n        internal\n        virtual\n    {\n        _transfer(by, from, to, id);\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                    HOOKS FOR OVERRIDING                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Hook that is called before any token transfers, including minting and burning.\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\n\n    /// @dev Hook that is called after any token transfers, including minting and burning.\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      PRIVATE HELPERS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns if `a` has bytecode of non-zero length.\n    function _hasCode(address a) private view returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := extcodesize(a) // Can handle dirty upper bits.\n        }\n    }\n\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\n    /// Reverts if the target does not support the function correctly.\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\n        private\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the calldata.\n            let m := mload(0x40)\n            let onERC721ReceivedSelector := 0x150b7a02\n            mstore(m, onERC721ReceivedSelector)\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\n            mstore(add(m, 0x60), id)\n            mstore(add(m, 0x80), 0x80)\n            let n := mload(data)\n            mstore(add(m, 0xa0), n)\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\n            // Revert if the call reverts.\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\n                if returndatasize() {\n                    // Bubble up the revert if the call reverts.\n                    returndatacopy(m, 0x00, returndatasize())\n                    revert(m, returndatasize())\n                }\n            }\n            // Load the returndata and compare it.\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"
      },
      "lib/solady/src/utils/LibString.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {LibBytes} from \"./LibBytes.sol\";\n\n/// @notice Library for converting numbers into strings and other string operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\n///\n/// @dev Note:\n/// For performance and bytecode compactness, most of the string operations are restricted to\n/// byte strings (7-bit ASCII), except where otherwise specified.\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\n/// can lead to undefined behavior.\nlibrary LibString {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\n    /// Packs length with the first 31 bytes if <255 bytes, so it’s mad tight.\n    struct StringStorage {\n        bytes32 _spacer;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The length of the output is too small to contain all the hex digits.\n    error HexLengthInsufficient();\n\n    /// @dev The length of the string is more than 32 bytes.\n    error TooBigForSmallString();\n\n    /// @dev The input string must be a 7-bit ASCII.\n    error StringNot7BitASCII();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the string.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\n\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\n\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\n\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\n\n    /// @dev Lookup for '0123456789'.\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\n\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\n\n    /// @dev Lookup for '01234567'.\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\n\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'.\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\n\n    /// @dev Lookup for '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'.\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\n\n    /// @dev Lookup for ' \\t\\n\\r\\x0b\\x0c'.\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                 STRING STORAGE OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sets the value of the string storage `$` to `s`.\n    function set(StringStorage storage $, string memory s) internal {\n        LibBytes.set(bytesStorage($), bytes(s));\n    }\n\n    /// @dev Sets the value of the string storage `$` to `s`.\n    function setCalldata(StringStorage storage $, string calldata s) internal {\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\n    }\n\n    /// @dev Sets the value of the string storage `$` to the empty string.\n    function clear(StringStorage storage $) internal {\n        delete $._spacer;\n    }\n\n    /// @dev Returns whether the value stored is `$` is the empty string \"\".\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\n        return uint256($._spacer) & 0xff == uint256(0);\n    }\n\n    /// @dev Returns the length of the value stored in `$`.\n    function length(StringStorage storage $) internal view returns (uint256) {\n        return LibBytes.length(bytesStorage($));\n    }\n\n    /// @dev Returns the value stored in `$`.\n    function get(StringStorage storage $) internal view returns (string memory) {\n        return string(LibBytes.get(bytesStorage($)));\n    }\n\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\n        return LibBytes.uint8At(bytesStorage($), i);\n    }\n\n    /// @dev Helper to cast `$` to a `BytesStorage`.\n    function bytesStorage(StringStorage storage $)\n        internal\n        pure\n        returns (LibBytes.BytesStorage storage casted)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            casted.slot := $.slot\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     DECIMAL OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(uint256 value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits.\n            result := add(mload(0x40), 0x80)\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end of the memory to calculate the length later.\n            let w := not(0) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                result := add(result, w) // `sub(result, 1)`.\n                // Store the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(result, add(48, mod(temp, 10)))\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\n                if iszero(temp) { break }\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(int256 value) internal pure returns (string memory result) {\n        if (value >= 0) return toString(uint256(value));\n        unchecked {\n            result = toString(~uint256(value) + 1);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We still have some spare memory space on the left,\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\n            let n := mload(result) // Load the string length.\n            mstore(result, 0x2d) // Store the '-' character.\n            result := sub(result, 1) // Move back the string pointer by a byte.\n            mstore(result, add(n, 1)) // Update the string length.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   HEXADECIMAL OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `byteCount` bytes.\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `byteCount * 2 + 2` bytes.\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\n    function toHexString(uint256 value, uint256 byteCount)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = toHexStringNoPrefix(value, byteCount);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `byteCount` bytes.\n    /// The output is not prefixed with \"0x\" and is encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `byteCount * 2` bytes.\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\n            // We add 0x20 to the total and round down to a multiple of 0x20.\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end to calculate the length later.\n            // Store \"0123456789abcdef\" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            let start := sub(result, add(byteCount, byteCount))\n            let w := not(1) // Tsk.\n            let temp := value\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for {} 1 {} {\n                result := add(result, w) // `sub(result, 2)`.\n                mstore8(add(result, 1), mload(and(temp, 15)))\n                mstore8(result, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(xor(result, start)) { break }\n            }\n            if temp {\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\n                revert(0x1c, 0x04)\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20)\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2 + 2` bytes.\n    function toHexString(uint256 value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\".\n    /// The output excludes leading \"0\" from the `toHexString` output.\n    /// `0x00: \"0x0\", 0x01: \"0x1\", 0x12: \"0x12\", 0x123: \"0x123\"`.\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(add(result, o), 0x3078) // Store the \"0x\" prefix, accounting for leading zero.\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output excludes leading \"0\" from the `toHexStringNoPrefix` output.\n    /// `0x00: \"0\", 0x01: \"1\", 0x12: \"12\", 0x123: \"123\"`.\n    function toMinimalHexStringNoPrefix(uint256 value)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\n            let n := mload(result) // Get the length.\n            result := add(result, o) // Move the pointer, accounting for leading zero.\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2` bytes.\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\n            result := add(mload(0x40), 0x80)\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\n            mstore(result, 0) // Zeroize the slot after the string.\n\n            let end := result // Cache the end to calculate the length later.\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n\n            let w := not(1) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                result := add(result, w) // `sub(result, 2)`.\n                mstore8(add(result, 1), mload(and(temp, 15)))\n                mstore8(result, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(temp) { break }\n            }\n            let n := sub(end, result)\n            result := sub(result, 0x20)\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\n    /// and the alphabets are capitalized conditionally according to\n    /// https://eips.ethereum.org/EIPS/eip-55\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\n        result = toHexString(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\n            let o := add(result, 0x22)\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\n            let t := shl(240, 136) // `0b10001000 << 240`\n            for { let i := 0 } 1 {} {\n                mstore(add(i, i), mul(t, byte(i, hashed)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\n            o := add(o, 0x20)\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\n    function toHexString(address value) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            // Allocate memory.\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\n            mstore(0x40, add(result, 0x80))\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n\n            result := add(result, 2)\n            mstore(result, 40) // Store the length.\n            let o := add(result, 0x20)\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\n            value := shl(96, value)\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let i := 0 } 1 {} {\n                let p := add(o, add(i, i))\n                let temp := byte(i, value)\n                mstore8(add(p, 1), mload(and(temp, 15)))\n                mstore8(p, mload(shr(4, temp)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\n        result = toHexStringNoPrefix(raw);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := add(mload(result), 2) // Compute the length.\n            mstore(result, 0x3078) // Store the \"0x\" prefix.\n            result := sub(result, 2) // Move the pointer.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(raw)\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\n            mstore(result, add(n, n)) // Store the length of the output.\n\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \"0123456789abcdef\" lookup.\n            let o := add(result, 0x20)\n            let end := add(raw, n)\n            for {} iszero(eq(raw, end)) {} {\n                raw := add(raw, 1)\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\n                o := add(o, 2)\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   RUNE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the number of UTF characters in the string.\n    function runeCount(string memory s) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if mload(s) {\n                mstore(0x00, div(not(0), 255))\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\n                let o := add(s, 0x20)\n                let end := add(o, mload(s))\n                for { result := 1 } 1 { result := add(result, 1) } {\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\n                    if iszero(lt(o, end)) { break }\n                }\n            }\n        }\n    }\n\n    /// @dev Returns if this string is a 7-bit ASCII string.\n    /// (i.e. all characters codes are in [0..127])\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            let mask := shl(7, div(not(0), 255))\n            let n := mload(s)\n            if n {\n                let o := add(s, 0x20)\n                let end := add(o, n)\n                let last := mload(end)\n                mstore(end, 0)\n                for {} 1 {} {\n                    if and(mask, mload(o)) {\n                        result := 0\n                        break\n                    }\n                    o := add(o, 0x20)\n                    if iszero(lt(o, end)) { break }\n                }\n                mstore(end, last)\n            }\n        }\n    }\n\n    /// @dev Returns if this string is a 7-bit ASCII string,\n    /// AND all characters are in the `allowed` lookup.\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := 1\n            if mload(s) {\n                let allowed_ := shr(128, shl(128, allowed))\n                let o := add(s, 0x20)\n                for { let end := add(o, mload(s)) } 1 {} {\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\n                    o := add(o, 1)\n                    if iszero(and(result, lt(o, end))) { break }\n                }\n            }\n        }\n    }\n\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\n    /// To save runtime gas, you can cache the result in an immutable variable.\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if mload(s) {\n                let o := add(s, 0x20)\n                for { let end := add(o, mload(s)) } 1 {} {\n                    result := or(result, shl(byte(0, mload(o)), 1))\n                    o := add(o, 1)\n                    if iszero(lt(o, end)) { break }\n                }\n                if shr(128, result) {\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\n                    revert(0x1c, 0x04)\n                }\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   BYTE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // For performance and bytecode compactness, byte string operations are restricted\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\n    // can lead to undefined behavior.\n\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\n    function replace(string memory subject, string memory needle, string memory replacement)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(string memory subject, string memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(string memory subject, string memory needle)\n        internal\n        pure\n        returns (uint256)\n    {\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\n    }\n\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.contains(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns whether `subject` starts with `needle`.\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns whether `subject` ends with `needle`.\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\n        return string(LibBytes.repeat(bytes(subject), times));\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(string memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string(LibBytes.slice(bytes(subject), start, end));\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\n    /// `start` is a byte offset.\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\n    }\n\n    /// @dev Returns all the indices of `needle` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(string memory subject, string memory needle)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\n    }\n\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\n    function split(string memory subject, string memory delimiter)\n        internal\n        pure\n        returns (string[] memory result)\n    {\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := a\n        }\n    }\n\n    /// @dev Returns a concatenated string of `a` and `b`.\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\n        return string(LibBytes.concat(bytes(a), bytes(b)));\n    }\n\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function toCase(string memory subject, bool toUpper)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(subject)\n            if n {\n                result := mload(0x40)\n                let o := add(result, 0x20)\n                let d := sub(subject, result)\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\n                for { let end := add(o, n) } 1 {} {\n                    let b := byte(0, mload(add(d, o)))\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\n                    o := add(o, 1)\n                    if eq(o, end) { break }\n                }\n                mstore(result, n) // Store the length.\n                mstore(o, 0) // Zeroize the slot after the string.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n            }\n        }\n    }\n\n    /// @dev Returns a string from a small bytes32 string.\n    /// `s` must be null-terminated, or behavior will be undefined.\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let n := 0\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\0'.\n            mstore(result, n) // Store the length.\n            let o := add(result, 0x20)\n            mstore(o, s) // Store the bytes of the string.\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\0'.\n            mstore(0x00, s)\n            mstore(result, 0x00)\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Returns the string as a normalized null-terminated small string.\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(s)\n            if iszero(lt(result, 33)) {\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\n                revert(0x1c, 0x04)\n            }\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\n        }\n    }\n\n    /// @dev Returns a lowercased copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function lower(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, false);\n    }\n\n    /// @dev Returns an UPPERCASED copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function upper(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, true);\n    }\n\n    /// @dev Escapes the string to be used within HTML tags.\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let end := add(s, mload(s))\n            let o := add(result, 0x20)\n            // Store the bytes of the packed offsets and strides into the scratch space.\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\n            mstore(0x1f, 0x900094)\n            mstore(0x08, 0xc0000000a6ab)\n            // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\n            for {} iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\n                    mstore8(o, c)\n                    o := add(o, 1)\n                    continue\n                }\n                let t := shr(248, mload(c))\n                mstore(o, mload(and(t, 0x1f)))\n                o := add(o, shr(5, t))\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\n    function escapeJSON(string memory s, bool addDoubleQuotes)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let o := add(result, 0x20)\n            if addDoubleQuotes {\n                mstore8(o, 34)\n                o := add(1, o)\n            }\n            // Store \"\\\\u0000\" in scratch space.\n            // Store \"0123456789abcdef\" in scratch space.\n            // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\n            // into the scratch space.\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\n            // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                if iszero(lt(c, 0x20)) {\n                    if iszero(and(shl(c, 1), e)) {\n                        // Not in `[\"\\\"\",\"\\\\\"]`.\n                        mstore8(o, c)\n                        o := add(o, 1)\n                        continue\n                    }\n                    mstore8(o, 0x5c) // \"\\\\\".\n                    mstore8(add(o, 1), c)\n                    o := add(o, 2)\n                    continue\n                }\n                if iszero(and(shl(c, 1), 0x3700)) {\n                    // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\n                    mstore(o, mload(0x19)) // \"\\\\u00XX\".\n                    o := add(o, 6)\n                    continue\n                }\n                mstore8(o, 0x5c) // \"\\\\\".\n                mstore8(add(o, 1), mload(add(c, 8)))\n                o := add(o, 2)\n            }\n            if addDoubleQuotes {\n                mstore8(o, 34)\n                o := add(1, o)\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\n        result = escapeJSON(s, false);\n    }\n\n    /// @dev Encodes `s` so that it can be safely used in a URI,\n    /// just like `encodeURIComponent` in JavaScript.\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            // Store \"0123456789ABCDEF\" in scratch space.\n            // Uppercased to be consistent with JavaScript's implementation.\n            mstore(0x0f, 0x30313233343536373839414243444546)\n            let o := add(result, 0x20)\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\n                    mstore8(o, 0x25) // '%'.\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\n                    mstore8(add(o, 2), mload(and(c, 15)))\n                    o := add(o, 3)\n                    continue\n                }\n                mstore8(o, c)\n                o := add(o, 1)\n            }\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\n        return LibBytes.cmp(bytes(a), bytes(b));\n    }\n\n    /// @dev Packs a single string with its length into a single word.\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\n    function packOne(string memory a) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We don't need to zero right pad the string,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    // Load the length and the bytes.\n                    mload(add(a, 0x1f)),\n                    // `length != 0 && length < 32`. Abuses underflow.\n                    // Assumes that the length is valid and within the block gas limit.\n                    lt(sub(mload(a), 1), 0x1f)\n                )\n        }\n    }\n\n    /// @dev Unpacks a string packed using {packOne}.\n    /// Returns the empty string if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40) // Grab the free memory pointer.\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\n            mstore(result, 0) // Zeroize the length slot.\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\n        }\n    }\n\n    /// @dev Packs two strings with their lengths into a single word.\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLen := mload(a)\n            // We don't need to zero right pad the strings,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    or( // Load the length and the bytes of `a` and `b`.\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\n                    // Assumes that the lengths are valid and within the block gas limit.\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\n                )\n        }\n    }\n\n    /// @dev Unpacks strings packed using {packTwo}.\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\n    function unpackTwo(bytes32 packed)\n        internal\n        pure\n        returns (string memory resultA, string memory resultB)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            resultA := mload(0x40) // Grab the free memory pointer.\n            resultB := add(resultA, 0x40)\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\n            mstore(0x40, add(resultB, 0x40))\n            // Zeroize the length slots.\n            mstore(resultA, 0)\n            mstore(resultB, 0)\n            // Store the lengths and bytes.\n            mstore(add(resultA, 0x1f), packed)\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\n            // Right pad with zeroes.\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(string memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Assumes that the string does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the string is produced\n            // by a method that doesn't zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            mstore(retStart, 0x20) // Store the return offset.\n            // End the transaction, returning the string.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n\n}\n"
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC2981ControlledFunctions {\n\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\n\n}\n\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { IImplicitProjectValidation } from \"../registry/IImplicitProjectValidation.sol\";\n\nimport { ERC165, IERC165 } from \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\nimport { ISignalsImplicitMode } from \"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\";\nimport { Payload } from \"sequence-v3/src/modules/Payload.sol\";\n\n/// @title SignalsImplicitMode\n/// @author Michael Standen\n/// @notice Base contract for implicit mode validation by project\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\n\n  IImplicitProjectValidation internal _validator;\n  bytes32 internal _projectId;\n\n  /// @notice Initialize implicit mode validation\n  /// @param validator The IImplicitProjectValidation address\n  /// @param projectId The project id\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\n    _validator = IImplicitProjectValidation(validator);\n    _projectId = projectId;\n  }\n\n  /// @inheritdoc ISignalsImplicitMode\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32) {\n    _validateImplicitRequest(wallet, attestation, call);\n    return _validator.validateAttestation(wallet, attestation, _projectId);\n  }\n\n  /// @notice Validates an implicit request\n  /// @dev Optional hook for additional validation of the implicit requests\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  function _validateImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) internal view virtual { }\n\n  /// @inheritdoc IERC165\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n}\n"
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for byte related operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\nlibrary LibBytes {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STRUCTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\n    /// Packs length with the first 31 bytes if <255 bytes, so it’s mad tight.\n    struct BytesStorage {\n        bytes32 _spacer;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the bytes.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  BYTE STORAGE OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function set(BytesStorage storage $, bytes memory s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(s)\n            let packed := or(0xff, shl(8, n))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(n, 0xfe)) {\n                    i := 0x1f\n                    packed := or(n, shl(8, mload(add(s, i))))\n                    if iszero(gt(n, i)) { break }\n                }\n                let o := add(s, 0x20)\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to `s`.\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let packed := or(0xff, shl(8, s.length))\n            for { let i := 0 } 1 {} {\n                if iszero(gt(s.length, 0xfe)) {\n                    i := 0x1f\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\n                    if iszero(gt(s.length, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, s.length)) { break }\n                }\n                break\n            }\n            sstore($.slot, packed)\n        }\n    }\n\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\n    function clear(BytesStorage storage $) internal {\n        delete $._spacer;\n    }\n\n    /// @dev Returns whether the value stored is `$` is the empty bytes \"\".\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\n        return uint256($._spacer) & 0xff == uint256(0);\n    }\n\n    /// @dev Returns the length of the value stored in `$`.\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\n        result = uint256($._spacer);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := and(0xff, result)\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\n        }\n    }\n\n    /// @dev Returns the value stored in `$`.\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let o := add(result, 0x20)\n            let packed := sload($.slot)\n            let n := shr(8, packed)\n            for { let i := 0 } 1 {} {\n                if iszero(eq(or(packed, 0xff), packed)) {\n                    mstore(o, packed)\n                    n := and(0xff, packed)\n                    i := 0x1f\n                    if iszero(gt(n, i)) { break }\n                }\n                mstore(0x00, $.slot)\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\n                    i := add(i, 0x20)\n                    if iszero(lt(i, n)) { break }\n                }\n                break\n            }\n            mstore(result, n) // Store the length of the memory.\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let packed := sload($.slot) } 1 {} {\n                if iszero(eq(or(packed, 0xff), packed)) {\n                    if iszero(gt(i, 0x1e)) {\n                        result := byte(i, packed)\n                        break\n                    }\n                    if iszero(gt(i, and(0xff, packed))) {\n                        mstore(0x00, $.slot)\n                        let j := sub(i, 0x1f)\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\n                    }\n                    break\n                }\n                if iszero(gt(i, shr(8, packed))) {\n                    mstore(0x00, $.slot)\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\n                }\n                break\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      BYTES OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let needleLen := mload(needle)\n            let replacementLen := mload(replacement)\n            let d := sub(result, subject) // Memory difference.\n            let i := add(subject, 0x20) // Subject bytes pointer.\n            mstore(0x00, add(i, mload(subject))) // End of subject.\n            if iszero(gt(needleLen, mload(subject))) {\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, needleLen), h)) {\n                                mstore(add(i, d), t)\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Copy the `replacement` one word at a time.\n                        for { let j := 0 } 1 {} {\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\n                            j := add(j, 0x20)\n                            if iszero(lt(j, replacementLen)) { break }\n                        }\n                        d := sub(add(d, replacementLen), needleLen)\n                        if needleLen {\n                            i := add(i, needleLen)\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    mstore(add(i, d), t)\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n            }\n            let end := mload(0x00)\n            let n := add(sub(d, add(result, 0x20)), end)\n            // Copy the rest of the bytes one word at a time.\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\n            let o := add(i, d)\n            mstore(o, 0) // Zeroize the slot after the bytes.\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\n            mstore(result, n) // Store the length.\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := not(0) // Initialize to `NOT_FOUND`.\n            for { let subjectLen := mload(subject) } 1 {} {\n                if iszero(mload(needle)) {\n                    result := from\n                    if iszero(gt(from, subjectLen)) { break }\n                    result := subjectLen\n                    break\n                }\n                let needleLen := mload(needle)\n                let subjectStart := add(subject, 0x20)\n\n                subject := add(subjectStart, from)\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\n                let s := mload(add(needle, 0x20))\n\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\n\n                if iszero(lt(needleLen, 0x20)) {\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                        if iszero(shr(m, xor(mload(subject), s))) {\n                            if eq(keccak256(subject, needleLen), h) {\n                                result := sub(subject, subjectStart)\n                                break\n                            }\n                        }\n                        subject := add(subject, 1)\n                        if iszero(lt(subject, end)) { break }\n                    }\n                    break\n                }\n                for {} 1 {} {\n                    if iszero(shr(m, xor(mload(subject), s))) {\n                        result := sub(subject, subjectStart)\n                        break\n                    }\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\n        return indexOf(subject, needle, 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                result := not(0) // Initialize to `NOT_FOUND`.\n                let needleLen := mload(needle)\n                if gt(needleLen, mload(subject)) { break }\n                let w := result\n\n                let fromMax := sub(mload(subject), needleLen)\n                if iszero(gt(fromMax, from)) { from := fromMax }\n\n                let end := add(add(subject, 0x20), w)\n                subject := add(add(subject, 0x20), from)\n                if iszero(gt(subject, end)) { break }\n                // As this function is not too often used,\n                // we shall simply use keccak256 for smaller bytecode size.\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\n                    if eq(keccak256(subject, needleLen), h) {\n                        result := sub(subject, add(end, 1))\n                        break\n                    }\n                    subject := add(subject, w) // `sub(subject, 1)`.\n                    if iszero(gt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\n    /// needleing from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\n    function lastIndexOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256)\n    {\n        return lastIndexOf(subject, needle, type(uint256).max);\n    }\n\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\n        return indexOf(subject, needle) != NOT_FOUND;\n    }\n\n    /// @dev Returns whether `subject` starts with `needle`.\n    function startsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            // Just using keccak256 directly is actually cheaper.\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\n            result := lt(gt(n, mload(subject)), t)\n        }\n    }\n\n    /// @dev Returns whether `subject` ends with `needle`.\n    function endsWith(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(needle)\n            let notInRange := gt(n, mload(subject))\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\n            // Just using keccak256 directly is actually cheaper.\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\n        }\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(bytes memory subject, uint256 times)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(or(iszero(times), iszero(l))) {\n                result := mload(0x40)\n                subject := add(subject, 0x20)\n                let o := add(result, 0x20)\n                for {} 1 {} {\n                    // Copy the `subject` one word at a time.\n                    for { let j := 0 } 1 {} {\n                        mstore(add(o, j), mload(add(subject, j)))\n                        j := add(j, 0x20)\n                        if iszero(lt(j, l)) { break }\n                    }\n                    o := add(o, l)\n                    times := sub(times, 1)\n                    if iszero(times) { break }\n                }\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(bytes memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := mload(subject) // Subject length.\n            if iszero(gt(l, end)) { end := l }\n            if iszero(gt(l, start)) { start := l }\n            if lt(start, end) {\n                result := mload(0x40)\n                let n := sub(end, start)\n                let i := add(subject, start)\n                let w := not(0x1f)\n                // Copy the `subject` one word at a time, backwards.\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\n                    mstore(add(result, j), mload(add(i, j)))\n                    j := add(j, w) // `sub(j, 0x20)`.\n                    if iszero(j) { break }\n                }\n                let o := add(add(result, 0x20), n)\n                mstore(o, 0) // Zeroize the slot after the bytes.\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\n                mstore(result, n) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset.\n    function slice(bytes memory subject, uint256 start)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        result = slice(subject, start, type(uint256).max);\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, end), sub(end, start))\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\n    function sliceCalldata(bytes calldata subject, uint256 start)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\n            result.offset := add(subject.offset, start)\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\n        }\n    }\n\n    /// @dev Reduces the size of `subject` to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncate(bytes memory subject, uint256 n)\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := subject\n            mstore(mul(lt(n, mload(result)), result), n)\n        }\n    }\n\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\n    function truncatedCalldata(bytes calldata subject, uint256 n)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.offset := subject.offset\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\n        }\n    }\n\n    /// @dev Returns all the indices of `needle` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(bytes memory subject, bytes memory needle)\n        internal\n        pure\n        returns (uint256[] memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let searchLen := mload(needle)\n            if iszero(gt(searchLen, mload(subject))) {\n                result := mload(0x40)\n                let i := add(subject, 0x20)\n                let o := add(result, 0x20)\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\n                let h := 0 // The hash of `needle`.\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\n                let s := mload(add(needle, 0x20))\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\n                    let t := mload(i)\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(i, searchLen), h)) {\n                                i := add(i, 1)\n                                if iszero(lt(i, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\n                        o := add(o, 0x20)\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\n                        if searchLen {\n                            if iszero(lt(i, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    i := add(i, 1)\n                    if iszero(lt(i, subjectSearchEnd)) { break }\n                }\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\n                // Allocate memory for result.\n                // We allocate one more word, so this array can be recycled for {split}.\n                mstore(0x40, add(o, 0x20))\n            }\n        }\n    }\n\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\n    function split(bytes memory subject, bytes memory delimiter)\n        internal\n        pure\n        returns (bytes[] memory result)\n    {\n        uint256[] memory indices = indicesOf(subject, delimiter);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let w := not(0x1f)\n            let indexPtr := add(indices, 0x20)\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n            mstore(add(indicesEnd, w), mload(subject))\n            mstore(indices, add(mload(indices), 1))\n            for { let prevIndex := 0 } 1 {} {\n                let index := mload(indexPtr)\n                mstore(indexPtr, 0x60)\n                if iszero(eq(index, prevIndex)) {\n                    let element := mload(0x40)\n                    let l := sub(index, prevIndex)\n                    mstore(element, l) // Store the length of the element.\n                    // Copy the `subject` one word at a time, backwards.\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n                        o := add(o, w) // `sub(o, 0x20)`.\n                        if iszero(o) { break }\n                    }\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\n                    mstore(indexPtr, element) // Store the `element` into the array.\n                }\n                prevIndex := add(index, mload(delimiter))\n                indexPtr := add(indexPtr, 0x20)\n                if iszero(lt(indexPtr, indicesEnd)) { break }\n            }\n            result := indices\n            if iszero(mload(delimiter)) {\n                result := add(indices, 0x20)\n                mstore(result, sub(mload(indices), 2))\n            }\n        }\n    }\n\n    /// @dev Returns a concatenated bytes of `a` and `b`.\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let w := not(0x1f)\n            let aLen := mload(a)\n            // Copy `a` one word at a time, backwards.\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\n                mstore(add(result, o), mload(add(a, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let bLen := mload(b)\n            let output := add(result, aLen)\n            // Copy `b` one word at a time, backwards.\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\n                mstore(add(output, o), mload(add(b, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let totalLen := add(aLen, bLen)\n            let last := add(add(result, 0x20), totalLen)\n            mstore(last, 0) // Zeroize the slot after the bytes.\n            mstore(result, totalLen) // Store the length.\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLen := mload(a)\n            let bLen := mload(b)\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\n            if n {\n                for { let i := 0x20 } 1 {} {\n                    let x := mload(add(a, i))\n                    let y := mload(add(b, i))\n                    if iszero(or(xor(x, y), eq(i, n))) {\n                        i := add(i, 0x20)\n                        continue\n                    }\n                    result := sub(gt(x, y), lt(x, y))\n                    break\n                }\n            }\n            // forgefmt: disable-next-item\n            if iszero(result) {\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\n                result := sub(gt(x, y), lt(x, y))\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\n            }\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(bytes memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Assumes that the bytes does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the bytes is produced\n            // by a method that doesn't zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            mstore(retStart, 0x20) // Store the return offset.\n            // End the transaction, returning the bytes.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n\n    /// @dev Directly returns `a` with minimal copying.\n    function directReturn(bytes[] memory a) internal pure {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let n := mload(a) // `a.length`.\n            let o := add(a, 0x20) // Start of elements in `a`.\n            let u := a // Highest memory slot.\n            let w := not(0x1f)\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\n                let s := mload(c) // `a[i]`.\n                let l := mload(s) // `a[i].length`.\n                let r := and(l, 0x1f) // `a[i].length % 32`.\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\n                // If `s` comes before `o`, or `s` is not zero right padded.\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\n                    let m := mload(0x40)\n                    mstore(m, l) // Copy `a[i].length`.\n                    for {} 1 {} {\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\n                        z := add(z, w) // `sub(z, 0x20)`.\n                        if iszero(z) { break }\n                    }\n                    let e := add(add(m, 0x20), l)\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\n                    s := m\n                }\n                mstore(c, sub(s, o)) // Convert to calldata offset.\n                let t := add(l, add(s, 0x20))\n                if iszero(lt(t, u)) { u := t }\n            }\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\n            mstore(retStart, 0x20) // Store the return offset.\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(add(add(a, 0x20), offset))\n        }\n    }\n\n    /// @dev Returns the word at `offset`, without any bounds checks.\n    function loadCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := calldataload(add(a.offset, offset))\n        }\n    }\n\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            result.offset := add(a.offset, offset)\n            result.length := sub(a.length, offset)\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\n            result.offset := add(a.offset, s)\n            result.length := sub(a.length, s)\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns bytes in calldata. Performs bounds checks.\n    function bytesInCalldata(bytes calldata a, uint256 offset)\n        internal\n        pure\n        returns (bytes calldata result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let l := sub(a.length, 0x20)\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\n            result.offset := add(add(a.offset, s), 0x20)\n            result.length := calldataload(add(a.offset, s))\n            // forgefmt: disable-next-item\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\n        }\n    }\n\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\n    function emptyCalldata() internal pure returns (bytes calldata result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result.length := 0\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\n\n/// @title IImplicitProjectValidation\n/// @author Michael Standen\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\ninterface IImplicitProjectValidation {\n\n  /// @notice Invalid redirect url error\n  error InvalidRedirectUrl();\n\n  /// @notice Check if a project has a code\n  /// @param wallet The wallet address\n  /// @param attestation The attestation\n  /// @param projectId The project id\n  /// @return magic The attestation magic bytes for the wallet address\n  function validateAttestation(\n    address wallet,\n    Attestation calldata attestation,\n    bytes32 projectId\n  ) external view returns (bytes32);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../../../utils/LibBytes.sol\";\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \"./ISignalsImplicitMode.sol\";\n\nusing LibBytes for bytes;\n\n/// @notice Attestation for a specific session\n/// @param approvedSigner Address of the approved signer\n/// @param identityType Identity type\n/// @param issuerHash Hash of the issuer\n/// @param audienceHash Hash of the audience\n/// @param applicationData Unspecified application data\n/// @param authData Auth data\nstruct Attestation {\n  address approvedSigner;\n  bytes4 identityType;\n  bytes32 issuerHash;\n  bytes32 audienceHash;\n  bytes applicationData;\n  AuthData authData;\n}\n\n/// @notice Auth data for an attestation\n/// @param redirectUrl Authorization redirect URL\n/// @param issuedAt Timestamp of the attestation issuance\nstruct AuthData {\n  string redirectUrl;\n  uint64 issuedAt;\n}\n\n/// @title LibAttestation\n/// @author Michael Standen\n/// @notice Library for attestation management\nlibrary LibAttestation {\n\n  /// @notice Hashes an attestation\n  function toHash(\n    Attestation memory attestation\n  ) internal pure returns (bytes32) {\n    return keccak256(toPacked(attestation));\n  }\n\n  /// @notice Decodes an attestation from a packed bytes array\n  /// @param encoded The packed bytes array\n  /// @param pointer The pointer to the start of the attestation\n  /// @return attestation The decoded attestation\n  /// @return newPointer The new pointer to the end of the attestation\n  function fromPacked(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\n    newPointer = pointer;\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\n    // Application data (arbitrary bytes)\n    uint256 dataSize;\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\n    newPointer += dataSize;\n    // Auth data\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\n    return (attestation, newPointer);\n  }\n\n  /// @notice Decodes the auth data from a packed bytes\n  /// @param encoded The packed bytes containing the auth data\n  /// @param pointer The pointer to the start of the auth data within the encoded data\n  /// @return authData The decoded auth data\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\n  function fromPackedAuthData(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\n    uint24 redirectUrlLength;\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\n    pointer += redirectUrlLength;\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\n    return (authData, pointer);\n  }\n\n  /// @notice Encodes an attestation into a packed bytes array\n  /// @param attestation The attestation to encode\n  /// @return encoded The packed bytes array\n  function toPacked(\n    Attestation memory attestation\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(\n      attestation.approvedSigner,\n      attestation.identityType,\n      attestation.issuerHash,\n      attestation.audienceHash,\n      uint24(attestation.applicationData.length),\n      attestation.applicationData,\n      toPackAuthData(attestation.authData)\n    );\n  }\n\n  /// @notice Encodes the auth data into a packed bytes array\n  /// @param authData The auth data to encode\n  /// @return encoded The packed bytes array\n  function toPackAuthData(\n    AuthData memory authData\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\n  }\n\n  /// @notice Generates the implicit request magic return value\n  /// @param attestation The attestation\n  /// @param wallet The wallet\n  /// @return magic The expected implicit request magic\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\n    );\n  }\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { Payload } from \"../../../modules/Payload.sol\";\nimport { Attestation } from \"./Attestation.sol\";\n\n/// @dev Magic prefix for the implicit request\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\"acceptImplicitRequest\"));\n\n/// @title ISignalsImplicitMode\n/// @author Agustin Aguilar, Michael Standen\n/// @notice Interface for the contracts that support implicit mode validation\ninterface ISignalsImplicitMode {\n\n  /// @notice Determines if an implicit request is valid\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  /// @return magic The hash of the implicit request if valid\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32 magic);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../utils/LibBytes.sol\";\n\nusing LibBytes for bytes;\n\n/// @title Payload\n/// @author Agustin Aguilar, Michael Standen, William Hua\n/// @notice Library for encoding and decoding payloads\nlibrary Payload {\n\n  /// @notice Error thrown when the kind is invalid\n  error InvalidKind(uint8 kind);\n\n  /// @dev keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n  /// @dev keccak256(\"Sequence Wallet\")\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\n\n  /// @dev keccak256(\"3\")\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\n\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\n    return keccak256(\n      abi.encode(\n        EIP712_DOMAIN_TYPEHASH,\n        EIP712_DOMAIN_NAME_SEQUENCE,\n        EIP712_DOMAIN_VERSION_SEQUENCE,\n        _noChainId ? uint256(0) : uint256(block.chainid),\n        _wallet\n      )\n    );\n  }\n\n  /// @dev keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\n\n  /// @dev keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\n\n  /// @dev keccak256(\"Message(bytes message,address[] wallets)\")\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\n\n  /// @dev keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\n\n  /// @notice Kind of transaction\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\n  /// @notice Kind of digest\n  uint8 public constant KIND_MESSAGE = 0x01;\n  /// @notice Kind of config update\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\n  /// @notice Kind of message\n  uint8 public constant KIND_DIGEST = 0x03;\n\n  /// @notice Behavior on error: ignore error\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\n  /// @notice Behavior on error: revert on error\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\n  /// @notice Behavior on error: abort on error\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\n\n  /// @notice Payload call information\n  /// @param to Address of the target contract\n  /// @param value Value to send with the call\n  /// @param data Data to send with the call\n  /// @param gasLimit Gas limit for the call\n  /// @param delegateCall If the call is a delegate call\n  /// @param onlyFallback If the call should only be executed in an error scenario\n  /// @param behaviorOnError Behavior on error\n  struct Call {\n    address to;\n    uint256 value;\n    bytes data;\n    uint256 gasLimit;\n    bool delegateCall;\n    bool onlyFallback;\n    uint256 behaviorOnError;\n  }\n\n  /// @notice Decoded payload\n  /// @param kind Kind of payload\n  /// @param noChainId If the chain ID should be omitted\n  /// @param calls Array of calls (transaction kind)\n  /// @param space Nonce space for the calls (transaction kind)\n  /// @param nonce Nonce value for the calls (transaction kind)\n  /// @param message Message to validate (message kind)\n  /// @param imageHash Image hash to update to (config update kind)\n  /// @param digest Digest to validate (digest kind)\n  /// @param parentWallets Parent wallets\n  struct Decoded {\n    uint8 kind;\n    bool noChainId;\n    // Transaction kind\n    Call[] calls;\n    uint256 space;\n    uint256 nonce;\n    // Message kind\n    // TODO: Maybe native 721 ?\n    bytes message;\n    // Config update kind\n    bytes32 imageHash;\n    // Digest kind for 1271\n    bytes32 digest;\n    // Parent wallets\n    address[] parentWallets;\n  }\n\n  function fromMessage(\n    bytes memory message\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_MESSAGE;\n    _decoded.message = message;\n  }\n\n  function fromConfigUpdate(\n    bytes32 imageHash\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_CONFIG_UPDATE;\n    _decoded.imageHash = imageHash;\n  }\n\n  function fromDigest(\n    bytes32 digest\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_DIGEST;\n    _decoded.digest = digest;\n  }\n\n  function fromPackedCalls(\n    bytes calldata packed\n  ) internal view returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_TRANSACTIONS;\n\n    // Read the global flag\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\n\n    // First bit determines if space is zero or not\n    if (globalFlag & 0x01 == 0x01) {\n      _decoded.space = 0;\n    } else {\n      (_decoded.space, pointer) = packed.readUint160(pointer);\n    }\n\n    // Next 3 bits determine the size of the nonce\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\n\n    if (nonceSize > 0) {\n      // Read the nonce\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\n    }\n\n    uint256 numCalls;\n\n    // Bit 5 determines if the batch contains a single call\n    if (globalFlag & 0x10 == 0x10) {\n      numCalls = 1;\n    } else {\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\n      if (globalFlag & 0x20 == 0x20) {\n        (numCalls, pointer) = packed.readUint16(pointer);\n      } else {\n        (numCalls, pointer) = packed.readUint8(pointer);\n      }\n    }\n\n    // Read the calls\n    _decoded.calls = new Call[](numCalls);\n\n    for (uint256 i = 0; i < numCalls; i++) {\n      uint8 flags;\n      (flags, pointer) = packed.readUint8(pointer);\n\n      // First bit determines if this is a call to self\n      // or a call to another address\n      if (flags & 0x01 == 0x01) {\n        // Call to self\n        _decoded.calls[i].to = address(this);\n      } else {\n        // Call to another address\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\n      }\n\n      // Second bit determines if the call has value or not\n      if (flags & 0x02 == 0x02) {\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\n      }\n\n      // Third bit determines if the call has data or not\n      if (flags & 0x04 == 0x04) {\n        // 3 bytes determine the size of the calldata\n        uint256 calldataSize;\n        (calldataSize, pointer) = packed.readUint24(pointer);\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\n        pointer += calldataSize;\n      }\n\n      // Fourth bit determines if the call has a gas limit or not\n      if (flags & 0x08 == 0x08) {\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\n      }\n\n      // Fifth bit determines if the call is a delegate call or not\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\n\n      // Sixth bit determines if the call is fallback only\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\n\n      // Last 2 bits are directly mapped to the behavior on error\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\n    }\n  }\n\n  function hashCall(\n    Call memory c\n  ) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encode(\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\n      )\n    );\n  }\n\n  function hashCalls(\n    Call[] memory calls\n  ) internal pure returns (bytes32) {\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\n    // hashes of each item. So we hash each Call, pack them, and hash again.\n    bytes32[] memory callHashes = new bytes32[](calls.length);\n    for (uint256 i = 0; i < calls.length; i++) {\n      callHashes[i] = hashCall(calls[i]);\n    }\n    return keccak256(abi.encodePacked(callHashes));\n  }\n\n  function toEIP712(\n    Decoded memory _decoded\n  ) internal pure returns (bytes32) {\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\n\n    if (_decoded.kind == KIND_TRANSACTIONS) {\n      bytes32 callsHash = hashCalls(_decoded.calls);\n      // The top-level struct for Calls might be something like:\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\n    } else if (_decoded.kind == KIND_MESSAGE) {\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\n    } else if (_decoded.kind == KIND_DIGEST) {\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\n    } else {\n      // Unknown kind\n      revert InvalidKind(_decoded.kind);\n    }\n  }\n\n  function hash(\n    Decoded memory _decoded\n  ) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.18;\n\n/// @title Library for reading data from bytes arrays\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\n/// @notice This library contains functions for reading data from bytes arrays.\n/// @dev These functions do not check if the input index is within the bounds of the data array.\n/// @dev Reading out of bounds may return dirty values.\nlibrary LibBytes {\n\n  function readFirstUint8(\n    bytes calldata _data\n  ) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(_data.offset)\n      a := shr(248, word)\n      newPointer := 1\n    }\n  }\n\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(248, word)\n      newPointer := add(_index, 1)\n    }\n  }\n\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(240, word)\n      newPointer := add(_index, 2)\n    }\n  }\n\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(232, word)\n      newPointer := add(_index, 3)\n    }\n  }\n\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(192, word)\n      newPointer := add(_index, 8)\n    }\n  }\n\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(96, word)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_index, _data.offset))\n      newPointer := add(_index, 32)\n    }\n  }\n\n  function readUintX(\n    bytes calldata _data,\n    uint256 _index,\n    uint256 _length\n  ) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      let shift := sub(256, mul(_length, 8))\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\n      newPointer := add(_index, _length)\n    }\n  }\n\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_pointer, _data.offset))\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n      newPointer := add(_pointer, 4)\n    }\n  }\n\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_pointer, _data.offset))\n      newPointer := add(_pointer, 32)\n    }\n  }\n\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  /// @dev ERC-2098 Compact Signature\n  function readRSVCompact(\n    bytes calldata _data,\n    uint256 _index\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\n    uint256 yParityAndS;\n    assembly {\n      r := calldataload(add(_index, _data.offset))\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\n      newPointer := add(_index, 64)\n    }\n    uint256 yParity = uint256(yParityAndS >> 255);\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\n    v = uint8(yParity) + 27;\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc2470-libs/=lib/erc2470-libs/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "murky/=lib/murky/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/",
        "signals-implicit-mode/=lib/signals-implicit-mode/",
        "solady/=lib/solady/src/"
      ],
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "evm.bytecode",
            "evm.deployedBytecode",
            "devdoc",
            "userdoc",
            "metadata",
            "abi",
            "evm.methodIdentifiers"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": true,
      "libraries": {}
    },
    "evmVersion": "paris",
    "viaIR": true,
    "libraries": {}
  },
  "output": {
    "contracts": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "AccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "AccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Extension of {AccessControl} that allows enumerating the members of each role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "IAccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControl declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "IAccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControlEnumerable declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "IERC1967": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "IERC2981": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "royaltyAmount",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._",
            "kind": "dev",
            "methods": {
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":\"IERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "IERC1822Proxiable": {
          "abi": [
            {
              "inputs": [],
              "name": "proxiableUUID",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
            "kind": "dev",
            "methods": {
              "proxiableUUID()": {
                "details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "proxiableUUID()": "52d1902d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "ERC1967Upgrade": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "_ADMIN_SLOT": {
                "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
              },
              "_BEACON_SLOT": {
                "details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
              },
              "_IMPLEMENTATION_SLOT": {
                "details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "Proxy": {
          "abi": [
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "IBeacon": {
          "abi": [
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This is the interface that {BeaconProxy} expects of its beacon.",
            "kind": "dev",
            "methods": {
              "implementation()": {
                "details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "UpgradeableBeacon": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newImplementation",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.",
            "events": {
              "Upgraded(address)": {
                "details": "Emitted when the implementation returned by the beacon is changed."
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."
              },
              "implementation()": {
                "details": "Returns the current implementation address."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeTo(address)": {
                "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 407,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_Ownable": {
                  "entryPoint": 302,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_UpgradeableBeacon": {
                  "entryPoint": 283,
                  "id": 1095,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 563,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 535,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_UpgradeableBeacon": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 687,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 862,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 657,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_setImplementation": {
                  "entryPoint": 622,
                  "id": 1141,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 726,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 532,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 587,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 823,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:11:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;931:89::-;997:15;931:89;;;:::i;:::-;997:15;:::i;:::-;931:89::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;543:1496:11:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;543:1496::-;;;:::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:11:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;543:1496:11:-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 278,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 175,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 190,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 294,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 1215,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 998,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 1190,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 221,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 307,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 1429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 911,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 142,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 797,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 1708,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 1711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_implementation": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeTo": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__transferOwnership": {
                  "entryPoint": 1593,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 1281,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_implementation": {
                  "entryPoint": 757,
                  "id": 1105,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 1739,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 1690,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 870,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 860,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 840,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 1563,
                  "id": 1141,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 1139,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 1090,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 691,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo_inner": {
                  "entryPoint": 616,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 561,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 779,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_1111": {
                  "entryPoint": 542,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 892,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 1528,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 1240,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 1049,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 1454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 537,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 121,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 126,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_left": {
                  "entryPoint": 1495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 920,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 1325,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 1150,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 1501,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 1531,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 154,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 702,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1703,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:11:-:0;;;;;;;;;-1:-1:-1;543:1496:11;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:11:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1469:167::-;1569:17;;;:::i;:::-;1602:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1469:167::o;:::-;;;;:::i;:::-;:::o;543:1496::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1098:112::-;1162:7;;:::i;:::-;1188:15;;;;:::i;:::-;1181:22;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;543:1496:11:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;1201:85::-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:11:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;543:1496:11:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;543:1496:11:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:11:-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeTo(address)": "3659cfe6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\",\"events\":{\"Upgraded(address)\":{\"details\":\"Emitted when the implementation returned by the beacon is changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon.\"},\"implementation()\":{\"details\":\"Returns the current implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":\"UpgradeableBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "ERC2981": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._",
            "kind": "dev",
            "methods": {
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":\"ERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:13:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:13:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "Create2": {
          "abi": [],
          "devdoc": {
            "details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:15:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:15:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "devdoc": {
            "details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:16:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:16:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:17:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:17:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "Math": {
          "abi": [],
          "devdoc": {
            "details": "Standard math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:20:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:20:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "SignedMath": {
          "abi": [],
          "devdoc": {
            "details": "Standard signed math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:21:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:21:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "EnumerableSet": {
          "abi": [],
          "devdoc": {
            "details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:22:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:22:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "LibAttestation": {
          "abi": [],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {},
            "title": "LibAttestation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:23:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:23:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LibAttestation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for attestation management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":\"LibAttestation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for attestation management",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "ISignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "magic",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "magic": "The hash of the implicit request if valid"
                }
              }
            },
            "title": "ISignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"magic\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"magic\":\"The hash of the implicit request if valid\"}}},\"title\":\"ISignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Interface for the contracts that support implicit mode validation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":\"ISignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Interface for the contracts that support implicit mode validation",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "Payload": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "kind",
                  "type": "uint8"
                }
              ],
              "name": "InvalidKind",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_ABORT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_IGNORE_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_REVERT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_CONFIG_UPDATE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_DIGEST",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_MESSAGE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_TRANSACTIONS",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen, William Hua",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "CALLS_TYPEHASH": {
                "details": "keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CALL_TYPEHASH": {
                "details": "keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CONFIG_UPDATE_TYPEHASH": {
                "details": "keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")"
              },
              "EIP712_DOMAIN_NAME_SEQUENCE": {
                "details": "keccak256(\"Sequence Wallet\")"
              },
              "EIP712_DOMAIN_TYPEHASH": {
                "details": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
              },
              "EIP712_DOMAIN_VERSION_SEQUENCE": {
                "details": "keccak256(\"3\")"
              },
              "MESSAGE_TYPEHASH": {
                "details": "keccak256(\"Message(bytes message,address[] wallets)\")"
              }
            },
            "title": "Payload",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 42,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234602057600e6024565b61036661003082393081505061036690f35b602a565b60405190565b600080fdfe60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x20 JUMPI PUSH1 0xE PUSH1 0x24 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x30 DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH2 0x366 SWAP1 RETURN JUMPDEST PUSH1 0x2A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:25:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple_uint8": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8": {
                  "entryPoint": 238,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 414,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 174,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 316,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 177,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 512,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 646,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_CONFIG_UPDATE": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_DIGEST": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_MESSAGE": {
                  "entryPoint": 445,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_TRANSACTIONS": {
                  "entryPoint": 347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint8": {
                  "entryPoint": 319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint8": {
                  "entryPoint": 186,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 716,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 417,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 603,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 273,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_DIGEST": {
                  "entryPoint": 768,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_MESSAGE": {
                  "entryPoint": 469,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 371,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "getter_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 525,
                  "id": 4162,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 592,
                  "id": 4154,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 659,
                  "id": 4158,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 227,
                  "id": 4146,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_DIGEST": {
                  "entryPoint": 757,
                  "id": 4150,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_MESSAGE": {
                  "entryPoint": 458,
                  "id": 4142,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 360,
                  "id": 4138,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:25:-:0;;;;;;;;;-1:-1:-1;275:9850:25;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2439:47::-;2482:4;;;:::i;:::-;2439:47;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2279:46::-;2321:4;;;:::i;:::-;2279:46;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2358:41::-;2395:4;;;:::i;:::-;2358:41;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2819:52;2867:4;;;:::i;:::-;2819:52;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2611:50;2657:4;;;:::i;:::-;2611:50;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2714:53;2763:4;;;:::i;:::-;2714:53;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2520:40::-;2556:4;;;:::i;:::-;2520:40;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;"
            },
            "methodIdentifiers": {
              "BEHAVIOR_ABORT_ON_ERROR()": "420b0c25",
              "BEHAVIOR_IGNORE_ERROR()": "4a7d2aa0",
              "BEHAVIOR_REVERT_ON_ERROR()": "4e5f5715",
              "KIND_CONFIG_UPDATE()": "0739d59a",
              "KIND_DIGEST()": "b570180a",
              "KIND_MESSAGE()": "3d5c1f9b",
              "KIND_TRANSACTIONS()": "075a3d2d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"InvalidKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEHAVIOR_ABORT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_IGNORE_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_REVERT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_CONFIG_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_DIGEST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_MESSAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_TRANSACTIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen, William Hua\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"CALLS_TYPEHASH\":{\"details\":\"keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CALL_TYPEHASH\":{\"details\":\"keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CONFIG_UPDATE_TYPEHASH\":{\"details\":\"keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\"},\"EIP712_DOMAIN_NAME_SEQUENCE\":{\"details\":\"keccak256(\\\"Sequence Wallet\\\")\"},\"EIP712_DOMAIN_TYPEHASH\":{\"details\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"EIP712_DOMAIN_VERSION_SEQUENCE\":{\"details\":\"keccak256(\\\"3\\\")\"},\"MESSAGE_TYPEHASH\":{\"details\":\"keccak256(\\\"Message(bytes message,address[] wallets)\\\")\"}},\"title\":\"Payload\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKind(uint8)\":[{\"notice\":\"Error thrown when the kind is invalid\"}]},\"kind\":\"user\",\"methods\":{\"BEHAVIOR_ABORT_ON_ERROR()\":{\"notice\":\"Behavior on error: abort on error\"},\"BEHAVIOR_IGNORE_ERROR()\":{\"notice\":\"Behavior on error: ignore error\"},\"BEHAVIOR_REVERT_ON_ERROR()\":{\"notice\":\"Behavior on error: revert on error\"},\"KIND_CONFIG_UPDATE()\":{\"notice\":\"Kind of config update\"},\"KIND_DIGEST()\":{\"notice\":\"Kind of message\"},\"KIND_MESSAGE()\":{\"notice\":\"Kind of digest\"},\"KIND_TRANSACTIONS()\":{\"notice\":\"Kind of transaction\"}},\"notice\":\"Library for encoding and decoding payloads\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":\"Payload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidKind(uint8)": [
                {
                  "notice": "Error thrown when the kind is invalid"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "BEHAVIOR_ABORT_ON_ERROR()": {
                "notice": "Behavior on error: abort on error"
              },
              "BEHAVIOR_IGNORE_ERROR()": {
                "notice": "Behavior on error: ignore error"
              },
              "BEHAVIOR_REVERT_ON_ERROR()": {
                "notice": "Behavior on error: revert on error"
              },
              "KIND_CONFIG_UPDATE()": {
                "notice": "Kind of config update"
              },
              "KIND_DIGEST()": {
                "notice": "Kind of message"
              },
              "KIND_MESSAGE()": {
                "notice": "Kind of digest"
              },
              "KIND_TRANSACTIONS()": {
                "notice": "Kind of transaction"
              }
            },
            "notice": "Library for encoding and decoding payloads",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)",
            "details": "These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.",
            "kind": "dev",
            "methods": {},
            "title": "Library for reading data from bytes arrays",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:26:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:26:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\",\"details\":\"These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for reading data from bytes arrays\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library contains functions for reading data from bytes arrays.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "This library contains functions for reading data from bytes arrays.",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "SignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "title": "SignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"SignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Base contract for implicit mode validation by project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":\"SignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Base contract for implicit mode validation by project",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "IImplicitProjectValidation": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidRedirectUrl",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "validateAttestation",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "params": {
                  "attestation": "The attestation",
                  "projectId": "The project id",
                  "wallet": "The wallet address"
                },
                "returns": {
                  "_0": "magic The attestation magic bytes for the wallet address"
                }
              }
            },
            "title": "IImplicitProjectValidation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": "3808a90b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidRedirectUrl\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"validateAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"params\":{\"attestation\":\"The attestation\",\"projectId\":\"The project id\",\"wallet\":\"The wallet address\"},\"returns\":{\"_0\":\"magic The attestation magic bytes for the wallet address\"}}},\"title\":\"IImplicitProjectValidation\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRedirectUrl()\":[{\"notice\":\"Invalid redirect url error\"}]},\"kind\":\"user\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"notice\":\"Check if a project has a code\"}},\"notice\":\"Interface for contracts supporting validation of implicit sessions for projects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":\"IImplicitProjectValidation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidRedirectUrl()": [
                {
                  "notice": "Invalid redirect url error"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "notice": "Check if a project has a code"
              }
            },
            "notice": "Interface for contracts supporting validation of implicit sessions for projects",
            "version": 1
          }
        }
      },
      "lib/solady/src/tokens/ERC721.sol": {
        "ERC721": {
          "abi": [
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BalanceQueryForZeroAddress",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenAlreadyExists",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenDoesNotExist",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFromIncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC721ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)",
            "details": "Note: - The ERC721 standard allows for self-approvals.   For performance, this implementation WILL NOT revert for such actions.   Please add any checks with overrides if desired. - For performance, methods are made payable where permitted by the ERC721 standard. - The `safeTransfer` functions use the identity precompile (0x4)   to copy memory internally. If you are overriding: - NEVER violate the ERC721 invariant:   the balance of an owner MUST always be equal to their number of ownership slots.   The transfer functions do not have an underflow guard for user token balances. - Make sure all variables written to storage are properly cleaned   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood). - Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.",
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "BalanceQueryForZeroAddress()": [
                {
                  "details": "Cannot query the balance for the zero address."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the token."
                }
              ],
              "TokenAlreadyExists()": [
                {
                  "details": "The token already exists."
                }
              ],
              "TokenDoesNotExist()": [
                {
                  "details": "The token does not exist."
                }
              ],
              "TransferFromIncorrectOwner()": [
                {
                  "details": "The token must be owned by `from`."
                }
              ],
              "TransferToNonERC721ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when `owner` enables `account` to manage the `id` token."
              },
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when token `id` is transferred from `from` to `to`."
              }
            },
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "name()": {
                "details": "Returns the token collection name."
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of token `id`. Requirements: - Token `id` must exist."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Equivalent to `safeTransferFrom(from, to, id, \"\")`."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."
              },
              "symbol()": {
                "details": "Returns the token collection symbol."
              },
              "tokenURI(uint256)": {
                "details": "Returns the Uniform Resource Identifier (URI) for token `id`."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."
              }
            },
            "stateVariables": {
              "_APPROVAL_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"Approval(address,address,uint256)\"))`."
              },
              "_APPROVAL_FOR_ALL_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`."
              },
              "_ERC721_MASTER_SLOT_SEED": {
                "details": "The ownership data slot of `id` is given by: ```     mstore(0x00, id)     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20))) ``` Bits Layout: - [0..159]   `addr` - [160..255] `extraData` The approved address slot is given by: `add(1, ownershipSlot)`. See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip The balance slot of `owner` is given by: ```     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     mstore(0x00, owner)     let balanceSlot := keccak256(0x0c, 0x1c) ``` Bits Layout: - [0..31]   `balance` - [32..255] `aux` The `operator` approval slot of `owner` is given by: ```     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))     mstore(0x00, owner)     let operatorApprovalSlot := keccak256(0x0c, 0x30) ```"
              },
              "_ERC721_MASTER_SLOT_SEED_MASKED": {
                "details": "Pre-shifted and pre-masked constant."
              },
              "_MAX_ACCOUNT_BALANCE": {
                "details": "An account can hold up to 4294967295 tokens."
              },
              "_TRANSFER_EVENT_SIGNATURE": {
                "details": "`keccak256(bytes(\"Transfer(address,address,uint256)\"))`."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\",\"details\":\"Note: - The ERC721 standard allows for self-approvals.   For performance, this implementation WILL NOT revert for such actions.   Please add any checks with overrides if desired. - For performance, methods are made payable where permitted by the ERC721 standard. - The `safeTransfer` functions use the identity precompile (0x4)   to copy memory internally. If you are overriding: - NEVER violate the ERC721 invariant:   the balance of an owner MUST always be equal to their number of ownership slots.   The transfer functions do not have an underflow guard for user token balances. - Make sure all variables written to storage are properly cleaned   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood). - Check that the overridden function is actually used in the function you want to   change the behavior of. Much of the code has been manually inlined for performance.\",\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `account` to manage the `id` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when token `id` is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for token `id`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"}},\"stateVariables\":{\"_APPROVAL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\"},\"_APPROVAL_FOR_ALL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\"},\"_ERC721_MASTER_SLOT_SEED\":{\"details\":\"The ownership data slot of `id` is given by: ```     mstore(0x00, id)     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20))) ``` Bits Layout: - [0..159]   `addr` - [160..255] `extraData` The approved address slot is given by: `add(1, ownershipSlot)`. See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip The balance slot of `owner` is given by: ```     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)     mstore(0x00, owner)     let balanceSlot := keccak256(0x0c, 0x1c) ``` Bits Layout: - [0..31]   `balance` - [32..255] `aux` The `operator` approval slot of `owner` is given by: ```     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))     mstore(0x00, owner)     let operatorApprovalSlot := keccak256(0x0c, 0x30) ```\"},\"_ERC721_MASTER_SLOT_SEED_MASKED\":{\"details\":\"Pre-shifted and pre-masked constant.\"},\"_MAX_ACCOUNT_BALANCE\":{\"details\":\"An account can hold up to 4294967295 tokens.\"},\"_TRANSFER_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple ERC721 implementation with storage hitchhiking.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/tokens/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n///   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Mints token `id` to `to`, and updates the extra data for token `id` to `value`.\\n    /// Does NOT check if token `id` already exists (assumes `id` is auto-incrementing).\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Update with the owner and extra data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            sstore(add(id, add(id, keccak256(0x00, 0x20))), or(shl(160, value), to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ee665c5f70c388430cd7af42a5b1c2ff0e11ab45e46ab7ba02a6aad29f5cc77\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Simple ERC721 implementation with storage hitchhiking.",
            "version": 1
          }
        }
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "NOT_FOUND": {
                "details": "The constant returned when the `search` is not found in the bytes."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202333ed565e73699ecd67ee453c4d35b10817b7875cd0ca836c6ddecc89795dae64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLER 0xED JUMP MCOPY PUSH20 0x699ECD67EE453C4D35B10817B7875CD0CA836C6D 0xDE 0xCC DUP10 PUSH26 0x5DAE64736F6C634300081B003300000000000000000000000000 ",
              "sourceMap": "197:34035:30:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202333ed565e73699ecd67ee453c4d35b10817b7875cd0ca836c6ddecc89795dae64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLER 0xED JUMP MCOPY PUSH20 0x699ECD67EE453C4D35B10817B7875CD0CA836C6D 0xDE 0xCC DUP10 PUSH26 0x5DAE64736F6C634300081B003300000000000000000000000000 ",
              "sourceMap": "197:34035:30:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"NOT_FOUND\":{\"details\":\"The constant returned when the `search` is not found in the bytes.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for byte related operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for byte related operations.",
            "version": 1
          }
        }
      },
      "lib/solady/src/utils/LibString.sol": {
        "LibString": {
          "abi": [
            {
              "inputs": [],
              "name": "HexLengthInsufficient",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "StringNot7BitASCII",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TooBigForSmallString",
              "type": "error"
            }
          ],
          "devdoc": {
            "author": "Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)",
            "details": "Note: For performance and bytecode compactness, most of the string operations are restricted to byte strings (7-bit ASCII), except where otherwise specified. Usage of byte string operations on charsets with runes spanning two or more bytes can lead to undefined behavior.",
            "errors": {
              "HexLengthInsufficient()": [
                {
                  "details": "The length of the output is too small to contain all the hex digits."
                }
              ],
              "StringNot7BitASCII()": [
                {
                  "details": "The input string must be a 7-bit ASCII."
                }
              ],
              "TooBigForSmallString()": [
                {
                  "details": "The length of the string is more than 32 bytes."
                }
              ]
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "ALPHANUMERIC_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "DIGITS_7_BIT_ASCII": {
                "details": "Lookup for '0123456789'."
              },
              "HEXDIGITS_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefABCDEF'."
              },
              "LETTERS_7_BIT_ASCII": {
                "details": "Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "LOWERCASE_7_BIT_ASCII": {
                "details": "Lookup for 'abcdefghijklmnopqrstuvwxyz'."
              },
              "NOT_FOUND": {
                "details": "The constant returned when the `search` is not found in the string."
              },
              "OCTDIGITS_7_BIT_ASCII": {
                "details": "Lookup for '01234567'."
              },
              "PRINTABLE_7_BIT_ASCII": {
                "details": "Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'."
              },
              "PUNCTUATION_7_BIT_ASCII": {
                "details": "Lookup for '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'."
              },
              "UPPERCASE_7_BIT_ASCII": {
                "details": "Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."
              },
              "WHITESPACE_7_BIT_ASCII": {
                "details": "Lookup for ' \\t\\n\\r\\x0b\\x0c'."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122044d64d04dd0a352de493c946f66d2bfa5efcbfe4a0d84a5ebd4caf0aafc397e164736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xD6 0x4D DIV 0xDD EXP CALLDATALOAD 0x2D 0xE4 SWAP4 0xC9 CHAINID 0xF6 PUSH14 0x2BFA5EFCBFE4A0D84A5EBD4CAF0A 0xAF 0xC3 SWAP8 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "690:43561:31:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122044d64d04dd0a352de493c946f66d2bfa5efcbfe4a0d84a5ebd4caf0aafc397e164736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO 0xD6 0x4D DIV 0xDD EXP CALLDATALOAD 0x2D 0xE4 SWAP4 0xC9 CHAINID 0xF6 PUSH14 0x2BFA5EFCBFE4A0D84A5EBD4CAF0A 0xAF 0xC3 SWAP8 0xE1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "690:43561:31:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"HexLengthInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StringNot7BitASCII\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigForSmallString\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\",\"details\":\"Note: For performance and bytecode compactness, most of the string operations are restricted to byte strings (7-bit ASCII), except where otherwise specified. Usage of byte string operations on charsets with runes spanning two or more bytes can lead to undefined behavior.\",\"errors\":{\"HexLengthInsufficient()\":[{\"details\":\"The length of the output is too small to contain all the hex digits.\"}],\"StringNot7BitASCII()\":[{\"details\":\"The input string must be a 7-bit ASCII.\"}],\"TooBigForSmallString()\":[{\"details\":\"The length of the string is more than 32 bytes.\"}]},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ALPHANUMERIC_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"DIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789'.\"},\"HEXDIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefABCDEF'.\"},\"LETTERS_7_BIT_ASCII\":{\"details\":\"Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"LOWERCASE_7_BIT_ASCII\":{\"details\":\"Lookup for 'abcdefghijklmnopqrstuvwxyz'.\"},\"NOT_FOUND\":{\"details\":\"The constant returned when the `search` is not found in the string.\"},\"OCTDIGITS_7_BIT_ASCII\":{\"details\":\"Lookup for '01234567'.\"},\"PRINTABLE_7_BIT_ASCII\":{\"details\":\"Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\"},\"PUNCTUATION_7_BIT_ASCII\":{\"details\":\"Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\"},\"UPPERCASE_7_BIT_ASCII\":{\"details\":\"Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\"},\"WHITESPACE_7_BIT_ASCII\":{\"details\":\"Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for converting numbers into strings and other string operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/utils/LibString.sol\":\"LibString\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for converting numbers into strings and other string operations.",
            "version": 1
          }
        }
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "SequenceProxyFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.",
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"An proxy factory that deploys upgradeable beacon proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/SequenceProxyFactory.sol\":\"SequenceProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "An proxy factory that deploys upgradeable beacon proxies.",
            "version": 1
          }
        }
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "ITransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "initialize(address,address,bytes)": "cf7a1d77"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"ITransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:33:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 2382,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payable": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_address_payablet_bytes": {
                  "entryPoint": 809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 2397,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 1796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1623,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 2190,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 5052,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 5003,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3321,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3820": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9589": {
                  "entryPoint": 3295,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 4604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 4809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95f": {
                  "entryPoint": 3491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3465,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 3021,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 4630,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 4256,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 673,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 2315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 4962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2908,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 89,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 338,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by": {
                  "entryPoint": 4373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 3557,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 248,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 18,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 424,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 288,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 3588,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 4404,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 931,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2303,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 508,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 2343,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1_to_bytes32": {
                  "entryPoint": 3560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 60,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 4376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 427,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 3930,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1445,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 919,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 891,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 708,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3905,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 4966,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 4279,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 611,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 107,
                  "id": 7745,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__implementation": {
                  "entryPoint": 3993,
                  "id": 7811,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_admin": {
                  "entryPoint": 2170,
                  "id": 8140,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_changeAdmin": {
                  "entryPoint": 2226,
                  "id": 913,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 2791,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 1727,
                  "id": 8015,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1827,
                  "id": 8064,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 1658,
                  "id": 8035,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchInitialize": {
                  "entryPoint": 1025,
                  "id": 7667,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 2071,
                  "id": 8098,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1985,
                  "id": 8130,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 1132,
                  "id": 7995,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_fallback_1035": {
                  "entryPoint": 1610,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 3941,
                  "id": 1557,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1586": {
                  "entryPoint": 4322,
                  "id": 1586,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1442,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 382,
                  "id": 870,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 4487,
                  "id": 930,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 4448,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 2726,
                  "id": 7775,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation_7848": {
                  "entryPoint": 3973,
                  "id": 7848,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 1516,
                  "id": 7699,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 4223,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1485,
                  "id": 8152,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 5077,
                  "id": 1669,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 3149,
                  "id": 896,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBeacon": {
                  "entryPoint": 3632,
                  "id": 966,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 4696,
                  "id": 755,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeaconToAndCall": {
                  "entryPoint": 2445,
                  "id": 1004,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 4143,
                  "id": 770,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 2826,
                  "id": 800,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 4875,
                  "id": 1625,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 29,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 589,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3114,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 369,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1473,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 3046,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9589": {
                  "entryPoint": 3346,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 4655,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 4834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f95f": {
                  "entryPoint": 3516,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 569,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 466,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 461,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 574,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 516,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 511,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 2428,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 254,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 2355,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 332,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470": {
                  "entryPoint": 3217,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 4526,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3387,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3087,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 2361,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 533,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 243,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 4218,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 84,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:33:-:0;;;;;2853:63:9;1165:2219:33;2629:64:9;:::i;1165:2219:33:-;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;:::o;2210:701::-;2299:11;;:::i;:::-;:25;;2314:10;2322:1;2314:10;:::i;:::-;2299:25;:::i;:::-;;;:::i;:::-;;2295:561;;2340:16;;:::i;:::-;1165:2219;;;;2388:7;;;2413:66;;2425:54;;;2413:66;:::i;:::-;;;:::i;:::-;;2409:296;;2822:23;;;;;;;;;;;;:::i;:::-;;;;2409:296;2505:21;;:::i;:::-;2608:83;;;;;;1165:2219;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:8:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;1165:2219:33;;;;;3656:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;1165:2219:33:-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1365:274::-;1413:12;;:::i;:::-;;;;:::i;:::-;1607:4;1467:104;;1520:51;;1531:12;:8;;:12;1540:1;1531:12;:::i;:::-;;;;;:::i;:::-;1520:51;;:::i;:::-;;;;;:::i;:::-;1467:104;;;;;;:::i;:::-;;;:::i;:::-;;1592:5;1599:6;1607:4;;;:::i;:::-;1623:9;;:::i;:::-;;:::o;3518:1089:36:-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;1165:2219:33;;;;3668:7:36;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;1859:190:16:-;;:::o;1165:2219:33:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78:36;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;1645:352:33:-;;;1738:8;;:::i;:::-;:22;;1750:10;1758:1;1750:10;:::i;:::-;1738:22;:::i;:::-;;;:::i;:::-;;1734:174;;1930:5;1984;1930;;:::i;:::-;1978:4;1984:5;;;:::i;:::-;1645:352::o;1734:174::-;1874:23;2822;;;1874;;;;;;;;:::i;:::-;;;;2322:110:9;2407:17;;:::i;:::-;;:::i;1165:2219:33:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;5483:198:36:-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;1165:2219:33:-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;5792:216:36:-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;1165:2219:33:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254:36:-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;7029:93::-;7078:7;;:::i;:::-;7104:11;;;:::i;:::-;7097:18;:::o;1165:2219:33:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:8:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;1165:2219:33:-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;5728:313:8;;5845:9;;;:::i;:::-;5885;5870:25;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;5909:11;:4;:11;:::i;:::-;:15;;5923:1;5909:15;:::i;:::-;;;:::i;:::-;;:28;;;;;5728:313;5905:130;;;5728:313;;;:::o;5905:130::-;5982:35;:33;:18;:35;5990:9;5982:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;5953:71;5982:35;;;;;5905:130;6019:4;5953:71;;:::i;:::-;;5905:130;;;;5982:35;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;5909:28::-;5928:9;;5909:28;;;3079:302:33;3165:7;;:::i;:::-;3209:30;;;:::i;:::-;3253:14;:28;;3271:10;3279:1;3271:10;:::i;:::-;3253:28;:::i;:::-;;;:::i;:::-;;3249:80;;3345:29;;;:::i;:::-;3338:36;:::o;3249:80::-;3297:21;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2057:265:8;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;1165:2219:33;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:8:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:8:-;4719:66;;;:::i;:::-;4678:107;:::o;5054:371::-;5240:35;5054:371;5111:79;5119:29;5138:9;5119:29;:::i;:::-;5111:79;:::i;:::-;5240:35;:33;:18;5248:9;5240:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;5221:55;5200:150;5240:35;5360:58;5240:35;;;;;5054:371;5221:55;;:::i;:::-;5200:150;:::i;:::-;5360:46;:40;5387:12;;:::i;:::-;5360:40;:::i;:::-;:46;:58;:::i;:::-;5054:371::o;5240:35::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:13:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;884:140:35:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;1121:138:34:-;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1771:152:8:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;1165:2219:33:-;;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;1165:2219:33:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:13;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;1165:2219:33:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1165:2219:33:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:8;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;1165:2219:33:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:13;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;1165:2219:33:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:13:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;1165:2219:33;;;;;;9324:20:13;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"TransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "BeaconProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b6102cf61002c82396102cf90f35b6026565b60405190565b600080fdfe608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C DUP3 CODECOPY PUSH2 0x2CF SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:34:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 235,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 281,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 112,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 22,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 529,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 76,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 100,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 501,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 64,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 150,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 454,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 662,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 623,
                  "id": 930,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 304,
                  "id": 7811,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 197,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 287,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 118,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "validator_revert_address": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 17,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:34:-:0;;;2407:17:9;;:::i;:::-;;:::i;806:967:34:-;;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;1121:138;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;806:967:34;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:8:-;4719:66;;;:::i;:::-;4678:107;:::o;4719:66::-;;;;:::o;:::-;806:967:34;;;;;4719:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1859:190:16:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/BeaconProxy.sol\":\"BeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "ERC1967Proxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61011561002c823961011590f35b6026565b60405190565b600080fdfe6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x2C DUP3 CODECOPY PUSH2 0x115 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:35:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "cleanup_bytes32": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 69,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 103,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 81,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 162,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 35,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 220,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 189,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 19,
                  "id": 7848,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 178,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 75,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 145,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 14,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:35:-:0;;;2407:17:9;;:::i;:::-;;:::i;758:269:35:-;;;:::o;884:140::-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;758:269:35;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1030:66::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;1859:190:16:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "ITransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "admin",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "changeAdmin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "upgradeToAndCall",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "admin()": "f851a440",
              "changeAdmin(address)": "8f283970",
              "implementation()": "5c60da1b",
              "upgradeTo(address)": "3659cfe6",
              "upgradeToAndCall(address,bytes)": "4f1ef286"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"ITransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b610db061002c8239610db090f35b6026565b60405190565b600080fdfe6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0xDB0 PUSH2 0x2C DUP3 CODECOPY PUSH2 0xDB0 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:36:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_payable": {
                  "entryPoint": 938,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1373,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 1338,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 953,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 1760,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 3342,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 3293,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 2739,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 3099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 2434,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 2226,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 2765,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1036,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 2878,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 556,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1873,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 3252,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2113,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 855,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 26,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 43,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 460,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 808,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 1686,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 1959,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 410,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 1990,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 892,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 1962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 817,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 2618,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 1012,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 984,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 1272,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2593,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 3256,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 2901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 629,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1051,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1043,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 543,
                  "id": 1035,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_changeAdmin": {
                  "entryPoint": 1796,
                  "id": 913,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 1651,
                  "id": 1016,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 739,
                  "id": 8015,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1139,
                  "id": 8064,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 670,
                  "id": 8035,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 1529,
                  "id": 8098,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1443,
                  "id": 8130,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 55,
                  "id": 7995,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 2629,
                  "id": 1557,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1586": {
                  "entryPoint": 2944,
                  "id": 1586,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1628,
                  "id": 1805,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 504,
                  "id": 870,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 2034,
                  "id": 731,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 1631,
                  "id": 7848,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 3000,
                  "id": 1358,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1729,
                  "id": 8152,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 3367,
                  "id": 1669,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 2366,
                  "id": 896,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 2831,
                  "id": 755,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 2440,
                  "id": 770,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 1877,
                  "id": 800,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 3165,
                  "id": 1625,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1717,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 2251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 2790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 3124,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 850,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 845,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1232,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 900,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 895,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2122,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 2661,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3033,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 2334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 365,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:36:-:0;;;;;2853:63:9;2857:4583:36;2629:64:9;:::i;2857:4583:36:-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;3518:1089::-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;2857:4583;;;;3668:7;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;2857:4583::-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:8:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;2857:4583:36;;;;;3656:66:8;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;2322:110:9:-;2407:17;;:::i;:::-;;:::i;2857:4583:36:-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;5483:198::-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;2857:4583::-;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;5792:216::-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;2857:4583::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254::-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;1859:190:16:-;;:::o;884:140:35:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:9:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2857:4583:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;2857:4583::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:8:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;2857:4583:36:-;;;:::o;2057:265:8:-;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;2857:4583:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:8:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;2857:4583:36:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:8:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;2857:4583:36:-;;;;:::o;1771:152:8:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;2857:4583:36:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:13:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;2857:4583:36:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:8;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;2857:4583:36:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:13;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;2857:4583:36:-;;;:::o;1412:320:13:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;2857:4583:36:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:13;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;2857:4583:36:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:13:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;2857:4583:36;;;;;;9324:20:13;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/ERC721BaseToken.sol": {
        "ERC721BaseToken": {
          "abi": [
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BalanceQueryForZeroAddress",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenAlreadyExists",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenDoesNotExist",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFromIncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC721ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "name": "batchBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "contractURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                }
              ],
              "name": "setBaseMetadataURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                }
              ],
              "name": "setContractURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "name": "setNameAndSymbol",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "BalanceQueryForZeroAddress()": [
                {
                  "details": "Cannot query the balance for the zero address."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the token."
                }
              ],
              "TokenAlreadyExists()": [
                {
                  "details": "The token already exists."
                }
              ],
              "TokenDoesNotExist()": [
                {
                  "details": "The token does not exist."
                }
              ],
              "TransferFromIncorrectOwner()": [
                {
                  "details": "The token must be owned by `from`."
                }
              ],
              "TransferToNonERC721ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when `owner` enables `account` to manage the `id` token."
              },
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when token `id` is transferred from `from` to `to`."
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "approve(address,uint256)": {
                "details": "Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."
              },
              "batchBurn(uint256[])": {
                "params": {
                  "tokenIds": "Array of token ids to burn"
                }
              },
              "burn(uint256)": {
                "params": {
                  "tokenId": "Id of token to burn"
                }
              },
              "contractURI()": {
                "returns": {
                  "_0": "Contract URI of token's URI"
                }
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "name()": {
                "details": "Returns the token collection name."
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of token `id`. Requirements: - Token `id` must exist."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Equivalent to `safeTransferFrom(from, to, id, \"\")`."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."
              },
              "setBaseMetadataURI(string)": {
                "params": {
                  "tokenBaseURI": "New base URI of token's URI"
                }
              },
              "setContractURI(string)": {
                "params": {
                  "tokenContractURI": "New contract URI of token's URI"
                }
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setNameAndSymbol(string,string)": {
                "params": {
                  "tokenName": "Name of token.",
                  "tokenSymbol": "Symbol of token."
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "symbol()": {
                "details": "Returns the token collection symbol."
              },
              "tokenURI(uint256)": {
                "details": "Returns the Uniform Resource Identifier (URI) for token `id`."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "batchBurn(uint256[])": "dc8e92ea",
              "burn(uint256)": "42966c68",
              "contractURI()": "e8a3d485",
              "getApproved(uint256)": "081812fc",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "isApprovedForAll(address,address)": "e985e9c5",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "setBaseMetadataURI(string)": "7e518ec8",
              "setContractURI(string)": "938e3d7b",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setNameAndSymbol(string,string)": "5a446215",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `account` to manage the `id` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when token `id` is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"batchBurn(uint256[])\":{\"params\":{\"tokenIds\":\"Array of token ids to burn\"}},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Id of token to burn\"}},\"contractURI()\":{\"returns\":{\"_0\":\"Contract URI of token's URI\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"setBaseMetadataURI(string)\":{\"params\":{\"tokenBaseURI\":\"New base URI of token's URI\"}},\"setContractURI(string)\":{\"params\":{\"tokenContractURI\":\"New contract URI of token's URI\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setNameAndSymbol(string,string)\":{\"params\":{\"tokenName\":\"Name of token.\",\"tokenSymbol\":\"Symbol of token.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for token `id`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"batchBurn(uint256[])\":{\"notice\":\"Allows the owner of the tokens to burn their tokens.\"},\"burn(uint256)\":{\"notice\":\"Allows the owner of the token to burn their token.\"},\"contractURI()\":{\"notice\":\"Get the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Update the base URI of token's URI.\"},\"setContractURI(string)\":{\"notice\":\"Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setNameAndSymbol(string,string)\":{\"notice\":\"Set name and symbol of token.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"A standard base implementation of ERC-721 for use in Sequence library contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/ERC721BaseToken.sol\":\"ERC721BaseToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n///   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Mints token `id` to `to`, and updates the extra data for token `id` to `value`.\\n    /// Does NOT check if token `id` already exists (assumes `id` is auto-incrementing).\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Update with the owner and extra data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            sstore(add(id, add(id, keccak256(0x00, 0x20))), or(shl(160, value), to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ee665c5f70c388430cd7af42a5b1c2ff0e11ab45e46ab7ba02a6aad29f5cc77\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/tokens/ERC721/ERC721BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC721 } from \\\"solady/tokens/ERC721.sol\\\";\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-721 for use in Sequence library contracts.\\n */\\nabstract contract ERC721BaseToken is ERC721, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string private _tokenBaseURI;\\n    string private _tokenName;\\n    string private _tokenSymbol;\\n    string private _contractURI;\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenBaseURI Base URI of the token\\n     * @param tokenContractURI Contract URI of the token\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenBaseURI = tokenBaseURI;\\n        _contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenBaseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their token.\\n     * @param tokenId Id of token to burn\\n     */\\n    function burn(\\n        uint256 tokenId\\n    ) public virtual {\\n        _burn(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * Allows the owner of the tokens to burn their tokens.\\n     * @param tokenIds Array of token ids to burn\\n     */\\n    function batchBurn(\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        uint256 nBurn = tokenIds.length;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            _burn(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Get the contract URI of token's URI.\\n     * @return Contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC721.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC721 Overrides\\n    //\\n\\n    /// @inheritdoc ERC721\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override(ERC721) returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert TokenDoesNotExist();\\n        }\\n\\n        return bytes(_tokenBaseURI).length != 0 ? LibString.concat(_tokenBaseURI, LibString.toString(tokenId)) : \\\"\\\";\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function name() public view override(ERC721) returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd93442011e8d25544edfccb710b2ea6a851317e30ecf1421481cd29e0b5b5406\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "batchBurn(uint256[])": {
                "notice": "Allows the owner of the tokens to burn their tokens."
              },
              "burn(uint256)": {
                "notice": "Allows the owner of the token to burn their token."
              },
              "contractURI()": {
                "notice": "Get the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "setBaseMetadataURI(string)": {
                "notice": "Update the base URI of token's URI."
              },
              "setContractURI(string)": {
                "notice": "Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setNameAndSymbol(string,string)": {
                "notice": "Set name and symbol of token."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "A standard base implementation of ERC-721 for use in Sequence library contracts.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/presets/items/ERC721Items.sol": {
        "ERC721Items": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "AccountBalanceOverflow",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BalanceQueryForZeroAddress",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotOwnerNorApproved",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenAlreadyExists",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TokenDoesNotExist",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferFromIncorrectOwner",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToNonERC721ReceiverImplementer",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "TransferToZeroAddress",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "ApprovalForAll",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "result",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "name": "batchBurn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "contractURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "getApproved",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                }
              ],
              "name": "isApprovedForAll",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "result",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mintSequential",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "result",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "operator",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isApproved",
                  "type": "bool"
                }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenBaseURI",
                  "type": "string"
                }
              ],
              "name": "setBaseMetadataURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenContractURI",
                  "type": "string"
                }
              ],
              "name": "setContractURI",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "name": "setNameAndSymbol",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "tokenURI",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "AccountBalanceOverflow()": [
                {
                  "details": "The recipient's balance has overflowed."
                }
              ],
              "BalanceQueryForZeroAddress()": [
                {
                  "details": "Cannot query the balance for the zero address."
                }
              ],
              "NotOwnerNorApproved()": [
                {
                  "details": "Only the token owner or an approved account can manage the token."
                }
              ],
              "TokenAlreadyExists()": [
                {
                  "details": "The token already exists."
                }
              ],
              "TokenDoesNotExist()": [
                {
                  "details": "The token does not exist."
                }
              ],
              "TransferFromIncorrectOwner()": [
                {
                  "details": "The token must be owned by `from`."
                }
              ],
              "TransferToNonERC721ReceiverImplementer()": [
                {
                  "details": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
                }
              ],
              "TransferToZeroAddress()": [
                {
                  "details": "Cannot mint or transfer to the zero address."
                }
              ]
            },
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when `owner` enables `account` to manage the `id` token."
              },
              "ApprovalForAll(address,address,bool)": {
                "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when token `id` is transferred from `from` to `to`."
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "approve(address,uint256)": {
                "details": "Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."
              },
              "batchBurn(uint256[])": {
                "params": {
                  "tokenIds": "Array of token ids to burn"
                }
              },
              "burn(uint256)": {
                "params": {
                  "tokenId": "Id of token to burn"
                }
              },
              "contractURI()": {
                "returns": {
                  "_0": "Contract URI of token's URI"
                }
              },
              "getApproved(uint256)": {
                "details": "Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "initialize(address,string,string,string,string,address,uint96,address,bytes32)": {
                "details": "This should be called immediately after deployment.",
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "owner": "The owner of the contract",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "tokenBaseURI": "Base URI of the token",
                  "tokenContractURI": "Contract URI of the token",
                  "tokenName": "Name of the token",
                  "tokenSymbol": "Symbol of the token"
                }
              },
              "isApprovedForAll(address,address)": {
                "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
              },
              "mint(address,uint256)": {
                "params": {
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token id to mint."
                }
              },
              "mintSequential(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint token to."
                }
              },
              "name()": {
                "details": "Returns the token collection name."
              },
              "ownerOf(uint256)": {
                "details": "Returns the owner of token `id`. Requirements: - Token `id` must exist."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Equivalent to `safeTransferFrom(from, to, id, \"\")`."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
              },
              "setApprovalForAll(address,bool)": {
                "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."
              },
              "setBaseMetadataURI(string)": {
                "params": {
                  "tokenBaseURI": "New base URI of token's URI"
                }
              },
              "setContractURI(string)": {
                "params": {
                  "tokenContractURI": "New contract URI of token's URI"
                }
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setNameAndSymbol(string,string)": {
                "params": {
                  "tokenName": "Name of token.",
                  "tokenSymbol": "Symbol of token."
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "symbol()": {
                "details": "Returns the token collection symbol."
              },
              "tokenURI(uint256)": {
                "details": "Returns the Uniform Resource Identifier (URI) for token `id`."
              },
              "totalSupply()": {
                "returns": {
                  "_0": "The total supply of tokens."
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 47,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constructor_ERC721Items": {
                  "entryPoint": 58,
                  "id": 8470,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 53,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60a060405234602b57600e603a565b6014602f565b61415b610041823960805181611ef7015261415b90f35b6035565b60405190565b600080fd5b3360805256fe60806040526004361015610013575b61134c565b61001e60003561026d565b806301ffc9a71461026857806304634d8d1461026357806306fdde031461025e578063081812fc14610259578063095ea7b3146102545780630bb310de1461024f57806318160ddd1461024a57806323b872dd14610245578063248a9ca3146102405780632a55205a1461023b5780632e73e0fd146102365780632f2ff15d1461023157806336568abe1461022c57806340c10f191461022757806342842e0e1461022257806342966c681461021d5780634c62cd9b146102185780635944c753146102135780635a4462151461020e5780636352211e1461020957806370a08231146102045780637e518ec8146101ff5780639010d07c146101fa57806391d14854146101f5578063938e3d7b146101f057806395d89b41146101eb5780639d043a66146101e6578063a217fddf146101e1578063a22cb465146101dc578063b88d4fde146101d7578063c87b56dd146101d2578063ca15c873146101cd578063d547741f146101c8578063dc8e92ea146101c3578063e8a3d485146101be578063e985e9c5146101b95763ed4c2ac70361000e57611319565b6112e3565b611280565b61124d565b61114c565b611117565b6110e2565b6110b5565b610fd7565b610f50565b610edd565b610e13565b610de0565b610daa565b610d74565b610d13565b610ca8565b610c73565b610c3f565b610bad565b610b35565b61092b565b610901565b6108cd565b610899565b610865565b610803565b6107cc565b610745565b6106b2565b610642565b6105ec565b6105a3565b610540565b6104a2565b6103d8565b6102ff565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61029d81610288565b036102a457565b600080fd5b905035906102b682610294565b565b906020828203126102d2576102cf916000016102a9565b90565b61027e565b151590565b6102e5906102d7565b9052565b91906102fd906000602085019401906102dc565b565b3461032f5761032b61031a6103153660046102b8565b611356565b610322610273565b918291826102e9565b0390f35b610279565b60018060a01b031690565b61034890610334565b90565b6103548161033f565b0361035b57565b600080fd5b9050359061036d8261034b565b565b6bffffffffffffffffffffffff1690565b6103898161036f565b0361039057565b600080fd5b905035906103a282610380565b565b91906040838203126103cd57806103c16103ca9260008601610360565b93602001610395565b90565b61027e565b60000190565b34610407576103f16103eb3660046103a4565b906113e2565b6103f9610273565b80610403816103d2565b0390f35b610279565b600091031261041757565b61027e565b5190565b60209181520190565b60005b83811061043d575050906000910152565b80602091830151818501520161042c565b601f801991011690565b6104776104806020936104859361046e8161041c565b93848093610420565b95869101610429565b61044e565b0190565b61049f9160208201916000818403910152610458565b90565b346104d2576104b236600461040c565b6104ce6104bd611511565b6104c5610273565b91829182610489565b0390f35b610279565b90565b6104e3816104d7565b036104ea57565b600080fd5b905035906104fc826104da565b565b9060208282031261051857610515916000016104ef565b90565b61027e565b6105269061033f565b9052565b919061053e9060006020850194019061051d565b565b346105705761056c61055b6105563660046104fe565b61152c565b610563610273565b9182918261052a565b0390f35b610279565b919060408382031261059e578061059261059b9260008601610360565b936020016104ef565b90565b61027e565b6105b76105b1366004610575565b9061156f565b6105bf610273565b806105c9816103d2565b0390f35b906020828203126105e7576105e491600001610360565b90565b61027e565b3461061a576106046105ff3660046105cd565b611653565b61060c610273565b80610616816103d2565b0390f35b610279565b610628906104d7565b9052565b91906106409060006020850194019061061f565b565b346106725761065236600461040c565b61066e61065d61168d565b610665610273565b9182918261062c565b0390f35b610279565b90916060828403126106ad576106aa6106938460008501610360565b936106a18160208601610360565b936040016104ef565b90565b61027e565b6106c66106c0366004610677565b916116a3565b6106ce610273565b806106d8816103d2565b0390f35b90565b6106e8816106dc565b036106ef57565b600080fd5b90503590610701826106df565b565b9060208282031261071d5761071a916000016106f4565b90565b61027e565b61072b906106dc565b9052565b919061074390600060208501940190610722565b565b346107755761077161076061075b366004610703565b6117ed565b610768610273565b9182918261072f565b0390f35b610279565b91906040838203126107a357806107976107a092600086016104ef565b936020016104ef565b90565b61027e565b9160206107ca9294936107c36040820196600083019061051d565b019061061f565b565b346107fe576107e56107df36600461077a565b906119f6565b906107fa6107f1610273565b928392836107a8565b0390f35b610279565b346108325761081c610816366004610575565b90611c60565b610824610273565b8061082e816103d2565b0390f35b610279565b9190604083820312610860578061085461085d92600086016106f4565b93602001610360565b90565b61027e565b346108945761087e610878366004610837565b90611c95565b610886610273565b80610890816103d2565b0390f35b610279565b346108c8576108b26108ac366004610837565b90611d4b565b6108ba610273565b806108c4816103d2565b0390f35b610279565b346108fc576108e66108e0366004610575565b90611df7565b6108ee610273565b806108f8816103d2565b0390f35b610279565b61091561090f366004610677565b91611e32565b61091d610273565b80610927816103d2565b0390f35b346109595761094361093e3660046104fe565b611e6d565b61094b610273565b80610955816103d2565b0390f35b610279565b600080fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b906109889061044e565b810190811067ffffffffffffffff8211176109a257604052565b610968565b906109ba6109b3610273565b928361097e565b565b67ffffffffffffffff81116109da576109d660209161044e565b0190565b610968565b90826000939282370152565b90929192610a006109fb826109bc565b6109a7565b93818552602085019082840111610a1c57610a1a926109df565b565b610963565b9080601f83011215610a3f57816020610a3c933591016109eb565b90565b61095e565b909161012082840312610b3057610a5e8360008401610360565b92602083013567ffffffffffffffff8111610b2b5781610a7f918501610a21565b92604081013567ffffffffffffffff8111610b265782610aa0918301610a21565b92606082013567ffffffffffffffff8111610b215783610ac1918401610a21565b92608083013567ffffffffffffffff8111610b1c5781610ae2918501610a21565b92610af08260a08301610360565b92610b19610b018460c08501610395565b93610b0f8160e08601610360565b93610100016106f4565b90565b610283565b610283565b610283565b610283565b61027e565b34610b6d57610b57610b48366004610a44565b97969096959195949294611ee5565b610b5f610273565b80610b69816103d2565b0390f35b610279565b9091606082840312610ba857610ba5610b8e84600085016104ef565b93610b9c8160208601610360565b93604001610395565b90565b61027e565b34610bdc57610bc6610bc0366004610b72565b91611fc0565b610bce610273565b80610bd8816103d2565b0390f35b610279565b919091604081840312610c3a57600081013567ffffffffffffffff8111610c355783610c0e918301610a21565b92602082013567ffffffffffffffff8111610c3057610c2d9201610a21565b90565b610283565b610283565b61027e565b34610c6e57610c58610c52366004610be1565b9061220f565b610c60610273565b80610c6a816103d2565b0390f35b610279565b34610ca357610c9f610c8e610c893660046104fe565b61221b565b610c96610273565b9182918261052a565b0390f35b610279565b34610cd857610cd4610cc3610cbe3660046105cd565b612244565b610ccb610273565b9182918261062c565b0390f35b610279565b90602082820312610d0e57600082013567ffffffffffffffff8111610d0957610d069201610a21565b90565b610283565b61027e565b34610d4157610d2b610d26366004610cdd565b6122aa565b610d33610273565b80610d3d816103d2565b0390f35b610279565b9190604083820312610d6f5780610d63610d6c92600086016106f4565b936020016104ef565b90565b61027e565b34610da557610da1610d90610d8a366004610d46565b906122d0565b610d98610273565b9182918261052a565b0390f35b610279565b34610ddb57610dd7610dc6610dc0366004610837565b90612328565b610dce610273565b918291826102e9565b0390f35b610279565b34610e0e57610df8610df3366004610cdd565b61237b565b610e00610273565b80610e0a816103d2565b0390f35b610279565b34610e4357610e2336600461040c565b610e3f610e2e612386565b610e36610273565b91829182610489565b0390f35b610279565b600080fd5b908160c0910312610e5b5790565b610e48565b908160e0910312610e6e5790565b610e48565b91606083830312610ed857610e8b8260008501610360565b92602081013567ffffffffffffffff8111610ed35783610eac918301610e4d565b92604082013567ffffffffffffffff8111610ece57610ecb9201610e60565b90565b610283565b610283565b61027e565b34610f0e57610f0a610ef9610ef3366004610e73565b916126ef565b610f01610273565b9182918261072f565b0390f35b610279565b90565b60001b90565b610f30610f2b610f3592610f13565b610f16565b6106dc565b90565b610f426000610f1c565b90565b610f4d610f38565b90565b34610f8057610f6036600461040c565b610f7c610f6b610f45565b610f73610273565b9182918261072f565b0390f35b610279565b610f8e816102d7565b03610f9557565b600080fd5b90503590610fa782610f85565b565b9190604083820312610fd25780610fc6610fcf9260008601610360565b93602001610f9a565b90565b61027e565b3461100657610ff0610fea366004610fa9565b90612790565b610ff8610273565b80611002816103d2565b0390f35b610279565b600080fd5b600080fd5b909182601f8301121561104f5781359167ffffffffffffffff831161104a57602001926001830284011161104557565b611010565b61100b565b61095e565b906080828203126110b05761106c8160008401610360565b9261107a8260208501610360565b9261108883604083016104ef565b92606082013567ffffffffffffffff81116110ab576110a79201611015565b9091565b610283565b61027e565b6110cc6110c3366004611054565b93929092612847565b6110d4610273565b806110de816103d2565b0390f35b346111125761110e6110fd6110f83660046104fe565b6128a7565b611105610273565b91829182610489565b0390f35b610279565b346111475761114361113261112d366004610703565b612940565b61113a610273565b9182918261062c565b0390f35b610279565b3461117b5761116561115f366004610837565b90612990565b61116d610273565b80611177816103d2565b0390f35b610279565b67ffffffffffffffff81116111985760208091020190565b610968565b909291926111b26111ad82611180565b6109a7565b93818552602080860192028301928184116111ef57915b8383106111d65750505050565b602080916111e484866104ef565b8152019201916111c9565b611010565b9080601f830112156112125781602061120f9335910161119d565b90565b61095e565b9060208282031261124857600082013567ffffffffffffffff81116112435761124092016111f4565b90565b610283565b61027e565b3461127b57611265611260366004611217565b6129e3565b61126d610273565b80611277816103d2565b0390f35b610279565b346112b05761129036600461040c565b6112ac61129b612a43565b6112a3610273565b91829182610489565b0390f35b610279565b91906040838203126112de57806112d26112db9260008601610360565b93602001610360565b90565b61027e565b34611314576113106112ff6112f93660046112b5565b90612a59565b611307610273565b918291826102e9565b0390f35b610279565b346113475761133161132c366004610703565b612ad2565b611339610273565b80611343816103d2565b0390f35b610279565b600080fd5b600090565b61135e611351565b506376a4e23960e01b61137961137383610288565b91610288565b14908115611386575b5090565b6113909150612add565b38611382565b7f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb01190565b906113d4916113cf6113ca611396565b612b21565b6113d6565b565b906113e091612d3b565b565b906113ec916113ba565b565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611429575b602083101461142457565b6113f3565b91607f1691611419565b60209181520190565b600052602060002090565b906000929180549061146261145b83611409565b8094611433565b916001811690816000146114bb575060011461147e575b505050565b61148b919293945061143c565b916000925b8184106114a35750500190388080611479565b60018160209295939554848601520191019290611490565b92949550505060ff1916825215156020020190388080611479565b906114e091611447565b90565b906115036114fc926114f3610273565b938480926114d6565b038361097e565b565b61150e906114e3565b90565b6115196113ee565b506115246007611505565b90565b600090565b611534611527565b5080600052673ec412a9852d173d60c11b601c526020600020810101805460601b15611561576001015490565b63ceea21b66000526004601cfd5b61157c9133919091612db5565b565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b6115bb906115b66115b161157e565b612b21565b61163e565b565b90565b6115d46115cf6115d992610334565b6115bd565b610334565b90565b6115e5906115c0565b90565b6115f1906115dc565b90565b9061160560018060a01b0391610f16565b9181191691161790565b611618906115dc565b90565b90565b9061163361162e61163a9261160f565b61161b565b82546115f4565b9055565b61164a611651916115e8565b600461161e565b565b61165c906115a2565b565b600090565b60001c90565b90565b61167861167d91611663565b611669565b90565b61168a905461166c565b90565b61169561165e565b506116a0600c611680565b90565b9060001960601c918216908216918360005233673ec412a9852d173d60c11b17601c5260206000208401840190815480911683811481021561178b57508260005281600101548033148433141715611773575b611767575b838318189055601c600c206001815403905581600052601c600c2060018154019063ffffffff821684021561175257557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a4565b67ea553b3401336cea841560021b526004601cfd5b600082600101556116fb565b6030600c20546116f657634b6e7f186000526004601cfd5b67ceea21b6a1148100901560021b526004601cfd5b600090565b6117ae906106dc565b90565b906117bb906117a5565b600052602052604060002090565b90565b6117d86117dd91611663565b6117c9565b90565b6117ea90546117cc565b90565b600161180661180c926117fe6117a0565b5060026117b1565b016117e0565b90565b61182361181e611828926104d7565b6115bd565b6104d7565b90565b906118359061180f565b600052602052604060002090565b60018060a01b031690565b61185a61185f91611663565b611843565b90565b61186c905461184e565b90565b906118799061033f565b9052565b60a01c90565b6bffffffffffffffffffffffff1690565b6118a06118a59161187d565b611883565b90565b6118b29054611894565b90565b906118bf9061036f565b9052565b6118cd60406109a7565b90565b906119076118fe60006118e16118c3565b946118f86118f0838301611862565b83880161186f565b016118a8565b602084016118b5565b565b611912906118d0565b90565b61191f905161033f565b90565b61193661193161193b92610f13565b6115bd565b610334565b90565b61194790611922565b90565b611954905161036f565b90565b61196b6119666119709261036f565b6115bd565b6104d7565b90565b634e487b7160e01b600052601160045260246000fd5b61199861199e919392936104d7565b926104d7565b916119aa8382026104d7565b9281840414901517156119b957565b611973565b634e487b7160e01b600052601260045260246000fd5b6119e06119e6916104d7565b916104d7565b9081156119f1570490565b6119be565b611a19611a1e91939293611a08611527565b50611a1161165e565b50600161182b565b611909565b91611a2b60008401611915565b611a46611a40611a3b600061193e565b61033f565b9161033f565b14611a93575b6000611a88611a72611a8f93611a6c611a676020890161194a565b611957565b90611989565b611a82611a7d612e7c565b611957565b906119d4565b9301611915565b9190565b9150611a8f6000611a88611a72611aa983611909565b959350505050611a4c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b90611af291611aed611ae8611ab4565b612b21565b611b9b565b565b611b08611b03611b0d92610f13565b6115bd565b6104d7565b90565b6001611b1c91016104d7565b90565b611b28906104d7565b6000198114611b375760010190565b611973565b90611b4960001991610f16565b9181191691161790565b90565b90611b6b611b66611b729261180f565b611b53565b8254611b3c565b9055565b611b85611b8b919392936104d7565b926104d7565b8201809211611b9657565b611973565b9190611ba76000611af4565b915b82611bbc611bb6846104d7565b916104d7565b1015611c3d575b611bd5611bd0600b611680565b612e93565b15611bfb57611bf6611bef611bea600b611680565b611b1f565b600b611b56565b611bc3565b9091611c3690611c1585611c0f600b611680565b90612ec0565b611c31611c2a611c25600b611680565b611b1f565b600b611b56565b611b10565b9190611ba9565b9250611c5e9150611c5790611c52600c611680565b611b76565b600c611b56565b565b90611c6a91611ad8565b565b90611c8791611c82611c7d826117ed565b612b21565b611c89565b565b90611c9391612f59565b565b90611c9f91611c6c565b565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b611cfc602f604092610420565b611d0581611ca1565b0190565b611d1f9060208101906000818303910152611cef565b90565b15611d2957565b611d31610273565b62461bcd60e51b815280611d4760048201611d09565b0390fd5b90611d7891611d7382611d6d611d67611d62612f83565b61033f565b9161033f565b14611d22565b612f90565b565b90611d9491611d8f611d8a611ab4565b612b21565b611d96565b565b90611da091612ec0565b611dbc611db5611db0600c611680565b611b1f565b600c611b56565b5b611dcf611dca600b611680565b612e93565b15611df557611df0611de9611de4600b611680565b611b1f565b600b611b56565b611dbd565b565b90611e0191611d7a565b565b90611e15611e10836109bc565b6109a7565b918252565b611e246000611e03565b90565b611e2f611e1a565b90565b91611e3f838383916116a3565b611e4882612fba565b611e52575b505050565b611e659291611e5f611e27565b92612fc7565b388080611e4d565b611e779033613058565b565b60ff1690565b611e8b611e9091611663565b611e79565b90565b611e9d9054611e7f565b90565b90611eac60ff91610f16565b9181191691161790565b611ebf906102d7565b90565b90565b90611eda611ed5611ee192611eb6565b611ec2565b8254611ea0565b9055565b96979091929594939733611f21611f1b7f000000000000000000000000000000000000000000000000000000000000000061033f565b9161033f565b14158015611f84575b611f6757611f5998611f4c97611f47958a95909192939495613122565b612d3b565b611f54611ab4565b612f59565b611f656001600a611ec5565b565b600063f92ee8a960e01b815280611f80600482016103d2565b0390fd5b50611f8f600a611e93565b611f2a565b90611faf9291611faa611fa5611396565b612b21565b611fb1565b565b91611fbe92919091613217565b565b90611fcb9291611f94565b565b7fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a590565b9061200b91612006612001611fcd565b612b21565b6121f7565b565b601f602091010490565b1b90565b9190600861203791029161203160001984612017565b92612017565b9181191691161790565b919061205761205261205f9361180f565b611b53565b90835461201b565b9055565b6120759161206f61165e565b91612041565b565b5b818110612083575050565b806120916000600193612063565b01612078565b9190601f81116120a7575b505050565b6120b36120d89361143c565b9060206120bf8461200d565b830193106120e0575b6120d19061200d565b0190612077565b3880806120a2565b91506120d1819290506120c8565b1c90565b9061210390600019906008026120ee565b191690565b81612112916120f2565b906002021790565b906121248161041c565b9067ffffffffffffffff82116121e657612148826121428554611409565b85612097565b602090601f831160011461217d5791809161216c93600092612171575b5050612108565b90555b565b90915001513880612165565b601f1983169161218c8561143c565b9260005b8181106121ce575091600293918560019694106121b4575b5050500201905561216f565b6121c4910151601f8416906120f2565b90553880806121a8565b91936020600181928787015181550195019201612190565b610968565b906121f59161211a565b565b9061220661220d9260076121eb565b60086121eb565b565b9061221991611ff1565b565b61222d90612227611527565b5061329a565b90811561223657565b63ceea21b66000526004601cfd5b61224c61165e565b50801561227457673ec412a9852d173d60c11b601c5260005263ffffffff601c600c20541690565b638f4eb6046000526004601cfd5b61229b90612296612291611fcd565b612b21565b61229d565b565b6122a89060066121eb565b565b6122b390612282565b565b906122bf906117a5565b600052602052604060002090565b90565b906122f06122eb6122f5936122e3611527565b5060036122b5565b6122cd565b6132fb565b90565b612301906115c0565b90565b61230d906122f8565b90565b9061231a90612304565b600052602052604060002090565b61235091600061234561234b9361233d611351565b5060026117b1565b01612310565b611e93565b90565b61236c90612367612362611fcd565b612b21565b61236e565b565b6123799060096121eb565b565b61238490612353565b565b61238e6113ee565b506123996008611505565b90565b60018060a01b031690565b6123b36123b891611663565b61239c565b90565b6123c590546123a7565b90565b6123d1906122f8565b90565b60e01b90565b905051906123e7826106df565b565b9060208282031261240357612400916000016123da565b90565b61027e565b50612417906020810190610360565b90565b6124239061033f565b9052565b506124369060208101906102a9565b90565b61244290610288565b9052565b506124559060208101906106f4565b90565b612461906106dc565b9052565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156124b557016020813591019167ffffffffffffffff82116124b05760018202360383136124ab57565b61246a565b612465565b61246f565b60209181520190565b91906124dd816124d6816124e2956124ba565b80956109df565b61044e565b0190565b90356001604003823603038112156124fc570190565b61246f565b903560016020038236030381121561254257016020813591019167ffffffffffffffff821161253d57600182023603831361253857565b61246a565b612465565b61246f565b91906125618161255a8161256695611433565b80956109df565b61044e565b0190565b67ffffffffffffffff1690565b6125808161256a565b0361258757565b600080fd5b9050359061259982612577565b565b506125aa90602081019061258c565b90565b6125b69061256a565b9052565b906125f89060206125f06125e6604084016125d86000880188612501565b908683036000880152612547565b948281019061259b565b9101906125ad565b90565b6126a59161269761268c60c083016126236126196000870187612408565b600086019061241a565b61263d6126336020870187612427565b6020860190612439565b61265761264d6040870187612446565b6040860190612458565b6126716126676060870187612446565b6060860190612458565b61267e6080860186612474565b9085830360808701526124c3565b9260a08101906124e6565b9060a08184039101526125ba565b90565b9392906126d46040916126dc946126c7606089019260008a019061051d565b87820360208901526125fb565b940190610722565b565b6126e6610273565b3d6000823e3d90fd5b91506020906126fc6117a0565b5061270f61270a60046123bb565b6123c8565b61273b633808a90b94929461274661272760056117e0565b61272f610273565b978896879586956123d4565b8552600485016126a8565b03915afa90811561278b5760009161275d575b5090565b61277e915060203d8111612784575b612776818361097e565b8101906123e9565b38612759565b503d61276c565b6126de565b90151581601c52670a5a2e7a0000000060085233600052806030600c205560005260601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3565b67ffffffffffffffff81116127fe576127fa60209161044e565b0190565b610968565b90929192612818612813826127e0565b6109a7565b9381855260208501908284011161283457612832926109df565b565b610963565b612844913691612803565b90565b92919092612857818584916116a3565b61286084612fba565b61286c575b5050505050565b6128829461287c91949293612839565b92612fc7565b3880808080612865565b90565b6128999054611409565b90565b6128a4611e1a565b90565b6128af6113ee565b506128c26128bc82612e93565b156102d7565b612923576128d86128d3600661288c565b61288f565b6128eb6128e56000611af4565b916104d7565b1415600014612915576129119061290c612906600692613334565b91611505565b61338f565b5b90565b5061291e61289c565b612912565b600063677510db60e11b81528061293c600482016103d2565b0390fd5b61295f61295a6129649261295261165e565b5060036122b5565b6122cd565b6133bf565b90565b906129829161297d612978826117ed565b612b21565b612984565b565b9061298e91612f90565b565b9061299a91612967565b565b5190565b634e487b7160e01b600052603260045260246000fd5b906129c08261299c565b8110156129d1576020809102010190565b6129a0565b6129e090516104d7565b90565b906129ed8261299c565b906129f86000611af4565b5b80612a0c612a06856104d7565b916104d7565b1015612a3d57612a3890612a3333612a2d612a288885906129b6565b6129d6565b90613058565b611b10565b6129f9565b50915050565b612a4b6113ee565b50612a566009611505565b90565b90612a62611351565b50601c52670a5a2e7a000000006008526000526030600c205490565b612a9790612a92612a8d61157e565b612b21565b612ac5565b565b612aa290611663565b90565b90612aba612ab5612ac1926117a5565b612a99565b8254611b3c565b9055565b612ad0906005612aa5565b565b612adb90612a7e565b565b612ae5611351565b50612aef816133df565b8015612b12575b908115612b02575b5090565b612b0c915061346c565b38612afe565b50612b1c81613406565b612af6565b612b3390612b2d612f83565b90613591565b565b60207f2073616c65507269636500000000000000000000000000000000000000000000917f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201520152565b612b90602a604092610420565b612b9981612b35565b0190565b612bb39060208101906000818303910152612b83565b90565b15612bbd57565b612bc5610273565b62461bcd60e51b815280612bdb60048201612b9d565b0390fd5b60007f455243323938313a20696e76616c696420726563656976657200000000000000910152565b612c146019602092610420565b612c1d81612bdf565b0190565b612c379060208101906000818303910152612c07565b90565b15612c4157565b612c49610273565b62461bcd60e51b815280612c5f60048201612c21565b0390fd5b612c6d60406109a7565b90565b90565b90612c88612c83612c8f92612304565b612c70565b82546115f4565b9055565b60a01b90565b90612cb36bffffffffffffffffffffffff60a01b91612c93565b9181191691161790565b612cd1612ccc612cd69261036f565b6115bd565b61036f565b90565b90565b90612cf1612cec612cf892612cbd565b612cd9565b8254612c99565b9055565b90612d2760206000612d2d94612d1f828201612d19848801611915565b90612c73565b01920161194a565b90612cdc565b565b90612d3991612cfc565b565b90612dac612db392612d6783612d60612d5a612d55612e7c565b61036f565b9161036f565b1115612bb6565b612d8d81612d86612d80612d7b600061193e565b61033f565b9161033f565b1415612c3a565b91612da3612d99612c63565b936000850161186f565b602083016118b5565b6000612d2f565b565b9060001960601c9081169181168360005280673ec412a9852d173d60c11b17601c5260206000208401840191825416918215612e4a57818385931490151715612e24575b600101557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a4565b9050816000526030600c205415612e3c578290612df9565b634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b600090565b90565b612e74612e6f612e7992612e5d565b6115bd565b61036f565b90565b612e84612e58565b50612e90612710612e60565b90565b612e9b611351565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b151590565b60601b60601c81600052673ec412a9852d173d60c11b601c5260206000208201820180548060601b612f4b578217905580600052601c600c2060018154019063ffffffff8216830215612f36575560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a4565b67ea553b3401336cea831560021b526004601cfd5b63c991cbb16000526004601cfd5b90612f7b612f76612f8093612f6f81859061362a565b60036122b5565b6122cd565b613711565b50565b612f8b611527565b503390565b90612fb2612fad612fb793612fa681859061374c565b60036122b5565b6122cd565b6137e6565b50565b612fc2611351565b503b90565b9160209160a460405195869363150b7a0296878652338787015260601b60601c6040860152606085015260808085015280518091818060a0880152613044575b505001906000601c8401915af115613034575b60e01b90510361302657565b63d1a57ed66000526004601cfd5b3d1561301a57503d6000823e3d90fd5b818760c08801920160045afa508038613007565b6130618261221b565b5060601b60601c8160005280673ec412a9852d173d60c11b17601c52602060002082018201908154918260601b60601c918215613114578260005281600101549081811484821417901517156130fc575b60009383916130f1575b189055601c600c20600181540390557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4565b8483600101556130bc565b6030600c20546130b257634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b9261314c906131456131539461313e6131919a989560076121eb565b60086121eb565b60066121eb565b60096121eb565b61316561315e610f38565b8290612f59565b613177613170611fcd565b8290612f59565b613189613182611396565b8290612f59565b919091613821565b565b60007f455243323938313a20496e76616c696420706172616d65746572730000000000910152565b6131c8601b602092610420565b6131d181613193565b0190565b6131eb90602081019060008183039101526131bb565b90565b156131f557565b6131fd610273565b62461bcd60e51b815280613213600482016131d5565b0390fd5b6132939061328c61329894936132478561324061323a613235612e7c565b61036f565b9161036f565b1115612bb6565b61326d8161326661326061325b600061193e565b61033f565b9161033f565b14156131ee565b93613283613279612c63565b956000870161186f565b602085016118b5565b600161182b565b612d2f565b565b6132a2611527565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b60601c90565b90565b6132d76132dc91611663565b61180f565b90565b6132f36132ee6132f8926104d7565b6115bd565b610334565b90565b6133276133226133319361331d600061332c95613316611527565b50016132c8565b61389c565b6132cb565b6132df565b6122f8565b90565b9061333d6113ee565b506080604051019160208301604052600083528290600a6000198092955b019481810660300186530493841561337a5790600a919080929161335b565b93505082602091039203918252565b90565b90565b6133bc916133b16133ab6133b7936133a56113ee565b50613389565b91613389565b906138c3565b61338c565b90565b6133d760006133dc926133d061165e565b50016132c8565b613945565b90565b6133e7611351565b5060e01c635b5e139f8114906301ffc9a76380ac58cd82149114171790565b61340e611351565b506134188161395d565b801561345d575b8015613442575b908115613432575b5090565b61343c915061399d565b3861342e565b50600061345761345183610288565b91610288565b14613426565b506134678161399d565b61341f565b613474611351565b5061347e8161399d565b90811561348a575b5090565b61349491506139dd565b38613486565b90565b6134b16134ac6134b69261349a565b6115bd565b6104d7565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6134f2601780926134b9565b6134fb816134be565b0190565b61352461351b926020926135128161041c565b948580936134b9565b93849101610429565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b61355c601180926134b9565b61356581613528565b0190565b61358361358e939261357d613588936134e6565b906134ff565b613550565b906134ff565b90565b906135a66135a0838390612328565b156102d7565b6135ae575050565b613626916136046135dd6135cd6135c761360995613a6b565b936132cb565b6135d7602061349d565b90613c84565b916135f56135e9610273565b93849260208401613569565b6020820181038252038261097e565b61338c565b613611610273565b91829162461bcd60e51b835260048301610489565b0390fd5b61363e613638828490612328565b156102d7565b613647575b5050565b61366a6001613665600061365d600286906117b1565b018590612310565b611ec5565b90613673612f83565b906136b06136aa6136a47f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956117a5565b92612304565b92612304565b926136b9610273565b806136c3816103d2565b0390a43880613643565b6136d6906115c0565b90565b6136ed6136e86136f292610334565b6115bd565b6104d7565b90565b61370961370461370e926104d7565b610f16565b6106dc565b90565b9061374461373e61373961373460006137499661372c611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613e7a565b90565b613757818390612328565b613760575b5050565b613783600061377e6000613776600286906117b1565b018590612310565b611ec5565b9061378c612f83565b906137c96137c36137bd7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956117a5565b92612304565b92612304565b926137d2610273565b806137dc816103d2565b0390a4388061375c565b9061381961381361380e613809600061381e96613801611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613f5f565b90565b9061383761383c939261383261157e565b612f59565b614069565b565b5490565b600052602060002090565b6138568161383e565b82101561387157613868600191613842565b91020190600090565b6129a0565b61388690600861388b93026120ee565b6117c9565b90565b906138999154613876565b90565b6138bb9160006138b5926138ae6117a0565b500161384d565b9061388e565b90565b606090565b9190916138ce6138be565b5060405192601f1980835193818060208701165b80830151818a0152019081156138fd578190915082906138e2565b505050815191838601828060208601165b80840151818401520191821561392b57828091935050839061390e565b505050506020910180828501019060008252845201604052565b600061395a9161395361165e565b500161383e565b90565b613965611351565b508061398061397a63152a902d60e11b610288565b91610288565b1490811561398d575b5090565b6139979150614089565b38613989565b6139a5611351565b50806139c06139ba635a05180f60e01b610288565b91610288565b149081156139cd575b5090565b6139d791506140af565b386139c9565b6139e5611351565b5080613a006139fa634e821d3360e11b610288565b91610288565b14908115613a0d575b5090565b613a179150613406565b38613a09565b90565b60ff1690565b613a3a613a35613a3f92613a1d565b6115bd565b613a20565b90565b613a4c6014613a26565b90565b613a63613a5e613a6892613a20565b6115bd565b6104d7565b90565b613a88613a83613a9e92613a7d6113ee565b506136cd565b6136d9565b613a98613a93613a42565b613a4f565b90613c84565b90565b90565b613ab8613ab3613abd92613aa1565b6115bd565b6104d7565b90565b90613ad2613acd836127e0565b6109a7565b918252565b369037565b90613b01613ae983613ac0565b92602080613af786936127e0565b9201910390613ad7565b565b600360fc1b90565b5190565b90613b1982613b0b565b811015613b2b57600160209102010190565b6129a0565b600f60fb1b90565b90565b613b4f613b4a613b5492613b38565b6115bd565b6104d7565b90565b613b60906104d7565b60008114613b6f576001900390565b611973565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613b93613b74565b90565b90565b613bad613ba8613bb292613b96565b6115bd565b6104d7565b90565b60f81b90565b90565b613bd2613bcd613bd792613bbb565b6115bd565b613a20565b90565b613bf990613bf3613bed613bfe94613a20565b916104d7565b906120ee565b6104d7565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b613c3560208092610420565b613c3e81613c01565b0190565b613c589060208101906000818303910152613c29565b90565b15613c6257565b613c6a610273565b62461bcd60e51b815280613c8060048201613c42565b0390fd5b9190613c8e6113ee565b50613d28613d18613cc4613cbf613caf6002613caa8791613aa4565b611989565b613cb96002613aa4565b90611b76565b613adc565b92613ccd613b03565b613ce685613ce060009360001a93611af4565b90613b0f565b53613cef613b30565b613d0885613d0260019360001a93613b3b565b90613b0f565b53613d136002613aa4565b611989565b613d226001613b3b565b90611b76565b925b83613d3e613d386001613b3b565b916104d7565b1115613da557613d4c613b8b565b81613d57600f613b99565b16916010831015613da057613d73613d9492613d9a941a613bb5565b613d838591889060001a92613b0f565b53613d8e6004613bbe565b90613bda565b93613b57565b92613d2a565b6129a0565b613dcd929350613dc890613dc2613dbc6000611af4565b916104d7565b14613c5b565b61338c565b90565b90565b600052602060002090565b5490565b613deb81613dde565b821015613e0657613dfd600191613dd3565b91020190600090565b6129a0565b9190613e21613e1c613e29936117a5565b612a99565b90835461201b565b9055565b9081549168010000000000000000831015613e5d5782613e55916001613e5b95018155613de2565b90613e0b565b565b610968565b90613e6c906117a5565b600052602052604060002090565b613e82611351565b50613e97613e918284906140ef565b156102d7565b600014613eda57613ed0613ed592613ebb613eb460008501613dd0565b8290613e2d565b6001613ec96000850161383e565b9301613e62565b611b56565b600190565b5050600090565b613ef0613ef6919392936104d7565b926104d7565b8203918211613f0157565b611973565b634e487b7160e01b600052603160045260246000fd5b613f2e91613f286117a0565b91613e0b565b565b613f3981613dde565b8015613f5a576001900390613f57613f518383613de2565b90613f1c565b55565b613f06565b613f67611351565b50613f7e613f79600183018490613e62565b611680565b9081613f93613f8d6000611af4565b916104d7565b14156000146140615761401392600161400e9284613fbc600096613fb685613b3b565b90613ee1565b613fd9613fca88850161383e565b613fd386613b3b565b90613ee1565b80613fec613fe6846104d7565b916104d7565b03614018575b505050614008614003868301613dd0565b613f30565b01613e62565b612063565b600190565b6140599261404b614037614031614054948c890161384d565b9061388e565b9361404585918c890161384d565b90613e0b565b91858501613e62565b611b56565b388080613ff2565b505050600090565b90614080614079614087936115e8565b600461161e565b6005612aa5565b565b614091611351565b506140ab6140a56301ffc9a760e01b610288565b91610288565b1490565b6140b7611351565b50806140d26140cc637965db0b60e01b610288565b91610288565b149081156140df575b5090565b6140e9915061395d565b386140db565b61410d91600161410892614101611351565b5001613e62565b611680565b61412061411a6000611af4565b916104d7565b14159056fea264697066735822122029a6d041f14c226b015d09bed1f38d00ed477c06417cdefc834389f375cb9b8964736f6c634300081b0033",
              "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x2B JUMPI PUSH1 0xE PUSH1 0x3A JUMP JUMPDEST PUSH1 0x14 PUSH1 0x2F JUMP JUMPDEST PUSH2 0x415B PUSH2 0x41 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x1EF7 ADD MSTORE PUSH2 0x415B SWAP1 RETURN JUMPDEST PUSH1 0x35 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x134C JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x2E73E0FD EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x4C62CD9B EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xDC8E92EA EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1B9 JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0x1319 JUMP JUMPDEST PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x124D JUMP JUMPDEST PUSH2 0x114C JUMP JUMPDEST PUSH2 0x1117 JUMP JUMPDEST PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0xF50 JUMP JUMPDEST PUSH2 0xEDD JUMP JUMPDEST PUSH2 0xE13 JUMP JUMPDEST PUSH2 0xDE0 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xD13 JUMP JUMPDEST PUSH2 0xCA8 JUMP JUMPDEST PUSH2 0xC73 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST PUSH2 0xBAD JUMP JUMPDEST PUSH2 0xB35 JUMP JUMPDEST PUSH2 0x92B JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST PUSH2 0x899 JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x642 JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST PUSH2 0x540 JUMP JUMPDEST PUSH2 0x4A2 JUMP JUMPDEST PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x29D DUP2 PUSH2 0x288 JUMP JUMPDEST SUB PUSH2 0x2A4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2B6 DUP3 PUSH2 0x294 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2D2 JUMPI PUSH2 0x2CF SWAP2 PUSH1 0x0 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x2E5 SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2FD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2DC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x32F JUMPI PUSH2 0x32B PUSH2 0x31A PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B8 JUMP JUMPDEST PUSH2 0x1356 JUMP JUMPDEST PUSH2 0x322 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x348 SWAP1 PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x354 DUP2 PUSH2 0x33F JUMP JUMPDEST SUB PUSH2 0x35B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x36D DUP3 PUSH2 0x34B JUMP JUMPDEST JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x389 DUP2 PUSH2 0x36F JUMP JUMPDEST SUB PUSH2 0x390 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3A2 DUP3 PUSH2 0x380 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3CD JUMPI DUP1 PUSH2 0x3C1 PUSH2 0x3CA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x407 JUMPI PUSH2 0x3F1 PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3A4 JUMP JUMPDEST SWAP1 PUSH2 0x13E2 JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x403 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x417 JUMPI JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x43D JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x42C JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x477 PUSH2 0x480 PUSH1 0x20 SWAP4 PUSH2 0x485 SWAP4 PUSH2 0x46E DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x420 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x49F SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x458 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x4D2 JUMPI PUSH2 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x4CE PUSH2 0x4BD PUSH2 0x1511 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4E3 DUP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4EA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x4FC DUP3 PUSH2 0x4DA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x518 JUMPI PUSH2 0x515 SWAP2 PUSH1 0x0 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x526 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x53E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x570 JUMPI PUSH2 0x56C PUSH2 0x55B PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x152C JUMP JUMPDEST PUSH2 0x563 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x59E JUMPI DUP1 PUSH2 0x592 PUSH2 0x59B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x5B7 PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x156F JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x5C9 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x5E7 JUMPI PUSH2 0x5E4 SWAP2 PUSH1 0x0 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x61A JUMPI PUSH2 0x604 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST PUSH2 0x60C PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x616 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x628 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x640 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x672 JUMPI PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x66E PUSH2 0x65D PUSH2 0x168D JUMP JUMPDEST PUSH2 0x665 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x6AD JUMPI PUSH2 0x6AA PUSH2 0x693 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x6A1 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x6C6 PUSH2 0x6C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x6D8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6E8 DUP2 PUSH2 0x6DC JUMP JUMPDEST SUB PUSH2 0x6EF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x701 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71D JUMPI PUSH2 0x71A SWAP2 PUSH1 0x0 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x72B SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x743 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x775 JUMPI PUSH2 0x771 PUSH2 0x760 PUSH2 0x75B CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x768 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x7A3 JUMPI DUP1 PUSH2 0x797 PUSH2 0x7A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x7CA SWAP3 SWAP5 SWAP4 PUSH2 0x7C3 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x7FE JUMPI PUSH2 0x7E5 PUSH2 0x7DF CALLDATASIZE PUSH1 0x4 PUSH2 0x77A JUMP JUMPDEST SWAP1 PUSH2 0x19F6 JUMP JUMPDEST SWAP1 PUSH2 0x7FA PUSH2 0x7F1 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x7A8 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x832 JUMPI PUSH2 0x81C PUSH2 0x816 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1C60 JUMP JUMPDEST PUSH2 0x824 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x82E DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x860 JUMPI DUP1 PUSH2 0x854 PUSH2 0x85D SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x894 JUMPI PUSH2 0x87E PUSH2 0x878 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x886 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x890 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8C8 JUMPI PUSH2 0x8B2 PUSH2 0x8AC CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B JUMP JUMPDEST PUSH2 0x8BA PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8C4 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8FC JUMPI PUSH2 0x8E6 PUSH2 0x8E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1DF7 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8F8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x915 PUSH2 0x90F CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x91D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x927 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x959 JUMPI PUSH2 0x943 PUSH2 0x93E CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x1E6D JUMP JUMPDEST PUSH2 0x94B PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x955 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x988 SWAP1 PUSH2 0x44E JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9A2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x9BA PUSH2 0x9B3 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9DA JUMPI PUSH2 0x9D6 PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0xA00 PUSH2 0x9FB DUP3 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0xA1C JUMPI PUSH2 0xA1A SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xA3F JUMPI DUP2 PUSH1 0x20 PUSH2 0xA3C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x9EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x120 DUP3 DUP5 SUB SLT PUSH2 0xB30 JUMPI PUSH2 0xA5E DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB2B JUMPI DUP2 PUSH2 0xA7F SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB26 JUMPI DUP3 PUSH2 0xAA0 SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB21 JUMPI DUP4 PUSH2 0xAC1 SWAP2 DUP5 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB1C JUMPI DUP2 PUSH2 0xAE2 SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH2 0xAF0 DUP3 PUSH1 0xA0 DUP4 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0xB19 PUSH2 0xB01 DUP5 PUSH1 0xC0 DUP6 ADD PUSH2 0x395 JUMP JUMPDEST SWAP4 PUSH2 0xB0F DUP2 PUSH1 0xE0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x100 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xB6D JUMPI PUSH2 0xB57 PUSH2 0xB48 CALLDATASIZE PUSH1 0x4 PUSH2 0xA44 JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x1EE5 JUMP JUMPDEST PUSH2 0xB5F PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xB69 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xBA8 JUMPI PUSH2 0xBA5 PUSH2 0xB8E DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH2 0xB9C DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xBDC JUMPI PUSH2 0xBC6 PUSH2 0xBC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB72 JUMP JUMPDEST SWAP2 PUSH2 0x1FC0 JUMP JUMPDEST PUSH2 0xBCE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xBD8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xC3A JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC35 JUMPI DUP4 PUSH2 0xC0E SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC30 JUMPI PUSH2 0xC2D SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xC6E JUMPI PUSH2 0xC58 PUSH2 0xC52 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE1 JUMP JUMPDEST SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH2 0xC60 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xC6A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCA3 JUMPI PUSH2 0xC9F PUSH2 0xC8E PUSH2 0xC89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x221B JUMP JUMPDEST PUSH2 0xC96 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCD8 JUMPI PUSH2 0xCD4 PUSH2 0xCC3 PUSH2 0xCBE CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x2244 JUMP JUMPDEST PUSH2 0xCCB PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD0E JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD09 JUMPI PUSH2 0xD06 SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xD41 JUMPI PUSH2 0xD2B PUSH2 0xD26 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x22AA JUMP JUMPDEST PUSH2 0xD33 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xD3D DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD6F JUMPI DUP1 PUSH2 0xD63 PUSH2 0xD6C SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xDA5 JUMPI PUSH2 0xDA1 PUSH2 0xD90 PUSH2 0xD8A CALLDATASIZE PUSH1 0x4 PUSH2 0xD46 JUMP JUMPDEST SWAP1 PUSH2 0x22D0 JUMP JUMPDEST PUSH2 0xD98 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xDDB JUMPI PUSH2 0xDD7 PUSH2 0xDC6 PUSH2 0xDC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0xDCE PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE0E JUMPI PUSH2 0xDF8 PUSH2 0xDF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x237B JUMP JUMPDEST PUSH2 0xE00 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xE0A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE43 JUMPI PUSH2 0xE23 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xE3F PUSH2 0xE2E PUSH2 0x2386 JUMP JUMPDEST PUSH2 0xE36 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xE5B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xE6E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xED8 JUMPI PUSH2 0xE8B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xED3 JUMPI DUP4 PUSH2 0xEAC SWAP2 DUP4 ADD PUSH2 0xE4D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xECE JUMPI PUSH2 0xECB SWAP3 ADD PUSH2 0xE60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xF0E JUMPI PUSH2 0xF0A PUSH2 0xEF9 PUSH2 0xEF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST SWAP2 PUSH2 0x26EF JUMP JUMPDEST PUSH2 0xF01 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xF30 PUSH2 0xF2B PUSH2 0xF35 SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF42 PUSH1 0x0 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF4D PUSH2 0xF38 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF80 JUMPI PUSH2 0xF60 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xF7C PUSH2 0xF6B PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF73 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0xF8E DUP2 PUSH2 0x2D7 JUMP JUMPDEST SUB PUSH2 0xF95 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xFA7 DUP3 PUSH2 0xF85 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xFD2 JUMPI DUP1 PUSH2 0xFC6 PUSH2 0xFCF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0xF9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1006 JUMPI PUSH2 0xFF0 PUSH2 0xFEA CALLDATASIZE PUSH1 0x4 PUSH2 0xFA9 JUMP JUMPDEST SWAP1 PUSH2 0x2790 JUMP JUMPDEST PUSH2 0xFF8 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1002 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x104F JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x104A JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0x1045 JUMPI JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x100B JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10B0 JUMPI PUSH2 0x106C DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x107A DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x1088 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10AB JUMPI PUSH2 0x10A7 SWAP3 ADD PUSH2 0x1015 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x10C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1054 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x10D4 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x10DE DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1112 JUMPI PUSH2 0x110E PUSH2 0x10FD PUSH2 0x10F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x28A7 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1147 JUMPI PUSH2 0x1143 PUSH2 0x1132 PUSH2 0x112D CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2940 JUMP JUMPDEST PUSH2 0x113A PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x117B JUMPI PUSH2 0x1165 PUSH2 0x115F CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x116D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1177 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1198 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x11B2 PUSH2 0x11AD DUP3 PUSH2 0x1180 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x11EF JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x11D6 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x11E4 DUP5 DUP7 PUSH2 0x4EF JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x11C9 JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1212 JUMPI DUP2 PUSH1 0x20 PUSH2 0x120F SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x119D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1248 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1243 JUMPI PUSH2 0x1240 SWAP3 ADD PUSH2 0x11F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x127B JUMPI PUSH2 0x1265 PUSH2 0x1260 CALLDATASIZE PUSH1 0x4 PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x126D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1277 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x12B0 JUMPI PUSH2 0x1290 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x12AC PUSH2 0x129B PUSH2 0x2A43 JUMP JUMPDEST PUSH2 0x12A3 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x12DE JUMPI DUP1 PUSH2 0x12D2 PUSH2 0x12DB SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1314 JUMPI PUSH2 0x1310 PUSH2 0x12FF PUSH2 0x12F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B5 JUMP JUMPDEST SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH2 0x1307 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1347 JUMPI PUSH2 0x1331 PUSH2 0x132C CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x1339 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1343 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x135E PUSH2 0x1351 JUMP JUMPDEST POP PUSH4 0x76A4E239 PUSH1 0xE0 SHL PUSH2 0x1379 PUSH2 0x1373 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x1386 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1390 SWAP2 POP PUSH2 0x2ADD JUMP JUMPDEST CODESIZE PUSH2 0x1382 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13D4 SWAP2 PUSH2 0x13CF PUSH2 0x13CA PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x13D6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13E0 SWAP2 PUSH2 0x2D3B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13EC SWAP2 PUSH2 0x13BA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x1429 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1424 JUMPI JUMP JUMPDEST PUSH2 0x13F3 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1462 PUSH2 0x145B DUP4 PUSH2 0x1409 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1433 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x14BB JUMPI POP PUSH1 0x1 EQ PUSH2 0x147E JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x148B SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x143C JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x14A3 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x1490 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST SWAP1 PUSH2 0x14E0 SWAP2 PUSH2 0x1447 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1503 PUSH2 0x14FC SWAP3 PUSH2 0x14F3 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x14D6 JUMP JUMPDEST SUB DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x150E SWAP1 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1519 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x1524 PUSH1 0x7 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1534 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD DUP1 SLOAD PUSH1 0x60 SHL ISZERO PUSH2 0x1561 JUMPI PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x157C SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x2DB5 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x15BB SWAP1 PUSH2 0x15B6 PUSH2 0x15B1 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x163E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15D4 PUSH2 0x15CF PUSH2 0x15D9 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15E5 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15F1 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1605 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1618 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1633 PUSH2 0x162E PUSH2 0x163A SWAP3 PUSH2 0x160F JUMP JUMPDEST PUSH2 0x161B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x164A PUSH2 0x1651 SWAP2 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x165C SWAP1 PUSH2 0x15A2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1678 PUSH2 0x167D SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168A SWAP1 SLOAD PUSH2 0x166C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1695 PUSH2 0x165E JUMP JUMPDEST POP PUSH2 0x16A0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP2 DUP3 AND SWAP1 DUP3 AND SWAP2 DUP4 PUSH1 0x0 MSTORE CALLER PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP1 DUP2 SLOAD DUP1 SWAP2 AND DUP4 DUP2 EQ DUP2 MUL ISZERO PUSH2 0x178B JUMPI POP DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD DUP1 CALLER EQ DUP5 CALLER EQ OR ISZERO PUSH2 0x1773 JUMPI JUMPDEST PUSH2 0x1767 JUMPI JUMPDEST DUP4 DUP4 XOR XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP5 MUL ISZERO PUSH2 0x1752 JUMPI SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP5 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD SSTORE PUSH2 0x16FB JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x16F6 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH8 0xCEEA21B6A1148100 SWAP1 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x17AE SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17BB SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17D8 PUSH2 0x17DD SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17EA SWAP1 SLOAD PUSH2 0x17CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1806 PUSH2 0x180C SWAP3 PUSH2 0x17FE PUSH2 0x17A0 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x17E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1823 PUSH2 0x181E PUSH2 0x1828 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1835 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x185A PUSH2 0x185F SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1843 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186C SWAP1 SLOAD PUSH2 0x184E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1879 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x18A0 PUSH2 0x18A5 SWAP2 PUSH2 0x187D JUMP JUMPDEST PUSH2 0x1883 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18B2 SWAP1 SLOAD PUSH2 0x1894 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18BF SWAP1 PUSH2 0x36F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x18CD PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1907 PUSH2 0x18FE PUSH1 0x0 PUSH2 0x18E1 PUSH2 0x18C3 JUMP JUMPDEST SWAP5 PUSH2 0x18F8 PUSH2 0x18F0 DUP4 DUP4 ADD PUSH2 0x1862 JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x186F JUMP JUMPDEST ADD PUSH2 0x18A8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x18B5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1912 SWAP1 PUSH2 0x18D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x191F SWAP1 MLOAD PUSH2 0x33F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1936 PUSH2 0x1931 PUSH2 0x193B SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1947 SWAP1 PUSH2 0x1922 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1954 SWAP1 MLOAD PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x196B PUSH2 0x1966 PUSH2 0x1970 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1998 PUSH2 0x199E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x19AA DUP4 DUP3 MUL PUSH2 0x4D7 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x19B9 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19E0 PUSH2 0x19E6 SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x19F1 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x1A19 PUSH2 0x1A1E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1A08 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x1A11 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x1909 JUMP JUMPDEST SWAP2 PUSH2 0x1A2B PUSH1 0x0 DUP5 ADD PUSH2 0x1915 JUMP JUMPDEST PUSH2 0x1A46 PUSH2 0x1A40 PUSH2 0x1A3B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1A93 JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1A8F SWAP4 PUSH2 0x1A6C PUSH2 0x1A67 PUSH1 0x20 DUP10 ADD PUSH2 0x194A JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x1A82 PUSH2 0x1A7D PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x19D4 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A8F PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1AA9 DUP4 PUSH2 0x1909 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x1A4C JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1AF2 SWAP2 PUSH2 0x1AED PUSH2 0x1AE8 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1B9B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B08 PUSH2 0x1B03 PUSH2 0x1B0D SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1B1C SWAP2 ADD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B28 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1B37 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP1 PUSH2 0x1B49 PUSH1 0x0 NOT SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1B6B PUSH2 0x1B66 PUSH2 0x1B72 SWAP3 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1B85 PUSH2 0x1B8B SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1B96 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA7 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x1BBC PUSH2 0x1BB6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x1C3D JUMPI JUMPDEST PUSH2 0x1BD5 PUSH2 0x1BD0 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1BFB JUMPI PUSH2 0x1BF6 PUSH2 0x1BEF PUSH2 0x1BEA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1C36 SWAP1 PUSH2 0x1C15 DUP6 PUSH2 0x1C0F PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST SWAP1 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1C31 PUSH2 0x1C2A PUSH2 0x1C25 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1C5E SWAP2 POP PUSH2 0x1C57 SWAP1 PUSH2 0x1C52 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B76 JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C6A SWAP2 PUSH2 0x1AD8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C87 SWAP2 PUSH2 0x1C82 PUSH2 0x1C7D DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C93 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C9F SWAP2 PUSH2 0x1C6C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1CFC PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x1D05 DUP2 PUSH2 0x1CA1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D1F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1CEF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D29 JUMPI JUMP JUMPDEST PUSH2 0x1D31 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1D47 PUSH1 0x4 DUP3 ADD PUSH2 0x1D09 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1D78 SWAP2 PUSH2 0x1D73 DUP3 PUSH2 0x1D6D PUSH2 0x1D67 PUSH2 0x1D62 PUSH2 0x2F83 JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D94 SWAP2 PUSH2 0x1D8F PUSH2 0x1D8A PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1D96 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DA0 SWAP2 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1DBC PUSH2 0x1DB5 PUSH2 0x1DB0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMPDEST PUSH2 0x1DCF PUSH2 0x1DCA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1DF5 JUMPI PUSH2 0x1DF0 PUSH2 0x1DE9 PUSH2 0x1DE4 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1DBD JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E01 SWAP2 PUSH2 0x1D7A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E15 PUSH2 0x1E10 DUP4 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x1E24 PUSH1 0x0 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E2F PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1E3F DUP4 DUP4 DUP4 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x1E48 DUP3 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x1E52 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1E65 SWAP3 SWAP2 PUSH2 0x1E5F PUSH2 0x1E27 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x1E77 SWAP1 CALLER PUSH2 0x3058 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1E90 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1E79 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E9D SWAP1 SLOAD PUSH2 0x1E7F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EAC PUSH1 0xFF SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1EBF SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EDA PUSH2 0x1ED5 PUSH2 0x1EE1 SWAP3 PUSH2 0x1EB6 JUMP JUMPDEST PUSH2 0x1EC2 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1EA0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP7 SWAP8 SWAP1 SWAP2 SWAP3 SWAP6 SWAP5 SWAP4 SWAP8 CALLER PUSH2 0x1F21 PUSH2 0x1F1B PUSH32 0x0 PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x1F84 JUMPI JUMPDEST PUSH2 0x1F67 JUMPI PUSH2 0x1F59 SWAP9 PUSH2 0x1F4C SWAP8 PUSH2 0x1F47 SWAP6 DUP11 SWAP6 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x2D3B JUMP JUMPDEST PUSH2 0x1F54 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x1F65 PUSH1 0x1 PUSH1 0xA PUSH2 0x1EC5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x1F80 PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1F8F PUSH1 0xA PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0x1F2A JUMP JUMPDEST SWAP1 PUSH2 0x1FAF SWAP3 SWAP2 PUSH2 0x1FAA PUSH2 0x1FA5 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1FB1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x1FBE SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x3217 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1FCB SWAP3 SWAP2 PUSH2 0x1F94 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x200B SWAP2 PUSH2 0x2006 PUSH2 0x2001 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x21F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x2037 SWAP2 MUL SWAP2 PUSH2 0x2031 PUSH1 0x0 NOT DUP5 PUSH2 0x2017 JUMP JUMPDEST SWAP3 PUSH2 0x2017 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2057 PUSH2 0x2052 PUSH2 0x205F SWAP4 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2075 SWAP2 PUSH2 0x206F PUSH2 0x165E JUMP JUMPDEST SWAP2 PUSH2 0x2041 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x2083 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2091 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x2063 JUMP JUMPDEST ADD PUSH2 0x2078 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x20A7 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x20B3 PUSH2 0x20D8 SWAP4 PUSH2 0x143C JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x20BF DUP5 PUSH2 0x200D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x20E0 JUMPI JUMPDEST PUSH2 0x20D1 SWAP1 PUSH2 0x200D JUMP JUMPDEST ADD SWAP1 PUSH2 0x2077 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x20A2 JUMP JUMPDEST SWAP2 POP PUSH2 0x20D1 DUP2 SWAP3 SWAP1 POP PUSH2 0x20C8 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2103 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x20EE JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x2112 SWAP2 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2124 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x21E6 JUMPI PUSH2 0x2148 DUP3 PUSH2 0x2142 DUP6 SLOAD PUSH2 0x1409 JUMP JUMPDEST DUP6 PUSH2 0x2097 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x217D JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x216C SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x2171 JUMPI JUMPDEST POP POP PUSH2 0x2108 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x2165 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x218C DUP6 PUSH2 0x143C JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x21CE JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x21B4 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x216F JUMP JUMPDEST PUSH2 0x21C4 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x21A8 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x2190 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x21F5 SWAP2 PUSH2 0x211A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2206 PUSH2 0x220D SWAP3 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2219 SWAP2 PUSH2 0x1FF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x222D SWAP1 PUSH2 0x2227 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x329A JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2236 JUMPI JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x224C PUSH2 0x165E JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x2274 JUMPI PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x0 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1C PUSH1 0xC KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH4 0x8F4EB604 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x229B SWAP1 PUSH2 0x2296 PUSH2 0x2291 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x229D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22A8 SWAP1 PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22B3 SWAP1 PUSH2 0x2282 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x22BF SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x22F0 PUSH2 0x22EB PUSH2 0x22F5 SWAP4 PUSH2 0x22E3 PUSH2 0x1527 JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x32FB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2301 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x230D SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x231A SWAP1 PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2350 SWAP2 PUSH1 0x0 PUSH2 0x2345 PUSH2 0x234B SWAP4 PUSH2 0x233D PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1E93 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x236C SWAP1 PUSH2 0x2367 PUSH2 0x2362 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x236E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2379 SWAP1 PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2384 SWAP1 PUSH2 0x2353 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x238E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2399 PUSH1 0x8 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23B3 PUSH2 0x23B8 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x239C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C5 SWAP1 SLOAD PUSH2 0x23A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23D1 SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x23E7 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2403 JUMPI PUSH2 0x2400 SWAP2 PUSH1 0x0 ADD PUSH2 0x23DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST POP PUSH2 0x2417 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2423 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2436 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2442 SWAP1 PUSH2 0x288 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2455 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2461 SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24B5 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x24B0 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x24AB JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x24DD DUP2 PUSH2 0x24D6 DUP2 PUSH2 0x24E2 SWAP6 PUSH2 0x24BA JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24FC JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2542 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x253D JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2538 JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2561 DUP2 PUSH2 0x255A DUP2 PUSH2 0x2566 SWAP6 PUSH2 0x1433 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2580 DUP2 PUSH2 0x256A JUMP JUMPDEST SUB PUSH2 0x2587 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2599 DUP3 PUSH2 0x2577 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x25AA SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x258C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25B6 SWAP1 PUSH2 0x256A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x25F8 SWAP1 PUSH1 0x20 PUSH2 0x25F0 PUSH2 0x25E6 PUSH1 0x40 DUP5 ADD PUSH2 0x25D8 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x2501 JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x2547 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x259B JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x25AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26A5 SWAP2 PUSH2 0x2697 PUSH2 0x268C PUSH1 0xC0 DUP4 ADD PUSH2 0x2623 PUSH2 0x2619 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x263D PUSH2 0x2633 PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x2427 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2439 JUMP JUMPDEST PUSH2 0x2657 PUSH2 0x264D PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x2671 PUSH2 0x2667 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x267E PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x2474 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x24C3 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x24E6 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x25BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x26D4 PUSH1 0x40 SWAP2 PUSH2 0x26DC SWAP5 PUSH2 0x26C7 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x25FB JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0x273 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x26FC PUSH2 0x17A0 JUMP JUMPDEST POP PUSH2 0x270F PUSH2 0x270A PUSH1 0x4 PUSH2 0x23BB JUMP JUMPDEST PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0x273B PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2746 PUSH2 0x2727 PUSH1 0x5 PUSH2 0x17E0 JUMP JUMPDEST PUSH2 0x272F PUSH2 0x273 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x23D4 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x26A8 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x278B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x275D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x277E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2784 JUMPI JUMPDEST PUSH2 0x2776 DUP2 DUP4 PUSH2 0x97E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x23E9 JUMP JUMPDEST CODESIZE PUSH2 0x2759 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x276C JUMP JUMPDEST PUSH2 0x26DE JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x30 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x27FE JUMPI PUSH2 0x27FA PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2818 PUSH2 0x2813 DUP3 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x2834 JUMPI PUSH2 0x2832 SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST PUSH2 0x2844 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x2803 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x2857 DUP2 DUP6 DUP5 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x2860 DUP5 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x286C JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2882 SWAP5 PUSH2 0x287C SWAP2 SWAP5 SWAP3 SWAP4 PUSH2 0x2839 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2865 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2899 SWAP1 SLOAD PUSH2 0x1409 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28A4 PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28AF PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x28C2 PUSH2 0x28BC DUP3 PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x2923 JUMPI PUSH2 0x28D8 PUSH2 0x28D3 PUSH1 0x6 PUSH2 0x288C JUMP JUMPDEST PUSH2 0x288F JUMP JUMPDEST PUSH2 0x28EB PUSH2 0x28E5 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x2915 JUMPI PUSH2 0x2911 SWAP1 PUSH2 0x290C PUSH2 0x2906 PUSH1 0x6 SWAP3 PUSH2 0x3334 JUMP JUMPDEST SWAP2 PUSH2 0x1505 JUMP JUMPDEST PUSH2 0x338F JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x291E PUSH2 0x289C JUMP JUMPDEST PUSH2 0x2912 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x677510DB PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x293C PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x295F PUSH2 0x295A PUSH2 0x2964 SWAP3 PUSH2 0x2952 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x33BF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2982 SWAP2 PUSH2 0x297D PUSH2 0x2978 DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2984 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x298E SWAP2 PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x299A SWAP2 PUSH2 0x2967 JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x29C0 DUP3 PUSH2 0x299C JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x29D1 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x29E0 SWAP1 MLOAD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29ED DUP3 PUSH2 0x299C JUMP JUMPDEST SWAP1 PUSH2 0x29F8 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2A0C PUSH2 0x2A06 DUP6 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x2A3D JUMPI PUSH2 0x2A38 SWAP1 PUSH2 0x2A33 CALLER PUSH2 0x2A2D PUSH2 0x2A28 DUP9 DUP6 SWAP1 PUSH2 0x29B6 JUMP JUMPDEST PUSH2 0x29D6 JUMP JUMPDEST SWAP1 PUSH2 0x3058 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST PUSH2 0x29F9 JUMP JUMPDEST POP SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A4B PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2A56 PUSH1 0x9 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A62 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A97 SWAP1 PUSH2 0x2A92 PUSH2 0x2A8D PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2AC5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AA2 SWAP1 PUSH2 0x1663 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2ABA PUSH2 0x2AB5 PUSH2 0x2AC1 SWAP3 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2AD0 SWAP1 PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2ADB SWAP1 PUSH2 0x2A7E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AE5 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x2AEF DUP2 PUSH2 0x33DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B12 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B02 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B0C SWAP2 POP PUSH2 0x346C JUMP JUMPDEST CODESIZE PUSH2 0x2AFE JUMP JUMPDEST POP PUSH2 0x2B1C DUP2 PUSH2 0x3406 JUMP JUMPDEST PUSH2 0x2AF6 JUMP JUMPDEST PUSH2 0x2B33 SWAP1 PUSH2 0x2B2D PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x3591 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2B90 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2B99 DUP2 PUSH2 0x2B35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BB3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2B83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2BBD JUMPI JUMP JUMPDEST PUSH2 0x2BC5 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2BDB PUSH1 0x4 DUP3 ADD PUSH2 0x2B9D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2C14 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2C1D DUP2 PUSH2 0x2BDF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C37 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2C07 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2C41 JUMPI JUMP JUMPDEST PUSH2 0x2C49 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2C5F PUSH1 0x4 DUP3 ADD PUSH2 0x2C21 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C6D PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C88 PUSH2 0x2C83 PUSH2 0x2C8F SWAP3 PUSH2 0x2304 JUMP JUMPDEST PUSH2 0x2C70 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CB3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2CD1 PUSH2 0x2CCC PUSH2 0x2CD6 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CF1 PUSH2 0x2CEC PUSH2 0x2CF8 SWAP3 PUSH2 0x2CBD JUMP JUMPDEST PUSH2 0x2CD9 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C99 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2D27 PUSH1 0x20 PUSH1 0x0 PUSH2 0x2D2D SWAP5 PUSH2 0x2D1F DUP3 DUP3 ADD PUSH2 0x2D19 DUP5 DUP9 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP1 PUSH2 0x2C73 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x194A JUMP JUMPDEST SWAP1 PUSH2 0x2CDC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2D39 SWAP2 PUSH2 0x2CFC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2DAC PUSH2 0x2DB3 SWAP3 PUSH2 0x2D67 DUP4 PUSH2 0x2D60 PUSH2 0x2D5A PUSH2 0x2D55 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x2D8D DUP2 PUSH2 0x2D86 PUSH2 0x2D80 PUSH2 0x2D7B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x2C3A JUMP JUMPDEST SWAP2 PUSH2 0x2DA3 PUSH2 0x2D99 PUSH2 0x2C63 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP1 DUP2 AND SWAP2 DUP2 AND DUP4 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP2 DUP3 SLOAD AND SWAP2 DUP3 ISZERO PUSH2 0x2E4A JUMPI DUP2 DUP4 DUP6 SWAP4 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E24 JUMPI JUMPDEST PUSH1 0x1 ADD SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x2E3C JUMPI DUP3 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E74 PUSH2 0x2E6F PUSH2 0x2E79 SWAP3 PUSH2 0x2E5D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E84 PUSH2 0x2E58 JUMP JUMPDEST POP PUSH2 0x2E90 PUSH2 0x2710 PUSH2 0x2E60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E9B PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x60 SHL PUSH2 0x2F4B JUMPI DUP3 OR SWAP1 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP4 MUL ISZERO PUSH2 0x2F36 JUMPI SSTORE PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP4 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xC991CBB1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x2F7B PUSH2 0x2F76 PUSH2 0x2F80 SWAP4 PUSH2 0x2F6F DUP2 DUP6 SWAP1 PUSH2 0x362A JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x3711 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2F8B PUSH2 0x1527 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FB2 PUSH2 0x2FAD PUSH2 0x2FB7 SWAP4 PUSH2 0x2FA6 DUP2 DUP6 SWAP1 PUSH2 0x374C JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x37E6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2FC2 PUSH2 0x1351 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP2 PUSH1 0xA4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH4 0x150B7A02 SWAP7 DUP8 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x3044 JUMPI JUMPDEST POP POP ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x3034 JUMPI JUMPDEST PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x3026 JUMPI JUMP JUMPDEST PUSH4 0xD1A57ED6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x301A JUMPI POP RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP8 PUSH1 0xC0 DUP9 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x3007 JUMP JUMPDEST PUSH2 0x3061 DUP3 PUSH2 0x221B JUMP JUMPDEST POP PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD SWAP1 DUP2 SLOAD SWAP2 DUP3 PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP2 DUP3 ISZERO PUSH2 0x3114 JUMPI DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD SWAP1 DUP2 DUP2 EQ DUP5 DUP3 EQ OR SWAP1 ISZERO OR ISZERO PUSH2 0x30FC JUMPI JUMPDEST PUSH1 0x0 SWAP4 DUP4 SWAP2 PUSH2 0x30F1 JUMPI JUMPDEST XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP3 CODESIZE LOG4 JUMP JUMPDEST DUP5 DUP4 PUSH1 0x1 ADD SSTORE PUSH2 0x30BC JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x30B2 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP3 PUSH2 0x314C SWAP1 PUSH2 0x3145 PUSH2 0x3153 SWAP5 PUSH2 0x313E PUSH2 0x3191 SWAP11 SWAP9 SWAP6 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST PUSH2 0x3165 PUSH2 0x315E PUSH2 0xF38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3177 PUSH2 0x3170 PUSH2 0x1FCD JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3189 PUSH2 0x3182 PUSH2 0x1396 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3821 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x31C8 PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x31D1 DUP2 PUSH2 0x3193 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x31EB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x31BB JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x31F5 JUMPI JUMP JUMPDEST PUSH2 0x31FD PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3213 PUSH1 0x4 DUP3 ADD PUSH2 0x31D5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3293 SWAP1 PUSH2 0x328C PUSH2 0x3298 SWAP5 SWAP4 PUSH2 0x3247 DUP6 PUSH2 0x3240 PUSH2 0x323A PUSH2 0x3235 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x326D DUP2 PUSH2 0x3266 PUSH2 0x3260 PUSH2 0x325B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x31EE JUMP JUMPDEST SWAP4 PUSH2 0x3283 PUSH2 0x3279 PUSH2 0x2C63 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x32A2 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32D7 PUSH2 0x32DC SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x180F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32F3 PUSH2 0x32EE PUSH2 0x32F8 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3327 PUSH2 0x3322 PUSH2 0x3331 SWAP4 PUSH2 0x331D PUSH1 0x0 PUSH2 0x332C SWAP6 PUSH2 0x3316 PUSH2 0x1527 JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x389C JUMP JUMPDEST PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x32DF JUMP JUMPDEST PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x333D PUSH2 0x13EE JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x337A JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x335B JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33BC SWAP2 PUSH2 0x33B1 PUSH2 0x33AB PUSH2 0x33B7 SWAP4 PUSH2 0x33A5 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3389 JUMP JUMPDEST SWAP2 PUSH2 0x3389 JUMP JUMPDEST SWAP1 PUSH2 0x38C3 JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D7 PUSH1 0x0 PUSH2 0x33DC SWAP3 PUSH2 0x33D0 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3945 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33E7 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0x5B5E139F DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x340E PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3418 DUP2 PUSH2 0x395D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x345D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x3442 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3432 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x343C SWAP2 POP PUSH2 0x399D JUMP JUMPDEST CODESIZE PUSH2 0x342E JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3457 PUSH2 0x3451 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ PUSH2 0x3426 JUMP JUMPDEST POP PUSH2 0x3467 DUP2 PUSH2 0x399D JUMP JUMPDEST PUSH2 0x341F JUMP JUMPDEST PUSH2 0x3474 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x347E DUP2 PUSH2 0x399D JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x348A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3494 SWAP2 POP PUSH2 0x39DD JUMP JUMPDEST CODESIZE PUSH2 0x3486 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34B1 PUSH2 0x34AC PUSH2 0x34B6 SWAP3 PUSH2 0x349A JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34F2 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x34FB DUP2 PUSH2 0x34BE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3524 PUSH2 0x351B SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x3512 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x34B9 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x355C PUSH1 0x11 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x3565 DUP2 PUSH2 0x3528 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3583 PUSH2 0x358E SWAP4 SWAP3 PUSH2 0x357D PUSH2 0x3588 SWAP4 PUSH2 0x34E6 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST PUSH2 0x3550 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x35A6 PUSH2 0x35A0 DUP4 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x35AE JUMPI POP POP JUMP JUMPDEST PUSH2 0x3626 SWAP2 PUSH2 0x3604 PUSH2 0x35DD PUSH2 0x35CD PUSH2 0x35C7 PUSH2 0x3609 SWAP6 PUSH2 0x3A6B JUMP JUMPDEST SWAP4 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x35D7 PUSH1 0x20 PUSH2 0x349D JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP2 PUSH2 0x35F5 PUSH2 0x35E9 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x3569 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST PUSH2 0x3611 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x363E PUSH2 0x3638 DUP3 DUP5 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x3647 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x366A PUSH1 0x1 PUSH2 0x3665 PUSH1 0x0 PUSH2 0x365D PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x3673 PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x36B0 PUSH2 0x36AA PUSH2 0x36A4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x36B9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x36C3 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3643 JUMP JUMPDEST PUSH2 0x36D6 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36ED PUSH2 0x36E8 PUSH2 0x36F2 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3709 PUSH2 0x3704 PUSH2 0x370E SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3744 PUSH2 0x373E PUSH2 0x3739 PUSH2 0x3734 PUSH1 0x0 PUSH2 0x3749 SWAP7 PUSH2 0x372C PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3E7A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3757 DUP2 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0x3760 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3783 PUSH1 0x0 PUSH2 0x377E PUSH1 0x0 PUSH2 0x3776 PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x378C PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x37C9 PUSH2 0x37C3 PUSH2 0x37BD PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x37D2 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x37DC DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x375C JUMP JUMPDEST SWAP1 PUSH2 0x3819 PUSH2 0x3813 PUSH2 0x380E PUSH2 0x3809 PUSH1 0x0 PUSH2 0x381E SWAP7 PUSH2 0x3801 PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3F5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3837 PUSH2 0x383C SWAP4 SWAP3 PUSH2 0x3832 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x4069 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3856 DUP2 PUSH2 0x383E JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3871 JUMPI PUSH2 0x3868 PUSH1 0x1 SWAP2 PUSH2 0x3842 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3886 SWAP1 PUSH1 0x8 PUSH2 0x388B SWAP4 MUL PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3899 SWAP2 SLOAD PUSH2 0x3876 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38BB SWAP2 PUSH1 0x0 PUSH2 0x38B5 SWAP3 PUSH2 0x38AE PUSH2 0x17A0 JUMP JUMPDEST POP ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x38CE PUSH2 0x38BE JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1F NOT DUP1 DUP4 MLOAD SWAP4 DUP2 DUP1 PUSH1 0x20 DUP8 ADD AND JUMPDEST DUP1 DUP4 ADD MLOAD DUP2 DUP11 ADD MSTORE ADD SWAP1 DUP2 ISZERO PUSH2 0x38FD JUMPI DUP2 SWAP1 SWAP2 POP DUP3 SWAP1 PUSH2 0x38E2 JUMP JUMPDEST POP POP POP DUP2 MLOAD SWAP2 DUP4 DUP7 ADD DUP3 DUP1 PUSH1 0x20 DUP7 ADD AND JUMPDEST DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE ADD SWAP2 DUP3 ISZERO PUSH2 0x392B JUMPI DUP3 DUP1 SWAP2 SWAP4 POP POP DUP4 SWAP1 PUSH2 0x390E JUMP JUMPDEST POP POP POP POP PUSH1 0x20 SWAP2 ADD DUP1 DUP3 DUP6 ADD ADD SWAP1 PUSH1 0x0 DUP3 MSTORE DUP5 MSTORE ADD PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395A SWAP2 PUSH2 0x3953 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x383E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3965 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3980 PUSH2 0x397A PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x398D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3997 SWAP2 POP PUSH2 0x4089 JUMP JUMPDEST CODESIZE PUSH2 0x3989 JUMP JUMPDEST PUSH2 0x39A5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x39C0 PUSH2 0x39BA PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x39CD JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x39D7 SWAP2 POP PUSH2 0x40AF JUMP JUMPDEST CODESIZE PUSH2 0x39C9 JUMP JUMPDEST PUSH2 0x39E5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3A00 PUSH2 0x39FA PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3A0D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A17 SWAP2 POP PUSH2 0x3406 JUMP JUMPDEST CODESIZE PUSH2 0x3A09 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3A3A PUSH2 0x3A35 PUSH2 0x3A3F SWAP3 PUSH2 0x3A1D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A4C PUSH1 0x14 PUSH2 0x3A26 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A63 PUSH2 0x3A5E PUSH2 0x3A68 SWAP3 PUSH2 0x3A20 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A88 PUSH2 0x3A83 PUSH2 0x3A9E SWAP3 PUSH2 0x3A7D PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x3A98 PUSH2 0x3A93 PUSH2 0x3A42 JUMP JUMPDEST PUSH2 0x3A4F JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AB8 PUSH2 0x3AB3 PUSH2 0x3ABD SWAP3 PUSH2 0x3AA1 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3AD2 PUSH2 0x3ACD DUP4 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3B01 PUSH2 0x3AE9 DUP4 PUSH2 0x3AC0 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x3AF7 DUP7 SWAP4 PUSH2 0x27E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x3AD7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3B19 DUP3 PUSH2 0x3B0B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3B2B JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B4F PUSH2 0x3B4A PUSH2 0x3B54 SWAP3 PUSH2 0x3B38 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B60 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3B6F JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3B93 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BAD PUSH2 0x3BA8 PUSH2 0x3BB2 SWAP3 PUSH2 0x3B96 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 PUSH2 0x3BCD PUSH2 0x3BD7 SWAP3 PUSH2 0x3BBB JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BF9 SWAP1 PUSH2 0x3BF3 PUSH2 0x3BED PUSH2 0x3BFE SWAP5 PUSH2 0x3A20 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3C35 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x3C3E DUP2 PUSH2 0x3C01 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3C58 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3C62 JUMPI JUMP JUMPDEST PUSH2 0x3C6A PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3C80 PUSH1 0x4 DUP3 ADD PUSH2 0x3C42 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3C8E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3D28 PUSH2 0x3D18 PUSH2 0x3CC4 PUSH2 0x3CBF PUSH2 0x3CAF PUSH1 0x2 PUSH2 0x3CAA DUP8 SWAP2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3CB9 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST PUSH2 0x3ADC JUMP JUMPDEST SWAP3 PUSH2 0x3CCD PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x3CE6 DUP6 PUSH2 0x3CE0 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x1AF4 JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3CEF PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x3D08 DUP6 PUSH2 0x3D02 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D13 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3D22 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3D3E PUSH2 0x3D38 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST GT ISZERO PUSH2 0x3DA5 JUMPI PUSH2 0x3D4C PUSH2 0x3B8B JUMP JUMPDEST DUP2 PUSH2 0x3D57 PUSH1 0xF PUSH2 0x3B99 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3DA0 JUMPI PUSH2 0x3D73 PUSH2 0x3D94 SWAP3 PUSH2 0x3D9A SWAP5 BYTE PUSH2 0x3BB5 JUMP JUMPDEST PUSH2 0x3D83 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D8E PUSH1 0x4 PUSH2 0x3BBE JUMP JUMPDEST SWAP1 PUSH2 0x3BDA JUMP JUMPDEST SWAP4 PUSH2 0x3B57 JUMP JUMPDEST SWAP3 PUSH2 0x3D2A JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3DCD SWAP3 SWAP4 POP PUSH2 0x3DC8 SWAP1 PUSH2 0x3DC2 PUSH2 0x3DBC PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3DEB DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3E06 JUMPI PUSH2 0x3DFD PUSH1 0x1 SWAP2 PUSH2 0x3DD3 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3E21 PUSH2 0x3E1C PUSH2 0x3E29 SWAP4 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x3E5D JUMPI DUP3 PUSH2 0x3E55 SWAP2 PUSH1 0x1 PUSH2 0x3E5B SWAP6 ADD DUP2 SSTORE PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x3E6C SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3E82 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3E97 PUSH2 0x3E91 DUP3 DUP5 SWAP1 PUSH2 0x40EF JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3EDA JUMPI PUSH2 0x3ED0 PUSH2 0x3ED5 SWAP3 PUSH2 0x3EBB PUSH2 0x3EB4 PUSH1 0x0 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3E2D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3EC9 PUSH1 0x0 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST SWAP4 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3EF0 PUSH2 0x3EF6 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3F01 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3F2E SWAP2 PUSH2 0x3F28 PUSH2 0x17A0 JUMP JUMPDEST SWAP2 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3F39 DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F5A JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3F57 PUSH2 0x3F51 DUP4 DUP4 PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3F1C JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST PUSH2 0x3F67 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3F7E PUSH2 0x3F79 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3F93 PUSH2 0x3F8D PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x4061 JUMPI PUSH2 0x4013 SWAP3 PUSH1 0x1 PUSH2 0x400E SWAP3 DUP5 PUSH2 0x3FBC PUSH1 0x0 SWAP7 PUSH2 0x3FB6 DUP6 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST PUSH2 0x3FD9 PUSH2 0x3FCA DUP9 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST PUSH2 0x3FD3 DUP7 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST DUP1 PUSH2 0x3FEC PUSH2 0x3FE6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4018 JUMPI JUMPDEST POP POP POP PUSH2 0x4008 PUSH2 0x4003 DUP7 DUP4 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH2 0x3F30 JUMP JUMPDEST ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x2063 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4059 SWAP3 PUSH2 0x404B PUSH2 0x4037 PUSH2 0x4031 PUSH2 0x4054 SWAP5 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP4 PUSH2 0x4045 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3FF2 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4080 PUSH2 0x4079 PUSH2 0x4087 SWAP4 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4091 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x40AB PUSH2 0x40A5 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x40B7 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x40D2 PUSH2 0x40CC PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x40DF JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x40E9 SWAP2 POP PUSH2 0x395D JUMP JUMPDEST CODESIZE PUSH2 0x40DB JUMP JUMPDEST PUSH2 0x410D SWAP2 PUSH1 0x1 PUSH2 0x4108 SWAP3 PUSH2 0x4101 PUSH2 0x1351 JUMP JUMPDEST POP ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x4120 PUSH2 0x411A PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xA6 0xD0 COINBASE CALL 0x4C 0x22 PUSH12 0x15D09BED1F38D00ED477C06 COINBASE PUSH29 0xDEFC834389F375CB9B8964736F6C634300081B00330000000000000000 ",
              "sourceMap": "280:3068:38:-:0;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;602:74;659:10;644:25;;602:74::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 1036,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 864,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 4789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 1655,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_addresst_uint256t_bytes_calldata": {
                  "entryPoint": 4180,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 5
                },
                "abi_decode_addresst_bool": {
                  "entryPoint": 4009,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_stringt_stringt_stringt_stringt_addresst_uint96t_addresst_bytes32": {
                  "entryPoint": 2628,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 9
                },
                "abi_decode_addresst_struct_Attestation_calldatat_struct_Call_calldata": {
                  "entryPoint": 3699,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 1397,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_uint96": {
                  "entryPoint": 932,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_array_uint256_dyn": {
                  "entryPoint": 4631,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_array_uint256_dyn_memory_ptr": {
                  "entryPoint": 4596,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_available_length_array_uint256_dyn": {
                  "entryPoint": 4509,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 10243,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 2539,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bool": {
                  "entryPoint": 3994,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 1795,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32_fromMemory": {
                  "entryPoint": 9193,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32t_address": {
                  "entryPoint": 2103,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes32t_uint256": {
                  "entryPoint": 3398,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes4": {
                  "entryPoint": 696,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes_calldata": {
                  "entryPoint": 4117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_string": {
                  "entryPoint": 3293,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_string_memory_ptr": {
                  "entryPoint": 2593,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_stringt_string": {
                  "entryPoint": 3041,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_struct_Attestation_calldata": {
                  "entryPoint": 3661,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_struct_Call_calldata": {
                  "entryPoint": 3680,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32": {
                  "entryPoint": 1780,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32_fromMemory": {
                  "entryPoint": 9178,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes4": {
                  "entryPoint": 681,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 1485,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_uint256": {
                  "entryPoint": 1278,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 1263,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256t_addresst_uint96": {
                  "entryPoint": 2930,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_uint256t_uint256": {
                  "entryPoint": 1914,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_uint64": {
                  "entryPoint": 9612,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint96": {
                  "entryPoint": 917,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_string_storage": {
                  "entryPoint": 5334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1309,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_struct_Attestation_calldata_bytes32": {
                  "entryPoint": 9896,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address": {
                  "entryPoint": 9242,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_uint256": {
                  "entryPoint": 1960,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": 745,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 732,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32": {
                  "entryPoint": 9304,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1826,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes4": {
                  "entryPoint": 9273,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_calldata": {
                  "entryPoint": 9411,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_stringliteral_da0d_string_stringliteral_f986_string": {
                  "entryPoint": 13673,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1161,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_calldata": {
                  "entryPoint": 9543,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 13567,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 5191,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 1112,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_04fc": {
                  "entryPoint": 15401,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_d20a": {
                  "entryPoint": 12731,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_da0d": {
                  "entryPoint": 13542,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_dcda": {
                  "entryPoint": 11139,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f66a": {
                  "entryPoint": 11271,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f986": {
                  "entryPoint": 13648,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fb06": {
                  "entryPoint": 7407,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_struct_Attestation_calldata": {
                  "entryPoint": 9723,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_AuthData_calldata": {
                  "entryPoint": 9658,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1322,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_bytes32": {
                  "entryPoint": 1839,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_04fc": {
                  "entryPoint": 15426,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_d20a": {
                  "entryPoint": 12757,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_dcda": {
                  "entryPoint": 11165,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_f66a": {
                  "entryPoint": 11297,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_fb06": {
                  "entryPoint": 7433,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 1580,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 1567,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint64": {
                  "entryPoint": 9645,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 15068,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 2471,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 15040,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 7683,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_RoyaltyInfo": {
                  "entryPoint": 6339,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_RoyaltyInfo_storage_ptr": {
                  "entryPoint": 11363,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 627,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_array_uint256_dyn": {
                  "entryPoint": 4480,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 10208,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 2492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage": {
                  "entryPoint": 14402,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 15827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 5180,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage": {
                  "entryPoint": 14398,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 15838,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_uint256_dyn": {
                  "entryPoint": 10652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 15115,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes_storage_ptr": {
                  "entryPoint": 10383,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 1052,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_pop_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 16176,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 15917,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 9402,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 5171,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_fromStack": {
                  "entryPoint": 1056,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_nonPadded_inplace": {
                  "entryPoint": 13497,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_address": {
                  "entryPoint": 9224,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes32": {
                  "entryPoint": 9286,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes4": {
                  "entryPoint": 9255,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes_calldata": {
                  "entryPoint": 9332,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_string_calldata": {
                  "entryPoint": 9473,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_struct_AuthData_calldata": {
                  "entryPoint": 9446,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_uint64": {
                  "entryPoint": 9627,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 7030,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_div_uint256": {
                  "entryPoint": 6612,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 6537,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 16097,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 8343,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_address": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 727,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 1756,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 648,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 6211,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bool": {
                  "entryPoint": 7801,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bytes32": {
                  "entryPoint": 6089,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_IImplicitProjectValidation": {
                  "entryPoint": 9116,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 5737,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint96": {
                  "entryPoint": 6275,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_0_by": {
                  "entryPoint": 3859,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_15_by": {
                  "entryPoint": 15254,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_1_by": {
                  "entryPoint": 15160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_2_by": {
                  "entryPoint": 15009,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 15291,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 11869,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 13466,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 14877,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 820,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 1239,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint64": {
                  "entryPoint": 9578,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 14880,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint96": {
                  "entryPoint": 879,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 8311,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constant_ADDRESS_LENGTH": {
                  "entryPoint": 14914,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3896,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLICIT_MODE_ADMIN_ROLE": {
                  "entryPoint": 5502,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_METADATA_ADMIN_ROLE": {
                  "entryPoint": 8141,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_MINTER_ROLE": {
                  "entryPoint": 6836,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_ROYALTY_ADMIN_ROLE": {
                  "entryPoint": 5014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_SYMBOLS": {
                  "entryPoint": 15243,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 8964,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 5608,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_uint160": {
                  "entryPoint": 14029,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr": {
                  "entryPoint": 15824,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_bytes_calldata_to_bytes": {
                  "entryPoint": 10297,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "convert_array_bytes_to_string": {
                  "entryPoint": 13196,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_string_storage_to_bytes_ptr": {
                  "entryPoint": 10380,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_string_storage_to_string": {
                  "entryPoint": 5381,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_string_to_bytes": {
                  "entryPoint": 13193,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bool_to_bool": {
                  "entryPoint": 7862,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_bytes32": {
                  "entryPoint": 6053,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_uint256": {
                  "entryPoint": 13003,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_address": {
                  "entryPoint": 9160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 5647,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint256": {
                  "entryPoint": 6900,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_1_by_1_to_uint256": {
                  "entryPoint": 15163,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint256": {
                  "entryPoint": 15012,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 6462,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 3868,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 6434,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 15257,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 15294,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint96": {
                  "entryPoint": 11872,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_0448_to_bytes1": {
                  "entryPoint": 15107,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 7719,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_string": {
                  "entryPoint": 10396,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_cb29_to_bytes16": {
                  "entryPoint": 15220,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_to_bytes1": {
                  "entryPoint": 15152,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_struct_AddressSet_storage_to_struct_AddressSet_ptr": {
                  "entryPoint": 8909,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_RoyaltyInfo_storage_to_struct_RoyaltyInfo": {
                  "entryPoint": 6409,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_Set_storage_to_struct_Set_ptr": {
                  "entryPoint": 13000,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 13469,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 14886,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 8952,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 5596,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 5568,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint256": {
                  "entryPoint": 14041,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_bytes32": {
                  "entryPoint": 14069,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint160": {
                  "entryPoint": 13023,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 6159,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_uint256": {
                  "entryPoint": 14927,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint96_to_uint256": {
                  "entryPoint": 6487,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint96_to_uint96": {
                  "entryPoint": 11453,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 5347,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 8474,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 2527,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 7706,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 1065,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_struct_to_storage_from_struct_RoyaltyInfo_to_struct_RoyaltyInfo": {
                  "entryPoint": 11516,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 15191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "divide_by_ceil": {
                  "entryPoint": 8205,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3920,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_acceptImplicitRequest": {
                  "entryPoint": 3805,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_approve": {
                  "entryPoint": 1443,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 3240,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_batchBurn": {
                  "entryPoint": 4685,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_burn": {
                  "entryPoint": 2347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_contractURI": {
                  "entryPoint": 4736,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getApproved": {
                  "entryPoint": 1344,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleAdmin": {
                  "entryPoint": 1861,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMember": {
                  "entryPoint": 3444,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMemberCount": {
                  "entryPoint": 4375,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_grantRole": {
                  "entryPoint": 2149,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_hasRole": {
                  "entryPoint": 3498,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_initialize": {
                  "entryPoint": 2869,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_isApprovedForAll": {
                  "entryPoint": 4835,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mint": {
                  "entryPoint": 2253,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mintSequential": {
                  "entryPoint": 2051,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 1186,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_ownerOf": {
                  "entryPoint": 3187,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceRole": {
                  "entryPoint": 2201,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_revokeRole": {
                  "entryPoint": 4428,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_royaltyInfo": {
                  "entryPoint": 1996,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom": {
                  "entryPoint": 4277,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_safeTransferFrom_5382": {
                  "entryPoint": 2305,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setApprovalForAll": {
                  "entryPoint": 4055,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setBaseMetadataURI": {
                  "entryPoint": 3347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setContractURI": {
                  "entryPoint": 3552,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setDefaultRoyalty": {
                  "entryPoint": 984,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeProjectId": {
                  "entryPoint": 4889,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeValidator": {
                  "entryPoint": 1516,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setNameAndSymbol": {
                  "entryPoint": 3135,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setTokenRoyalty": {
                  "entryPoint": 2989,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 767,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_symbol": {
                  "entryPoint": 3603,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_tokenURI": {
                  "entryPoint": 4322,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_totalSupply": {
                  "entryPoint": 1602,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferFrom": {
                  "entryPoint": 1714,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 5129,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_dynamict_bytes32": {
                  "entryPoint": 14454,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 6222,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bool": {
                  "entryPoint": 7807,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bytes32": {
                  "entryPoint": 6092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_IImplicitProjectValidation": {
                  "entryPoint": 9127,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 5740,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint96": {
                  "entryPoint": 6292,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": 8456,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 2430,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__approve": {
                  "entryPoint": 11701,
                  "id": 5686,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun__checkRole": {
                  "entryPoint": 11041,
                  "id": 92,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__grantRole": {
                  "entryPoint": 13866,
                  "id": 283,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__ownerOf": {
                  "entryPoint": 12954,
                  "id": 5442,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__revokeRole": {
                  "entryPoint": 12176,
                  "id": 439,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__setTokenRoyalty": {
                  "entryPoint": 12823,
                  "id": 1327,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_acceptImplicitRequest": {
                  "entryPoint": 9967,
                  "id": 5098,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_add": {
                  "entryPoint": 15994,
                  "id": 3172,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_add_3472": {
                  "entryPoint": 14097,
                  "id": 3472,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_approve": {
                  "entryPoint": 5487,
                  "id": 5308,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_at": {
                  "entryPoint": 14492,
                  "id": 3306,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_at_3568": {
                  "entryPoint": 13051,
                  "id": 3568,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_balanceOf": {
                  "entryPoint": 8772,
                  "id": 5282,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_batchBurn": {
                  "entryPoint": 10723,
                  "id": 8335,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_burn": {
                  "entryPoint": 12376,
                  "id": 5634,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_burn_8302": {
                  "entryPoint": 7789,
                  "id": 8302,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOnERC721Received": {
                  "entryPoint": 12231,
                  "id": 5897,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_checkRole": {
                  "entryPoint": 13713,
                  "id": 131,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_concat": {
                  "entryPoint": 14531,
                  "id": 6282,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_concat_7223": {
                  "entryPoint": 13199,
                  "id": 7223,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_contains": {
                  "entryPoint": 16623,
                  "id": 3275,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_contractURI": {
                  "entryPoint": 10819,
                  "id": 8344,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_exists": {
                  "entryPoint": 11923,
                  "id": 5432,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_feeDenominator": {
                  "entryPoint": 11900,
                  "id": 1247,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getApproved": {
                  "entryPoint": 5420,
                  "id": 5292,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getRoleAdmin": {
                  "entryPoint": 6125,
                  "id": 146,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getRoleMember": {
                  "entryPoint": 8912,
                  "id": 375,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getRoleMemberCount": {
                  "entryPoint": 10560,
                  "id": 391,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 12121,
                  "id": 415,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_166": {
                  "entryPoint": 7317,
                  "id": 166,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_inner": {
                  "entryPoint": 7305,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_hasCode": {
                  "entryPoint": 12218,
                  "id": 5883,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_hasRole": {
                  "entryPoint": 9000,
                  "id": 79,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 12578,
                  "id": 8241,
                  "parameterSlots": 7,
                  "returnSlots": 0
                },
                "fun_initializeImplicitMode": {
                  "entryPoint": 14369,
                  "id": 9051,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_initializeSignalsImplicitMode": {
                  "entryPoint": 16489,
                  "id": 5070,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize_8530": {
                  "entryPoint": 7909,
                  "id": 8530,
                  "parameterSlots": 9,
                  "returnSlots": 0
                },
                "fun_isApprovedForAll": {
                  "entryPoint": 10841,
                  "id": 5320,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_length": {
                  "entryPoint": 14661,
                  "id": 3289,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_length_3541": {
                  "entryPoint": 13247,
                  "id": 3541,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_mint": {
                  "entryPoint": 11968,
                  "id": 5510,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_mintSequential": {
                  "entryPoint": 7264,
                  "id": 8602,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_mintSequential_inner": {
                  "entryPoint": 7067,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_mint_8558": {
                  "entryPoint": 7671,
                  "id": 8558,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_mint_inner": {
                  "entryPoint": 7574,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 12163,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_name": {
                  "entryPoint": 5393,
                  "id": 8421,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_ownerOf": {
                  "entryPoint": 8731,
                  "id": 5272,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_remove": {
                  "entryPoint": 16223,
                  "id": 3256,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_remove_3499": {
                  "entryPoint": 14310,
                  "id": 3499,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_renounceRole": {
                  "entryPoint": 7499,
                  "id": 209,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole": {
                  "entryPoint": 10640,
                  "id": 186,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_314": {
                  "entryPoint": 14156,
                  "id": 314,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_inner": {
                  "entryPoint": 10628,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_royaltyInfo": {
                  "entryPoint": 6646,
                  "id": 1238,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 7730,
                  "id": 5382,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom_5412": {
                  "entryPoint": 10311,
                  "id": 5412,
                  "parameterSlots": 5,
                  "returnSlots": 0
                },
                "fun_setApprovalForAll": {
                  "entryPoint": 10128,
                  "id": 5330,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setBaseMetadataURI": {
                  "entryPoint": 8874,
                  "id": 8275,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBaseMetadataURI_inner": {
                  "entryPoint": 8861,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractURI": {
                  "entryPoint": 9083,
                  "id": 8289,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setContractURI_inner": {
                  "entryPoint": 9070,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty": {
                  "entryPoint": 11579,
                  "id": 1281,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty_8934": {
                  "entryPoint": 5090,
                  "id": 8934,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setDefaultRoyalty_inner": {
                  "entryPoint": 5078,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId": {
                  "entryPoint": 10962,
                  "id": 9081,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId_inner": {
                  "entryPoint": 10949,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator": {
                  "entryPoint": 5715,
                  "id": 9067,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator_inner": {
                  "entryPoint": 5694,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setNameAndSymbol": {
                  "entryPoint": 8719,
                  "id": 8261,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setNameAndSymbol_inner": {
                  "entryPoint": 8695,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setTokenRoyalty": {
                  "entryPoint": 8128,
                  "id": 8954,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_setTokenRoyalty_inner": {
                  "entryPoint": 8113,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_supportsInterface": {
                  "entryPoint": 16559,
                  "id": 60,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_1188": {
                  "entryPoint": 14685,
                  "id": 1188,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_2135": {
                  "entryPoint": 16521,
                  "id": 2135,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_356": {
                  "entryPoint": 14749,
                  "id": 356,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5133": {
                  "entryPoint": 14813,
                  "id": 5133,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5422": {
                  "entryPoint": 13279,
                  "id": 5422,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8372": {
                  "entryPoint": 10973,
                  "id": 8372,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8633": {
                  "entryPoint": 4950,
                  "id": 8633,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_8988": {
                  "entryPoint": 13318,
                  "id": 8988,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_9103": {
                  "entryPoint": 13420,
                  "id": 9103,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_symbol": {
                  "entryPoint": 9094,
                  "id": 8432,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_toHexString": {
                  "entryPoint": 14955,
                  "id": 2086,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toHexString_2066": {
                  "entryPoint": 15492,
                  "id": 2066,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_toString": {
                  "entryPoint": 13108,
                  "id": 6628,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_tokenURI": {
                  "entryPoint": 10407,
                  "id": 8410,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_totalSupply": {
                  "entryPoint": 5773,
                  "id": 8611,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transferFrom": {
                  "entryPoint": 5795,
                  "id": 5354,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "getter_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3909,
                  "id": 27,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 5565,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_uint256": {
                  "entryPoint": 6943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_wrapping_uint256": {
                  "entryPoint": 6928,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_bool_of_address": {
                  "entryPoint": 8976,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_AddressSet_storage_of_bytes32": {
                  "entryPoint": 8885,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_RoleData_storage_of_bytes32": {
                  "entryPoint": 6065,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_uint256_of_bytes32": {
                  "entryPoint": 15970,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_uint256_struct_RoyaltyInfo_storage_of_uint256": {
                  "entryPoint": 6187,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mask_bytes_dynamic": {
                  "entryPoint": 8434,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 15119,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_uint256_dyn": {
                  "entryPoint": 10678,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "modifier_onlyRole": {
                  "entryPoint": 8084,
                  "id": 38,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_onlyRole_158": {
                  "entryPoint": 7276,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_178": {
                  "entryPoint": 10599,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8250": {
                  "entryPoint": 8177,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8268": {
                  "entryPoint": 8834,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8282": {
                  "entryPoint": 9043,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8539": {
                  "entryPoint": 7546,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8567": {
                  "entryPoint": 6872,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_8926": {
                  "entryPoint": 5050,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9058": {
                  "entryPoint": 5538,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_9074": {
                  "entryPoint": 10878,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 6515,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x12": {
                  "entryPoint": 6590,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x22": {
                  "entryPoint": 5107,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x31": {
                  "entryPoint": 16134,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 10656,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 2408,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 11376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bool": {
                  "entryPoint": 7874,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bytes32": {
                  "entryPoint": 10905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_IImplicitProjectValidation": {
                  "entryPoint": 5659,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint256": {
                  "entryPoint": 6995,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint96": {
                  "entryPoint": 11481,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_address": {
                  "entryPoint": 6421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint256": {
                  "entryPoint": 10710,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint96": {
                  "entryPoint": 6474,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_reference_type_struct_RoyaltyInfo": {
                  "entryPoint": 6352,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_bytes32": {
                  "entryPoint": 14478,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 6242,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": 7827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bytes32": {
                  "entryPoint": 6112,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_IImplicitProjectValidation": {
                  "entryPoint": 9147,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 5760,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint96": {
                  "entryPoint": 6312,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 15451,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_d20a": {
                  "entryPoint": 12782,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_dcda": {
                  "entryPoint": 11190,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f66a": {
                  "entryPoint": 11322,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_fb06": {
                  "entryPoint": 7458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2": {
                  "entryPoint": 9317,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
                  "entryPoint": 4107,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 2398,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d": {
                  "entryPoint": 3656,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20": {
                  "entryPoint": 9322,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 4940,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
                  "entryPoint": 4112,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 2403,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 643,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 633,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4": {
                  "entryPoint": 9327,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 638,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 9950,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 1102,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 3862,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_160": {
                  "entryPoint": 11411,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 9172,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_248": {
                  "entryPoint": 15285,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 8215,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 5731,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_224_unsigned": {
                  "entryPoint": 621,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_uint256_uint8": {
                  "entryPoint": 15322,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 6269,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 8430,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_array_index_access_bytes32_dyn": {
                  "entryPoint": 14413,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_array_index_access_bytes32_dyn_ptr": {
                  "entryPoint": 15842,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_set_to_zero_bytes32": {
                  "entryPoint": 16156,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 8291,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
                  "entryPoint": 15361,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_d20a09dd8b4080dbbc254e38d9f607ef83a2c7a38b671ae8f8f162ffe46e2084": {
                  "entryPoint": 12691,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
                  "entryPoint": 13502,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_dcda5bd52710522f2cc94635314fdacbfec7cf9b64adb69f4a07b374f938990d": {
                  "entryPoint": 11061,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f66a1010ca1024f054dcd95a016427c9d452e7f1ceb553ccd3a5e37073a6ffff": {
                  "entryPoint": 11231,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
                  "entryPoint": 13608,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
                  "entryPoint": 7329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_1_shift": {
                  "entryPoint": 7840,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_20_shift": {
                  "entryPoint": 5620,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 8219,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 11417,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_0": {
                  "entryPoint": 6972,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_bytes32_to_bytes32": {
                  "entryPoint": 15883,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 11379,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": 7877,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bytes32_to_bytes32": {
                  "entryPoint": 10917,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 5662,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_string_to_string": {
                  "entryPoint": 8683,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_struct_RoyaltyInfo_to_struct_RoyaltyInfo": {
                  "entryPoint": 11567,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 6998,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint96_to_uint96": {
                  "entryPoint": 11484,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 8257,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 843,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bool": {
                  "entryPoint": 3973,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 1759,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 660,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 1242,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint64": {
                  "entryPoint": 9591,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint96": {
                  "entryPoint": 896,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "write_to_memory_address": {
                  "entryPoint": 6255,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "write_to_memory_uint96": {
                  "entryPoint": 6325,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_memory_chunk_bytes1": {
                  "entryPoint": 15063,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 5415,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 4945,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 14526,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes32": {
                  "entryPoint": 6048,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_string": {
                  "entryPoint": 5102,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 5726,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint96": {
                  "entryPoint": 11864,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {
                "8452": [
                  {
                    "length": 32,
                    "start": 7927
                  }
                ]
              },
              "linkReferences": {},
              "object": "60806040526004361015610013575b61134c565b61001e60003561026d565b806301ffc9a71461026857806304634d8d1461026357806306fdde031461025e578063081812fc14610259578063095ea7b3146102545780630bb310de1461024f57806318160ddd1461024a57806323b872dd14610245578063248a9ca3146102405780632a55205a1461023b5780632e73e0fd146102365780632f2ff15d1461023157806336568abe1461022c57806340c10f191461022757806342842e0e1461022257806342966c681461021d5780634c62cd9b146102185780635944c753146102135780635a4462151461020e5780636352211e1461020957806370a08231146102045780637e518ec8146101ff5780639010d07c146101fa57806391d14854146101f5578063938e3d7b146101f057806395d89b41146101eb5780639d043a66146101e6578063a217fddf146101e1578063a22cb465146101dc578063b88d4fde146101d7578063c87b56dd146101d2578063ca15c873146101cd578063d547741f146101c8578063dc8e92ea146101c3578063e8a3d485146101be578063e985e9c5146101b95763ed4c2ac70361000e57611319565b6112e3565b611280565b61124d565b61114c565b611117565b6110e2565b6110b5565b610fd7565b610f50565b610edd565b610e13565b610de0565b610daa565b610d74565b610d13565b610ca8565b610c73565b610c3f565b610bad565b610b35565b61092b565b610901565b6108cd565b610899565b610865565b610803565b6107cc565b610745565b6106b2565b610642565b6105ec565b6105a3565b610540565b6104a2565b6103d8565b6102ff565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61029d81610288565b036102a457565b600080fd5b905035906102b682610294565b565b906020828203126102d2576102cf916000016102a9565b90565b61027e565b151590565b6102e5906102d7565b9052565b91906102fd906000602085019401906102dc565b565b3461032f5761032b61031a6103153660046102b8565b611356565b610322610273565b918291826102e9565b0390f35b610279565b60018060a01b031690565b61034890610334565b90565b6103548161033f565b0361035b57565b600080fd5b9050359061036d8261034b565b565b6bffffffffffffffffffffffff1690565b6103898161036f565b0361039057565b600080fd5b905035906103a282610380565b565b91906040838203126103cd57806103c16103ca9260008601610360565b93602001610395565b90565b61027e565b60000190565b34610407576103f16103eb3660046103a4565b906113e2565b6103f9610273565b80610403816103d2565b0390f35b610279565b600091031261041757565b61027e565b5190565b60209181520190565b60005b83811061043d575050906000910152565b80602091830151818501520161042c565b601f801991011690565b6104776104806020936104859361046e8161041c565b93848093610420565b95869101610429565b61044e565b0190565b61049f9160208201916000818403910152610458565b90565b346104d2576104b236600461040c565b6104ce6104bd611511565b6104c5610273565b91829182610489565b0390f35b610279565b90565b6104e3816104d7565b036104ea57565b600080fd5b905035906104fc826104da565b565b9060208282031261051857610515916000016104ef565b90565b61027e565b6105269061033f565b9052565b919061053e9060006020850194019061051d565b565b346105705761056c61055b6105563660046104fe565b61152c565b610563610273565b9182918261052a565b0390f35b610279565b919060408382031261059e578061059261059b9260008601610360565b936020016104ef565b90565b61027e565b6105b76105b1366004610575565b9061156f565b6105bf610273565b806105c9816103d2565b0390f35b906020828203126105e7576105e491600001610360565b90565b61027e565b3461061a576106046105ff3660046105cd565b611653565b61060c610273565b80610616816103d2565b0390f35b610279565b610628906104d7565b9052565b91906106409060006020850194019061061f565b565b346106725761065236600461040c565b61066e61065d61168d565b610665610273565b9182918261062c565b0390f35b610279565b90916060828403126106ad576106aa6106938460008501610360565b936106a18160208601610360565b936040016104ef565b90565b61027e565b6106c66106c0366004610677565b916116a3565b6106ce610273565b806106d8816103d2565b0390f35b90565b6106e8816106dc565b036106ef57565b600080fd5b90503590610701826106df565b565b9060208282031261071d5761071a916000016106f4565b90565b61027e565b61072b906106dc565b9052565b919061074390600060208501940190610722565b565b346107755761077161076061075b366004610703565b6117ed565b610768610273565b9182918261072f565b0390f35b610279565b91906040838203126107a357806107976107a092600086016104ef565b936020016104ef565b90565b61027e565b9160206107ca9294936107c36040820196600083019061051d565b019061061f565b565b346107fe576107e56107df36600461077a565b906119f6565b906107fa6107f1610273565b928392836107a8565b0390f35b610279565b346108325761081c610816366004610575565b90611c60565b610824610273565b8061082e816103d2565b0390f35b610279565b9190604083820312610860578061085461085d92600086016106f4565b93602001610360565b90565b61027e565b346108945761087e610878366004610837565b90611c95565b610886610273565b80610890816103d2565b0390f35b610279565b346108c8576108b26108ac366004610837565b90611d4b565b6108ba610273565b806108c4816103d2565b0390f35b610279565b346108fc576108e66108e0366004610575565b90611df7565b6108ee610273565b806108f8816103d2565b0390f35b610279565b61091561090f366004610677565b91611e32565b61091d610273565b80610927816103d2565b0390f35b346109595761094361093e3660046104fe565b611e6d565b61094b610273565b80610955816103d2565b0390f35b610279565b600080fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b906109889061044e565b810190811067ffffffffffffffff8211176109a257604052565b610968565b906109ba6109b3610273565b928361097e565b565b67ffffffffffffffff81116109da576109d660209161044e565b0190565b610968565b90826000939282370152565b90929192610a006109fb826109bc565b6109a7565b93818552602085019082840111610a1c57610a1a926109df565b565b610963565b9080601f83011215610a3f57816020610a3c933591016109eb565b90565b61095e565b909161012082840312610b3057610a5e8360008401610360565b92602083013567ffffffffffffffff8111610b2b5781610a7f918501610a21565b92604081013567ffffffffffffffff8111610b265782610aa0918301610a21565b92606082013567ffffffffffffffff8111610b215783610ac1918401610a21565b92608083013567ffffffffffffffff8111610b1c5781610ae2918501610a21565b92610af08260a08301610360565b92610b19610b018460c08501610395565b93610b0f8160e08601610360565b93610100016106f4565b90565b610283565b610283565b610283565b610283565b61027e565b34610b6d57610b57610b48366004610a44565b97969096959195949294611ee5565b610b5f610273565b80610b69816103d2565b0390f35b610279565b9091606082840312610ba857610ba5610b8e84600085016104ef565b93610b9c8160208601610360565b93604001610395565b90565b61027e565b34610bdc57610bc6610bc0366004610b72565b91611fc0565b610bce610273565b80610bd8816103d2565b0390f35b610279565b919091604081840312610c3a57600081013567ffffffffffffffff8111610c355783610c0e918301610a21565b92602082013567ffffffffffffffff8111610c3057610c2d9201610a21565b90565b610283565b610283565b61027e565b34610c6e57610c58610c52366004610be1565b9061220f565b610c60610273565b80610c6a816103d2565b0390f35b610279565b34610ca357610c9f610c8e610c893660046104fe565b61221b565b610c96610273565b9182918261052a565b0390f35b610279565b34610cd857610cd4610cc3610cbe3660046105cd565b612244565b610ccb610273565b9182918261062c565b0390f35b610279565b90602082820312610d0e57600082013567ffffffffffffffff8111610d0957610d069201610a21565b90565b610283565b61027e565b34610d4157610d2b610d26366004610cdd565b6122aa565b610d33610273565b80610d3d816103d2565b0390f35b610279565b9190604083820312610d6f5780610d63610d6c92600086016106f4565b936020016104ef565b90565b61027e565b34610da557610da1610d90610d8a366004610d46565b906122d0565b610d98610273565b9182918261052a565b0390f35b610279565b34610ddb57610dd7610dc6610dc0366004610837565b90612328565b610dce610273565b918291826102e9565b0390f35b610279565b34610e0e57610df8610df3366004610cdd565b61237b565b610e00610273565b80610e0a816103d2565b0390f35b610279565b34610e4357610e2336600461040c565b610e3f610e2e612386565b610e36610273565b91829182610489565b0390f35b610279565b600080fd5b908160c0910312610e5b5790565b610e48565b908160e0910312610e6e5790565b610e48565b91606083830312610ed857610e8b8260008501610360565b92602081013567ffffffffffffffff8111610ed35783610eac918301610e4d565b92604082013567ffffffffffffffff8111610ece57610ecb9201610e60565b90565b610283565b610283565b61027e565b34610f0e57610f0a610ef9610ef3366004610e73565b916126ef565b610f01610273565b9182918261072f565b0390f35b610279565b90565b60001b90565b610f30610f2b610f3592610f13565b610f16565b6106dc565b90565b610f426000610f1c565b90565b610f4d610f38565b90565b34610f8057610f6036600461040c565b610f7c610f6b610f45565b610f73610273565b9182918261072f565b0390f35b610279565b610f8e816102d7565b03610f9557565b600080fd5b90503590610fa782610f85565b565b9190604083820312610fd25780610fc6610fcf9260008601610360565b93602001610f9a565b90565b61027e565b3461100657610ff0610fea366004610fa9565b90612790565b610ff8610273565b80611002816103d2565b0390f35b610279565b600080fd5b600080fd5b909182601f8301121561104f5781359167ffffffffffffffff831161104a57602001926001830284011161104557565b611010565b61100b565b61095e565b906080828203126110b05761106c8160008401610360565b9261107a8260208501610360565b9261108883604083016104ef565b92606082013567ffffffffffffffff81116110ab576110a79201611015565b9091565b610283565b61027e565b6110cc6110c3366004611054565b93929092612847565b6110d4610273565b806110de816103d2565b0390f35b346111125761110e6110fd6110f83660046104fe565b6128a7565b611105610273565b91829182610489565b0390f35b610279565b346111475761114361113261112d366004610703565b612940565b61113a610273565b9182918261062c565b0390f35b610279565b3461117b5761116561115f366004610837565b90612990565b61116d610273565b80611177816103d2565b0390f35b610279565b67ffffffffffffffff81116111985760208091020190565b610968565b909291926111b26111ad82611180565b6109a7565b93818552602080860192028301928184116111ef57915b8383106111d65750505050565b602080916111e484866104ef565b8152019201916111c9565b611010565b9080601f830112156112125781602061120f9335910161119d565b90565b61095e565b9060208282031261124857600082013567ffffffffffffffff81116112435761124092016111f4565b90565b610283565b61027e565b3461127b57611265611260366004611217565b6129e3565b61126d610273565b80611277816103d2565b0390f35b610279565b346112b05761129036600461040c565b6112ac61129b612a43565b6112a3610273565b91829182610489565b0390f35b610279565b91906040838203126112de57806112d26112db9260008601610360565b93602001610360565b90565b61027e565b34611314576113106112ff6112f93660046112b5565b90612a59565b611307610273565b918291826102e9565b0390f35b610279565b346113475761133161132c366004610703565b612ad2565b611339610273565b80611343816103d2565b0390f35b610279565b600080fd5b600090565b61135e611351565b506376a4e23960e01b61137961137383610288565b91610288565b14908115611386575b5090565b6113909150612add565b38611382565b7f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb01190565b906113d4916113cf6113ca611396565b612b21565b6113d6565b565b906113e091612d3b565b565b906113ec916113ba565b565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611429575b602083101461142457565b6113f3565b91607f1691611419565b60209181520190565b600052602060002090565b906000929180549061146261145b83611409565b8094611433565b916001811690816000146114bb575060011461147e575b505050565b61148b919293945061143c565b916000925b8184106114a35750500190388080611479565b60018160209295939554848601520191019290611490565b92949550505060ff1916825215156020020190388080611479565b906114e091611447565b90565b906115036114fc926114f3610273565b938480926114d6565b038361097e565b565b61150e906114e3565b90565b6115196113ee565b506115246007611505565b90565b600090565b611534611527565b5080600052673ec412a9852d173d60c11b601c526020600020810101805460601b15611561576001015490565b63ceea21b66000526004601cfd5b61157c9133919091612db5565b565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b6115bb906115b66115b161157e565b612b21565b61163e565b565b90565b6115d46115cf6115d992610334565b6115bd565b610334565b90565b6115e5906115c0565b90565b6115f1906115dc565b90565b9061160560018060a01b0391610f16565b9181191691161790565b611618906115dc565b90565b90565b9061163361162e61163a9261160f565b61161b565b82546115f4565b9055565b61164a611651916115e8565b600461161e565b565b61165c906115a2565b565b600090565b60001c90565b90565b61167861167d91611663565b611669565b90565b61168a905461166c565b90565b61169561165e565b506116a0600c611680565b90565b9060001960601c918216908216918360005233673ec412a9852d173d60c11b17601c5260206000208401840190815480911683811481021561178b57508260005281600101548033148433141715611773575b611767575b838318189055601c600c206001815403905581600052601c600c2060018154019063ffffffff821684021561175257557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a4565b67ea553b3401336cea841560021b526004601cfd5b600082600101556116fb565b6030600c20546116f657634b6e7f186000526004601cfd5b67ceea21b6a1148100901560021b526004601cfd5b600090565b6117ae906106dc565b90565b906117bb906117a5565b600052602052604060002090565b90565b6117d86117dd91611663565b6117c9565b90565b6117ea90546117cc565b90565b600161180661180c926117fe6117a0565b5060026117b1565b016117e0565b90565b61182361181e611828926104d7565b6115bd565b6104d7565b90565b906118359061180f565b600052602052604060002090565b60018060a01b031690565b61185a61185f91611663565b611843565b90565b61186c905461184e565b90565b906118799061033f565b9052565b60a01c90565b6bffffffffffffffffffffffff1690565b6118a06118a59161187d565b611883565b90565b6118b29054611894565b90565b906118bf9061036f565b9052565b6118cd60406109a7565b90565b906119076118fe60006118e16118c3565b946118f86118f0838301611862565b83880161186f565b016118a8565b602084016118b5565b565b611912906118d0565b90565b61191f905161033f565b90565b61193661193161193b92610f13565b6115bd565b610334565b90565b61194790611922565b90565b611954905161036f565b90565b61196b6119666119709261036f565b6115bd565b6104d7565b90565b634e487b7160e01b600052601160045260246000fd5b61199861199e919392936104d7565b926104d7565b916119aa8382026104d7565b9281840414901517156119b957565b611973565b634e487b7160e01b600052601260045260246000fd5b6119e06119e6916104d7565b916104d7565b9081156119f1570490565b6119be565b611a19611a1e91939293611a08611527565b50611a1161165e565b50600161182b565b611909565b91611a2b60008401611915565b611a46611a40611a3b600061193e565b61033f565b9161033f565b14611a93575b6000611a88611a72611a8f93611a6c611a676020890161194a565b611957565b90611989565b611a82611a7d612e7c565b611957565b906119d4565b9301611915565b9190565b9150611a8f6000611a88611a72611aa983611909565b959350505050611a4c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b90611af291611aed611ae8611ab4565b612b21565b611b9b565b565b611b08611b03611b0d92610f13565b6115bd565b6104d7565b90565b6001611b1c91016104d7565b90565b611b28906104d7565b6000198114611b375760010190565b611973565b90611b4960001991610f16565b9181191691161790565b90565b90611b6b611b66611b729261180f565b611b53565b8254611b3c565b9055565b611b85611b8b919392936104d7565b926104d7565b8201809211611b9657565b611973565b9190611ba76000611af4565b915b82611bbc611bb6846104d7565b916104d7565b1015611c3d575b611bd5611bd0600b611680565b612e93565b15611bfb57611bf6611bef611bea600b611680565b611b1f565b600b611b56565b611bc3565b9091611c3690611c1585611c0f600b611680565b90612ec0565b611c31611c2a611c25600b611680565b611b1f565b600b611b56565b611b10565b9190611ba9565b9250611c5e9150611c5790611c52600c611680565b611b76565b600c611b56565b565b90611c6a91611ad8565b565b90611c8791611c82611c7d826117ed565b612b21565b611c89565b565b90611c9391612f59565b565b90611c9f91611c6c565b565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b611cfc602f604092610420565b611d0581611ca1565b0190565b611d1f9060208101906000818303910152611cef565b90565b15611d2957565b611d31610273565b62461bcd60e51b815280611d4760048201611d09565b0390fd5b90611d7891611d7382611d6d611d67611d62612f83565b61033f565b9161033f565b14611d22565b612f90565b565b90611d9491611d8f611d8a611ab4565b612b21565b611d96565b565b90611da091612ec0565b611dbc611db5611db0600c611680565b611b1f565b600c611b56565b5b611dcf611dca600b611680565b612e93565b15611df557611df0611de9611de4600b611680565b611b1f565b600b611b56565b611dbd565b565b90611e0191611d7a565b565b90611e15611e10836109bc565b6109a7565b918252565b611e246000611e03565b90565b611e2f611e1a565b90565b91611e3f838383916116a3565b611e4882612fba565b611e52575b505050565b611e659291611e5f611e27565b92612fc7565b388080611e4d565b611e779033613058565b565b60ff1690565b611e8b611e9091611663565b611e79565b90565b611e9d9054611e7f565b90565b90611eac60ff91610f16565b9181191691161790565b611ebf906102d7565b90565b90565b90611eda611ed5611ee192611eb6565b611ec2565b8254611ea0565b9055565b96979091929594939733611f21611f1b7f000000000000000000000000000000000000000000000000000000000000000061033f565b9161033f565b14158015611f84575b611f6757611f5998611f4c97611f47958a95909192939495613122565b612d3b565b611f54611ab4565b612f59565b611f656001600a611ec5565b565b600063f92ee8a960e01b815280611f80600482016103d2565b0390fd5b50611f8f600a611e93565b611f2a565b90611faf9291611faa611fa5611396565b612b21565b611fb1565b565b91611fbe92919091613217565b565b90611fcb9291611f94565b565b7fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a590565b9061200b91612006612001611fcd565b612b21565b6121f7565b565b601f602091010490565b1b90565b9190600861203791029161203160001984612017565b92612017565b9181191691161790565b919061205761205261205f9361180f565b611b53565b90835461201b565b9055565b6120759161206f61165e565b91612041565b565b5b818110612083575050565b806120916000600193612063565b01612078565b9190601f81116120a7575b505050565b6120b36120d89361143c565b9060206120bf8461200d565b830193106120e0575b6120d19061200d565b0190612077565b3880806120a2565b91506120d1819290506120c8565b1c90565b9061210390600019906008026120ee565b191690565b81612112916120f2565b906002021790565b906121248161041c565b9067ffffffffffffffff82116121e657612148826121428554611409565b85612097565b602090601f831160011461217d5791809161216c93600092612171575b5050612108565b90555b565b90915001513880612165565b601f1983169161218c8561143c565b9260005b8181106121ce575091600293918560019694106121b4575b5050500201905561216f565b6121c4910151601f8416906120f2565b90553880806121a8565b91936020600181928787015181550195019201612190565b610968565b906121f59161211a565b565b9061220661220d9260076121eb565b60086121eb565b565b9061221991611ff1565b565b61222d90612227611527565b5061329a565b90811561223657565b63ceea21b66000526004601cfd5b61224c61165e565b50801561227457673ec412a9852d173d60c11b601c5260005263ffffffff601c600c20541690565b638f4eb6046000526004601cfd5b61229b90612296612291611fcd565b612b21565b61229d565b565b6122a89060066121eb565b565b6122b390612282565b565b906122bf906117a5565b600052602052604060002090565b90565b906122f06122eb6122f5936122e3611527565b5060036122b5565b6122cd565b6132fb565b90565b612301906115c0565b90565b61230d906122f8565b90565b9061231a90612304565b600052602052604060002090565b61235091600061234561234b9361233d611351565b5060026117b1565b01612310565b611e93565b90565b61236c90612367612362611fcd565b612b21565b61236e565b565b6123799060096121eb565b565b61238490612353565b565b61238e6113ee565b506123996008611505565b90565b60018060a01b031690565b6123b36123b891611663565b61239c565b90565b6123c590546123a7565b90565b6123d1906122f8565b90565b60e01b90565b905051906123e7826106df565b565b9060208282031261240357612400916000016123da565b90565b61027e565b50612417906020810190610360565b90565b6124239061033f565b9052565b506124369060208101906102a9565b90565b61244290610288565b9052565b506124559060208101906106f4565b90565b612461906106dc565b9052565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156124b557016020813591019167ffffffffffffffff82116124b05760018202360383136124ab57565b61246a565b612465565b61246f565b60209181520190565b91906124dd816124d6816124e2956124ba565b80956109df565b61044e565b0190565b90356001604003823603038112156124fc570190565b61246f565b903560016020038236030381121561254257016020813591019167ffffffffffffffff821161253d57600182023603831361253857565b61246a565b612465565b61246f565b91906125618161255a8161256695611433565b80956109df565b61044e565b0190565b67ffffffffffffffff1690565b6125808161256a565b0361258757565b600080fd5b9050359061259982612577565b565b506125aa90602081019061258c565b90565b6125b69061256a565b9052565b906125f89060206125f06125e6604084016125d86000880188612501565b908683036000880152612547565b948281019061259b565b9101906125ad565b90565b6126a59161269761268c60c083016126236126196000870187612408565b600086019061241a565b61263d6126336020870187612427565b6020860190612439565b61265761264d6040870187612446565b6040860190612458565b6126716126676060870187612446565b6060860190612458565b61267e6080860186612474565b9085830360808701526124c3565b9260a08101906124e6565b9060a08184039101526125ba565b90565b9392906126d46040916126dc946126c7606089019260008a019061051d565b87820360208901526125fb565b940190610722565b565b6126e6610273565b3d6000823e3d90fd5b91506020906126fc6117a0565b5061270f61270a60046123bb565b6123c8565b61273b633808a90b94929461274661272760056117e0565b61272f610273565b978896879586956123d4565b8552600485016126a8565b03915afa90811561278b5760009161275d575b5090565b61277e915060203d8111612784575b612776818361097e565b8101906123e9565b38612759565b503d61276c565b6126de565b90151581601c52670a5a2e7a0000000060085233600052806030600c205560005260601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3565b67ffffffffffffffff81116127fe576127fa60209161044e565b0190565b610968565b90929192612818612813826127e0565b6109a7565b9381855260208501908284011161283457612832926109df565b565b610963565b612844913691612803565b90565b92919092612857818584916116a3565b61286084612fba565b61286c575b5050505050565b6128829461287c91949293612839565b92612fc7565b3880808080612865565b90565b6128999054611409565b90565b6128a4611e1a565b90565b6128af6113ee565b506128c26128bc82612e93565b156102d7565b612923576128d86128d3600661288c565b61288f565b6128eb6128e56000611af4565b916104d7565b1415600014612915576129119061290c612906600692613334565b91611505565b61338f565b5b90565b5061291e61289c565b612912565b600063677510db60e11b81528061293c600482016103d2565b0390fd5b61295f61295a6129649261295261165e565b5060036122b5565b6122cd565b6133bf565b90565b906129829161297d612978826117ed565b612b21565b612984565b565b9061298e91612f90565b565b9061299a91612967565b565b5190565b634e487b7160e01b600052603260045260246000fd5b906129c08261299c565b8110156129d1576020809102010190565b6129a0565b6129e090516104d7565b90565b906129ed8261299c565b906129f86000611af4565b5b80612a0c612a06856104d7565b916104d7565b1015612a3d57612a3890612a3333612a2d612a288885906129b6565b6129d6565b90613058565b611b10565b6129f9565b50915050565b612a4b6113ee565b50612a566009611505565b90565b90612a62611351565b50601c52670a5a2e7a000000006008526000526030600c205490565b612a9790612a92612a8d61157e565b612b21565b612ac5565b565b612aa290611663565b90565b90612aba612ab5612ac1926117a5565b612a99565b8254611b3c565b9055565b612ad0906005612aa5565b565b612adb90612a7e565b565b612ae5611351565b50612aef816133df565b8015612b12575b908115612b02575b5090565b612b0c915061346c565b38612afe565b50612b1c81613406565b612af6565b612b3390612b2d612f83565b90613591565b565b60207f2073616c65507269636500000000000000000000000000000000000000000000917f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201520152565b612b90602a604092610420565b612b9981612b35565b0190565b612bb39060208101906000818303910152612b83565b90565b15612bbd57565b612bc5610273565b62461bcd60e51b815280612bdb60048201612b9d565b0390fd5b60007f455243323938313a20696e76616c696420726563656976657200000000000000910152565b612c146019602092610420565b612c1d81612bdf565b0190565b612c379060208101906000818303910152612c07565b90565b15612c4157565b612c49610273565b62461bcd60e51b815280612c5f60048201612c21565b0390fd5b612c6d60406109a7565b90565b90565b90612c88612c83612c8f92612304565b612c70565b82546115f4565b9055565b60a01b90565b90612cb36bffffffffffffffffffffffff60a01b91612c93565b9181191691161790565b612cd1612ccc612cd69261036f565b6115bd565b61036f565b90565b90565b90612cf1612cec612cf892612cbd565b612cd9565b8254612c99565b9055565b90612d2760206000612d2d94612d1f828201612d19848801611915565b90612c73565b01920161194a565b90612cdc565b565b90612d3991612cfc565b565b90612dac612db392612d6783612d60612d5a612d55612e7c565b61036f565b9161036f565b1115612bb6565b612d8d81612d86612d80612d7b600061193e565b61033f565b9161033f565b1415612c3a565b91612da3612d99612c63565b936000850161186f565b602083016118b5565b6000612d2f565b565b9060001960601c9081169181168360005280673ec412a9852d173d60c11b17601c5260206000208401840191825416918215612e4a57818385931490151715612e24575b600101557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a4565b9050816000526030600c205415612e3c578290612df9565b634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b600090565b90565b612e74612e6f612e7992612e5d565b6115bd565b61036f565b90565b612e84612e58565b50612e90612710612e60565b90565b612e9b611351565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b151590565b60601b60601c81600052673ec412a9852d173d60c11b601c5260206000208201820180548060601b612f4b578217905580600052601c600c2060018154019063ffffffff8216830215612f36575560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a4565b67ea553b3401336cea831560021b526004601cfd5b63c991cbb16000526004601cfd5b90612f7b612f76612f8093612f6f81859061362a565b60036122b5565b6122cd565b613711565b50565b612f8b611527565b503390565b90612fb2612fad612fb793612fa681859061374c565b60036122b5565b6122cd565b6137e6565b50565b612fc2611351565b503b90565b9160209160a460405195869363150b7a0296878652338787015260601b60601c6040860152606085015260808085015280518091818060a0880152613044575b505001906000601c8401915af115613034575b60e01b90510361302657565b63d1a57ed66000526004601cfd5b3d1561301a57503d6000823e3d90fd5b818760c08801920160045afa508038613007565b6130618261221b565b5060601b60601c8160005280673ec412a9852d173d60c11b17601c52602060002082018201908154918260601b60601c918215613114578260005281600101549081811484821417901517156130fc575b60009383916130f1575b189055601c600c20600181540390557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4565b8483600101556130bc565b6030600c20546130b257634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b9261314c906131456131539461313e6131919a989560076121eb565b60086121eb565b60066121eb565b60096121eb565b61316561315e610f38565b8290612f59565b613177613170611fcd565b8290612f59565b613189613182611396565b8290612f59565b919091613821565b565b60007f455243323938313a20496e76616c696420706172616d65746572730000000000910152565b6131c8601b602092610420565b6131d181613193565b0190565b6131eb90602081019060008183039101526131bb565b90565b156131f557565b6131fd610273565b62461bcd60e51b815280613213600482016131d5565b0390fd5b6132939061328c61329894936132478561324061323a613235612e7c565b61036f565b9161036f565b1115612bb6565b61326d8161326661326061325b600061193e565b61033f565b9161033f565b14156131ee565b93613283613279612c63565b956000870161186f565b602085016118b5565b600161182b565b612d2f565b565b6132a2611527565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b60601c90565b90565b6132d76132dc91611663565b61180f565b90565b6132f36132ee6132f8926104d7565b6115bd565b610334565b90565b6133276133226133319361331d600061332c95613316611527565b50016132c8565b61389c565b6132cb565b6132df565b6122f8565b90565b9061333d6113ee565b506080604051019160208301604052600083528290600a6000198092955b019481810660300186530493841561337a5790600a919080929161335b565b93505082602091039203918252565b90565b90565b6133bc916133b16133ab6133b7936133a56113ee565b50613389565b91613389565b906138c3565b61338c565b90565b6133d760006133dc926133d061165e565b50016132c8565b613945565b90565b6133e7611351565b5060e01c635b5e139f8114906301ffc9a76380ac58cd82149114171790565b61340e611351565b506134188161395d565b801561345d575b8015613442575b908115613432575b5090565b61343c915061399d565b3861342e565b50600061345761345183610288565b91610288565b14613426565b506134678161399d565b61341f565b613474611351565b5061347e8161399d565b90811561348a575b5090565b61349491506139dd565b38613486565b90565b6134b16134ac6134b69261349a565b6115bd565b6104d7565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6134f2601780926134b9565b6134fb816134be565b0190565b61352461351b926020926135128161041c565b948580936134b9565b93849101610429565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b61355c601180926134b9565b61356581613528565b0190565b61358361358e939261357d613588936134e6565b906134ff565b613550565b906134ff565b90565b906135a66135a0838390612328565b156102d7565b6135ae575050565b613626916136046135dd6135cd6135c761360995613a6b565b936132cb565b6135d7602061349d565b90613c84565b916135f56135e9610273565b93849260208401613569565b6020820181038252038261097e565b61338c565b613611610273565b91829162461bcd60e51b835260048301610489565b0390fd5b61363e613638828490612328565b156102d7565b613647575b5050565b61366a6001613665600061365d600286906117b1565b018590612310565b611ec5565b90613673612f83565b906136b06136aa6136a47f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956117a5565b92612304565b92612304565b926136b9610273565b806136c3816103d2565b0390a43880613643565b6136d6906115c0565b90565b6136ed6136e86136f292610334565b6115bd565b6104d7565b90565b61370961370461370e926104d7565b610f16565b6106dc565b90565b9061374461373e61373961373460006137499661372c611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613e7a565b90565b613757818390612328565b613760575b5050565b613783600061377e6000613776600286906117b1565b018590612310565b611ec5565b9061378c612f83565b906137c96137c36137bd7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956117a5565b92612304565b92612304565b926137d2610273565b806137dc816103d2565b0390a4388061375c565b9061381961381361380e613809600061381e96613801611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613f5f565b90565b9061383761383c939261383261157e565b612f59565b614069565b565b5490565b600052602060002090565b6138568161383e565b82101561387157613868600191613842565b91020190600090565b6129a0565b61388690600861388b93026120ee565b6117c9565b90565b906138999154613876565b90565b6138bb9160006138b5926138ae6117a0565b500161384d565b9061388e565b90565b606090565b9190916138ce6138be565b5060405192601f1980835193818060208701165b80830151818a0152019081156138fd578190915082906138e2565b505050815191838601828060208601165b80840151818401520191821561392b57828091935050839061390e565b505050506020910180828501019060008252845201604052565b600061395a9161395361165e565b500161383e565b90565b613965611351565b508061398061397a63152a902d60e11b610288565b91610288565b1490811561398d575b5090565b6139979150614089565b38613989565b6139a5611351565b50806139c06139ba635a05180f60e01b610288565b91610288565b149081156139cd575b5090565b6139d791506140af565b386139c9565b6139e5611351565b5080613a006139fa634e821d3360e11b610288565b91610288565b14908115613a0d575b5090565b613a179150613406565b38613a09565b90565b60ff1690565b613a3a613a35613a3f92613a1d565b6115bd565b613a20565b90565b613a4c6014613a26565b90565b613a63613a5e613a6892613a20565b6115bd565b6104d7565b90565b613a88613a83613a9e92613a7d6113ee565b506136cd565b6136d9565b613a98613a93613a42565b613a4f565b90613c84565b90565b90565b613ab8613ab3613abd92613aa1565b6115bd565b6104d7565b90565b90613ad2613acd836127e0565b6109a7565b918252565b369037565b90613b01613ae983613ac0565b92602080613af786936127e0565b9201910390613ad7565b565b600360fc1b90565b5190565b90613b1982613b0b565b811015613b2b57600160209102010190565b6129a0565b600f60fb1b90565b90565b613b4f613b4a613b5492613b38565b6115bd565b6104d7565b90565b613b60906104d7565b60008114613b6f576001900390565b611973565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613b93613b74565b90565b90565b613bad613ba8613bb292613b96565b6115bd565b6104d7565b90565b60f81b90565b90565b613bd2613bcd613bd792613bbb565b6115bd565b613a20565b90565b613bf990613bf3613bed613bfe94613a20565b916104d7565b906120ee565b6104d7565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b613c3560208092610420565b613c3e81613c01565b0190565b613c589060208101906000818303910152613c29565b90565b15613c6257565b613c6a610273565b62461bcd60e51b815280613c8060048201613c42565b0390fd5b9190613c8e6113ee565b50613d28613d18613cc4613cbf613caf6002613caa8791613aa4565b611989565b613cb96002613aa4565b90611b76565b613adc565b92613ccd613b03565b613ce685613ce060009360001a93611af4565b90613b0f565b53613cef613b30565b613d0885613d0260019360001a93613b3b565b90613b0f565b53613d136002613aa4565b611989565b613d226001613b3b565b90611b76565b925b83613d3e613d386001613b3b565b916104d7565b1115613da557613d4c613b8b565b81613d57600f613b99565b16916010831015613da057613d73613d9492613d9a941a613bb5565b613d838591889060001a92613b0f565b53613d8e6004613bbe565b90613bda565b93613b57565b92613d2a565b6129a0565b613dcd929350613dc890613dc2613dbc6000611af4565b916104d7565b14613c5b565b61338c565b90565b90565b600052602060002090565b5490565b613deb81613dde565b821015613e0657613dfd600191613dd3565b91020190600090565b6129a0565b9190613e21613e1c613e29936117a5565b612a99565b90835461201b565b9055565b9081549168010000000000000000831015613e5d5782613e55916001613e5b95018155613de2565b90613e0b565b565b610968565b90613e6c906117a5565b600052602052604060002090565b613e82611351565b50613e97613e918284906140ef565b156102d7565b600014613eda57613ed0613ed592613ebb613eb460008501613dd0565b8290613e2d565b6001613ec96000850161383e565b9301613e62565b611b56565b600190565b5050600090565b613ef0613ef6919392936104d7565b926104d7565b8203918211613f0157565b611973565b634e487b7160e01b600052603160045260246000fd5b613f2e91613f286117a0565b91613e0b565b565b613f3981613dde565b8015613f5a576001900390613f57613f518383613de2565b90613f1c565b55565b613f06565b613f67611351565b50613f7e613f79600183018490613e62565b611680565b9081613f93613f8d6000611af4565b916104d7565b14156000146140615761401392600161400e9284613fbc600096613fb685613b3b565b90613ee1565b613fd9613fca88850161383e565b613fd386613b3b565b90613ee1565b80613fec613fe6846104d7565b916104d7565b03614018575b505050614008614003868301613dd0565b613f30565b01613e62565b612063565b600190565b6140599261404b614037614031614054948c890161384d565b9061388e565b9361404585918c890161384d565b90613e0b565b91858501613e62565b611b56565b388080613ff2565b505050600090565b90614080614079614087936115e8565b600461161e565b6005612aa5565b565b614091611351565b506140ab6140a56301ffc9a760e01b610288565b91610288565b1490565b6140b7611351565b50806140d26140cc637965db0b60e01b610288565b91610288565b149081156140df575b5090565b6140e9915061395d565b386140db565b61410d91600161410892614101611351565b5001613e62565b611680565b61412061411a6000611af4565b916104d7565b14159056fea264697066735822122029a6d041f14c226b015d09bed1f38d00ed477c06417cdefc834389f375cb9b8964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x134C JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x2E73E0FD EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x4C62CD9B EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xDC8E92EA EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1B9 JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0x1319 JUMP JUMPDEST PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x124D JUMP JUMPDEST PUSH2 0x114C JUMP JUMPDEST PUSH2 0x1117 JUMP JUMPDEST PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0xF50 JUMP JUMPDEST PUSH2 0xEDD JUMP JUMPDEST PUSH2 0xE13 JUMP JUMPDEST PUSH2 0xDE0 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xD13 JUMP JUMPDEST PUSH2 0xCA8 JUMP JUMPDEST PUSH2 0xC73 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST PUSH2 0xBAD JUMP JUMPDEST PUSH2 0xB35 JUMP JUMPDEST PUSH2 0x92B JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST PUSH2 0x899 JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x642 JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST PUSH2 0x540 JUMP JUMPDEST PUSH2 0x4A2 JUMP JUMPDEST PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x29D DUP2 PUSH2 0x288 JUMP JUMPDEST SUB PUSH2 0x2A4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2B6 DUP3 PUSH2 0x294 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2D2 JUMPI PUSH2 0x2CF SWAP2 PUSH1 0x0 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x2E5 SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2FD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2DC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x32F JUMPI PUSH2 0x32B PUSH2 0x31A PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B8 JUMP JUMPDEST PUSH2 0x1356 JUMP JUMPDEST PUSH2 0x322 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x348 SWAP1 PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x354 DUP2 PUSH2 0x33F JUMP JUMPDEST SUB PUSH2 0x35B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x36D DUP3 PUSH2 0x34B JUMP JUMPDEST JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x389 DUP2 PUSH2 0x36F JUMP JUMPDEST SUB PUSH2 0x390 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3A2 DUP3 PUSH2 0x380 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3CD JUMPI DUP1 PUSH2 0x3C1 PUSH2 0x3CA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x407 JUMPI PUSH2 0x3F1 PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3A4 JUMP JUMPDEST SWAP1 PUSH2 0x13E2 JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x403 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x417 JUMPI JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x43D JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x42C JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x477 PUSH2 0x480 PUSH1 0x20 SWAP4 PUSH2 0x485 SWAP4 PUSH2 0x46E DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x420 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x49F SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x458 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x4D2 JUMPI PUSH2 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x4CE PUSH2 0x4BD PUSH2 0x1511 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4E3 DUP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4EA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x4FC DUP3 PUSH2 0x4DA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x518 JUMPI PUSH2 0x515 SWAP2 PUSH1 0x0 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x526 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x53E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x570 JUMPI PUSH2 0x56C PUSH2 0x55B PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x152C JUMP JUMPDEST PUSH2 0x563 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x59E JUMPI DUP1 PUSH2 0x592 PUSH2 0x59B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x5B7 PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x156F JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x5C9 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x5E7 JUMPI PUSH2 0x5E4 SWAP2 PUSH1 0x0 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x61A JUMPI PUSH2 0x604 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST PUSH2 0x60C PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x616 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x628 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x640 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x672 JUMPI PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x66E PUSH2 0x65D PUSH2 0x168D JUMP JUMPDEST PUSH2 0x665 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x6AD JUMPI PUSH2 0x6AA PUSH2 0x693 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x6A1 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x6C6 PUSH2 0x6C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x6D8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6E8 DUP2 PUSH2 0x6DC JUMP JUMPDEST SUB PUSH2 0x6EF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x701 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71D JUMPI PUSH2 0x71A SWAP2 PUSH1 0x0 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x72B SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x743 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x775 JUMPI PUSH2 0x771 PUSH2 0x760 PUSH2 0x75B CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x768 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x7A3 JUMPI DUP1 PUSH2 0x797 PUSH2 0x7A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x7CA SWAP3 SWAP5 SWAP4 PUSH2 0x7C3 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x7FE JUMPI PUSH2 0x7E5 PUSH2 0x7DF CALLDATASIZE PUSH1 0x4 PUSH2 0x77A JUMP JUMPDEST SWAP1 PUSH2 0x19F6 JUMP JUMPDEST SWAP1 PUSH2 0x7FA PUSH2 0x7F1 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x7A8 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x832 JUMPI PUSH2 0x81C PUSH2 0x816 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1C60 JUMP JUMPDEST PUSH2 0x824 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x82E DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x860 JUMPI DUP1 PUSH2 0x854 PUSH2 0x85D SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x894 JUMPI PUSH2 0x87E PUSH2 0x878 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x886 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x890 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8C8 JUMPI PUSH2 0x8B2 PUSH2 0x8AC CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B JUMP JUMPDEST PUSH2 0x8BA PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8C4 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8FC JUMPI PUSH2 0x8E6 PUSH2 0x8E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1DF7 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8F8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x915 PUSH2 0x90F CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x91D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x927 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x959 JUMPI PUSH2 0x943 PUSH2 0x93E CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x1E6D JUMP JUMPDEST PUSH2 0x94B PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x955 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x988 SWAP1 PUSH2 0x44E JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9A2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x9BA PUSH2 0x9B3 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9DA JUMPI PUSH2 0x9D6 PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0xA00 PUSH2 0x9FB DUP3 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0xA1C JUMPI PUSH2 0xA1A SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xA3F JUMPI DUP2 PUSH1 0x20 PUSH2 0xA3C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x9EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x120 DUP3 DUP5 SUB SLT PUSH2 0xB30 JUMPI PUSH2 0xA5E DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB2B JUMPI DUP2 PUSH2 0xA7F SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB26 JUMPI DUP3 PUSH2 0xAA0 SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB21 JUMPI DUP4 PUSH2 0xAC1 SWAP2 DUP5 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB1C JUMPI DUP2 PUSH2 0xAE2 SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH2 0xAF0 DUP3 PUSH1 0xA0 DUP4 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0xB19 PUSH2 0xB01 DUP5 PUSH1 0xC0 DUP6 ADD PUSH2 0x395 JUMP JUMPDEST SWAP4 PUSH2 0xB0F DUP2 PUSH1 0xE0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x100 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xB6D JUMPI PUSH2 0xB57 PUSH2 0xB48 CALLDATASIZE PUSH1 0x4 PUSH2 0xA44 JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x1EE5 JUMP JUMPDEST PUSH2 0xB5F PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xB69 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xBA8 JUMPI PUSH2 0xBA5 PUSH2 0xB8E DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH2 0xB9C DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xBDC JUMPI PUSH2 0xBC6 PUSH2 0xBC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB72 JUMP JUMPDEST SWAP2 PUSH2 0x1FC0 JUMP JUMPDEST PUSH2 0xBCE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xBD8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xC3A JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC35 JUMPI DUP4 PUSH2 0xC0E SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC30 JUMPI PUSH2 0xC2D SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xC6E JUMPI PUSH2 0xC58 PUSH2 0xC52 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE1 JUMP JUMPDEST SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH2 0xC60 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xC6A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCA3 JUMPI PUSH2 0xC9F PUSH2 0xC8E PUSH2 0xC89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x221B JUMP JUMPDEST PUSH2 0xC96 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCD8 JUMPI PUSH2 0xCD4 PUSH2 0xCC3 PUSH2 0xCBE CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x2244 JUMP JUMPDEST PUSH2 0xCCB PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD0E JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD09 JUMPI PUSH2 0xD06 SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xD41 JUMPI PUSH2 0xD2B PUSH2 0xD26 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x22AA JUMP JUMPDEST PUSH2 0xD33 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xD3D DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD6F JUMPI DUP1 PUSH2 0xD63 PUSH2 0xD6C SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xDA5 JUMPI PUSH2 0xDA1 PUSH2 0xD90 PUSH2 0xD8A CALLDATASIZE PUSH1 0x4 PUSH2 0xD46 JUMP JUMPDEST SWAP1 PUSH2 0x22D0 JUMP JUMPDEST PUSH2 0xD98 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xDDB JUMPI PUSH2 0xDD7 PUSH2 0xDC6 PUSH2 0xDC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0xDCE PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE0E JUMPI PUSH2 0xDF8 PUSH2 0xDF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x237B JUMP JUMPDEST PUSH2 0xE00 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xE0A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE43 JUMPI PUSH2 0xE23 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xE3F PUSH2 0xE2E PUSH2 0x2386 JUMP JUMPDEST PUSH2 0xE36 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xE5B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xE6E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xED8 JUMPI PUSH2 0xE8B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xED3 JUMPI DUP4 PUSH2 0xEAC SWAP2 DUP4 ADD PUSH2 0xE4D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xECE JUMPI PUSH2 0xECB SWAP3 ADD PUSH2 0xE60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xF0E JUMPI PUSH2 0xF0A PUSH2 0xEF9 PUSH2 0xEF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST SWAP2 PUSH2 0x26EF JUMP JUMPDEST PUSH2 0xF01 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xF30 PUSH2 0xF2B PUSH2 0xF35 SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF42 PUSH1 0x0 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF4D PUSH2 0xF38 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF80 JUMPI PUSH2 0xF60 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xF7C PUSH2 0xF6B PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF73 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0xF8E DUP2 PUSH2 0x2D7 JUMP JUMPDEST SUB PUSH2 0xF95 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xFA7 DUP3 PUSH2 0xF85 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xFD2 JUMPI DUP1 PUSH2 0xFC6 PUSH2 0xFCF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0xF9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1006 JUMPI PUSH2 0xFF0 PUSH2 0xFEA CALLDATASIZE PUSH1 0x4 PUSH2 0xFA9 JUMP JUMPDEST SWAP1 PUSH2 0x2790 JUMP JUMPDEST PUSH2 0xFF8 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1002 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x104F JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x104A JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0x1045 JUMPI JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x100B JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10B0 JUMPI PUSH2 0x106C DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x107A DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x1088 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10AB JUMPI PUSH2 0x10A7 SWAP3 ADD PUSH2 0x1015 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x10C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1054 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x10D4 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x10DE DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1112 JUMPI PUSH2 0x110E PUSH2 0x10FD PUSH2 0x10F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x28A7 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1147 JUMPI PUSH2 0x1143 PUSH2 0x1132 PUSH2 0x112D CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2940 JUMP JUMPDEST PUSH2 0x113A PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x117B JUMPI PUSH2 0x1165 PUSH2 0x115F CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x116D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1177 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1198 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x11B2 PUSH2 0x11AD DUP3 PUSH2 0x1180 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x11EF JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x11D6 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x11E4 DUP5 DUP7 PUSH2 0x4EF JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x11C9 JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1212 JUMPI DUP2 PUSH1 0x20 PUSH2 0x120F SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x119D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1248 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1243 JUMPI PUSH2 0x1240 SWAP3 ADD PUSH2 0x11F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x127B JUMPI PUSH2 0x1265 PUSH2 0x1260 CALLDATASIZE PUSH1 0x4 PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x126D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1277 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x12B0 JUMPI PUSH2 0x1290 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x12AC PUSH2 0x129B PUSH2 0x2A43 JUMP JUMPDEST PUSH2 0x12A3 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x12DE JUMPI DUP1 PUSH2 0x12D2 PUSH2 0x12DB SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1314 JUMPI PUSH2 0x1310 PUSH2 0x12FF PUSH2 0x12F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B5 JUMP JUMPDEST SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH2 0x1307 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1347 JUMPI PUSH2 0x1331 PUSH2 0x132C CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x1339 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1343 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x135E PUSH2 0x1351 JUMP JUMPDEST POP PUSH4 0x76A4E239 PUSH1 0xE0 SHL PUSH2 0x1379 PUSH2 0x1373 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x1386 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1390 SWAP2 POP PUSH2 0x2ADD JUMP JUMPDEST CODESIZE PUSH2 0x1382 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13D4 SWAP2 PUSH2 0x13CF PUSH2 0x13CA PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x13D6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13E0 SWAP2 PUSH2 0x2D3B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13EC SWAP2 PUSH2 0x13BA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x1429 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1424 JUMPI JUMP JUMPDEST PUSH2 0x13F3 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1462 PUSH2 0x145B DUP4 PUSH2 0x1409 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1433 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x14BB JUMPI POP PUSH1 0x1 EQ PUSH2 0x147E JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x148B SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x143C JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x14A3 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x1490 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST SWAP1 PUSH2 0x14E0 SWAP2 PUSH2 0x1447 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1503 PUSH2 0x14FC SWAP3 PUSH2 0x14F3 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x14D6 JUMP JUMPDEST SUB DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x150E SWAP1 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1519 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x1524 PUSH1 0x7 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1534 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD DUP1 SLOAD PUSH1 0x60 SHL ISZERO PUSH2 0x1561 JUMPI PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x157C SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x2DB5 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x15BB SWAP1 PUSH2 0x15B6 PUSH2 0x15B1 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x163E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15D4 PUSH2 0x15CF PUSH2 0x15D9 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15E5 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15F1 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1605 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1618 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1633 PUSH2 0x162E PUSH2 0x163A SWAP3 PUSH2 0x160F JUMP JUMPDEST PUSH2 0x161B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x164A PUSH2 0x1651 SWAP2 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x165C SWAP1 PUSH2 0x15A2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1678 PUSH2 0x167D SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168A SWAP1 SLOAD PUSH2 0x166C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1695 PUSH2 0x165E JUMP JUMPDEST POP PUSH2 0x16A0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP2 DUP3 AND SWAP1 DUP3 AND SWAP2 DUP4 PUSH1 0x0 MSTORE CALLER PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP1 DUP2 SLOAD DUP1 SWAP2 AND DUP4 DUP2 EQ DUP2 MUL ISZERO PUSH2 0x178B JUMPI POP DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD DUP1 CALLER EQ DUP5 CALLER EQ OR ISZERO PUSH2 0x1773 JUMPI JUMPDEST PUSH2 0x1767 JUMPI JUMPDEST DUP4 DUP4 XOR XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP5 MUL ISZERO PUSH2 0x1752 JUMPI SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP5 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD SSTORE PUSH2 0x16FB JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x16F6 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH8 0xCEEA21B6A1148100 SWAP1 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x17AE SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17BB SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17D8 PUSH2 0x17DD SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17EA SWAP1 SLOAD PUSH2 0x17CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1806 PUSH2 0x180C SWAP3 PUSH2 0x17FE PUSH2 0x17A0 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x17E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1823 PUSH2 0x181E PUSH2 0x1828 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1835 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x185A PUSH2 0x185F SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1843 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186C SWAP1 SLOAD PUSH2 0x184E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1879 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x18A0 PUSH2 0x18A5 SWAP2 PUSH2 0x187D JUMP JUMPDEST PUSH2 0x1883 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18B2 SWAP1 SLOAD PUSH2 0x1894 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18BF SWAP1 PUSH2 0x36F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x18CD PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1907 PUSH2 0x18FE PUSH1 0x0 PUSH2 0x18E1 PUSH2 0x18C3 JUMP JUMPDEST SWAP5 PUSH2 0x18F8 PUSH2 0x18F0 DUP4 DUP4 ADD PUSH2 0x1862 JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x186F JUMP JUMPDEST ADD PUSH2 0x18A8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x18B5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1912 SWAP1 PUSH2 0x18D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x191F SWAP1 MLOAD PUSH2 0x33F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1936 PUSH2 0x1931 PUSH2 0x193B SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1947 SWAP1 PUSH2 0x1922 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1954 SWAP1 MLOAD PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x196B PUSH2 0x1966 PUSH2 0x1970 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1998 PUSH2 0x199E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x19AA DUP4 DUP3 MUL PUSH2 0x4D7 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x19B9 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19E0 PUSH2 0x19E6 SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x19F1 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x1A19 PUSH2 0x1A1E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1A08 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x1A11 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x1909 JUMP JUMPDEST SWAP2 PUSH2 0x1A2B PUSH1 0x0 DUP5 ADD PUSH2 0x1915 JUMP JUMPDEST PUSH2 0x1A46 PUSH2 0x1A40 PUSH2 0x1A3B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1A93 JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1A8F SWAP4 PUSH2 0x1A6C PUSH2 0x1A67 PUSH1 0x20 DUP10 ADD PUSH2 0x194A JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x1A82 PUSH2 0x1A7D PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x19D4 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A8F PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1AA9 DUP4 PUSH2 0x1909 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x1A4C JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1AF2 SWAP2 PUSH2 0x1AED PUSH2 0x1AE8 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1B9B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B08 PUSH2 0x1B03 PUSH2 0x1B0D SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1B1C SWAP2 ADD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B28 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1B37 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP1 PUSH2 0x1B49 PUSH1 0x0 NOT SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1B6B PUSH2 0x1B66 PUSH2 0x1B72 SWAP3 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1B85 PUSH2 0x1B8B SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1B96 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA7 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x1BBC PUSH2 0x1BB6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x1C3D JUMPI JUMPDEST PUSH2 0x1BD5 PUSH2 0x1BD0 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1BFB JUMPI PUSH2 0x1BF6 PUSH2 0x1BEF PUSH2 0x1BEA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1C36 SWAP1 PUSH2 0x1C15 DUP6 PUSH2 0x1C0F PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST SWAP1 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1C31 PUSH2 0x1C2A PUSH2 0x1C25 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1C5E SWAP2 POP PUSH2 0x1C57 SWAP1 PUSH2 0x1C52 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B76 JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C6A SWAP2 PUSH2 0x1AD8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C87 SWAP2 PUSH2 0x1C82 PUSH2 0x1C7D DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C93 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C9F SWAP2 PUSH2 0x1C6C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1CFC PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x1D05 DUP2 PUSH2 0x1CA1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D1F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1CEF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D29 JUMPI JUMP JUMPDEST PUSH2 0x1D31 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1D47 PUSH1 0x4 DUP3 ADD PUSH2 0x1D09 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1D78 SWAP2 PUSH2 0x1D73 DUP3 PUSH2 0x1D6D PUSH2 0x1D67 PUSH2 0x1D62 PUSH2 0x2F83 JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D94 SWAP2 PUSH2 0x1D8F PUSH2 0x1D8A PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1D96 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DA0 SWAP2 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1DBC PUSH2 0x1DB5 PUSH2 0x1DB0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMPDEST PUSH2 0x1DCF PUSH2 0x1DCA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1DF5 JUMPI PUSH2 0x1DF0 PUSH2 0x1DE9 PUSH2 0x1DE4 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1DBD JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E01 SWAP2 PUSH2 0x1D7A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E15 PUSH2 0x1E10 DUP4 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x1E24 PUSH1 0x0 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E2F PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1E3F DUP4 DUP4 DUP4 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x1E48 DUP3 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x1E52 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1E65 SWAP3 SWAP2 PUSH2 0x1E5F PUSH2 0x1E27 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x1E77 SWAP1 CALLER PUSH2 0x3058 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1E90 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1E79 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E9D SWAP1 SLOAD PUSH2 0x1E7F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EAC PUSH1 0xFF SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1EBF SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EDA PUSH2 0x1ED5 PUSH2 0x1EE1 SWAP3 PUSH2 0x1EB6 JUMP JUMPDEST PUSH2 0x1EC2 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1EA0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP7 SWAP8 SWAP1 SWAP2 SWAP3 SWAP6 SWAP5 SWAP4 SWAP8 CALLER PUSH2 0x1F21 PUSH2 0x1F1B PUSH32 0x0 PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x1F84 JUMPI JUMPDEST PUSH2 0x1F67 JUMPI PUSH2 0x1F59 SWAP9 PUSH2 0x1F4C SWAP8 PUSH2 0x1F47 SWAP6 DUP11 SWAP6 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x2D3B JUMP JUMPDEST PUSH2 0x1F54 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x1F65 PUSH1 0x1 PUSH1 0xA PUSH2 0x1EC5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x1F80 PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1F8F PUSH1 0xA PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0x1F2A JUMP JUMPDEST SWAP1 PUSH2 0x1FAF SWAP3 SWAP2 PUSH2 0x1FAA PUSH2 0x1FA5 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1FB1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x1FBE SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x3217 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1FCB SWAP3 SWAP2 PUSH2 0x1F94 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x200B SWAP2 PUSH2 0x2006 PUSH2 0x2001 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x21F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x2037 SWAP2 MUL SWAP2 PUSH2 0x2031 PUSH1 0x0 NOT DUP5 PUSH2 0x2017 JUMP JUMPDEST SWAP3 PUSH2 0x2017 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2057 PUSH2 0x2052 PUSH2 0x205F SWAP4 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2075 SWAP2 PUSH2 0x206F PUSH2 0x165E JUMP JUMPDEST SWAP2 PUSH2 0x2041 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x2083 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2091 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x2063 JUMP JUMPDEST ADD PUSH2 0x2078 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x20A7 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x20B3 PUSH2 0x20D8 SWAP4 PUSH2 0x143C JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x20BF DUP5 PUSH2 0x200D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x20E0 JUMPI JUMPDEST PUSH2 0x20D1 SWAP1 PUSH2 0x200D JUMP JUMPDEST ADD SWAP1 PUSH2 0x2077 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x20A2 JUMP JUMPDEST SWAP2 POP PUSH2 0x20D1 DUP2 SWAP3 SWAP1 POP PUSH2 0x20C8 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2103 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x20EE JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x2112 SWAP2 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2124 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x21E6 JUMPI PUSH2 0x2148 DUP3 PUSH2 0x2142 DUP6 SLOAD PUSH2 0x1409 JUMP JUMPDEST DUP6 PUSH2 0x2097 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x217D JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x216C SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x2171 JUMPI JUMPDEST POP POP PUSH2 0x2108 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x2165 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x218C DUP6 PUSH2 0x143C JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x21CE JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x21B4 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x216F JUMP JUMPDEST PUSH2 0x21C4 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x21A8 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x2190 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x21F5 SWAP2 PUSH2 0x211A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2206 PUSH2 0x220D SWAP3 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2219 SWAP2 PUSH2 0x1FF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x222D SWAP1 PUSH2 0x2227 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x329A JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2236 JUMPI JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x224C PUSH2 0x165E JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x2274 JUMPI PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x0 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1C PUSH1 0xC KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH4 0x8F4EB604 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x229B SWAP1 PUSH2 0x2296 PUSH2 0x2291 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x229D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22A8 SWAP1 PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22B3 SWAP1 PUSH2 0x2282 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x22BF SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x22F0 PUSH2 0x22EB PUSH2 0x22F5 SWAP4 PUSH2 0x22E3 PUSH2 0x1527 JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x32FB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2301 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x230D SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x231A SWAP1 PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2350 SWAP2 PUSH1 0x0 PUSH2 0x2345 PUSH2 0x234B SWAP4 PUSH2 0x233D PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1E93 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x236C SWAP1 PUSH2 0x2367 PUSH2 0x2362 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x236E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2379 SWAP1 PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2384 SWAP1 PUSH2 0x2353 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x238E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2399 PUSH1 0x8 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23B3 PUSH2 0x23B8 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x239C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C5 SWAP1 SLOAD PUSH2 0x23A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23D1 SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x23E7 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2403 JUMPI PUSH2 0x2400 SWAP2 PUSH1 0x0 ADD PUSH2 0x23DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST POP PUSH2 0x2417 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2423 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2436 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2442 SWAP1 PUSH2 0x288 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2455 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2461 SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24B5 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x24B0 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x24AB JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x24DD DUP2 PUSH2 0x24D6 DUP2 PUSH2 0x24E2 SWAP6 PUSH2 0x24BA JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24FC JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2542 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x253D JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2538 JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2561 DUP2 PUSH2 0x255A DUP2 PUSH2 0x2566 SWAP6 PUSH2 0x1433 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2580 DUP2 PUSH2 0x256A JUMP JUMPDEST SUB PUSH2 0x2587 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2599 DUP3 PUSH2 0x2577 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x25AA SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x258C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25B6 SWAP1 PUSH2 0x256A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x25F8 SWAP1 PUSH1 0x20 PUSH2 0x25F0 PUSH2 0x25E6 PUSH1 0x40 DUP5 ADD PUSH2 0x25D8 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x2501 JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x2547 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x259B JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x25AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26A5 SWAP2 PUSH2 0x2697 PUSH2 0x268C PUSH1 0xC0 DUP4 ADD PUSH2 0x2623 PUSH2 0x2619 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x263D PUSH2 0x2633 PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x2427 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2439 JUMP JUMPDEST PUSH2 0x2657 PUSH2 0x264D PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x2671 PUSH2 0x2667 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x267E PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x2474 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x24C3 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x24E6 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x25BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x26D4 PUSH1 0x40 SWAP2 PUSH2 0x26DC SWAP5 PUSH2 0x26C7 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x25FB JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0x273 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x26FC PUSH2 0x17A0 JUMP JUMPDEST POP PUSH2 0x270F PUSH2 0x270A PUSH1 0x4 PUSH2 0x23BB JUMP JUMPDEST PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0x273B PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2746 PUSH2 0x2727 PUSH1 0x5 PUSH2 0x17E0 JUMP JUMPDEST PUSH2 0x272F PUSH2 0x273 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x23D4 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x26A8 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x278B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x275D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x277E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2784 JUMPI JUMPDEST PUSH2 0x2776 DUP2 DUP4 PUSH2 0x97E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x23E9 JUMP JUMPDEST CODESIZE PUSH2 0x2759 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x276C JUMP JUMPDEST PUSH2 0x26DE JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x30 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x27FE JUMPI PUSH2 0x27FA PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2818 PUSH2 0x2813 DUP3 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x2834 JUMPI PUSH2 0x2832 SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST PUSH2 0x2844 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x2803 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x2857 DUP2 DUP6 DUP5 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x2860 DUP5 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x286C JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2882 SWAP5 PUSH2 0x287C SWAP2 SWAP5 SWAP3 SWAP4 PUSH2 0x2839 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2865 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2899 SWAP1 SLOAD PUSH2 0x1409 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28A4 PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28AF PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x28C2 PUSH2 0x28BC DUP3 PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x2923 JUMPI PUSH2 0x28D8 PUSH2 0x28D3 PUSH1 0x6 PUSH2 0x288C JUMP JUMPDEST PUSH2 0x288F JUMP JUMPDEST PUSH2 0x28EB PUSH2 0x28E5 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x2915 JUMPI PUSH2 0x2911 SWAP1 PUSH2 0x290C PUSH2 0x2906 PUSH1 0x6 SWAP3 PUSH2 0x3334 JUMP JUMPDEST SWAP2 PUSH2 0x1505 JUMP JUMPDEST PUSH2 0x338F JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x291E PUSH2 0x289C JUMP JUMPDEST PUSH2 0x2912 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x677510DB PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x293C PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x295F PUSH2 0x295A PUSH2 0x2964 SWAP3 PUSH2 0x2952 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x33BF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2982 SWAP2 PUSH2 0x297D PUSH2 0x2978 DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2984 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x298E SWAP2 PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x299A SWAP2 PUSH2 0x2967 JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x29C0 DUP3 PUSH2 0x299C JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x29D1 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x29E0 SWAP1 MLOAD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29ED DUP3 PUSH2 0x299C JUMP JUMPDEST SWAP1 PUSH2 0x29F8 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2A0C PUSH2 0x2A06 DUP6 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x2A3D JUMPI PUSH2 0x2A38 SWAP1 PUSH2 0x2A33 CALLER PUSH2 0x2A2D PUSH2 0x2A28 DUP9 DUP6 SWAP1 PUSH2 0x29B6 JUMP JUMPDEST PUSH2 0x29D6 JUMP JUMPDEST SWAP1 PUSH2 0x3058 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST PUSH2 0x29F9 JUMP JUMPDEST POP SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A4B PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2A56 PUSH1 0x9 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A62 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A97 SWAP1 PUSH2 0x2A92 PUSH2 0x2A8D PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2AC5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AA2 SWAP1 PUSH2 0x1663 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2ABA PUSH2 0x2AB5 PUSH2 0x2AC1 SWAP3 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2AD0 SWAP1 PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2ADB SWAP1 PUSH2 0x2A7E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AE5 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x2AEF DUP2 PUSH2 0x33DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B12 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B02 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B0C SWAP2 POP PUSH2 0x346C JUMP JUMPDEST CODESIZE PUSH2 0x2AFE JUMP JUMPDEST POP PUSH2 0x2B1C DUP2 PUSH2 0x3406 JUMP JUMPDEST PUSH2 0x2AF6 JUMP JUMPDEST PUSH2 0x2B33 SWAP1 PUSH2 0x2B2D PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x3591 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2B90 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2B99 DUP2 PUSH2 0x2B35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BB3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2B83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2BBD JUMPI JUMP JUMPDEST PUSH2 0x2BC5 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2BDB PUSH1 0x4 DUP3 ADD PUSH2 0x2B9D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2C14 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2C1D DUP2 PUSH2 0x2BDF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C37 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2C07 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2C41 JUMPI JUMP JUMPDEST PUSH2 0x2C49 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2C5F PUSH1 0x4 DUP3 ADD PUSH2 0x2C21 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C6D PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C88 PUSH2 0x2C83 PUSH2 0x2C8F SWAP3 PUSH2 0x2304 JUMP JUMPDEST PUSH2 0x2C70 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CB3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2CD1 PUSH2 0x2CCC PUSH2 0x2CD6 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CF1 PUSH2 0x2CEC PUSH2 0x2CF8 SWAP3 PUSH2 0x2CBD JUMP JUMPDEST PUSH2 0x2CD9 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C99 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2D27 PUSH1 0x20 PUSH1 0x0 PUSH2 0x2D2D SWAP5 PUSH2 0x2D1F DUP3 DUP3 ADD PUSH2 0x2D19 DUP5 DUP9 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP1 PUSH2 0x2C73 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x194A JUMP JUMPDEST SWAP1 PUSH2 0x2CDC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2D39 SWAP2 PUSH2 0x2CFC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2DAC PUSH2 0x2DB3 SWAP3 PUSH2 0x2D67 DUP4 PUSH2 0x2D60 PUSH2 0x2D5A PUSH2 0x2D55 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x2D8D DUP2 PUSH2 0x2D86 PUSH2 0x2D80 PUSH2 0x2D7B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x2C3A JUMP JUMPDEST SWAP2 PUSH2 0x2DA3 PUSH2 0x2D99 PUSH2 0x2C63 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP1 DUP2 AND SWAP2 DUP2 AND DUP4 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP2 DUP3 SLOAD AND SWAP2 DUP3 ISZERO PUSH2 0x2E4A JUMPI DUP2 DUP4 DUP6 SWAP4 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E24 JUMPI JUMPDEST PUSH1 0x1 ADD SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x2E3C JUMPI DUP3 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E74 PUSH2 0x2E6F PUSH2 0x2E79 SWAP3 PUSH2 0x2E5D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E84 PUSH2 0x2E58 JUMP JUMPDEST POP PUSH2 0x2E90 PUSH2 0x2710 PUSH2 0x2E60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E9B PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x60 SHL PUSH2 0x2F4B JUMPI DUP3 OR SWAP1 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP4 MUL ISZERO PUSH2 0x2F36 JUMPI SSTORE PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP4 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xC991CBB1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x2F7B PUSH2 0x2F76 PUSH2 0x2F80 SWAP4 PUSH2 0x2F6F DUP2 DUP6 SWAP1 PUSH2 0x362A JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x3711 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2F8B PUSH2 0x1527 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FB2 PUSH2 0x2FAD PUSH2 0x2FB7 SWAP4 PUSH2 0x2FA6 DUP2 DUP6 SWAP1 PUSH2 0x374C JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x37E6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2FC2 PUSH2 0x1351 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP2 PUSH1 0xA4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH4 0x150B7A02 SWAP7 DUP8 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x3044 JUMPI JUMPDEST POP POP ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x3034 JUMPI JUMPDEST PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x3026 JUMPI JUMP JUMPDEST PUSH4 0xD1A57ED6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x301A JUMPI POP RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP8 PUSH1 0xC0 DUP9 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x3007 JUMP JUMPDEST PUSH2 0x3061 DUP3 PUSH2 0x221B JUMP JUMPDEST POP PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD SWAP1 DUP2 SLOAD SWAP2 DUP3 PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP2 DUP3 ISZERO PUSH2 0x3114 JUMPI DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD SWAP1 DUP2 DUP2 EQ DUP5 DUP3 EQ OR SWAP1 ISZERO OR ISZERO PUSH2 0x30FC JUMPI JUMPDEST PUSH1 0x0 SWAP4 DUP4 SWAP2 PUSH2 0x30F1 JUMPI JUMPDEST XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP3 CODESIZE LOG4 JUMP JUMPDEST DUP5 DUP4 PUSH1 0x1 ADD SSTORE PUSH2 0x30BC JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x30B2 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP3 PUSH2 0x314C SWAP1 PUSH2 0x3145 PUSH2 0x3153 SWAP5 PUSH2 0x313E PUSH2 0x3191 SWAP11 SWAP9 SWAP6 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST PUSH2 0x3165 PUSH2 0x315E PUSH2 0xF38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3177 PUSH2 0x3170 PUSH2 0x1FCD JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3189 PUSH2 0x3182 PUSH2 0x1396 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3821 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x31C8 PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x31D1 DUP2 PUSH2 0x3193 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x31EB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x31BB JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x31F5 JUMPI JUMP JUMPDEST PUSH2 0x31FD PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3213 PUSH1 0x4 DUP3 ADD PUSH2 0x31D5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3293 SWAP1 PUSH2 0x328C PUSH2 0x3298 SWAP5 SWAP4 PUSH2 0x3247 DUP6 PUSH2 0x3240 PUSH2 0x323A PUSH2 0x3235 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x326D DUP2 PUSH2 0x3266 PUSH2 0x3260 PUSH2 0x325B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x31EE JUMP JUMPDEST SWAP4 PUSH2 0x3283 PUSH2 0x3279 PUSH2 0x2C63 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x32A2 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32D7 PUSH2 0x32DC SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x180F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32F3 PUSH2 0x32EE PUSH2 0x32F8 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3327 PUSH2 0x3322 PUSH2 0x3331 SWAP4 PUSH2 0x331D PUSH1 0x0 PUSH2 0x332C SWAP6 PUSH2 0x3316 PUSH2 0x1527 JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x389C JUMP JUMPDEST PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x32DF JUMP JUMPDEST PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x333D PUSH2 0x13EE JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x337A JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x335B JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33BC SWAP2 PUSH2 0x33B1 PUSH2 0x33AB PUSH2 0x33B7 SWAP4 PUSH2 0x33A5 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3389 JUMP JUMPDEST SWAP2 PUSH2 0x3389 JUMP JUMPDEST SWAP1 PUSH2 0x38C3 JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D7 PUSH1 0x0 PUSH2 0x33DC SWAP3 PUSH2 0x33D0 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3945 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33E7 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0x5B5E139F DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x340E PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3418 DUP2 PUSH2 0x395D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x345D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x3442 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3432 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x343C SWAP2 POP PUSH2 0x399D JUMP JUMPDEST CODESIZE PUSH2 0x342E JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3457 PUSH2 0x3451 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ PUSH2 0x3426 JUMP JUMPDEST POP PUSH2 0x3467 DUP2 PUSH2 0x399D JUMP JUMPDEST PUSH2 0x341F JUMP JUMPDEST PUSH2 0x3474 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x347E DUP2 PUSH2 0x399D JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x348A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3494 SWAP2 POP PUSH2 0x39DD JUMP JUMPDEST CODESIZE PUSH2 0x3486 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34B1 PUSH2 0x34AC PUSH2 0x34B6 SWAP3 PUSH2 0x349A JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34F2 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x34FB DUP2 PUSH2 0x34BE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3524 PUSH2 0x351B SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x3512 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x34B9 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x355C PUSH1 0x11 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x3565 DUP2 PUSH2 0x3528 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3583 PUSH2 0x358E SWAP4 SWAP3 PUSH2 0x357D PUSH2 0x3588 SWAP4 PUSH2 0x34E6 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST PUSH2 0x3550 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x35A6 PUSH2 0x35A0 DUP4 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x35AE JUMPI POP POP JUMP JUMPDEST PUSH2 0x3626 SWAP2 PUSH2 0x3604 PUSH2 0x35DD PUSH2 0x35CD PUSH2 0x35C7 PUSH2 0x3609 SWAP6 PUSH2 0x3A6B JUMP JUMPDEST SWAP4 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x35D7 PUSH1 0x20 PUSH2 0x349D JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP2 PUSH2 0x35F5 PUSH2 0x35E9 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x3569 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST PUSH2 0x3611 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x363E PUSH2 0x3638 DUP3 DUP5 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x3647 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x366A PUSH1 0x1 PUSH2 0x3665 PUSH1 0x0 PUSH2 0x365D PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x3673 PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x36B0 PUSH2 0x36AA PUSH2 0x36A4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x36B9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x36C3 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3643 JUMP JUMPDEST PUSH2 0x36D6 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36ED PUSH2 0x36E8 PUSH2 0x36F2 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3709 PUSH2 0x3704 PUSH2 0x370E SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3744 PUSH2 0x373E PUSH2 0x3739 PUSH2 0x3734 PUSH1 0x0 PUSH2 0x3749 SWAP7 PUSH2 0x372C PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3E7A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3757 DUP2 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0x3760 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3783 PUSH1 0x0 PUSH2 0x377E PUSH1 0x0 PUSH2 0x3776 PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x378C PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x37C9 PUSH2 0x37C3 PUSH2 0x37BD PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x37D2 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x37DC DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x375C JUMP JUMPDEST SWAP1 PUSH2 0x3819 PUSH2 0x3813 PUSH2 0x380E PUSH2 0x3809 PUSH1 0x0 PUSH2 0x381E SWAP7 PUSH2 0x3801 PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3F5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3837 PUSH2 0x383C SWAP4 SWAP3 PUSH2 0x3832 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x4069 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3856 DUP2 PUSH2 0x383E JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3871 JUMPI PUSH2 0x3868 PUSH1 0x1 SWAP2 PUSH2 0x3842 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3886 SWAP1 PUSH1 0x8 PUSH2 0x388B SWAP4 MUL PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3899 SWAP2 SLOAD PUSH2 0x3876 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38BB SWAP2 PUSH1 0x0 PUSH2 0x38B5 SWAP3 PUSH2 0x38AE PUSH2 0x17A0 JUMP JUMPDEST POP ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x38CE PUSH2 0x38BE JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1F NOT DUP1 DUP4 MLOAD SWAP4 DUP2 DUP1 PUSH1 0x20 DUP8 ADD AND JUMPDEST DUP1 DUP4 ADD MLOAD DUP2 DUP11 ADD MSTORE ADD SWAP1 DUP2 ISZERO PUSH2 0x38FD JUMPI DUP2 SWAP1 SWAP2 POP DUP3 SWAP1 PUSH2 0x38E2 JUMP JUMPDEST POP POP POP DUP2 MLOAD SWAP2 DUP4 DUP7 ADD DUP3 DUP1 PUSH1 0x20 DUP7 ADD AND JUMPDEST DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE ADD SWAP2 DUP3 ISZERO PUSH2 0x392B JUMPI DUP3 DUP1 SWAP2 SWAP4 POP POP DUP4 SWAP1 PUSH2 0x390E JUMP JUMPDEST POP POP POP POP PUSH1 0x20 SWAP2 ADD DUP1 DUP3 DUP6 ADD ADD SWAP1 PUSH1 0x0 DUP3 MSTORE DUP5 MSTORE ADD PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395A SWAP2 PUSH2 0x3953 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x383E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3965 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3980 PUSH2 0x397A PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x398D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3997 SWAP2 POP PUSH2 0x4089 JUMP JUMPDEST CODESIZE PUSH2 0x3989 JUMP JUMPDEST PUSH2 0x39A5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x39C0 PUSH2 0x39BA PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x39CD JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x39D7 SWAP2 POP PUSH2 0x40AF JUMP JUMPDEST CODESIZE PUSH2 0x39C9 JUMP JUMPDEST PUSH2 0x39E5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3A00 PUSH2 0x39FA PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3A0D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A17 SWAP2 POP PUSH2 0x3406 JUMP JUMPDEST CODESIZE PUSH2 0x3A09 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3A3A PUSH2 0x3A35 PUSH2 0x3A3F SWAP3 PUSH2 0x3A1D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A4C PUSH1 0x14 PUSH2 0x3A26 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A63 PUSH2 0x3A5E PUSH2 0x3A68 SWAP3 PUSH2 0x3A20 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A88 PUSH2 0x3A83 PUSH2 0x3A9E SWAP3 PUSH2 0x3A7D PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x3A98 PUSH2 0x3A93 PUSH2 0x3A42 JUMP JUMPDEST PUSH2 0x3A4F JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AB8 PUSH2 0x3AB3 PUSH2 0x3ABD SWAP3 PUSH2 0x3AA1 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3AD2 PUSH2 0x3ACD DUP4 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3B01 PUSH2 0x3AE9 DUP4 PUSH2 0x3AC0 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x3AF7 DUP7 SWAP4 PUSH2 0x27E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x3AD7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3B19 DUP3 PUSH2 0x3B0B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3B2B JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B4F PUSH2 0x3B4A PUSH2 0x3B54 SWAP3 PUSH2 0x3B38 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B60 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3B6F JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3B93 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BAD PUSH2 0x3BA8 PUSH2 0x3BB2 SWAP3 PUSH2 0x3B96 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 PUSH2 0x3BCD PUSH2 0x3BD7 SWAP3 PUSH2 0x3BBB JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BF9 SWAP1 PUSH2 0x3BF3 PUSH2 0x3BED PUSH2 0x3BFE SWAP5 PUSH2 0x3A20 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3C35 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x3C3E DUP2 PUSH2 0x3C01 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3C58 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3C62 JUMPI JUMP JUMPDEST PUSH2 0x3C6A PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3C80 PUSH1 0x4 DUP3 ADD PUSH2 0x3C42 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3C8E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3D28 PUSH2 0x3D18 PUSH2 0x3CC4 PUSH2 0x3CBF PUSH2 0x3CAF PUSH1 0x2 PUSH2 0x3CAA DUP8 SWAP2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3CB9 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST PUSH2 0x3ADC JUMP JUMPDEST SWAP3 PUSH2 0x3CCD PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x3CE6 DUP6 PUSH2 0x3CE0 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x1AF4 JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3CEF PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x3D08 DUP6 PUSH2 0x3D02 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D13 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3D22 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3D3E PUSH2 0x3D38 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST GT ISZERO PUSH2 0x3DA5 JUMPI PUSH2 0x3D4C PUSH2 0x3B8B JUMP JUMPDEST DUP2 PUSH2 0x3D57 PUSH1 0xF PUSH2 0x3B99 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3DA0 JUMPI PUSH2 0x3D73 PUSH2 0x3D94 SWAP3 PUSH2 0x3D9A SWAP5 BYTE PUSH2 0x3BB5 JUMP JUMPDEST PUSH2 0x3D83 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D8E PUSH1 0x4 PUSH2 0x3BBE JUMP JUMPDEST SWAP1 PUSH2 0x3BDA JUMP JUMPDEST SWAP4 PUSH2 0x3B57 JUMP JUMPDEST SWAP3 PUSH2 0x3D2A JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3DCD SWAP3 SWAP4 POP PUSH2 0x3DC8 SWAP1 PUSH2 0x3DC2 PUSH2 0x3DBC PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3DEB DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3E06 JUMPI PUSH2 0x3DFD PUSH1 0x1 SWAP2 PUSH2 0x3DD3 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3E21 PUSH2 0x3E1C PUSH2 0x3E29 SWAP4 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x3E5D JUMPI DUP3 PUSH2 0x3E55 SWAP2 PUSH1 0x1 PUSH2 0x3E5B SWAP6 ADD DUP2 SSTORE PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x3E6C SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3E82 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3E97 PUSH2 0x3E91 DUP3 DUP5 SWAP1 PUSH2 0x40EF JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3EDA JUMPI PUSH2 0x3ED0 PUSH2 0x3ED5 SWAP3 PUSH2 0x3EBB PUSH2 0x3EB4 PUSH1 0x0 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3E2D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3EC9 PUSH1 0x0 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST SWAP4 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3EF0 PUSH2 0x3EF6 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3F01 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3F2E SWAP2 PUSH2 0x3F28 PUSH2 0x17A0 JUMP JUMPDEST SWAP2 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3F39 DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F5A JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3F57 PUSH2 0x3F51 DUP4 DUP4 PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3F1C JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST PUSH2 0x3F67 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3F7E PUSH2 0x3F79 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3F93 PUSH2 0x3F8D PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x4061 JUMPI PUSH2 0x4013 SWAP3 PUSH1 0x1 PUSH2 0x400E SWAP3 DUP5 PUSH2 0x3FBC PUSH1 0x0 SWAP7 PUSH2 0x3FB6 DUP6 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST PUSH2 0x3FD9 PUSH2 0x3FCA DUP9 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST PUSH2 0x3FD3 DUP7 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST DUP1 PUSH2 0x3FEC PUSH2 0x3FE6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4018 JUMPI JUMPDEST POP POP POP PUSH2 0x4008 PUSH2 0x4003 DUP7 DUP4 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH2 0x3F30 JUMP JUMPDEST ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x2063 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4059 SWAP3 PUSH2 0x404B PUSH2 0x4037 PUSH2 0x4031 PUSH2 0x4054 SWAP5 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP4 PUSH2 0x4045 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3FF2 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4080 PUSH2 0x4079 PUSH2 0x4087 SWAP4 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4091 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x40AB PUSH2 0x40A5 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x40B7 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x40D2 PUSH2 0x40CC PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x40DF JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x40E9 SWAP2 POP PUSH2 0x395D JUMP JUMPDEST CODESIZE PUSH2 0x40DB JUMP JUMPDEST PUSH2 0x410D SWAP2 PUSH1 0x1 PUSH2 0x4108 SWAP3 PUSH2 0x4101 PUSH2 0x1351 JUMP JUMPDEST POP ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x4120 PUSH2 0x411A PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xA6 0xD0 COINBASE CALL 0x4C 0x22 PUSH12 0x15D09BED1F38D00ED477C06 COINBASE PUSH29 0xDEFC834389F375CB9B8964736F6C634300081B00330000000000000000 ",
              "sourceMap": "280:3068:38:-:0;;;;;;;;;-1:-1:-1;280:3068:38;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2153:49:0:-;2198:4;;;:::i;:::-;2153:49;:::o;:::-;;;:::i;:::-;;:::o;280:3068:38:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;3122:223::-;3221:4;;:::i;:::-;3244:39;;;;:54;;3287:11;3244:54;:::i;:::-;;;:::i;:::-;;:94;;;;;3122:223;3237:101;;:::o;3244:94::-;3302:36;3326:11;;3302:36;:::i;:::-;3244:94;;;496:78:42;543:31;496:78;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;961:18:42;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;877:163:42:-;;1020:12;877:163;1020:12;:::i;:::-;877:163::o;:::-;;;;;:::i;:::-;:::o;280:3068:38:-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;4771:103:37:-;4825:13;;:::i;:::-;4857:10;4850:17;4857:10;4850:17;:::i;:::-;;:::o;280:3068:38:-;;;:::o;8099:532:29:-;8161:14;;:::i;:::-;8230:395;;;;;;;;;;;;;;;;;;;;;;;;;8099:532;:::o;8230:395::-;;;;;;;8925:119;9034:2;8925:119;9013:10;9025:7;9034:2;;;:::i;:::-;8925:119::o;514:91:44:-;568:37;514:91;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1115:25:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;280:3068:38:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1030:179:44:-;1165:37;1152:50;1030:179;1165:37;:::i;:::-;1152:50;;:::i;:::-;1030:179::o;:::-;;;;:::i;:::-;:::o;280:3068:38:-;;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;2905:91::-;2951:7;;:::i;:::-;2977:12;;;;:::i;:::-;2970:19;:::o;10748:2886:29:-;;10928:2657;;;;;;;;;;;;;;;8230:395;;;10928:2657;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10748:2886;10928:2657;;10748:2886;10928:2657;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10748:2886::o;10928:2657::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;280:3068:38;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4504:129:0:-;4604:22;:12;:22;4504:129;4578:7;;:::i;:::-;4604:6;;:12;:::i;:::-;:22;;:::i;:::-;4597:29;:::o;280:3068:38:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;1671:428:12:-;1823:26;1794:55;1671:428;;;;1766:7;;:::i;:::-;1775;;;:::i;:::-;1823:17;;:26;:::i;:::-;1794:55;:::i;:::-;1864:7;:16;;:7;:16;;:::i;:::-;:30;;1884:10;1892:1;1884:10;:::i;:::-;1864:30;:::i;:::-;;;:::i;:::-;;1860:90;;1671:428;2060:16;1984:57;1985:35;2060:16;1985:9;:35;1997:23;;:7;:23;;:::i;:::-;1985:35;:::i;:::-;;;:::i;:::-;1984:57;2024:17;;:::i;:::-;1984:57;:::i;:::-;;;:::i;:::-;2060:7;:16;;:::i;:::-;2052:40;;:::o;1860:90::-;1920:19;;2060:16;;1984:57;1985:35;1910:29;1920:19;1910:29;:::i;:::-;1860:90;;;;;;;;341:64:38;381:24;341:64;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;2545:11:38;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;280:3068:38:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;2475:354::-;;;2573:13;2585:1;2573:13;:::i;:::-;2568:223;2600:3;2588:1;:10;;2592:6;2588:10;:::i;:::-;;;:::i;:::-;;;;;2619:87;2626:26;2634:17;;;:::i;:::-;2626:26;:::i;:::-;;;;2672:19;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2619:87;;2626:26;;;2600:3;2626:26;2729:17;2725:2;2729:17;;;:::i;:::-;;;:::i;:::-;2761:19;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2600:3;:::i;:::-;2573:13;;;;2588:10;;;2800:22;2588:10;;2800:22;2588:10;2800:22;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2475:354::o;:::-;;;;;:::i;:::-;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;5012:18;5025:4;5012:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;4929:145::-;;5059:7;4929:145;5059:7;:::i;:::-;4929:145::o;:::-;;;;;:::i;:::-;:::o;280:3068:38:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;6038:214:0;;6237:7;6038:214;6125:83;6133:7;:23;;6144:12;;:::i;:::-;6133:23;:::i;:::-;;;:::i;:::-;;6125:83;:::i;:::-;6237:7;:::i;:::-;6038:214::o;2589:76::-;;2657:1;2589:76;2642:4;2267:11:38;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2206:221:38:-;;2300:7;2206:221;2300:7;:::i;:::-;2318:14;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2342:79;2349:26;2357:17;;;:::i;:::-;2349:26;:::i;:::-;;;;2391:19;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;2342:79;;2349:26;2206:221::o;:::-;;;;;:::i;:::-;:::o;280:3068::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;13705:198:29:-;;13825:2;13815:4;13821:2;13825;;;:::i;:::-;13842:12;13851:2;13842:12;:::i;:::-;13838:58;;13705:198;;;;:::o;13838:58::-;13856:40;13879:4;13885:2;13856:40;;:::i;:::-;;;:::i;:::-;13838:58;;;;;3103:103:37;3191:7;3103:103;3179:10;3191:7;:::i;:::-;3103:103::o;280:3068:38:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1348:780::-;;;;;;;;;;1717:10;:26;;1731:12;1717:26;:::i;:::-;;;:::i;:::-;;;:42;;;;1348:780;1713:103;;2085:5;1867;2030:19;1867:5;1953:21;1867:5;;1874:9;1885:11;1898:12;1912:16;1930:21;1953;;;:::i;:::-;2030:19;:::i;:::-;2072:11;;:::i;:::-;2085:5;:::i;:::-;2102:19;2117:4;2102:19;;:::i;:::-;1348:780::o;1713:103::-;1782:23;;;;;;;;;;;;:::i;:::-;;;;1717:42;1747:12;;;;:::i;:::-;1717:42;;2589:76:0;;2657:1;2589:76;;2642:4;1593:18:42;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;1464:215:42:-;;1659:12;1464:215;1649:8;1659:12;;;:::i;:::-;1464:215::o;:::-;;;;;;:::i;:::-;:::o;561:80:37:-;609:32;561:80;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;2218:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;280:3068:38:-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;2100:214:37:-;;2249:22;2281:26;2100:214;2249:22;;:::i;:::-;2281:26;;:::i;:::-;2100:214::o;:::-;;;;;:::i;:::-;:::o;6957:332:29:-;7050:12;6957:332;7015:14;;:::i;:::-;7059:2;7050:12;:::i;:::-;7115:168;;;;;6957:332::o;7115:168::-;;;;;;;7433:533;7496:14;;:::i;:::-;7565:395;;;;;8230;;;7565;;;;;;;;;;7433:533;:::o;7565:395::-;;;;;;;2589:76:0;2657:1;2589:76;2642:4;2522:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2434:154:37:-;2553:28;2434:154;2553:28;;:::i;:::-;2434:154::o;:::-;;;;:::i;:::-;:::o;280:3068:38:-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;1431:151:1:-;;1547:21;:18;:28;1431:151;1521:7;;:::i;:::-;1547:12;;:18;:::i;:::-;:21;:::i;:::-;:28;:::i;:::-;1540:35;:::o;280:3068:38:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;3021:145:0:-;3130:29;3021:145;3130:20;:12;:29;3021:145;3107:4;;:::i;:::-;3130:6;;:12;:::i;:::-;:20;:29;:::i;:::-;;:::i;:::-;3123:36;:::o;2589:76::-;2657:1;2589:76;2642:4;2885:19:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;2797:157:37:-;2916:31;2797:157;2916:31;;:::i;:::-;2797:157::o;:::-;;;;:::i;:::-;:::o;4907:107::-;4963:13;;:::i;:::-;4995:12;4988:19;4995:12;4988:19;:::i;:::-;;:::o;280:3068:38:-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;;;;;;;1171:295:27;;;1398:63;1171:295;1319:7;;:::i;:::-;1398:10;:30;:10;;;:::i;:::-;:30;:::i;:::-;:63;:30;1429:6;1437:11;1450:10;1398:63;1450:10;;;:::i;:::-;1398:63;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;1171:295;1391:70;;:::o;1398:63::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;9667:726:29:-;;9797:590;;;;;;;;;;;;;;;;;;;;;;;;;;;9667:726::o;280:3068:38:-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::o;14406:249:29:-;;;;;14575:2;14565:4;14571:2;14575;;;:::i;:::-;14592:12;14601:2;14592:12;:::i;:::-;14588:60;;14406:249;;;;;;:::o;14588:60::-;14606:42;14629:4;14606:42;14629:4;14635:2;14639;14643:4;14606:42;:::i;:::-;;;:::i;:::-;14588:60;;;;;;;280:3068:38;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;4420:318:37:-;4515:13;;:::i;:::-;4553:7;4544:17;4545:16;4553:7;4545:16;:::i;:::-;4544:17;;:::i;:::-;4540:74;;4631:27;:20;4637:13;4631:20;:::i;:::-;:27;:::i;:::-;:32;;4662:1;4631:32;:::i;:::-;;;:::i;:::-;;;:100;;;;4666:60;4683:13;4666:60;4698:27;4683:13;4717:7;4698:27;:::i;:::-;4666:60;;:::i;:::-;;:::i;:::-;4631:100;4624:107;:::o;4631:100::-;;;;:::i;:::-;;;4540:74;4584:19;;;;;;;;;;;;:::i;:::-;;;;1750:140:1;1856:25;:18;:27;1750:140;1830:7;;:::i;:::-;1856:12;;:18;:::i;:::-;:25;:::i;:::-;:27;:::i;:::-;1849:34;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;5438:18;5451:4;5438:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;5354:147::-;;5486:7;5354:147;5486:7;:::i;:::-;5354:147::o;:::-;;;;;:::i;:::-;:::o;280:3068:38:-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;:::o;3338:223:37:-;;3439:15;:8;:15;:::i;:::-;3481:1;3469:13;3481:1;3469:13;:::i;:::-;3495:3;3484:1;:9;;3488:5;3484:9;:::i;:::-;;;:::i;:::-;;;;;3495:3;3520:10;3532:11;3520:10;3532:11;;:8;3541:1;3532:11;;:::i;:::-;;:::i;:::-;;;:::i;:::-;3495:3;:::i;:::-;3469:13;;3484:9;;;;;3338:223::o;3775:95::-;3819:13;;:::i;:::-;3851:12;3844:19;3851:12;3844:19;:::i;:::-;;:::o;9135:392:29:-;;9255:11;;:::i;:::-;9325:196;;;;;;;;;;;;9135:392;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1486:25:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;280:3068:38:-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1401:151:44:-;1523:22;1401:151;1523:22;;:::i;:::-;1401:151::o;:::-;;;;:::i;:::-;:::o;3996:352:37:-;4153:4;;:::i;:::-;4201:11;4176:37;4201:11;4176:37;:::i;:::-;:89;;;;3996:352;4176:165;;;;;3996:352;4169:172;;:::o;4176:165::-;4281:60;4329:11;;4281:60;:::i;:::-;4176:165;;;:89;4253:11;4217:48;4253:11;4217:48;:::i;:::-;4176:89;;3460:103:0;3543:12;3460:103;3543:12;;:::i;:::-;;;:::i;:::-;3460:103::o;280:3068:38:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;:::o;2730:327:12:-;;3015:35;2993:57;2730:327;2824:88;2832:12;:33;;2848:17;;:::i;:::-;2832:33;:::i;:::-;;;:::i;:::-;;;2824:88;:::i;:::-;2922:60;2930:8;:22;;2942:10;2950:1;2942:10;:::i;:::-;2930:22;:::i;:::-;;;:::i;:::-;;;2922:60;:::i;:::-;3037:12;3015:35;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;2993:57;;:::i;:::-;2730:327::o;29039:1485:29:-;;29168:1350;;;;;;;;;;;;;8230:395;;;;29168:1350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29039:1485;29168:1350;;;;;;;29039:1485::o;29168:1350::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;280:3068:38;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2374:95:12:-;2432:6;;:::i;:::-;2457:5;2450:12;2457:5;2450:12;:::i;:::-;;:::o;15576:326:29:-;15636:11;;:::i;:::-;15702:194;;;;8230:395;;;15702:194;;;;;;;;;;;;;15576:326;:::o;19609:1653::-;19768:1439;;;;;;;8230:395;;;19768:1439;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19609:1653::o;19768:1439::-;;;;;;;;;;;;;;;;;1978:166:1;;2106:22;:18;:31;1978:166;2088:7;2082:4;2088:7;;;:::i;:::-;2106:12;:18;:::i;:::-;:22;:::i;:::-;:31;:::i;:::-;;1978:166::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;2233:171:1:-;;2363:25;:18;:34;2233:171;2345:7;2339:4;2345:7;;;:::i;:::-;2363:12;:18;:::i;:::-;:25;:::i;:::-;:34;:::i;:::-;;2233:171::o;38260:212:29:-;38311:11;;:::i;:::-;38377:89;;38260:212;:::o;38631:1370::-;;38793:1202;38631:1370;38793:1202;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38631:1370;38793:1202;;;;;;;;;;;;;;38631:1370;38793:1202;;;;;;;38631:1370::o;38793:1202::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24332:2127;24414:11;24422:2;24414:11;:::i;:::-;24531:1870;;;;;;;;8230:395;;;;24531:1870;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24332:2127;24531:1870;;;;;;24332:2127;24531:1870;;;;;;;;;;;;;;;;24332:2127::o;24531:1870::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1263:665:37;;1622:28;1263:665;1586:26;1660:31;1263:665;1554:22;1899:21;1263:665;;;1554:22;;:::i;:::-;1586:26;;:::i;:::-;1622:28;;:::i;:::-;1660:31;;:::i;:::-;1733:5;1713:18;;:::i;:::-;1733:5;;;:::i;:::-;1781;1760:19;;:::i;:::-;1781:5;;;:::i;:::-;1828;1808:18;;:::i;:::-;1828:5;;;:::i;:::-;1876:21;1899;;;:::i;:::-;1263:665::o;280:3068:38:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;3491:351:12;3771:26;3491:351;3800:35;3771:64;3491:351;;3600:88;3608:12;:33;;3624:17;;:::i;:::-;3608:33;:::i;:::-;;;:::i;:::-;;;3600:88;:::i;:::-;3698:62;3706:8;:22;;3718:10;3726:1;3718:10;:::i;:::-;3706:22;:::i;:::-;;;:::i;:::-;;;3698:62;:::i;:::-;3822:12;3800:35;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;3771:17;:26;:::i;:::-;:64;:::i;:::-;3491:351::o;16037:323:29:-;16098:14;;:::i;:::-;16167:187;;;;8230:395;;;16167:187;;;;;;;;;;;;;16037:323;:::o;280:3068:38:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;9563:156:22:-;9679:31;9687:22;9663:49;9563:156;9687:22;9691:10;9671:40;9563:156;9637:7;;:::i;:::-;9691:3;:10;9687:22;:::i;:::-;;:::i;:::-;9679:31;:::i;:::-;9671:40;:::i;:::-;9663:49;:::i;:::-;9656:56;:::o;6111:1560:31:-;;6167:20;;:::i;:::-;6242:1423;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6111:1560::o;280:3068:38:-;;:::o;:::-;;:::o;29300:155:31:-;29405:43;29300:155;29438:8;29428;29412:35;29300:155;29373:13;;:::i;:::-;29434:1;29428:8;:::i;:::-;29444:1;29438:8;:::i;:::-;29412:35;;:::i;:::-;29405:43;:::i;:::-;29398:50;:::o;9106:115:22:-;9195:19;9203:10;9195:19;9106:115;9169:7;;:::i;:::-;9203:3;:10;9195:19;:::i;:::-;;:::i;:::-;9188:26;:::o;14864:380:29:-;14940:11;;:::i;:::-;15006:232;;;;;;;;;;;;;;;14864:380;:::o;1833:366:42:-;1966:4;;:::i;:::-;2015:11;1989:38;2015:11;1989:38;:::i;:::-;:96;;;;1833:366;1989:163;;;;1833:366;1989:203;;;;;1833:366;1982:210;;:::o;1989:203::-;2156:36;2180:11;;2156:36;:::i;:::-;1989:203;;;:163;2101:36;;:51;;2141:11;2101:51;:::i;:::-;;;:::i;:::-;;1989:163;;:96;2073:11;2031:54;2073:11;2031:54;:::i;:::-;1989:96;;1586:295:44;1731:4;;:::i;:::-;1808:11;1766:54;1808:11;1766:54;:::i;:::-;:108;;;;;1586:295;1747:127;;:::o;1766:108::-;1824:50;1862:11;;1824:50;:::i;:::-;1766:108;;;280:3068:38;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;:::o;3844:479:0:-;;3931:23;3932:22;3940:4;3946:7;3932:22;;:::i;:::-;3931:23;;:::i;:::-;3927:390;;3844:479;;:::o;3927:390::-;3970:336;4135:7;4022:252;4214:38;4234:13;4115:28;3994:298;4135:7;4115:28;:::i;:::-;4242:4;4234:13;:::i;:::-;4214:38;4249:2;4214:38;:::i;:::-;;;:::i;:::-;4022:252;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;3994:298;:::i;:::-;3970:336;;:::i;:::-;280:3068:38;;;;;;3970:336:0;;;;;;:::i;:::-;;;;7587:233;7669:23;7670:22;7678:4;7684:7;7670:22;;:::i;:::-;7669:23;;:::i;:::-;7665:149;;7587:233;;;:::o;7665:149::-;7708:36;7740:4;7708:29;:20;:12;:6;7715:4;7708:12;;:::i;:::-;:20;7729:7;7708:29;;:::i;:::-;:36;:::i;:::-;7781:7;7790:12;;:::i;:::-;7763:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;7665:149;;;;280:3068:38;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;8305:150:22:-;;8398:50;8415:32;8423:23;8431:14;8403:10;8398:50;8305:150;8375:4;;:::i;:::-;8403:3;:10;8439:5;8431:14;:::i;:::-;8423:23;:::i;:::-;8415:32;:::i;:::-;8398:50;;:::i;:::-;;:::i;:::-;8391:57;:::o;7991:234:0:-;8074:22;8082:4;8088:7;8074:22;;:::i;:::-;8070:149;;7991:234;;;:::o;8070:149::-;8112:37;8144:5;8112:29;:20;:12;:6;8119:4;8112:12;;:::i;:::-;:20;8133:7;8112:29;;:::i;:::-;:37;:::i;:::-;8186:7;8195:12;;:::i;:::-;8168:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;8070:149;;;;8623:156:22;;8719:53;8739:32;8747:23;8755:14;8727:10;8719:53;8623:156;8696:4;;:::i;:::-;8727:3;:10;8763:5;8755:14;:::i;:::-;8747:23;:::i;:::-;8739:32;:::i;:::-;8719:53;;:::i;:::-;;:::i;:::-;8712:60;:::o;612:218:44:-;;755:5;813:9;612:218;;728:25;;:::i;:::-;755:5;:::i;:::-;813:9;:::i;:::-;612:218::o;280:3068:38:-;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;4912:118:22:-;5005:18;4912:118;5005:11;:18;4912:118;4979:7;;:::i;:::-;5005:3;:11;:18;:::i;:::-;;;:::i;:::-;4998:25;:::o;280:3068:38:-;;;:::o;24894:1182:30:-;;;;24965:19;;:::i;:::-;25039:1031;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24894:1182::o;4463:107:22:-;4545:11;:18;4463:107;4519:7;;:::i;:::-;4545:3;:11;:18;:::i;:::-;4538:25;:::o;1408:213:12:-;1510:4;;:::i;:::-;1533:11;;:41;;1548:26;;;1533:41;:::i;:::-;;;:::i;:::-;;:81;;;;;1408:213;1526:88;;:::o;1533:81::-;1578:36;1602:11;;1578:36;:::i;:::-;1533:81;;;634:212:1;719:4;;:::i;:::-;742:11;;:57;;757:42;;;742:57;:::i;:::-;;;:::i;:::-;;:97;;;;;634:212;735:104;;:::o;742:97::-;803:36;827:11;;803:36;:::i;:::-;742:97;;;1899:210:27;1992:4;;:::i;:::-;2011:11;;:53;;2026:38;;;2011:53;:::i;:::-;;;:::i;:::-;;:93;;;;;1899:210;2004:100;;:::o;2011:93::-;2068:36;2092:11;;2068:36;:::i;:::-;2011:93;;;280:3068:38;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;302:43:17:-;343:2;;;:::i;:::-;302:43;:::o;343:2::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2407:149::-;2509:22;2517:13;2497:52;2407:149;2465:13;;:::i;:::-;2525:4;2517:13;:::i;:::-;2509:22;:::i;:::-;2497:52;2533:15;;:::i;:::-;2497:52;:::i;:::-;;;:::i;:::-;2490:59;:::o;280:3068:38:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;242:54:17:-;278:18;;:::i;:::-;242:54;:::o;278:18::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;280:3068:38;;;278:18:17;;;;;;;;:::i;:::-;;;;1818:437;;;1893:13;;:::i;:::-;1950:1;2042:14;:10;1940:25;1950:14;:10;:1;:10;1954:6;1950:10;;:::i;:::-;;:::i;:::-;:14;1963:1;1950:14;:::i;:::-;;;:::i;:::-;1940:25;:::i;:::-;1975:15;;;:::i;:::-;;:6;:15;1982:1;1975:15;;;;;:::i;:::-;;;:::i;:::-;;2000;;:::i;:::-;;:6;:15;2007:1;2000:15;;;;;:::i;:::-;;;:::i;:::-;;2042:10;:1;:10;:::i;:::-;;:::i;:::-;:14;2055:1;2042:14;:::i;:::-;;;:::i;:::-;2025:128;2065:3;2058:1;:5;;2062:1;2058:5;:::i;:::-;;;:::i;:::-;;;;;2096:8;;:::i;:::-;2105:5;:11;2113:3;2105:11;:::i;:::-;;2096:21;;;;;;;;2131:11;2096:21;2065:3;2096:21;;;:::i;:::-;2084:33;:6;2091:1;;2084:33;;;;;:::i;:::-;;2131:11;2141:1;2131:11;:::i;:::-;;;:::i;:::-;2065:3;;:::i;:::-;2030:26;;;2096:21;;:::i;2058:5::-;2234:14;2058:5;;;2162:55;2058:5;2170:10;;2179:1;2170:10;:::i;:::-;;;:::i;:::-;;2162:55;:::i;:::-;2234:14;:::i;:::-;2227:21;:::o;280:3068:38:-;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::o;2214:404:22:-;2277:4;;:::i;:::-;2308:3;2297:22;2298:21;2308:3;2313:5;2298:21;;:::i;:::-;2297:22;;:::i;:::-;2293:319;;;;2493:19;:40;2335:3;:23;:16;:11;:3;:11;:16;:::i;:::-;2352:5;2335:23;;:::i;:::-;2493:12;2515:18;:11;:3;:11;:18;:::i;:::-;2493:3;:12;:19;:::i;:::-;:40;:::i;:::-;2554:4;2547:11;:::o;2293:319::-;2596:5;;;2589:12;:::o;280:3068:38:-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::i;2786:1388:22:-;2852:4;;:::i;:::-;2989:3;:19;;:12;:3;:12;3002:5;2989:19;;:::i;:::-;;:::i;:::-;3023:10;;:15;;3037:1;3023:15;:::i;:::-;;;:::i;:::-;;;3019:1149;;;;4062:26;3416:10;4069:12;:19;3416:10;;:14;4062:26;3416:10;:14;3429:1;3416:14;:::i;:::-;;;:::i;:::-;3464:22;:18;:3;;:11;:18;:::i;:::-;:22;3485:1;3464:22;:::i;:::-;;;:::i;:::-;3505:9;:26;;3518:13;3505:26;:::i;:::-;;;:::i;:::-;;3501:398;;3019:1149;3977:3;;;:15;;:3;;:11;:15;:::i;:::-;;:::i;:::-;4069:12;:19;:::i;:::-;4062:26;:::i;:::-;4110:4;4103:11;:::o;3501:398::-;3805:36;3571:3;3693:38;3571:22;;3805:23;3571:3;;;:11;:22;:::i;:::-;;;:::i;:::-;3722:9;3693:26;3722:9;3693:3;;;:11;:26;:::i;:::-;:38;;:::i;:::-;3805:3;;;:12;:23;:::i;:::-;:36;:::i;:::-;3501:398;;;;;3019:1149;4152:5;;;;4145:12;:::o;952:176:27:-;;1045:50;1058:37;1101:22;952:176;1058:37;:::i;:::-;1045:50;;:::i;:::-;1101:22;;:::i;:::-;952:176::o;829:155:18:-;914:4;;:::i;:::-;937:11;:40;;15006:232:29;952:25:18;;937:40;:::i;:::-;;;:::i;:::-;;930:47;:::o;2732:202:0:-;2817:4;;:::i;:::-;2840:11;;:47;;2855:32;;;2840:47;:::i;:::-;;;:::i;:::-;;:87;;;;;2732:202;2833:94;;:::o;2840:87::-;2891:36;2915:11;;2891:36;:::i;:::-;2840:87;;;4255:127:22;4351:19;4255:127;4351:12;:19;4255:127;4328:4;;:::i;:::-;4351:3;:12;:19;:::i;:::-;;:::i;:::-;:24;;4374:1;4351:24;:::i;:::-;;;:::i;:::-;;;4344:31;:::o"
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "batchBurn(uint256[])": "dc8e92ea",
              "burn(uint256)": "42966c68",
              "contractURI()": "e8a3d485",
              "getApproved(uint256)": "081812fc",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "initialize(address,string,string,string,string,address,uint96,address,bytes32)": "4c62cd9b",
              "isApprovedForAll(address,address)": "e985e9c5",
              "mint(address,uint256)": "40c10f19",
              "mintSequential(address,uint256)": "2e73e0fd",
              "name()": "06fdde03",
              "ownerOf(uint256)": "6352211e",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "setBaseMetadataURI(string)": "7e518ec8",
              "setContractURI(string)": "938e3d7b",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setNameAndSymbol(string,string)": "5a446215",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "tokenURI(uint256)": "c87b56dd",
              "totalSupply()": "18160ddd",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSequential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenContractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `account` to manage the `id` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when token `id` is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"batchBurn(uint256[])\":{\"params\":{\"tokenIds\":\"Array of token ids to burn\"}},\"burn(uint256)\":{\"params\":{\"tokenId\":\"Id of token to burn\"}},\"contractURI()\":{\"returns\":{\"_0\":\"Contract URI of token's URI\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,string,string,string,address,uint96,address,bytes32)\":{\"details\":\"This should be called immediately after deployment.\",\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"owner\":\"The owner of the contract\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"tokenBaseURI\":\"Base URI of the token\",\"tokenContractURI\":\"Contract URI of the token\",\"tokenName\":\"Name of the token\",\"tokenSymbol\":\"Symbol of the token\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"mint(address,uint256)\":{\"params\":{\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token id to mint.\"}},\"mintSequential(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint token to.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"setBaseMetadataURI(string)\":{\"params\":{\"tokenBaseURI\":\"New base URI of token's URI\"}},\"setContractURI(string)\":{\"params\":{\"tokenContractURI\":\"New contract URI of token's URI\"}},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setNameAndSymbol(string,string)\":{\"params\":{\"tokenName\":\"Name of token.\",\"tokenSymbol\":\"Symbol of token.\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for token `id`.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply of tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"batchBurn(uint256[])\":{\"notice\":\"Allows the owner of the tokens to burn their tokens.\"},\"burn(uint256)\":{\"notice\":\"Allows the owner of the token to burn their token.\"},\"constructor\":{\"notice\":\"Deploy contract.\"},\"contractURI()\":{\"notice\":\"Get the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"initialize(address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Initialize contract.\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"mintSequential(address,uint256)\":{\"notice\":\"Mint a sequential token.\"},\"setBaseMetadataURI(string)\":{\"notice\":\"Update the base URI of token's URI.\"},\"setContractURI(string)\":{\"notice\":\"Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata\"},\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setNameAndSymbol(string,string)\":{\"notice\":\"Set name and symbol of token.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of tokens.\"}},\"notice\":\"An implementation of ERC-721 capable of minting when role provided.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/ERC721Items.sol\":\"ERC721Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n///   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Mints token `id` to `to`, and updates the extra data for token `id` to `value`.\\n    /// Does NOT check if token `id` already exists (assumes `id` is auto-incrementing).\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Update with the owner and extra data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            sstore(add(id, add(id, keccak256(0x00, 0x20))), or(shl(160, value), to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ee665c5f70c388430cd7af42a5b1c2ff0e11ab45e46ab7ba02a6aad29f5cc77\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/tokens/ERC721/ERC721BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC721 } from \\\"solady/tokens/ERC721.sol\\\";\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-721 for use in Sequence library contracts.\\n */\\nabstract contract ERC721BaseToken is ERC721, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string private _tokenBaseURI;\\n    string private _tokenName;\\n    string private _tokenSymbol;\\n    string private _contractURI;\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenBaseURI Base URI of the token\\n     * @param tokenContractURI Contract URI of the token\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenBaseURI = tokenBaseURI;\\n        _contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenBaseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their token.\\n     * @param tokenId Id of token to burn\\n     */\\n    function burn(\\n        uint256 tokenId\\n    ) public virtual {\\n        _burn(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * Allows the owner of the tokens to burn their tokens.\\n     * @param tokenIds Array of token ids to burn\\n     */\\n    function batchBurn(\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        uint256 nBurn = tokenIds.length;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            _burn(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Get the contract URI of token's URI.\\n     * @return Contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC721.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC721 Overrides\\n    //\\n\\n    /// @inheritdoc ERC721\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override(ERC721) returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert TokenDoesNotExist();\\n        }\\n\\n        return bytes(_tokenBaseURI).length != 0 ? LibString.concat(_tokenBaseURI, LibString.toString(tokenId)) : \\\"\\\";\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function name() public view override(ERC721) returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd93442011e8d25544edfccb710b2ea6a851317e30ecf1421481cd29e0b5b5406\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/ERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC721BaseToken } from \\\"../../ERC721BaseToken.sol\\\";\\nimport { IERC721Items, IERC721ItemsFunctions } from \\\"./IERC721Items.sol\\\";\\n\\n/**\\n * An implementation of ERC-721 capable of minting when role provided.\\n */\\ncontract ERC721Items is ERC721BaseToken, IERC721Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    uint256 private _nextSequentialId;\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * Deploy contract.\\n     */\\n    constructor() ERC721BaseToken() {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenBaseURI Base URI of the token\\n     * @param tokenContractURI Contract URI of the token\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC721BaseToken._initialize(\\n            owner, tokenName, tokenSymbol, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\\n        );\\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function mint(address to, uint256 tokenId) external onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n        _totalSupply++;\\n        while (_exists(_nextSequentialId)) {\\n            _nextSequentialId++;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function mintSequential(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        for (uint256 i = 0; i < amount; i++) {\\n            while (_exists(_nextSequentialId)) {\\n                _nextSequentialId++;\\n            }\\n            _mint(to, _nextSequentialId);\\n            _nextSequentialId++;\\n        }\\n        _totalSupply += amount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return type(IERC721ItemsFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xad7c33ac8880a49a6c08df98051261f14271b2989a4381849726628e17bad3c6\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "batchBurn(uint256[])": {
                "notice": "Allows the owner of the tokens to burn their tokens."
              },
              "burn(uint256)": {
                "notice": "Allows the owner of the token to burn their token."
              },
              "constructor": {
                "notice": "Deploy contract."
              },
              "contractURI()": {
                "notice": "Get the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "initialize(address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Initialize contract."
              },
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "mintSequential(address,uint256)": {
                "notice": "Mint a sequential token."
              },
              "setBaseMetadataURI(string)": {
                "notice": "Update the base URI of token's URI."
              },
              "setContractURI(string)": {
                "notice": "Update the contract URI of token's URI.Refer to https://docs.opensea.io/docs/contract-level-metadata"
              },
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setNameAndSymbol(string,string)": {
                "notice": "Set name and symbol of token."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              },
              "totalSupply()": {
                "notice": "Get the total supply of tokens."
              }
            },
            "notice": "An implementation of ERC-721 capable of minting when role provided.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol": {
        "ERC721ItemsFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "factoryOwner",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721ItemsDeployed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "params": {
                  "factoryOwner": "The owner of the ERC-721 Items Factory"
                }
              },
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple": {
                  "entryPoint": 283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 730,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_ERC721ItemsFactory": {
                  "entryPoint": 361,
                  "id": 8673,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "constructor_Ownable": {
                  "entryPoint": 468,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_SequenceProxyFactory": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC721Items_to_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 337,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_UpgradeableBeacon": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 309,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_ERC721ItemsFactory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize": {
                  "entryPoint": 613,
                  "id": 7485,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 711,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transferOwnership": {
                  "entryPoint": 821,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 306,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 786,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_UpgradeableBeacon": {
                  "entryPoint": 578,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 761,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 289,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 581,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 706,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b610169565b610021610034565b612762610397823961276290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b6101186177378038038061010d81610086565b9283398101906100db565b90565b60000190565b610129610034565b3d6000823e3d90fd5b90565b61014961014461014e926100a0565b610132565b6100a0565b90565b61015a90610135565b90565b61016690610151565b90565b6101716101ca565b610179610034565b61419c810181811060018060401b038211176101c5576101a1829161419c612af9843961011b565b03906000f09081156101c0576101b96101be9261015d565b610265565b565b610121565b610049565b6101d26101d4565b565b6101e46101df6102c7565b610335565b565b6101ef906100ab565b9052565b9190610207906000602085019401906101e6565b565b60001b90565b9061022060018060a01b0391610209565b9181191691161790565b61023390610135565b90565b61023f9061022a565b90565b90565b9061025a61025561026192610236565b610242565b825461020f565b9055565b61026d610034565b90610aa2820182811060018060401b038211176102bd57829161029791610aa2616c9585396101f3565b03906000f09081156102b8576102b16102b6926001610245565b610335565b565b610121565b610049565b600090565b6102cf6102c2565b503390565b60001c90565b60018060a01b031690565b6102f16102f6916102d4565b6102da565b90565b61030390546102e5565b90565b61030f90610151565b90565b90565b9061032a61032561033192610306565b610312565b825461020f565b9055565b61033f60006102f9565b61034a826000610315565b9061037e6103787f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610306565b91610306565b91610387610034565b806103918161011b565b0390a356fe60806040526004361015610013575b6105ab565b61001e60003561008d565b80630defbce9146100885780631bce45831461008357806359659e901461007e578063715018a6146100795780638bdb5fd2146100745780638da5cb5b1461006f5763f2fde38b0361000e57610578565b610543565b610501565b6104ce565b610499565b6103b7565b610350565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b6100bc906100a8565b90565b6100c8816100b3565b036100cf57565b600080fd5b905035906100e1826100bf565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610117906100ed565b810190811067ffffffffffffffff82111761013157604052565b6100f7565b90610149610142610093565b928361010d565b565b67ffffffffffffffff8111610169576101656020916100ed565b0190565b6100f7565b90826000939282370152565b9092919261018f61018a8261014b565b610136565b938185526020850190828401116101ab576101a99261016e565b565b6100e8565b9080601f830112156101ce578160206101cb9335910161017a565b90565b6100e3565b6bffffffffffffffffffffffff1690565b6101ed816101d3565b036101f457565b600080fd5b90503590610206826101e4565b565b90565b61021481610208565b0361021b57565b600080fd5b9050359061022d8261020b565b565b610140818303126103285761024782600083016100d4565b9261025583602084016100d4565b92604083013567ffffffffffffffff811161032357816102769185016101b0565b92606081013567ffffffffffffffff811161031e57826102979183016101b0565b92608082013567ffffffffffffffff811161031957836102b89184016101b0565b9260a083013567ffffffffffffffff811161031457816102d99185016101b0565b926102e78260c083016100d4565b926103116102f88460e085016101f9565b936103078161010086016100d4565b9361012001610220565b90565b6100a3565b6100a3565b6100a3565b6100a3565b61009e565b610336906100b3565b9052565b919061034e9060006020850194019061032d565b565b3461038d5761038961037861036636600461022f565b98979097969196959295949394610756565b610380610093565b9182918261033a565b0390f35b610099565b906020828203126103ac576103a9916000016100d4565b90565b61009e565b60000190565b346103e5576103cf6103ca366004610392565b61096f565b6103d7610093565b806103e1816103b1565b0390f35b610099565b60009103126103f557565b61009e565b1c90565b60018060a01b031690565b61041990600861041e93026103fa565b6103fe565b90565b9061042c9154610409565b90565b61043c6001600090610421565b90565b90565b61045661045161045b926100a8565b61043f565b6100a8565b90565b61046790610442565b90565b6104739061045e565b90565b61047f9061046a565b9052565b919061049790600060208501940190610476565b565b346104c9576104a93660046103ea565b6104c56104b461042f565b6104bc610093565b91829182610483565b0390f35b610099565b346104fc576104de3660046103ea565b6104e66109cb565b6104ee610093565b806104f8816103b1565b0390f35b610099565b3461053e5761053a61052961051736600461022f565b989790979691969592959493946109d5565b610531610093565b9182918261033a565b0390f35b610099565b34610573576105533660046103ea565b61056f61055e610a6e565b610566610093565b9182918261033a565b0390f35b610099565b346105a65761059061058b366004610392565b610b72565b610598610093565b806105a2816103b1565b0390f35b610099565b600080fd5b600090565b5190565b60209181520190565b60005b8381106105d6575050906000910152565b8060209183015181850152016105c5565b61060661060f602093610614936105fd816105b5565b938480936105b9565b958691016105c2565b6100ed565b0190565b610621906101d3565b9052565b61062e90610208565b9052565b946106a56106b0916106976106c4976106896101009b9f9e9c969861067a6106cb9f9a6106ba9a8e61066d610120820193600083019061032d565b60208184039101526105e7565b908c60408184039101526105e7565b908a820360608c01526105e7565b9088820360808a01526105e7565b9a60a087019061032d565b60c0850190610618565b60e083019061032d565b0190610625565b565b60200190565b5190565b906106e96106e48361014b565b610136565b918252565b6106f860006106d7565b90565b6107036106ee565b90565b61070f90610442565b90565b61071b90610706565b90565b6107279061045e565b90565b600080fd5b60e01b90565b600091031261074057565b61009e565b61074d610093565b3d6000823e3d90fd5b6107c990846107a7856107988c8e9f809c9a9f9d9b98999d6107766105b0565b508a9496928d8d8c90919293949561078c610093565b9a8b9960208b01610632565b6020820181038252038261010d565b6107b96107b3826106d3565b916106cd565b20906107c36106fb565b91610cf6565b986107db6107d68b610712565b61071e565b95634c62cd9b93979992949598919091873b1561089d57600099610813978b9761081e96610807610093565b9e8f9d8e9c8d9b61072f565b8b5260048b01610632565b03925af180156108985761086b575b50806108657fd8ad75647a93de9d8d617559d87f1c27bc23fb6237b94054baf34aafbe85ad039161085c610093565b9182918261033a565b0390a190565b61088b9060003d8111610891575b610883818361010d565b810190610735565b3861082d565b503d610879565b610745565b61072a565b6108b3906108ae610eb8565b6108dc565b565b60001c90565b6108c76108cc916108b5565b6103fe565b90565b6108d990546108bb565b90565b6108ee6108e960016108cf565b61046a565b90633659cfe690823b1561096a576109269261091b6000809461090f610093565b9687958694859361072f565b83526004830161033a565b03925af1801561096557610938575b50565b6109589060003d811161095e575b610950818361010d565b810190610735565b38610935565b503d610946565b610745565b61072a565b610978906108a2565b565b610982610eb8565b61098a6109b7565b565b90565b6109a361099e6109a89261098c565b61043f565b6100a8565b90565b6109b49061098f565b90565b6109c96109c460006109ab565b610f34565b565b6109d361097a565b565b979096610a1d96610a3f9a9396610a0e9695996109f06105b0565b50979995909192939495610a02610093565b9a8b9960208b01610632565b6020820181038252038261010d565b610a2f610a29826106d3565b916106cd565b2090610a396106fb565b91610f95565b90565b60018060a01b031690565b610a59610a5e916108b5565b610a42565b90565b610a6b9054610a4d565b90565b610a766105b0565b50610a816000610a61565b90565b610a9590610a90610eb8565b610b41565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610af260266040926105b9565b610afb81610a97565b0190565b610b159060208101906000818303910152610ae5565b90565b15610b1f57565b610b27610093565b62461bcd60e51b815280610b3d60048201610aff565b0390fd5b610b7090610b6b81610b64610b5e610b5960006109ab565b6100b3565b916100b3565b1415610b18565b610f34565b565b610b7b90610a84565b565b90565b610b8c610b9191610208565b610b7d565b9052565b60601b90565b610ba490610b95565b90565b610bb090610b9b565b90565b610bbf610bc4916100b3565b610ba7565b9052565b905090565b610bf2610be992602092610be0816106d3565b94858093610bc8565b938491016105c2565b0190565b60148093610c1a602084610c12610c2296610c299b9a98610b80565b018092610bb3565b018092610bb3565b0190610bcd565b90565b90565b610c43610c3e610c489261098c565b61043f565b610c2c565b90565b610c5490610442565b90565b610c6090610c4b565b90565b610c6c90610442565b90565b610c7890610c63565b90565b610c849061045e565b90565b60209181520190565b610caf610cb8602093610cbd93610ca6816106d3565b93848093610c87565b958691016105c2565b6100ed565b0190565b610ce6610cf3949293610cdc6060840195600085019061032d565b602083019061032d565b6040818403910152610c90565b90565b610d869093929193610d066105b0565b50610d468591610d37610d21610d1c60016108cf565b61046a565b8690610d2b610093565b95869460208601610bf6565b6020820181038252038261010d565b610d58610d52826106d3565b916106cd565b2061148a610d6860208201610136565b908082526112a36020830139610d816000929192610c2f565b6111c2565b92610da0610d9b610d9686610c57565b610c6f565b610c7b565b63cf7a1d779190610db9610db460016108cf565b61046a565b9392813b15610e30576000610de191610dec8296610dd5610093565b9889978896879561072f565b855260048501610cc1565b03925af18015610e2b57610dfe575b50565b610e1e9060003d8111610e24575b610e16818361010d565b810190610735565b38610dfb565b503d610e0c565b610745565b61072a565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610e69602080926105b9565b610e7281610e35565b0190565b610e8c9060208101906000818303910152610e5d565b90565b15610e9657565b610e9e610093565b62461bcd60e51b815280610eb460048201610e76565b0390fd5b610ee2610ec3610a6e565b610edc610ed6610ed161124b565b6100b3565b916100b3565b14610e8f565b565b60001b90565b90610efb60018060a01b0391610ee4565b9181191691161790565b610f0e9061045e565b90565b90565b90610f29610f24610f3092610f05565b610f11565b8254610eea565b9055565b610f3e6000610a61565b610f49826000610f14565b90610f7d610f777f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f05565b91610f05565b91610f86610093565b80610f90816103b1565b0390a3565b6110289291610fd2610fe192610fa96105b0565b509193610fbe610fb960016108cf565b61046a565b610fc6610093565b95869460208601610bf6565b6020820181038252038261010d565b610ff3610fed826106d3565b916106cd565b2061148a61100360208201610136565b908082526112a3602083013961102161101b826106d3565b916106cd565b2090611258565b90565b6110349061045e565b90565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b61106c601d6020926105b9565b61107581611037565b0190565b61108f906020810190600081830391015261105f565b90565b1561109957565b6110a1610093565b62461bcd60e51b8152806110b760048201611079565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b6110ef602080926105b9565b6110f8816110bb565b0190565b61111290602081019060008183039101526110e3565b90565b1561111c57565b611124610093565b62461bcd60e51b81528061113a600482016110fc565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b61117360196020926105b9565b61117c8161113e565b0190565b6111969060208101906000818303910152611166565b90565b156111a057565b6111a8610093565b62461bcd60e51b8152806111be60048201611180565b0390fd5b9190916111cd6105b0565b506111f46111da3061102b565b316111ed6111e784610c2c565b91610c2c565b1015611092565b61121a611200836106d3565b61121361120d6000610c2f565b91610c2c565b1415611115565b60208251920190f5906112498261124261123c61123760006109ab565b6100b3565b916100b3565b1415611199565b565b6112536105b0565b503390565b90611276916112656105b0565b50906112703061102b565b91611279565b90565b90605592600b926112886105b0565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a26469706673582212203b72369d1d46611771220d986b45a922fa914be16aa4d3dbc40e20507531653264736f6c634300081b003360a060405234602b57600e603a565b6014602f565b61415b610041823960805181611ef7015261415b90f35b6035565b60405190565b600080fd5b3360805256fe60806040526004361015610013575b61134c565b61001e60003561026d565b806301ffc9a71461026857806304634d8d1461026357806306fdde031461025e578063081812fc14610259578063095ea7b3146102545780630bb310de1461024f57806318160ddd1461024a57806323b872dd14610245578063248a9ca3146102405780632a55205a1461023b5780632e73e0fd146102365780632f2ff15d1461023157806336568abe1461022c57806340c10f191461022757806342842e0e1461022257806342966c681461021d5780634c62cd9b146102185780635944c753146102135780635a4462151461020e5780636352211e1461020957806370a08231146102045780637e518ec8146101ff5780639010d07c146101fa57806391d14854146101f5578063938e3d7b146101f057806395d89b41146101eb5780639d043a66146101e6578063a217fddf146101e1578063a22cb465146101dc578063b88d4fde146101d7578063c87b56dd146101d2578063ca15c873146101cd578063d547741f146101c8578063dc8e92ea146101c3578063e8a3d485146101be578063e985e9c5146101b95763ed4c2ac70361000e57611319565b6112e3565b611280565b61124d565b61114c565b611117565b6110e2565b6110b5565b610fd7565b610f50565b610edd565b610e13565b610de0565b610daa565b610d74565b610d13565b610ca8565b610c73565b610c3f565b610bad565b610b35565b61092b565b610901565b6108cd565b610899565b610865565b610803565b6107cc565b610745565b6106b2565b610642565b6105ec565b6105a3565b610540565b6104a2565b6103d8565b6102ff565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61029d81610288565b036102a457565b600080fd5b905035906102b682610294565b565b906020828203126102d2576102cf916000016102a9565b90565b61027e565b151590565b6102e5906102d7565b9052565b91906102fd906000602085019401906102dc565b565b3461032f5761032b61031a6103153660046102b8565b611356565b610322610273565b918291826102e9565b0390f35b610279565b60018060a01b031690565b61034890610334565b90565b6103548161033f565b0361035b57565b600080fd5b9050359061036d8261034b565b565b6bffffffffffffffffffffffff1690565b6103898161036f565b0361039057565b600080fd5b905035906103a282610380565b565b91906040838203126103cd57806103c16103ca9260008601610360565b93602001610395565b90565b61027e565b60000190565b34610407576103f16103eb3660046103a4565b906113e2565b6103f9610273565b80610403816103d2565b0390f35b610279565b600091031261041757565b61027e565b5190565b60209181520190565b60005b83811061043d575050906000910152565b80602091830151818501520161042c565b601f801991011690565b6104776104806020936104859361046e8161041c565b93848093610420565b95869101610429565b61044e565b0190565b61049f9160208201916000818403910152610458565b90565b346104d2576104b236600461040c565b6104ce6104bd611511565b6104c5610273565b91829182610489565b0390f35b610279565b90565b6104e3816104d7565b036104ea57565b600080fd5b905035906104fc826104da565b565b9060208282031261051857610515916000016104ef565b90565b61027e565b6105269061033f565b9052565b919061053e9060006020850194019061051d565b565b346105705761056c61055b6105563660046104fe565b61152c565b610563610273565b9182918261052a565b0390f35b610279565b919060408382031261059e578061059261059b9260008601610360565b936020016104ef565b90565b61027e565b6105b76105b1366004610575565b9061156f565b6105bf610273565b806105c9816103d2565b0390f35b906020828203126105e7576105e491600001610360565b90565b61027e565b3461061a576106046105ff3660046105cd565b611653565b61060c610273565b80610616816103d2565b0390f35b610279565b610628906104d7565b9052565b91906106409060006020850194019061061f565b565b346106725761065236600461040c565b61066e61065d61168d565b610665610273565b9182918261062c565b0390f35b610279565b90916060828403126106ad576106aa6106938460008501610360565b936106a18160208601610360565b936040016104ef565b90565b61027e565b6106c66106c0366004610677565b916116a3565b6106ce610273565b806106d8816103d2565b0390f35b90565b6106e8816106dc565b036106ef57565b600080fd5b90503590610701826106df565b565b9060208282031261071d5761071a916000016106f4565b90565b61027e565b61072b906106dc565b9052565b919061074390600060208501940190610722565b565b346107755761077161076061075b366004610703565b6117ed565b610768610273565b9182918261072f565b0390f35b610279565b91906040838203126107a357806107976107a092600086016104ef565b936020016104ef565b90565b61027e565b9160206107ca9294936107c36040820196600083019061051d565b019061061f565b565b346107fe576107e56107df36600461077a565b906119f6565b906107fa6107f1610273565b928392836107a8565b0390f35b610279565b346108325761081c610816366004610575565b90611c60565b610824610273565b8061082e816103d2565b0390f35b610279565b9190604083820312610860578061085461085d92600086016106f4565b93602001610360565b90565b61027e565b346108945761087e610878366004610837565b90611c95565b610886610273565b80610890816103d2565b0390f35b610279565b346108c8576108b26108ac366004610837565b90611d4b565b6108ba610273565b806108c4816103d2565b0390f35b610279565b346108fc576108e66108e0366004610575565b90611df7565b6108ee610273565b806108f8816103d2565b0390f35b610279565b61091561090f366004610677565b91611e32565b61091d610273565b80610927816103d2565b0390f35b346109595761094361093e3660046104fe565b611e6d565b61094b610273565b80610955816103d2565b0390f35b610279565b600080fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b906109889061044e565b810190811067ffffffffffffffff8211176109a257604052565b610968565b906109ba6109b3610273565b928361097e565b565b67ffffffffffffffff81116109da576109d660209161044e565b0190565b610968565b90826000939282370152565b90929192610a006109fb826109bc565b6109a7565b93818552602085019082840111610a1c57610a1a926109df565b565b610963565b9080601f83011215610a3f57816020610a3c933591016109eb565b90565b61095e565b909161012082840312610b3057610a5e8360008401610360565b92602083013567ffffffffffffffff8111610b2b5781610a7f918501610a21565b92604081013567ffffffffffffffff8111610b265782610aa0918301610a21565b92606082013567ffffffffffffffff8111610b215783610ac1918401610a21565b92608083013567ffffffffffffffff8111610b1c5781610ae2918501610a21565b92610af08260a08301610360565b92610b19610b018460c08501610395565b93610b0f8160e08601610360565b93610100016106f4565b90565b610283565b610283565b610283565b610283565b61027e565b34610b6d57610b57610b48366004610a44565b97969096959195949294611ee5565b610b5f610273565b80610b69816103d2565b0390f35b610279565b9091606082840312610ba857610ba5610b8e84600085016104ef565b93610b9c8160208601610360565b93604001610395565b90565b61027e565b34610bdc57610bc6610bc0366004610b72565b91611fc0565b610bce610273565b80610bd8816103d2565b0390f35b610279565b919091604081840312610c3a57600081013567ffffffffffffffff8111610c355783610c0e918301610a21565b92602082013567ffffffffffffffff8111610c3057610c2d9201610a21565b90565b610283565b610283565b61027e565b34610c6e57610c58610c52366004610be1565b9061220f565b610c60610273565b80610c6a816103d2565b0390f35b610279565b34610ca357610c9f610c8e610c893660046104fe565b61221b565b610c96610273565b9182918261052a565b0390f35b610279565b34610cd857610cd4610cc3610cbe3660046105cd565b612244565b610ccb610273565b9182918261062c565b0390f35b610279565b90602082820312610d0e57600082013567ffffffffffffffff8111610d0957610d069201610a21565b90565b610283565b61027e565b34610d4157610d2b610d26366004610cdd565b6122aa565b610d33610273565b80610d3d816103d2565b0390f35b610279565b9190604083820312610d6f5780610d63610d6c92600086016106f4565b936020016104ef565b90565b61027e565b34610da557610da1610d90610d8a366004610d46565b906122d0565b610d98610273565b9182918261052a565b0390f35b610279565b34610ddb57610dd7610dc6610dc0366004610837565b90612328565b610dce610273565b918291826102e9565b0390f35b610279565b34610e0e57610df8610df3366004610cdd565b61237b565b610e00610273565b80610e0a816103d2565b0390f35b610279565b34610e4357610e2336600461040c565b610e3f610e2e612386565b610e36610273565b91829182610489565b0390f35b610279565b600080fd5b908160c0910312610e5b5790565b610e48565b908160e0910312610e6e5790565b610e48565b91606083830312610ed857610e8b8260008501610360565b92602081013567ffffffffffffffff8111610ed35783610eac918301610e4d565b92604082013567ffffffffffffffff8111610ece57610ecb9201610e60565b90565b610283565b610283565b61027e565b34610f0e57610f0a610ef9610ef3366004610e73565b916126ef565b610f01610273565b9182918261072f565b0390f35b610279565b90565b60001b90565b610f30610f2b610f3592610f13565b610f16565b6106dc565b90565b610f426000610f1c565b90565b610f4d610f38565b90565b34610f8057610f6036600461040c565b610f7c610f6b610f45565b610f73610273565b9182918261072f565b0390f35b610279565b610f8e816102d7565b03610f9557565b600080fd5b90503590610fa782610f85565b565b9190604083820312610fd25780610fc6610fcf9260008601610360565b93602001610f9a565b90565b61027e565b3461100657610ff0610fea366004610fa9565b90612790565b610ff8610273565b80611002816103d2565b0390f35b610279565b600080fd5b600080fd5b909182601f8301121561104f5781359167ffffffffffffffff831161104a57602001926001830284011161104557565b611010565b61100b565b61095e565b906080828203126110b05761106c8160008401610360565b9261107a8260208501610360565b9261108883604083016104ef565b92606082013567ffffffffffffffff81116110ab576110a79201611015565b9091565b610283565b61027e565b6110cc6110c3366004611054565b93929092612847565b6110d4610273565b806110de816103d2565b0390f35b346111125761110e6110fd6110f83660046104fe565b6128a7565b611105610273565b91829182610489565b0390f35b610279565b346111475761114361113261112d366004610703565b612940565b61113a610273565b9182918261062c565b0390f35b610279565b3461117b5761116561115f366004610837565b90612990565b61116d610273565b80611177816103d2565b0390f35b610279565b67ffffffffffffffff81116111985760208091020190565b610968565b909291926111b26111ad82611180565b6109a7565b93818552602080860192028301928184116111ef57915b8383106111d65750505050565b602080916111e484866104ef565b8152019201916111c9565b611010565b9080601f830112156112125781602061120f9335910161119d565b90565b61095e565b9060208282031261124857600082013567ffffffffffffffff81116112435761124092016111f4565b90565b610283565b61027e565b3461127b57611265611260366004611217565b6129e3565b61126d610273565b80611277816103d2565b0390f35b610279565b346112b05761129036600461040c565b6112ac61129b612a43565b6112a3610273565b91829182610489565b0390f35b610279565b91906040838203126112de57806112d26112db9260008601610360565b93602001610360565b90565b61027e565b34611314576113106112ff6112f93660046112b5565b90612a59565b611307610273565b918291826102e9565b0390f35b610279565b346113475761133161132c366004610703565b612ad2565b611339610273565b80611343816103d2565b0390f35b610279565b600080fd5b600090565b61135e611351565b506376a4e23960e01b61137961137383610288565b91610288565b14908115611386575b5090565b6113909150612add565b38611382565b7f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb01190565b906113d4916113cf6113ca611396565b612b21565b6113d6565b565b906113e091612d3b565b565b906113ec916113ba565b565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015611429575b602083101461142457565b6113f3565b91607f1691611419565b60209181520190565b600052602060002090565b906000929180549061146261145b83611409565b8094611433565b916001811690816000146114bb575060011461147e575b505050565b61148b919293945061143c565b916000925b8184106114a35750500190388080611479565b60018160209295939554848601520191019290611490565b92949550505060ff1916825215156020020190388080611479565b906114e091611447565b90565b906115036114fc926114f3610273565b938480926114d6565b038361097e565b565b61150e906114e3565b90565b6115196113ee565b506115246007611505565b90565b600090565b611534611527565b5080600052673ec412a9852d173d60c11b601c526020600020810101805460601b15611561576001015490565b63ceea21b66000526004601cfd5b61157c9133919091612db5565b565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b6115bb906115b66115b161157e565b612b21565b61163e565b565b90565b6115d46115cf6115d992610334565b6115bd565b610334565b90565b6115e5906115c0565b90565b6115f1906115dc565b90565b9061160560018060a01b0391610f16565b9181191691161790565b611618906115dc565b90565b90565b9061163361162e61163a9261160f565b61161b565b82546115f4565b9055565b61164a611651916115e8565b600461161e565b565b61165c906115a2565b565b600090565b60001c90565b90565b61167861167d91611663565b611669565b90565b61168a905461166c565b90565b61169561165e565b506116a0600c611680565b90565b9060001960601c918216908216918360005233673ec412a9852d173d60c11b17601c5260206000208401840190815480911683811481021561178b57508260005281600101548033148433141715611773575b611767575b838318189055601c600c206001815403905581600052601c600c2060018154019063ffffffff821684021561175257557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600038a4565b67ea553b3401336cea841560021b526004601cfd5b600082600101556116fb565b6030600c20546116f657634b6e7f186000526004601cfd5b67ceea21b6a1148100901560021b526004601cfd5b600090565b6117ae906106dc565b90565b906117bb906117a5565b600052602052604060002090565b90565b6117d86117dd91611663565b6117c9565b90565b6117ea90546117cc565b90565b600161180661180c926117fe6117a0565b5060026117b1565b016117e0565b90565b61182361181e611828926104d7565b6115bd565b6104d7565b90565b906118359061180f565b600052602052604060002090565b60018060a01b031690565b61185a61185f91611663565b611843565b90565b61186c905461184e565b90565b906118799061033f565b9052565b60a01c90565b6bffffffffffffffffffffffff1690565b6118a06118a59161187d565b611883565b90565b6118b29054611894565b90565b906118bf9061036f565b9052565b6118cd60406109a7565b90565b906119076118fe60006118e16118c3565b946118f86118f0838301611862565b83880161186f565b016118a8565b602084016118b5565b565b611912906118d0565b90565b61191f905161033f565b90565b61193661193161193b92610f13565b6115bd565b610334565b90565b61194790611922565b90565b611954905161036f565b90565b61196b6119666119709261036f565b6115bd565b6104d7565b90565b634e487b7160e01b600052601160045260246000fd5b61199861199e919392936104d7565b926104d7565b916119aa8382026104d7565b9281840414901517156119b957565b611973565b634e487b7160e01b600052601260045260246000fd5b6119e06119e6916104d7565b916104d7565b9081156119f1570490565b6119be565b611a19611a1e91939293611a08611527565b50611a1161165e565b50600161182b565b611909565b91611a2b60008401611915565b611a46611a40611a3b600061193e565b61033f565b9161033f565b14611a93575b6000611a88611a72611a8f93611a6c611a676020890161194a565b611957565b90611989565b611a82611a7d612e7c565b611957565b906119d4565b9301611915565b9190565b9150611a8f6000611a88611a72611aa983611909565b959350505050611a4c565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b90611af291611aed611ae8611ab4565b612b21565b611b9b565b565b611b08611b03611b0d92610f13565b6115bd565b6104d7565b90565b6001611b1c91016104d7565b90565b611b28906104d7565b6000198114611b375760010190565b611973565b90611b4960001991610f16565b9181191691161790565b90565b90611b6b611b66611b729261180f565b611b53565b8254611b3c565b9055565b611b85611b8b919392936104d7565b926104d7565b8201809211611b9657565b611973565b9190611ba76000611af4565b915b82611bbc611bb6846104d7565b916104d7565b1015611c3d575b611bd5611bd0600b611680565b612e93565b15611bfb57611bf6611bef611bea600b611680565b611b1f565b600b611b56565b611bc3565b9091611c3690611c1585611c0f600b611680565b90612ec0565b611c31611c2a611c25600b611680565b611b1f565b600b611b56565b611b10565b9190611ba9565b9250611c5e9150611c5790611c52600c611680565b611b76565b600c611b56565b565b90611c6a91611ad8565b565b90611c8791611c82611c7d826117ed565b612b21565b611c89565b565b90611c9391612f59565b565b90611c9f91611c6c565b565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b611cfc602f604092610420565b611d0581611ca1565b0190565b611d1f9060208101906000818303910152611cef565b90565b15611d2957565b611d31610273565b62461bcd60e51b815280611d4760048201611d09565b0390fd5b90611d7891611d7382611d6d611d67611d62612f83565b61033f565b9161033f565b14611d22565b612f90565b565b90611d9491611d8f611d8a611ab4565b612b21565b611d96565b565b90611da091612ec0565b611dbc611db5611db0600c611680565b611b1f565b600c611b56565b5b611dcf611dca600b611680565b612e93565b15611df557611df0611de9611de4600b611680565b611b1f565b600b611b56565b611dbd565b565b90611e0191611d7a565b565b90611e15611e10836109bc565b6109a7565b918252565b611e246000611e03565b90565b611e2f611e1a565b90565b91611e3f838383916116a3565b611e4882612fba565b611e52575b505050565b611e659291611e5f611e27565b92612fc7565b388080611e4d565b611e779033613058565b565b60ff1690565b611e8b611e9091611663565b611e79565b90565b611e9d9054611e7f565b90565b90611eac60ff91610f16565b9181191691161790565b611ebf906102d7565b90565b90565b90611eda611ed5611ee192611eb6565b611ec2565b8254611ea0565b9055565b96979091929594939733611f21611f1b7f000000000000000000000000000000000000000000000000000000000000000061033f565b9161033f565b14158015611f84575b611f6757611f5998611f4c97611f47958a95909192939495613122565b612d3b565b611f54611ab4565b612f59565b611f656001600a611ec5565b565b600063f92ee8a960e01b815280611f80600482016103d2565b0390fd5b50611f8f600a611e93565b611f2a565b90611faf9291611faa611fa5611396565b612b21565b611fb1565b565b91611fbe92919091613217565b565b90611fcb9291611f94565b565b7fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a590565b9061200b91612006612001611fcd565b612b21565b6121f7565b565b601f602091010490565b1b90565b9190600861203791029161203160001984612017565b92612017565b9181191691161790565b919061205761205261205f9361180f565b611b53565b90835461201b565b9055565b6120759161206f61165e565b91612041565b565b5b818110612083575050565b806120916000600193612063565b01612078565b9190601f81116120a7575b505050565b6120b36120d89361143c565b9060206120bf8461200d565b830193106120e0575b6120d19061200d565b0190612077565b3880806120a2565b91506120d1819290506120c8565b1c90565b9061210390600019906008026120ee565b191690565b81612112916120f2565b906002021790565b906121248161041c565b9067ffffffffffffffff82116121e657612148826121428554611409565b85612097565b602090601f831160011461217d5791809161216c93600092612171575b5050612108565b90555b565b90915001513880612165565b601f1983169161218c8561143c565b9260005b8181106121ce575091600293918560019694106121b4575b5050500201905561216f565b6121c4910151601f8416906120f2565b90553880806121a8565b91936020600181928787015181550195019201612190565b610968565b906121f59161211a565b565b9061220661220d9260076121eb565b60086121eb565b565b9061221991611ff1565b565b61222d90612227611527565b5061329a565b90811561223657565b63ceea21b66000526004601cfd5b61224c61165e565b50801561227457673ec412a9852d173d60c11b601c5260005263ffffffff601c600c20541690565b638f4eb6046000526004601cfd5b61229b90612296612291611fcd565b612b21565b61229d565b565b6122a89060066121eb565b565b6122b390612282565b565b906122bf906117a5565b600052602052604060002090565b90565b906122f06122eb6122f5936122e3611527565b5060036122b5565b6122cd565b6132fb565b90565b612301906115c0565b90565b61230d906122f8565b90565b9061231a90612304565b600052602052604060002090565b61235091600061234561234b9361233d611351565b5060026117b1565b01612310565b611e93565b90565b61236c90612367612362611fcd565b612b21565b61236e565b565b6123799060096121eb565b565b61238490612353565b565b61238e6113ee565b506123996008611505565b90565b60018060a01b031690565b6123b36123b891611663565b61239c565b90565b6123c590546123a7565b90565b6123d1906122f8565b90565b60e01b90565b905051906123e7826106df565b565b9060208282031261240357612400916000016123da565b90565b61027e565b50612417906020810190610360565b90565b6124239061033f565b9052565b506124369060208101906102a9565b90565b61244290610288565b9052565b506124559060208101906106f4565b90565b612461906106dc565b9052565b600080fd5b600080fd5b600080fd5b90356001602003823603038112156124b557016020813591019167ffffffffffffffff82116124b05760018202360383136124ab57565b61246a565b612465565b61246f565b60209181520190565b91906124dd816124d6816124e2956124ba565b80956109df565b61044e565b0190565b90356001604003823603038112156124fc570190565b61246f565b903560016020038236030381121561254257016020813591019167ffffffffffffffff821161253d57600182023603831361253857565b61246a565b612465565b61246f565b91906125618161255a8161256695611433565b80956109df565b61044e565b0190565b67ffffffffffffffff1690565b6125808161256a565b0361258757565b600080fd5b9050359061259982612577565b565b506125aa90602081019061258c565b90565b6125b69061256a565b9052565b906125f89060206125f06125e6604084016125d86000880188612501565b908683036000880152612547565b948281019061259b565b9101906125ad565b90565b6126a59161269761268c60c083016126236126196000870187612408565b600086019061241a565b61263d6126336020870187612427565b6020860190612439565b61265761264d6040870187612446565b6040860190612458565b6126716126676060870187612446565b6060860190612458565b61267e6080860186612474565b9085830360808701526124c3565b9260a08101906124e6565b9060a08184039101526125ba565b90565b9392906126d46040916126dc946126c7606089019260008a019061051d565b87820360208901526125fb565b940190610722565b565b6126e6610273565b3d6000823e3d90fd5b91506020906126fc6117a0565b5061270f61270a60046123bb565b6123c8565b61273b633808a90b94929461274661272760056117e0565b61272f610273565b978896879586956123d4565b8552600485016126a8565b03915afa90811561278b5760009161275d575b5090565b61277e915060203d8111612784575b612776818361097e565b8101906123e9565b38612759565b503d61276c565b6126de565b90151581601c52670a5a2e7a0000000060085233600052806030600c205560005260601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a3565b67ffffffffffffffff81116127fe576127fa60209161044e565b0190565b610968565b90929192612818612813826127e0565b6109a7565b9381855260208501908284011161283457612832926109df565b565b610963565b612844913691612803565b90565b92919092612857818584916116a3565b61286084612fba565b61286c575b5050505050565b6128829461287c91949293612839565b92612fc7565b3880808080612865565b90565b6128999054611409565b90565b6128a4611e1a565b90565b6128af6113ee565b506128c26128bc82612e93565b156102d7565b612923576128d86128d3600661288c565b61288f565b6128eb6128e56000611af4565b916104d7565b1415600014612915576129119061290c612906600692613334565b91611505565b61338f565b5b90565b5061291e61289c565b612912565b600063677510db60e11b81528061293c600482016103d2565b0390fd5b61295f61295a6129649261295261165e565b5060036122b5565b6122cd565b6133bf565b90565b906129829161297d612978826117ed565b612b21565b612984565b565b9061298e91612f90565b565b9061299a91612967565b565b5190565b634e487b7160e01b600052603260045260246000fd5b906129c08261299c565b8110156129d1576020809102010190565b6129a0565b6129e090516104d7565b90565b906129ed8261299c565b906129f86000611af4565b5b80612a0c612a06856104d7565b916104d7565b1015612a3d57612a3890612a3333612a2d612a288885906129b6565b6129d6565b90613058565b611b10565b6129f9565b50915050565b612a4b6113ee565b50612a566009611505565b90565b90612a62611351565b50601c52670a5a2e7a000000006008526000526030600c205490565b612a9790612a92612a8d61157e565b612b21565b612ac5565b565b612aa290611663565b90565b90612aba612ab5612ac1926117a5565b612a99565b8254611b3c565b9055565b612ad0906005612aa5565b565b612adb90612a7e565b565b612ae5611351565b50612aef816133df565b8015612b12575b908115612b02575b5090565b612b0c915061346c565b38612afe565b50612b1c81613406565b612af6565b612b3390612b2d612f83565b90613591565b565b60207f2073616c65507269636500000000000000000000000000000000000000000000917f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201520152565b612b90602a604092610420565b612b9981612b35565b0190565b612bb39060208101906000818303910152612b83565b90565b15612bbd57565b612bc5610273565b62461bcd60e51b815280612bdb60048201612b9d565b0390fd5b60007f455243323938313a20696e76616c696420726563656976657200000000000000910152565b612c146019602092610420565b612c1d81612bdf565b0190565b612c379060208101906000818303910152612c07565b90565b15612c4157565b612c49610273565b62461bcd60e51b815280612c5f60048201612c21565b0390fd5b612c6d60406109a7565b90565b90565b90612c88612c83612c8f92612304565b612c70565b82546115f4565b9055565b60a01b90565b90612cb36bffffffffffffffffffffffff60a01b91612c93565b9181191691161790565b612cd1612ccc612cd69261036f565b6115bd565b61036f565b90565b90565b90612cf1612cec612cf892612cbd565b612cd9565b8254612c99565b9055565b90612d2760206000612d2d94612d1f828201612d19848801611915565b90612c73565b01920161194a565b90612cdc565b565b90612d3991612cfc565b565b90612dac612db392612d6783612d60612d5a612d55612e7c565b61036f565b9161036f565b1115612bb6565b612d8d81612d86612d80612d7b600061193e565b61033f565b9161033f565b1415612c3a565b91612da3612d99612c63565b936000850161186f565b602083016118b5565b6000612d2f565b565b9060001960601c9081169181168360005280673ec412a9852d173d60c11b17601c5260206000208401840191825416918215612e4a57818385931490151715612e24575b600101557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600038a4565b9050816000526030600c205415612e3c578290612df9565b634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b600090565b90565b612e74612e6f612e7992612e5d565b6115bd565b61036f565b90565b612e84612e58565b50612e90612710612e60565b90565b612e9b611351565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b151590565b60601b60601c81600052673ec412a9852d173d60c11b601c5260206000208201820180548060601b612f4b578217905580600052601c600c2060018154019063ffffffff8216830215612f36575560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a4565b67ea553b3401336cea831560021b526004601cfd5b63c991cbb16000526004601cfd5b90612f7b612f76612f8093612f6f81859061362a565b60036122b5565b6122cd565b613711565b50565b612f8b611527565b503390565b90612fb2612fad612fb793612fa681859061374c565b60036122b5565b6122cd565b6137e6565b50565b612fc2611351565b503b90565b9160209160a460405195869363150b7a0296878652338787015260601b60601c6040860152606085015260808085015280518091818060a0880152613044575b505001906000601c8401915af115613034575b60e01b90510361302657565b63d1a57ed66000526004601cfd5b3d1561301a57503d6000823e3d90fd5b818760c08801920160045afa508038613007565b6130618261221b565b5060601b60601c8160005280673ec412a9852d173d60c11b17601c52602060002082018201908154918260601b60601c918215613114578260005281600101549081811484821417901517156130fc575b60009383916130f1575b189055601c600c20600181540390557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4565b8483600101556130bc565b6030600c20546130b257634b6e7f186000526004601cfd5b63ceea21b66000526004601cfd5b9261314c906131456131539461313e6131919a989560076121eb565b60086121eb565b60066121eb565b60096121eb565b61316561315e610f38565b8290612f59565b613177613170611fcd565b8290612f59565b613189613182611396565b8290612f59565b919091613821565b565b60007f455243323938313a20496e76616c696420706172616d65746572730000000000910152565b6131c8601b602092610420565b6131d181613193565b0190565b6131eb90602081019060008183039101526131bb565b90565b156131f557565b6131fd610273565b62461bcd60e51b815280613213600482016131d5565b0390fd5b6132939061328c61329894936132478561324061323a613235612e7c565b61036f565b9161036f565b1115612bb6565b61326d8161326661326061325b600061193e565b61033f565b9161033f565b14156131ee565b93613283613279612c63565b956000870161186f565b602085016118b5565b600161182b565b612d2f565b565b6132a2611527565b5080600052673ec412a9852d173d60c11b601c5260206000208101015460601b60601c90565b90565b6132d76132dc91611663565b61180f565b90565b6132f36132ee6132f8926104d7565b6115bd565b610334565b90565b6133276133226133319361331d600061332c95613316611527565b50016132c8565b61389c565b6132cb565b6132df565b6122f8565b90565b9061333d6113ee565b506080604051019160208301604052600083528290600a6000198092955b019481810660300186530493841561337a5790600a919080929161335b565b93505082602091039203918252565b90565b90565b6133bc916133b16133ab6133b7936133a56113ee565b50613389565b91613389565b906138c3565b61338c565b90565b6133d760006133dc926133d061165e565b50016132c8565b613945565b90565b6133e7611351565b5060e01c635b5e139f8114906301ffc9a76380ac58cd82149114171790565b61340e611351565b506134188161395d565b801561345d575b8015613442575b908115613432575b5090565b61343c915061399d565b3861342e565b50600061345761345183610288565b91610288565b14613426565b506134678161399d565b61341f565b613474611351565b5061347e8161399d565b90811561348a575b5090565b61349491506139dd565b38613486565b90565b6134b16134ac6134b69261349a565b6115bd565b6104d7565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6134f2601780926134b9565b6134fb816134be565b0190565b61352461351b926020926135128161041c565b948580936134b9565b93849101610429565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b61355c601180926134b9565b61356581613528565b0190565b61358361358e939261357d613588936134e6565b906134ff565b613550565b906134ff565b90565b906135a66135a0838390612328565b156102d7565b6135ae575050565b613626916136046135dd6135cd6135c761360995613a6b565b936132cb565b6135d7602061349d565b90613c84565b916135f56135e9610273565b93849260208401613569565b6020820181038252038261097e565b61338c565b613611610273565b91829162461bcd60e51b835260048301610489565b0390fd5b61363e613638828490612328565b156102d7565b613647575b5050565b61366a6001613665600061365d600286906117b1565b018590612310565b611ec5565b90613673612f83565b906136b06136aa6136a47f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956117a5565b92612304565b92612304565b926136b9610273565b806136c3816103d2565b0390a43880613643565b6136d6906115c0565b90565b6136ed6136e86136f292610334565b6115bd565b6104d7565b90565b61370961370461370e926104d7565b610f16565b6106dc565b90565b9061374461373e61373961373460006137499661372c611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613e7a565b90565b613757818390612328565b613760575b5050565b613783600061377e6000613776600286906117b1565b018590612310565b611ec5565b9061378c612f83565b906137c96137c36137bd7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956117a5565b92612304565b92612304565b926137d2610273565b806137dc816103d2565b0390a4388061375c565b9061381961381361380e613809600061381e96613801611351565b5001946136cd565b6136d9565b6136f5565b916132c8565b613f5f565b90565b9061383761383c939261383261157e565b612f59565b614069565b565b5490565b600052602060002090565b6138568161383e565b82101561387157613868600191613842565b91020190600090565b6129a0565b61388690600861388b93026120ee565b6117c9565b90565b906138999154613876565b90565b6138bb9160006138b5926138ae6117a0565b500161384d565b9061388e565b90565b606090565b9190916138ce6138be565b5060405192601f1980835193818060208701165b80830151818a0152019081156138fd578190915082906138e2565b505050815191838601828060208601165b80840151818401520191821561392b57828091935050839061390e565b505050506020910180828501019060008252845201604052565b600061395a9161395361165e565b500161383e565b90565b613965611351565b508061398061397a63152a902d60e11b610288565b91610288565b1490811561398d575b5090565b6139979150614089565b38613989565b6139a5611351565b50806139c06139ba635a05180f60e01b610288565b91610288565b149081156139cd575b5090565b6139d791506140af565b386139c9565b6139e5611351565b5080613a006139fa634e821d3360e11b610288565b91610288565b14908115613a0d575b5090565b613a179150613406565b38613a09565b90565b60ff1690565b613a3a613a35613a3f92613a1d565b6115bd565b613a20565b90565b613a4c6014613a26565b90565b613a63613a5e613a6892613a20565b6115bd565b6104d7565b90565b613a88613a83613a9e92613a7d6113ee565b506136cd565b6136d9565b613a98613a93613a42565b613a4f565b90613c84565b90565b90565b613ab8613ab3613abd92613aa1565b6115bd565b6104d7565b90565b90613ad2613acd836127e0565b6109a7565b918252565b369037565b90613b01613ae983613ac0565b92602080613af786936127e0565b9201910390613ad7565b565b600360fc1b90565b5190565b90613b1982613b0b565b811015613b2b57600160209102010190565b6129a0565b600f60fb1b90565b90565b613b4f613b4a613b5492613b38565b6115bd565b6104d7565b90565b613b60906104d7565b60008114613b6f576001900390565b611973565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613b93613b74565b90565b90565b613bad613ba8613bb292613b96565b6115bd565b6104d7565b90565b60f81b90565b90565b613bd2613bcd613bd792613bbb565b6115bd565b613a20565b90565b613bf990613bf3613bed613bfe94613a20565b916104d7565b906120ee565b6104d7565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b613c3560208092610420565b613c3e81613c01565b0190565b613c589060208101906000818303910152613c29565b90565b15613c6257565b613c6a610273565b62461bcd60e51b815280613c8060048201613c42565b0390fd5b9190613c8e6113ee565b50613d28613d18613cc4613cbf613caf6002613caa8791613aa4565b611989565b613cb96002613aa4565b90611b76565b613adc565b92613ccd613b03565b613ce685613ce060009360001a93611af4565b90613b0f565b53613cef613b30565b613d0885613d0260019360001a93613b3b565b90613b0f565b53613d136002613aa4565b611989565b613d226001613b3b565b90611b76565b925b83613d3e613d386001613b3b565b916104d7565b1115613da557613d4c613b8b565b81613d57600f613b99565b16916010831015613da057613d73613d9492613d9a941a613bb5565b613d838591889060001a92613b0f565b53613d8e6004613bbe565b90613bda565b93613b57565b92613d2a565b6129a0565b613dcd929350613dc890613dc2613dbc6000611af4565b916104d7565b14613c5b565b61338c565b90565b90565b600052602060002090565b5490565b613deb81613dde565b821015613e0657613dfd600191613dd3565b91020190600090565b6129a0565b9190613e21613e1c613e29936117a5565b612a99565b90835461201b565b9055565b9081549168010000000000000000831015613e5d5782613e55916001613e5b95018155613de2565b90613e0b565b565b610968565b90613e6c906117a5565b600052602052604060002090565b613e82611351565b50613e97613e918284906140ef565b156102d7565b600014613eda57613ed0613ed592613ebb613eb460008501613dd0565b8290613e2d565b6001613ec96000850161383e565b9301613e62565b611b56565b600190565b5050600090565b613ef0613ef6919392936104d7565b926104d7565b8203918211613f0157565b611973565b634e487b7160e01b600052603160045260246000fd5b613f2e91613f286117a0565b91613e0b565b565b613f3981613dde565b8015613f5a576001900390613f57613f518383613de2565b90613f1c565b55565b613f06565b613f67611351565b50613f7e613f79600183018490613e62565b611680565b9081613f93613f8d6000611af4565b916104d7565b14156000146140615761401392600161400e9284613fbc600096613fb685613b3b565b90613ee1565b613fd9613fca88850161383e565b613fd386613b3b565b90613ee1565b80613fec613fe6846104d7565b916104d7565b03614018575b505050614008614003868301613dd0565b613f30565b01613e62565b612063565b600190565b6140599261404b614037614031614054948c890161384d565b9061388e565b9361404585918c890161384d565b90613e0b565b91858501613e62565b611b56565b388080613ff2565b505050600090565b90614080614079614087936115e8565b600461161e565b6005612aa5565b565b614091611351565b506140ab6140a56301ffc9a760e01b610288565b91610288565b1490565b6140b7611351565b50806140d26140cc637965db0b60e01b610288565b91610288565b149081156140df575b5090565b6140e9915061395d565b386140db565b61410d91600161410892614101611351565b5001613e62565b611680565b61412061411a6000611af4565b916104d7565b14159056fea264697066735822122029a6d041f14c226b015d09bed1f38d00ed477c06417cdefc834389f375cb9b8964736f6c634300081b003360806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x2762 PUSH2 0x397 DUP3 CODECOPY PUSH2 0x2762 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0x7737 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x34 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x144 PUSH2 0x14E SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15A SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x166 SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x171 PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x179 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x419C DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1C5 JUMPI PUSH2 0x1A1 DUP3 SWAP2 PUSH2 0x419C PUSH2 0x2AF9 DUP5 CODECOPY PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x1C0 JUMPI PUSH2 0x1B9 PUSH2 0x1BE SWAP3 PUSH2 0x15D JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x1DF PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EF SWAP1 PUSH2 0xAB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x207 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x220 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x209 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x233 SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23F SWAP1 PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25A PUSH2 0x255 PUSH2 0x261 SWAP3 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x26D PUSH2 0x34 JUMP JUMPDEST SWAP1 PUSH2 0xAA2 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2BD JUMPI DUP3 SWAP2 PUSH2 0x297 SWAP2 PUSH2 0xAA2 PUSH2 0x6C95 DUP6 CODECOPY PUSH2 0x1F3 JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x2B8 JUMPI PUSH2 0x2B1 PUSH2 0x2B6 SWAP3 PUSH1 0x1 PUSH2 0x245 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C2 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x2F6 SWAP2 PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x303 SWAP1 SLOAD PUSH2 0x2E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x32A PUSH2 0x325 PUSH2 0x331 SWAP3 PUSH2 0x306 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33F PUSH1 0x0 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x34A DUP3 PUSH1 0x0 PUSH2 0x315 JUMP JUMPDEST SWAP1 PUSH2 0x37E PUSH2 0x378 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x387 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x391 DUP2 PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0xDEFBCE9 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8BDB5FD2 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x578 JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH2 0x501 JUMP JUMPDEST PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x3B7 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x117 SWAP1 PUSH2 0xED JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x131 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST SWAP1 PUSH2 0x149 PUSH2 0x142 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x10D JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x169 JUMPI PUSH2 0x165 PUSH1 0x20 SWAP2 PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x18F PUSH2 0x18A DUP3 PUSH2 0x14B JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x1AB JUMPI PUSH2 0x1A9 SWAP3 PUSH2 0x16E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE8 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1CE JUMPI DUP2 PUSH1 0x20 PUSH2 0x1CB SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x17A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1ED DUP2 PUSH2 0x1D3 JUMP JUMPDEST SUB PUSH2 0x1F4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x206 DUP3 PUSH2 0x1E4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x214 DUP2 PUSH2 0x208 JUMP JUMPDEST SUB PUSH2 0x21B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x22D DUP3 PUSH2 0x20B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x140 DUP2 DUP4 SUB SLT PUSH2 0x328 JUMPI PUSH2 0x247 DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x255 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x323 JUMPI DUP2 PUSH2 0x276 SWAP2 DUP6 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x31E JUMPI DUP3 PUSH2 0x297 SWAP2 DUP4 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x319 JUMPI DUP4 PUSH2 0x2B8 SWAP2 DUP5 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x314 JUMPI DUP2 PUSH2 0x2D9 SWAP2 DUP6 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH2 0x2E7 DUP3 PUSH1 0xC0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x311 PUSH2 0x2F8 DUP5 PUSH1 0xE0 DUP6 ADD PUSH2 0x1F9 JUMP JUMPDEST SWAP4 PUSH2 0x307 DUP2 PUSH2 0x100 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH2 0x120 ADD PUSH2 0x220 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x336 SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x34E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x38D JUMPI PUSH2 0x389 PUSH2 0x378 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F JUMP JUMPDEST SWAP9 SWAP8 SWAP1 SWAP8 SWAP7 SWAP2 SWAP7 SWAP6 SWAP3 SWAP6 SWAP5 SWAP4 SWAP5 PUSH2 0x756 JUMP JUMPDEST PUSH2 0x380 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3AC JUMPI PUSH2 0x3A9 SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x3E5 JUMPI PUSH2 0x3CF PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x392 JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x3E1 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x3F5 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x419 SWAP1 PUSH1 0x8 PUSH2 0x41E SWAP4 MUL PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x42C SWAP2 SLOAD PUSH2 0x409 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x43C PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x421 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x456 PUSH2 0x451 PUSH2 0x45B SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x467 SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x473 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47F SWAP1 PUSH2 0x46A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x497 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x476 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4C9 JUMPI PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4B4 PUSH2 0x42F JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x483 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4FC JUMPI PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0x9CB JUMP JUMPDEST PUSH2 0x4EE PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x4F8 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x53E JUMPI PUSH2 0x53A PUSH2 0x529 PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F JUMP JUMPDEST SWAP9 SWAP8 SWAP1 SWAP8 SWAP7 SWAP2 SWAP7 SWAP6 SWAP3 SWAP6 SWAP5 SWAP4 SWAP5 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x531 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x573 JUMPI PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x56F PUSH2 0x55E PUSH2 0xA6E JUMP JUMPDEST PUSH2 0x566 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x5A6 JUMPI PUSH2 0x590 PUSH2 0x58B CALLDATASIZE PUSH1 0x4 PUSH2 0x392 JUMP JUMPDEST PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x598 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x5A2 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x5D6 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x5C5 JUMP JUMPDEST PUSH2 0x606 PUSH2 0x60F PUSH1 0x20 SWAP4 PUSH2 0x614 SWAP4 PUSH2 0x5FD DUP2 PUSH2 0x5B5 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x5B9 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x621 SWAP1 PUSH2 0x1D3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x62E SWAP1 PUSH2 0x208 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP5 PUSH2 0x6A5 PUSH2 0x6B0 SWAP2 PUSH2 0x697 PUSH2 0x6C4 SWAP8 PUSH2 0x689 PUSH2 0x100 SWAP12 SWAP16 SWAP15 SWAP13 SWAP7 SWAP9 PUSH2 0x67A PUSH2 0x6CB SWAP16 SWAP11 PUSH2 0x6BA SWAP11 DUP15 PUSH2 0x66D PUSH2 0x120 DUP3 ADD SWAP4 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP13 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP11 DUP3 SUB PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x80 DUP11 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP11 PUSH1 0xA0 DUP8 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD SWAP1 PUSH2 0x618 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST ADD SWAP1 PUSH2 0x625 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x6E9 PUSH2 0x6E4 DUP4 PUSH2 0x14B JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x6F8 PUSH1 0x0 PUSH2 0x6D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x703 PUSH2 0x6EE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x70F SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x71B SWAP1 PUSH2 0x706 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x727 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x740 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x74D PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x7C9 SWAP1 DUP5 PUSH2 0x7A7 DUP6 PUSH2 0x798 DUP13 DUP15 SWAP16 DUP1 SWAP13 SWAP11 SWAP16 SWAP14 SWAP12 SWAP9 SWAP10 SWAP14 PUSH2 0x776 PUSH2 0x5B0 JUMP JUMPDEST POP DUP11 SWAP5 SWAP7 SWAP3 DUP14 DUP14 DUP13 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0x78C PUSH2 0x93 JUMP JUMPDEST SWAP11 DUP12 SWAP10 PUSH1 0x20 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0x7B9 PUSH2 0x7B3 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x7C3 PUSH2 0x6FB JUMP JUMPDEST SWAP2 PUSH2 0xCF6 JUMP JUMPDEST SWAP9 PUSH2 0x7DB PUSH2 0x7D6 DUP12 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST SWAP6 PUSH4 0x4C62CD9B SWAP4 SWAP8 SWAP10 SWAP3 SWAP5 SWAP6 SWAP9 SWAP2 SWAP1 SWAP2 DUP8 EXTCODESIZE ISZERO PUSH2 0x89D JUMPI PUSH1 0x0 SWAP10 PUSH2 0x813 SWAP8 DUP12 SWAP8 PUSH2 0x81E SWAP7 PUSH2 0x807 PUSH2 0x93 JUMP JUMPDEST SWAP15 DUP16 SWAP14 DUP15 SWAP13 DUP14 SWAP12 PUSH2 0x72F JUMP JUMPDEST DUP12 MSTORE PUSH1 0x4 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x898 JUMPI PUSH2 0x86B JUMPI JUMPDEST POP DUP1 PUSH2 0x865 PUSH32 0xD8AD75647A93DE9D8D617559D87F1C27BC23FB6237B94054BAF34AAFBE85AD03 SWAP2 PUSH2 0x85C PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x88B SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x891 JUMPI JUMPDEST PUSH2 0x883 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0x82D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x879 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH2 0x8B3 SWAP1 PUSH2 0x8AE PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x8C7 PUSH2 0x8CC SWAP2 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8D9 SWAP1 SLOAD PUSH2 0x8BB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0x8E9 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x96A JUMPI PUSH2 0x926 SWAP3 PUSH2 0x91B PUSH1 0x0 DUP1 SWAP5 PUSH2 0x90F PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x72F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x33A JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x938 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x958 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x95E JUMPI JUMPDEST PUSH2 0x950 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0x935 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x946 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH2 0x978 SWAP1 PUSH2 0x8A2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x982 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0x98A PUSH2 0x9B7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9A3 PUSH2 0x99E PUSH2 0x9A8 SWAP3 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B4 SWAP1 PUSH2 0x98F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C9 PUSH2 0x9C4 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9D3 PUSH2 0x97A JUMP JUMPDEST JUMP JUMPDEST SWAP8 SWAP1 SWAP7 PUSH2 0xA1D SWAP7 PUSH2 0xA3F SWAP11 SWAP4 SWAP7 PUSH2 0xA0E SWAP7 SWAP6 SWAP10 PUSH2 0x9F0 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP8 SWAP10 SWAP6 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0xA02 PUSH2 0x93 JUMP JUMPDEST SWAP11 DUP12 SWAP10 PUSH1 0x20 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xA2F PUSH2 0xA29 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xA39 PUSH2 0x6FB JUMP JUMPDEST SWAP2 PUSH2 0xF95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xA59 PUSH2 0xA5E SWAP2 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0xA42 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA6B SWAP1 SLOAD PUSH2 0xA4D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA76 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0xA81 PUSH1 0x0 PUSH2 0xA61 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA95 SWAP1 PUSH2 0xA90 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAF2 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0xAFB DUP2 PUSH2 0xA97 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB15 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAE5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB1F JUMPI JUMP JUMPDEST PUSH2 0xB27 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB3D PUSH1 0x4 DUP3 ADD PUSH2 0xAFF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB70 SWAP1 PUSH2 0xB6B DUP2 PUSH2 0xB64 PUSH2 0xB5E PUSH2 0xB59 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xB18 JUMP JUMPDEST PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xB7B SWAP1 PUSH2 0xA84 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xB8C PUSH2 0xB91 SWAP2 PUSH2 0x208 JUMP JUMPDEST PUSH2 0xB7D JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xBA4 SWAP1 PUSH2 0xB95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBB0 SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBBF PUSH2 0xBC4 SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBF2 PUSH2 0xBE9 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xBE0 DUP2 PUSH2 0x6D3 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xBC8 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xC1A PUSH1 0x20 DUP5 PUSH2 0xC12 PUSH2 0xC22 SWAP7 PUSH2 0xC29 SWAP12 SWAP11 SWAP9 PUSH2 0xB80 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xBB3 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xBB3 JUMP JUMPDEST ADD SWAP1 PUSH2 0xBCD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC43 PUSH2 0xC3E PUSH2 0xC48 SWAP3 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC54 SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC60 SWAP1 PUSH2 0xC4B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC6C SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC78 SWAP1 PUSH2 0xC63 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC84 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xCAF PUSH2 0xCB8 PUSH1 0x20 SWAP4 PUSH2 0xCBD SWAP4 PUSH2 0xCA6 DUP2 PUSH2 0x6D3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xC87 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xCE6 PUSH2 0xCF3 SWAP5 SWAP3 SWAP4 PUSH2 0xCDC PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xC90 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD86 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xD06 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0xD46 DUP6 SWAP2 PUSH2 0xD37 PUSH2 0xD21 PUSH2 0xD1C PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xD2B PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xBF6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xD58 PUSH2 0xD52 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD68 PUSH1 0x20 DUP3 ADD PUSH2 0x136 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x12A3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD81 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xC2F JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST SWAP3 PUSH2 0xDA0 PUSH2 0xD9B PUSH2 0xD96 DUP7 PUSH2 0xC57 JUMP JUMPDEST PUSH2 0xC6F JUMP JUMPDEST PUSH2 0xC7B JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xDB9 PUSH2 0xDB4 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 PUSH2 0xDE1 SWAP2 PUSH2 0xDEC DUP3 SWAP7 PUSH2 0xDD5 PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x72F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xCC1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE2B JUMPI PUSH2 0xDFE JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xE1E SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE24 JUMPI JUMPDEST PUSH2 0xE16 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0xDFB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE0C JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xE69 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0xE72 DUP2 PUSH2 0xE35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE8C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xE5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE96 JUMPI JUMP JUMPDEST PUSH2 0xE9E PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xEB4 PUSH1 0x4 DUP3 ADD PUSH2 0xE76 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEE2 PUSH2 0xEC3 PUSH2 0xA6E JUMP JUMPDEST PUSH2 0xEDC PUSH2 0xED6 PUSH2 0xED1 PUSH2 0x124B JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xE8F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEFB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xEE4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xF0E SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF29 PUSH2 0xF24 PUSH2 0xF30 SWAP3 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0xF11 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xEEA JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF3E PUSH1 0x0 PUSH2 0xA61 JUMP JUMPDEST PUSH2 0xF49 DUP3 PUSH1 0x0 PUSH2 0xF14 JUMP JUMPDEST SWAP1 PUSH2 0xF7D PUSH2 0xF77 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xF05 JUMP JUMPDEST SWAP2 PUSH2 0xF05 JUMP JUMPDEST SWAP2 PUSH2 0xF86 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xF90 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x1028 SWAP3 SWAP2 PUSH2 0xFD2 PUSH2 0xFE1 SWAP3 PUSH2 0xFA9 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xFBE PUSH2 0xFB9 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH2 0xFC6 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xBF6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xFF3 PUSH2 0xFED DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0x1003 PUSH1 0x20 DUP3 ADD PUSH2 0x136 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x12A3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0x1021 PUSH2 0x101B DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x1258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1034 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x106C PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x1075 DUP2 PUSH2 0x1037 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x108F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x105F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1099 JUMPI JUMP JUMPDEST PUSH2 0x10A1 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10B7 PUSH1 0x4 DUP3 ADD PUSH2 0x1079 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10EF PUSH1 0x20 DUP1 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x10F8 DUP2 PUSH2 0x10BB JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1112 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x111C JUMPI JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x113A PUSH1 0x4 DUP3 ADD PUSH2 0x10FC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1173 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x117C DUP2 PUSH2 0x113E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1196 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1166 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x11A0 JUMPI JUMP JUMPDEST PUSH2 0x11A8 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x11BE PUSH1 0x4 DUP3 ADD PUSH2 0x1180 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x11CD PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0x11F4 PUSH2 0x11DA ADDRESS PUSH2 0x102B JUMP JUMPDEST BALANCE PUSH2 0x11ED PUSH2 0x11E7 DUP5 PUSH2 0xC2C JUMP JUMPDEST SWAP2 PUSH2 0xC2C JUMP JUMPDEST LT ISZERO PUSH2 0x1092 JUMP JUMPDEST PUSH2 0x121A PUSH2 0x1200 DUP4 PUSH2 0x6D3 JUMP JUMPDEST PUSH2 0x1213 PUSH2 0x120D PUSH1 0x0 PUSH2 0xC2F JUMP JUMPDEST SWAP2 PUSH2 0xC2C JUMP JUMPDEST EQ ISZERO PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x1249 DUP3 PUSH2 0x1242 PUSH2 0x123C PUSH2 0x1237 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x1199 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1253 PUSH2 0x5B0 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1276 SWAP2 PUSH2 0x1265 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP1 PUSH2 0x1270 ADDRESS PUSH2 0x102B JUMP JUMPDEST SWAP2 PUSH2 0x1279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x1288 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PUSH19 0x369D1D46611771220D986B45A922FA914BE16A LOG4 0xD3 0xDB 0xC4 0xE KECCAK256 POP PUSH22 0x31653264736F6C634300081B003360A060405234602B JUMPI PUSH1 0xE PUSH1 0x3A JUMP JUMPDEST PUSH1 0x14 PUSH1 0x2F JUMP JUMPDEST PUSH2 0x415B PUSH2 0x41 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x1EF7 ADD MSTORE PUSH2 0x415B SWAP1 RETURN JUMPDEST PUSH1 0x35 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x134C JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x26D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x4634D8D EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x2E73E0FD EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x4C62CD9B EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x5944C753 EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x7E518EC8 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xDC8E92EA EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1B9 JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0x1319 JUMP JUMPDEST PUSH2 0x12E3 JUMP JUMPDEST PUSH2 0x1280 JUMP JUMPDEST PUSH2 0x124D JUMP JUMPDEST PUSH2 0x114C JUMP JUMPDEST PUSH2 0x1117 JUMP JUMPDEST PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0xF50 JUMP JUMPDEST PUSH2 0xEDD JUMP JUMPDEST PUSH2 0xE13 JUMP JUMPDEST PUSH2 0xDE0 JUMP JUMPDEST PUSH2 0xDAA JUMP JUMPDEST PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xD13 JUMP JUMPDEST PUSH2 0xCA8 JUMP JUMPDEST PUSH2 0xC73 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST PUSH2 0xBAD JUMP JUMPDEST PUSH2 0xB35 JUMP JUMPDEST PUSH2 0x92B JUMP JUMPDEST PUSH2 0x901 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST PUSH2 0x899 JUMP JUMPDEST PUSH2 0x865 JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x6B2 JUMP JUMPDEST PUSH2 0x642 JUMP JUMPDEST PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST PUSH2 0x540 JUMP JUMPDEST PUSH2 0x4A2 JUMP JUMPDEST PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x29D DUP2 PUSH2 0x288 JUMP JUMPDEST SUB PUSH2 0x2A4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2B6 DUP3 PUSH2 0x294 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2D2 JUMPI PUSH2 0x2CF SWAP2 PUSH1 0x0 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x2E5 SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2FD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2DC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x32F JUMPI PUSH2 0x32B PUSH2 0x31A PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B8 JUMP JUMPDEST PUSH2 0x1356 JUMP JUMPDEST PUSH2 0x322 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x348 SWAP1 PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x354 DUP2 PUSH2 0x33F JUMP JUMPDEST SUB PUSH2 0x35B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x36D DUP3 PUSH2 0x34B JUMP JUMPDEST JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x389 DUP2 PUSH2 0x36F JUMP JUMPDEST SUB PUSH2 0x390 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3A2 DUP3 PUSH2 0x380 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3CD JUMPI DUP1 PUSH2 0x3C1 PUSH2 0x3CA SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x407 JUMPI PUSH2 0x3F1 PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x3A4 JUMP JUMPDEST SWAP1 PUSH2 0x13E2 JUMP JUMPDEST PUSH2 0x3F9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x403 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x417 JUMPI JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x43D JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x42C JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x477 PUSH2 0x480 PUSH1 0x20 SWAP4 PUSH2 0x485 SWAP4 PUSH2 0x46E DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x420 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x49F SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x458 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x4D2 JUMPI PUSH2 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x4CE PUSH2 0x4BD PUSH2 0x1511 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4E3 DUP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4EA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x4FC DUP3 PUSH2 0x4DA JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x518 JUMPI PUSH2 0x515 SWAP2 PUSH1 0x0 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x526 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x53E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x570 JUMPI PUSH2 0x56C PUSH2 0x55B PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x152C JUMP JUMPDEST PUSH2 0x563 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x59E JUMPI DUP1 PUSH2 0x592 PUSH2 0x59B SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x5B7 PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x156F JUMP JUMPDEST PUSH2 0x5BF PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x5C9 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x5E7 JUMPI PUSH2 0x5E4 SWAP2 PUSH1 0x0 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x61A JUMPI PUSH2 0x604 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST PUSH2 0x60C PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x616 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x628 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x640 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x672 JUMPI PUSH2 0x652 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x66E PUSH2 0x65D PUSH2 0x168D JUMP JUMPDEST PUSH2 0x665 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x6AD JUMPI PUSH2 0x6AA PUSH2 0x693 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x6A1 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x6C6 PUSH2 0x6C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x6CE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x6D8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6E8 DUP2 PUSH2 0x6DC JUMP JUMPDEST SUB PUSH2 0x6EF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x701 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71D JUMPI PUSH2 0x71A SWAP2 PUSH1 0x0 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x72B SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x743 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x775 JUMPI PUSH2 0x771 PUSH2 0x760 PUSH2 0x75B CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x768 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x7A3 JUMPI DUP1 PUSH2 0x797 PUSH2 0x7A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x7CA SWAP3 SWAP5 SWAP4 PUSH2 0x7C3 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST ADD SWAP1 PUSH2 0x61F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x7FE JUMPI PUSH2 0x7E5 PUSH2 0x7DF CALLDATASIZE PUSH1 0x4 PUSH2 0x77A JUMP JUMPDEST SWAP1 PUSH2 0x19F6 JUMP JUMPDEST SWAP1 PUSH2 0x7FA PUSH2 0x7F1 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x7A8 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x832 JUMPI PUSH2 0x81C PUSH2 0x816 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1C60 JUMP JUMPDEST PUSH2 0x824 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x82E DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x860 JUMPI DUP1 PUSH2 0x854 PUSH2 0x85D SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x894 JUMPI PUSH2 0x87E PUSH2 0x878 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1C95 JUMP JUMPDEST PUSH2 0x886 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x890 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8C8 JUMPI PUSH2 0x8B2 PUSH2 0x8AC CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B JUMP JUMPDEST PUSH2 0x8BA PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8C4 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x8FC JUMPI PUSH2 0x8E6 PUSH2 0x8E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x575 JUMP JUMPDEST SWAP1 PUSH2 0x1DF7 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x8F8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0x915 PUSH2 0x90F CALLDATASIZE PUSH1 0x4 PUSH2 0x677 JUMP JUMPDEST SWAP2 PUSH2 0x1E32 JUMP JUMPDEST PUSH2 0x91D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x927 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x959 JUMPI PUSH2 0x943 PUSH2 0x93E CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x1E6D JUMP JUMPDEST PUSH2 0x94B PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x955 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x988 SWAP1 PUSH2 0x44E JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x9A2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x9BA PUSH2 0x9B3 PUSH2 0x273 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9DA JUMPI PUSH2 0x9D6 PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0xA00 PUSH2 0x9FB DUP3 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0xA1C JUMPI PUSH2 0xA1A SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xA3F JUMPI DUP2 PUSH1 0x20 PUSH2 0xA3C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x9EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x120 DUP3 DUP5 SUB SLT PUSH2 0xB30 JUMPI PUSH2 0xA5E DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB2B JUMPI DUP2 PUSH2 0xA7F SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB26 JUMPI DUP3 PUSH2 0xAA0 SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB21 JUMPI DUP4 PUSH2 0xAC1 SWAP2 DUP5 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xB1C JUMPI DUP2 PUSH2 0xAE2 SWAP2 DUP6 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH2 0xAF0 DUP3 PUSH1 0xA0 DUP4 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0xB19 PUSH2 0xB01 DUP5 PUSH1 0xC0 DUP6 ADD PUSH2 0x395 JUMP JUMPDEST SWAP4 PUSH2 0xB0F DUP2 PUSH1 0xE0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH2 0x100 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xB6D JUMPI PUSH2 0xB57 PUSH2 0xB48 CALLDATASIZE PUSH1 0x4 PUSH2 0xA44 JUMP JUMPDEST SWAP8 SWAP7 SWAP1 SWAP7 SWAP6 SWAP2 SWAP6 SWAP5 SWAP3 SWAP5 PUSH2 0x1EE5 JUMP JUMPDEST PUSH2 0xB5F PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xB69 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0xBA8 JUMPI PUSH2 0xBA5 PUSH2 0xB8E DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP4 PUSH2 0xB9C DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x395 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xBDC JUMPI PUSH2 0xBC6 PUSH2 0xBC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB72 JUMP JUMPDEST SWAP2 PUSH2 0x1FC0 JUMP JUMPDEST PUSH2 0xBCE PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xBD8 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0xC3A JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC35 JUMPI DUP4 PUSH2 0xC0E SWAP2 DUP4 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xC30 JUMPI PUSH2 0xC2D SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xC6E JUMPI PUSH2 0xC58 PUSH2 0xC52 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE1 JUMP JUMPDEST SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH2 0xC60 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xC6A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCA3 JUMPI PUSH2 0xC9F PUSH2 0xC8E PUSH2 0xC89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x221B JUMP JUMPDEST PUSH2 0xC96 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xCD8 JUMPI PUSH2 0xCD4 PUSH2 0xCC3 PUSH2 0xCBE CALLDATASIZE PUSH1 0x4 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x2244 JUMP JUMPDEST PUSH2 0xCCB PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD0E JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xD09 JUMPI PUSH2 0xD06 SWAP3 ADD PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xD41 JUMPI PUSH2 0xD2B PUSH2 0xD26 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x22AA JUMP JUMPDEST PUSH2 0xD33 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xD3D DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD6F JUMPI DUP1 PUSH2 0xD63 PUSH2 0xD6C SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x6F4 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xDA5 JUMPI PUSH2 0xDA1 PUSH2 0xD90 PUSH2 0xD8A CALLDATASIZE PUSH1 0x4 PUSH2 0xD46 JUMP JUMPDEST SWAP1 PUSH2 0x22D0 JUMP JUMPDEST PUSH2 0xD98 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xDDB JUMPI PUSH2 0xDD7 PUSH2 0xDC6 PUSH2 0xDC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0xDCE PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE0E JUMPI PUSH2 0xDF8 PUSH2 0xDF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x237B JUMP JUMPDEST PUSH2 0xE00 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0xE0A DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0xE43 JUMPI PUSH2 0xE23 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xE3F PUSH2 0xE2E PUSH2 0x2386 JUMP JUMPDEST PUSH2 0xE36 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xE5B JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xE6E JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xE48 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xED8 JUMPI PUSH2 0xE8B DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xED3 JUMPI DUP4 PUSH2 0xEAC SWAP2 DUP4 ADD PUSH2 0xE4D JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xECE JUMPI PUSH2 0xECB SWAP3 ADD PUSH2 0xE60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0xF0E JUMPI PUSH2 0xF0A PUSH2 0xEF9 PUSH2 0xEF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xE73 JUMP JUMPDEST SWAP2 PUSH2 0x26EF JUMP JUMPDEST PUSH2 0xF01 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xF30 PUSH2 0xF2B PUSH2 0xF35 SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF42 PUSH1 0x0 PUSH2 0xF1C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF4D PUSH2 0xF38 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xF80 JUMPI PUSH2 0xF60 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0xF7C PUSH2 0xF6B PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF73 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x72F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH2 0xF8E DUP2 PUSH2 0x2D7 JUMP JUMPDEST SUB PUSH2 0xF95 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xFA7 DUP3 PUSH2 0xF85 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xFD2 JUMPI DUP1 PUSH2 0xFC6 PUSH2 0xFCF SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0xF9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1006 JUMPI PUSH2 0xFF0 PUSH2 0xFEA CALLDATASIZE PUSH1 0x4 PUSH2 0xFA9 JUMP JUMPDEST SWAP1 PUSH2 0x2790 JUMP JUMPDEST PUSH2 0xFF8 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1002 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x104F JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x104A JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH2 0x1045 JUMPI JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST PUSH2 0x100B JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x10B0 JUMPI PUSH2 0x106C DUP2 PUSH1 0x0 DUP5 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x107A DUP3 PUSH1 0x20 DUP6 ADD PUSH2 0x360 JUMP JUMPDEST SWAP3 PUSH2 0x1088 DUP4 PUSH1 0x40 DUP4 ADD PUSH2 0x4EF JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x10AB JUMPI PUSH2 0x10A7 SWAP3 ADD PUSH2 0x1015 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x10C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1054 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x2847 JUMP JUMPDEST PUSH2 0x10D4 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x10DE DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x1112 JUMPI PUSH2 0x110E PUSH2 0x10FD PUSH2 0x10F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FE JUMP JUMPDEST PUSH2 0x28A7 JUMP JUMPDEST PUSH2 0x1105 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1147 JUMPI PUSH2 0x1143 PUSH2 0x1132 PUSH2 0x112D CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2940 JUMP JUMPDEST PUSH2 0x113A PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x62C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x117B JUMPI PUSH2 0x1165 PUSH2 0x115F CALLDATASIZE PUSH1 0x4 PUSH2 0x837 JUMP JUMPDEST SWAP1 PUSH2 0x2990 JUMP JUMPDEST PUSH2 0x116D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1177 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1198 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x11B2 PUSH2 0x11AD DUP3 PUSH2 0x1180 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x11EF JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x11D6 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x11E4 DUP5 DUP7 PUSH2 0x4EF JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x11C9 JUMP JUMPDEST PUSH2 0x1010 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1212 JUMPI DUP2 PUSH1 0x20 PUSH2 0x120F SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x119D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1248 JUMPI PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1243 JUMPI PUSH2 0x1240 SWAP3 ADD PUSH2 0x11F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x127B JUMPI PUSH2 0x1265 PUSH2 0x1260 CALLDATASIZE PUSH1 0x4 PUSH2 0x1217 JUMP JUMPDEST PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x126D PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1277 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x12B0 JUMPI PUSH2 0x1290 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C JUMP JUMPDEST PUSH2 0x12AC PUSH2 0x129B PUSH2 0x2A43 JUMP JUMPDEST PUSH2 0x12A3 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x12DE JUMPI DUP1 PUSH2 0x12D2 PUSH2 0x12DB SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x360 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST CALLVALUE PUSH2 0x1314 JUMPI PUSH2 0x1310 PUSH2 0x12FF PUSH2 0x12F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B5 JUMP JUMPDEST SWAP1 PUSH2 0x2A59 JUMP JUMPDEST PUSH2 0x1307 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST CALLVALUE PUSH2 0x1347 JUMPI PUSH2 0x1331 PUSH2 0x132C CALLDATASIZE PUSH1 0x4 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x2AD2 JUMP JUMPDEST PUSH2 0x1339 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x1343 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x279 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x135E PUSH2 0x1351 JUMP JUMPDEST POP PUSH4 0x76A4E239 PUSH1 0xE0 SHL PUSH2 0x1379 PUSH2 0x1373 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x1386 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1390 SWAP2 POP PUSH2 0x2ADD JUMP JUMPDEST CODESIZE PUSH2 0x1382 JUMP JUMPDEST PUSH32 0x6DB4061A20CA83A3BE756EE172BD37A029093AC5AFE4CE968C6D5435B43CB011 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13D4 SWAP2 PUSH2 0x13CF PUSH2 0x13CA PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x13D6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13E0 SWAP2 PUSH2 0x2D3B JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13EC SWAP2 PUSH2 0x13BA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x1429 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1424 JUMPI JUMP JUMPDEST PUSH2 0x13F3 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x1462 PUSH2 0x145B DUP4 PUSH2 0x1409 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1433 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x14BB JUMPI POP PUSH1 0x1 EQ PUSH2 0x147E JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x148B SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x143C JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x14A3 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x1490 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x1479 JUMP JUMPDEST SWAP1 PUSH2 0x14E0 SWAP2 PUSH2 0x1447 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1503 PUSH2 0x14FC SWAP3 PUSH2 0x14F3 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x14D6 JUMP JUMPDEST SUB DUP4 PUSH2 0x97E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x150E SWAP1 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1519 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x1524 PUSH1 0x7 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1534 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD DUP1 SLOAD PUSH1 0x60 SHL ISZERO PUSH2 0x1561 JUMPI PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x157C SWAP2 CALLER SWAP2 SWAP1 SWAP2 PUSH2 0x2DB5 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0x15BB SWAP1 PUSH2 0x15B6 PUSH2 0x15B1 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x163E JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15D4 PUSH2 0x15CF PUSH2 0x15D9 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15E5 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15F1 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1605 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1618 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1633 PUSH2 0x162E PUSH2 0x163A SWAP3 PUSH2 0x160F JUMP JUMPDEST PUSH2 0x161B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x164A PUSH2 0x1651 SWAP2 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x165C SWAP1 PUSH2 0x15A2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1678 PUSH2 0x167D SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168A SWAP1 SLOAD PUSH2 0x166C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1695 PUSH2 0x165E JUMP JUMPDEST POP PUSH2 0x16A0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP2 DUP3 AND SWAP1 DUP3 AND SWAP2 DUP4 PUSH1 0x0 MSTORE CALLER PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP1 DUP2 SLOAD DUP1 SWAP2 AND DUP4 DUP2 EQ DUP2 MUL ISZERO PUSH2 0x178B JUMPI POP DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD DUP1 CALLER EQ DUP5 CALLER EQ OR ISZERO PUSH2 0x1773 JUMPI JUMPDEST PUSH2 0x1767 JUMPI JUMPDEST DUP4 DUP4 XOR XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP5 MUL ISZERO PUSH2 0x1752 JUMPI SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP5 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD SSTORE PUSH2 0x16FB JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x16F6 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH8 0xCEEA21B6A1148100 SWAP1 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x17AE SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17BB SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17D8 PUSH2 0x17DD SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17EA SWAP1 SLOAD PUSH2 0x17CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1806 PUSH2 0x180C SWAP3 PUSH2 0x17FE PUSH2 0x17A0 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x17E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1823 PUSH2 0x181E PUSH2 0x1828 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1835 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x185A PUSH2 0x185F SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1843 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186C SWAP1 SLOAD PUSH2 0x184E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1879 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x18A0 PUSH2 0x18A5 SWAP2 PUSH2 0x187D JUMP JUMPDEST PUSH2 0x1883 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18B2 SWAP1 SLOAD PUSH2 0x1894 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x18BF SWAP1 PUSH2 0x36F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x18CD PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1907 PUSH2 0x18FE PUSH1 0x0 PUSH2 0x18E1 PUSH2 0x18C3 JUMP JUMPDEST SWAP5 PUSH2 0x18F8 PUSH2 0x18F0 DUP4 DUP4 ADD PUSH2 0x1862 JUMP JUMPDEST DUP4 DUP9 ADD PUSH2 0x186F JUMP JUMPDEST ADD PUSH2 0x18A8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD PUSH2 0x18B5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1912 SWAP1 PUSH2 0x18D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x191F SWAP1 MLOAD PUSH2 0x33F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1936 PUSH2 0x1931 PUSH2 0x193B SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1947 SWAP1 PUSH2 0x1922 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1954 SWAP1 MLOAD PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x196B PUSH2 0x1966 PUSH2 0x1970 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1998 PUSH2 0x199E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x19AA DUP4 DUP3 MUL PUSH2 0x4D7 JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x19B9 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19E0 PUSH2 0x19E6 SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x19F1 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x19BE JUMP JUMPDEST PUSH2 0x1A19 PUSH2 0x1A1E SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1A08 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x1A11 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x1909 JUMP JUMPDEST SWAP2 PUSH2 0x1A2B PUSH1 0x0 DUP5 ADD PUSH2 0x1915 JUMP JUMPDEST PUSH2 0x1A46 PUSH2 0x1A40 PUSH2 0x1A3B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1A93 JUMPI JUMPDEST PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1A8F SWAP4 PUSH2 0x1A6C PUSH2 0x1A67 PUSH1 0x20 DUP10 ADD PUSH2 0x194A JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x1A82 PUSH2 0x1A7D PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x1957 JUMP JUMPDEST SWAP1 PUSH2 0x19D4 JUMP JUMPDEST SWAP4 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP2 SWAP1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A8F PUSH1 0x0 PUSH2 0x1A88 PUSH2 0x1A72 PUSH2 0x1AA9 DUP4 PUSH2 0x1909 JUMP JUMPDEST SWAP6 SWAP4 POP POP POP POP PUSH2 0x1A4C JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1AF2 SWAP2 PUSH2 0x1AED PUSH2 0x1AE8 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1B9B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B08 PUSH2 0x1B03 PUSH2 0x1B0D SWAP3 PUSH2 0xF13 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1B1C SWAP2 ADD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B28 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1B37 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP1 PUSH2 0x1B49 PUSH1 0x0 NOT SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1B6B PUSH2 0x1B66 PUSH2 0x1B72 SWAP3 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1B85 PUSH2 0x1B8B SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1B96 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA7 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 PUSH2 0x1BBC PUSH2 0x1BB6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x1C3D JUMPI JUMPDEST PUSH2 0x1BD5 PUSH2 0x1BD0 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1BFB JUMPI PUSH2 0x1BF6 PUSH2 0x1BEF PUSH2 0x1BEA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1C36 SWAP1 PUSH2 0x1C15 DUP6 PUSH2 0x1C0F PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST SWAP1 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1C31 PUSH2 0x1C2A PUSH2 0x1C25 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BA9 JUMP JUMPDEST SWAP3 POP PUSH2 0x1C5E SWAP2 POP PUSH2 0x1C57 SWAP1 PUSH2 0x1C52 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B76 JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C6A SWAP2 PUSH2 0x1AD8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C87 SWAP2 PUSH2 0x1C82 PUSH2 0x1C7D DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1C89 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C93 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1C9F SWAP2 PUSH2 0x1C6C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1CFC PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x1D05 DUP2 PUSH2 0x1CA1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D1F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1CEF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D29 JUMPI JUMP JUMPDEST PUSH2 0x1D31 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1D47 PUSH1 0x4 DUP3 ADD PUSH2 0x1D09 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1D78 SWAP2 PUSH2 0x1D73 DUP3 PUSH2 0x1D6D PUSH2 0x1D67 PUSH2 0x1D62 PUSH2 0x2F83 JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D94 SWAP2 PUSH2 0x1D8F PUSH2 0x1D8A PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1D96 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DA0 SWAP2 PUSH2 0x2EC0 JUMP JUMPDEST PUSH2 0x1DBC PUSH2 0x1DB5 PUSH2 0x1DB0 PUSH1 0xC PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xC PUSH2 0x1B56 JUMP JUMPDEST JUMPDEST PUSH2 0x1DCF PUSH2 0x1DCA PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x1DF5 JUMPI PUSH2 0x1DF0 PUSH2 0x1DE9 PUSH2 0x1DE4 PUSH1 0xB PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0xB PUSH2 0x1B56 JUMP JUMPDEST PUSH2 0x1DBD JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E01 SWAP2 PUSH2 0x1D7A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1E15 PUSH2 0x1E10 DUP4 PUSH2 0x9BC JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x1E24 PUSH1 0x0 PUSH2 0x1E03 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E2F PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x1E3F DUP4 DUP4 DUP4 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x1E48 DUP3 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x1E52 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1E65 SWAP3 SWAP2 PUSH2 0x1E5F PUSH2 0x1E27 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x1E77 SWAP1 CALLER PUSH2 0x3058 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1E90 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x1E79 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E9D SWAP1 SLOAD PUSH2 0x1E7F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EAC PUSH1 0xFF SWAP2 PUSH2 0xF16 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1EBF SWAP1 PUSH2 0x2D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EDA PUSH2 0x1ED5 PUSH2 0x1EE1 SWAP3 PUSH2 0x1EB6 JUMP JUMPDEST PUSH2 0x1EC2 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1EA0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP7 SWAP8 SWAP1 SWAP2 SWAP3 SWAP6 SWAP5 SWAP4 SWAP8 CALLER PUSH2 0x1F21 PUSH2 0x1F1B PUSH32 0x0 PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x1F84 JUMPI JUMPDEST PUSH2 0x1F67 JUMPI PUSH2 0x1F59 SWAP9 PUSH2 0x1F4C SWAP8 PUSH2 0x1F47 SWAP6 DUP11 SWAP6 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x2D3B JUMP JUMPDEST PUSH2 0x1F54 PUSH2 0x1AB4 JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x1F65 PUSH1 0x1 PUSH1 0xA PUSH2 0x1EC5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x1F80 PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x1F8F PUSH1 0xA PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0x1F2A JUMP JUMPDEST SWAP1 PUSH2 0x1FAF SWAP3 SWAP2 PUSH2 0x1FAA PUSH2 0x1FA5 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x1FB1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH2 0x1FBE SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x3217 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1FCB SWAP3 SWAP2 PUSH2 0x1F94 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0xE02A0315B383857AC496E9D2B2546A699AFAEB4E5E83A1FDEF64376D0B74E5A5 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x200B SWAP2 PUSH2 0x2006 PUSH2 0x2001 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x21F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x2037 SWAP2 MUL SWAP2 PUSH2 0x2031 PUSH1 0x0 NOT DUP5 PUSH2 0x2017 JUMP JUMPDEST SWAP3 PUSH2 0x2017 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2057 PUSH2 0x2052 PUSH2 0x205F SWAP4 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x1B53 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2075 SWAP2 PUSH2 0x206F PUSH2 0x165E JUMP JUMPDEST SWAP2 PUSH2 0x2041 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x2083 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2091 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x2063 JUMP JUMPDEST ADD PUSH2 0x2078 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x20A7 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x20B3 PUSH2 0x20D8 SWAP4 PUSH2 0x143C JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x20BF DUP5 PUSH2 0x200D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x20E0 JUMPI JUMPDEST PUSH2 0x20D1 SWAP1 PUSH2 0x200D JUMP JUMPDEST ADD SWAP1 PUSH2 0x2077 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x20A2 JUMP JUMPDEST SWAP2 POP PUSH2 0x20D1 DUP2 SWAP3 SWAP1 POP PUSH2 0x20C8 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2103 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x20EE JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x2112 SWAP2 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2124 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x21E6 JUMPI PUSH2 0x2148 DUP3 PUSH2 0x2142 DUP6 SLOAD PUSH2 0x1409 JUMP JUMPDEST DUP6 PUSH2 0x2097 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x217D JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x216C SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x2171 JUMPI JUMPDEST POP POP PUSH2 0x2108 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x2165 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x218C DUP6 PUSH2 0x143C JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x21CE JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x21B4 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x216F JUMP JUMPDEST PUSH2 0x21C4 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x20F2 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x21A8 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x2190 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x21F5 SWAP2 PUSH2 0x211A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2206 PUSH2 0x220D SWAP3 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2219 SWAP2 PUSH2 0x1FF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x222D SWAP1 PUSH2 0x2227 PUSH2 0x1527 JUMP JUMPDEST POP PUSH2 0x329A JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2236 JUMPI JUMP JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x224C PUSH2 0x165E JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x2274 JUMPI PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x0 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x1C PUSH1 0xC KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH4 0x8F4EB604 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH2 0x229B SWAP1 PUSH2 0x2296 PUSH2 0x2291 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x229D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22A8 SWAP1 PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x22B3 SWAP1 PUSH2 0x2282 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x22BF SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x22F0 PUSH2 0x22EB PUSH2 0x22F5 SWAP4 PUSH2 0x22E3 PUSH2 0x1527 JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x32FB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2301 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x230D SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x231A SWAP1 PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2350 SWAP2 PUSH1 0x0 PUSH2 0x2345 PUSH2 0x234B SWAP4 PUSH2 0x233D PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x2 PUSH2 0x17B1 JUMP JUMPDEST ADD PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1E93 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x236C SWAP1 PUSH2 0x2367 PUSH2 0x2362 PUSH2 0x1FCD JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x236E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2379 SWAP1 PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2384 SWAP1 PUSH2 0x2353 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x238E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2399 PUSH1 0x8 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23B3 PUSH2 0x23B8 SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x239C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C5 SWAP1 SLOAD PUSH2 0x23A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23D1 SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x23E7 DUP3 PUSH2 0x6DF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2403 JUMPI PUSH2 0x2400 SWAP2 PUSH1 0x0 ADD PUSH2 0x23DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST POP PUSH2 0x2417 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x360 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2423 SWAP1 PUSH2 0x33F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2436 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2442 SWAP1 PUSH2 0x288 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x2455 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2461 SWAP1 PUSH2 0x6DC JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24B5 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x24B0 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x24AB JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x24DD DUP2 PUSH2 0x24D6 DUP2 PUSH2 0x24E2 SWAP6 PUSH2 0x24BA JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x24FC JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x2542 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x253D JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x2538 JUMPI JUMP JUMPDEST PUSH2 0x246A JUMP JUMPDEST PUSH2 0x2465 JUMP JUMPDEST PUSH2 0x246F JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2561 DUP2 PUSH2 0x255A DUP2 PUSH2 0x2566 SWAP6 PUSH2 0x1433 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x9DF JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2580 DUP2 PUSH2 0x256A JUMP JUMPDEST SUB PUSH2 0x2587 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x2599 DUP3 PUSH2 0x2577 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x25AA SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x258C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x25B6 SWAP1 PUSH2 0x256A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x25F8 SWAP1 PUSH1 0x20 PUSH2 0x25F0 PUSH2 0x25E6 PUSH1 0x40 DUP5 ADD PUSH2 0x25D8 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x2501 JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x2547 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x259B JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x25AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26A5 SWAP2 PUSH2 0x2697 PUSH2 0x268C PUSH1 0xC0 DUP4 ADD PUSH2 0x2623 PUSH2 0x2619 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x2408 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x241A JUMP JUMPDEST PUSH2 0x263D PUSH2 0x2633 PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x2427 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2439 JUMP JUMPDEST PUSH2 0x2657 PUSH2 0x264D PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x2671 PUSH2 0x2667 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x2458 JUMP JUMPDEST PUSH2 0x267E PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x2474 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x24C3 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x24E6 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x25BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x26D4 PUSH1 0x40 SWAP2 PUSH2 0x26DC SWAP5 PUSH2 0x26C7 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x51D JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x25FB JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x722 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0x273 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x26FC PUSH2 0x17A0 JUMP JUMPDEST POP PUSH2 0x270F PUSH2 0x270A PUSH1 0x4 PUSH2 0x23BB JUMP JUMPDEST PUSH2 0x23C8 JUMP JUMPDEST PUSH2 0x273B PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x2746 PUSH2 0x2727 PUSH1 0x5 PUSH2 0x17E0 JUMP JUMPDEST PUSH2 0x272F PUSH2 0x273 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x23D4 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x26A8 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x278B JUMPI PUSH1 0x0 SWAP2 PUSH2 0x275D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x277E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2784 JUMPI JUMPDEST PUSH2 0x2776 DUP2 DUP4 PUSH2 0x97E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x23E9 JUMP JUMPDEST CODESIZE PUSH2 0x2759 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x276C JUMP JUMPDEST PUSH2 0x26DE JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE CALLER PUSH1 0x0 MSTORE DUP1 PUSH1 0x30 PUSH1 0xC KECCAK256 SSTORE PUSH1 0x0 MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR CALLER PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x0 LOG3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x27FE JUMPI PUSH2 0x27FA PUSH1 0x20 SWAP2 PUSH2 0x44E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2818 PUSH2 0x2813 DUP3 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x2834 JUMPI PUSH2 0x2832 SWAP3 PUSH2 0x9DF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x963 JUMP JUMPDEST PUSH2 0x2844 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x2803 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x2857 DUP2 DUP6 DUP5 SWAP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH2 0x2860 DUP5 PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x286C JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2882 SWAP5 PUSH2 0x287C SWAP2 SWAP5 SWAP3 SWAP4 PUSH2 0x2839 JUMP JUMPDEST SWAP3 PUSH2 0x2FC7 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2865 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2899 SWAP1 SLOAD PUSH2 0x1409 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28A4 PUSH2 0x1E1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28AF PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x28C2 PUSH2 0x28BC DUP3 PUSH2 0x2E93 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x2923 JUMPI PUSH2 0x28D8 PUSH2 0x28D3 PUSH1 0x6 PUSH2 0x288C JUMP JUMPDEST PUSH2 0x288F JUMP JUMPDEST PUSH2 0x28EB PUSH2 0x28E5 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x2915 JUMPI PUSH2 0x2911 SWAP1 PUSH2 0x290C PUSH2 0x2906 PUSH1 0x6 SWAP3 PUSH2 0x3334 JUMP JUMPDEST SWAP2 PUSH2 0x1505 JUMP JUMPDEST PUSH2 0x338F JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x291E PUSH2 0x289C JUMP JUMPDEST PUSH2 0x2912 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x677510DB PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x293C PUSH1 0x4 DUP3 ADD PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x295F PUSH2 0x295A PUSH2 0x2964 SWAP3 PUSH2 0x2952 PUSH2 0x165E JUMP JUMPDEST POP PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x33BF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2982 SWAP2 PUSH2 0x297D PUSH2 0x2978 DUP3 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2984 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x298E SWAP2 PUSH2 0x2F90 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x299A SWAP2 PUSH2 0x2967 JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x29C0 DUP3 PUSH2 0x299C JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x29D1 JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x29E0 SWAP1 MLOAD PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29ED DUP3 PUSH2 0x299C JUMP JUMPDEST SWAP1 PUSH2 0x29F8 PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2A0C PUSH2 0x2A06 DUP6 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST LT ISZERO PUSH2 0x2A3D JUMPI PUSH2 0x2A38 SWAP1 PUSH2 0x2A33 CALLER PUSH2 0x2A2D PUSH2 0x2A28 DUP9 DUP6 SWAP1 PUSH2 0x29B6 JUMP JUMPDEST PUSH2 0x29D6 JUMP JUMPDEST SWAP1 PUSH2 0x3058 JUMP JUMPDEST PUSH2 0x1B10 JUMP JUMPDEST PUSH2 0x29F9 JUMP JUMPDEST POP SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2A4B PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x2A56 PUSH1 0x9 PUSH2 0x1505 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A62 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0x1C MSTORE PUSH8 0xA5A2E7A00000000 PUSH1 0x8 MSTORE PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A97 SWAP1 PUSH2 0x2A92 PUSH2 0x2A8D PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2B21 JUMP JUMPDEST PUSH2 0x2AC5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AA2 SWAP1 PUSH2 0x1663 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2ABA PUSH2 0x2AB5 PUSH2 0x2AC1 SWAP3 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1B3C JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2AD0 SWAP1 PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2ADB SWAP1 PUSH2 0x2A7E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2AE5 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x2AEF DUP2 PUSH2 0x33DF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B12 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B02 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B0C SWAP2 POP PUSH2 0x346C JUMP JUMPDEST CODESIZE PUSH2 0x2AFE JUMP JUMPDEST POP PUSH2 0x2B1C DUP2 PUSH2 0x3406 JUMP JUMPDEST PUSH2 0x2AF6 JUMP JUMPDEST PUSH2 0x2B33 SWAP1 PUSH2 0x2B2D PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x3591 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x2073616C65507269636500000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243323938313A20726F79616C7479206665652077696C6C20657863656564 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2B90 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2B99 DUP2 PUSH2 0x2B35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BB3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2B83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2BBD JUMPI JUMP JUMPDEST PUSH2 0x2BC5 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2BDB PUSH1 0x4 DUP3 ADD PUSH2 0x2B9D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20696E76616C696420726563656976657200000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2C14 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x2C1D DUP2 PUSH2 0x2BDF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C37 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2C07 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2C41 JUMPI JUMP JUMPDEST PUSH2 0x2C49 PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2C5F PUSH1 0x4 DUP3 ADD PUSH2 0x2C21 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2C6D PUSH1 0x40 PUSH2 0x9A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C88 PUSH2 0x2C83 PUSH2 0x2C8F SWAP3 PUSH2 0x2304 JUMP JUMPDEST PUSH2 0x2C70 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x15F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CB3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x2CD1 PUSH2 0x2CCC PUSH2 0x2CD6 SWAP3 PUSH2 0x36F JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2CF1 PUSH2 0x2CEC PUSH2 0x2CF8 SWAP3 PUSH2 0x2CBD JUMP JUMPDEST PUSH2 0x2CD9 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x2C99 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x2D27 PUSH1 0x20 PUSH1 0x0 PUSH2 0x2D2D SWAP5 PUSH2 0x2D1F DUP3 DUP3 ADD PUSH2 0x2D19 DUP5 DUP9 ADD PUSH2 0x1915 JUMP JUMPDEST SWAP1 PUSH2 0x2C73 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x194A JUMP JUMPDEST SWAP1 PUSH2 0x2CDC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2D39 SWAP2 PUSH2 0x2CFC JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2DAC PUSH2 0x2DB3 SWAP3 PUSH2 0x2D67 DUP4 PUSH2 0x2D60 PUSH2 0x2D5A PUSH2 0x2D55 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x2D8D DUP2 PUSH2 0x2D86 PUSH2 0x2D80 PUSH2 0x2D7B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x2C3A JUMP JUMPDEST SWAP2 PUSH2 0x2DA3 PUSH2 0x2D99 PUSH2 0x2C63 JUMP JUMPDEST SWAP4 PUSH1 0x0 DUP6 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x0 NOT PUSH1 0x60 SHR SWAP1 DUP2 AND SWAP2 DUP2 AND DUP4 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP5 ADD DUP5 ADD SWAP2 DUP3 SLOAD AND SWAP2 DUP3 ISZERO PUSH2 0x2E4A JUMPI DUP2 DUP4 DUP6 SWAP4 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E24 JUMPI JUMPDEST PUSH1 0x1 ADD SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x0 CODESIZE LOG4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD ISZERO PUSH2 0x2E3C JUMPI DUP3 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E74 PUSH2 0x2E6F PUSH2 0x2E79 SWAP3 PUSH2 0x2E5D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E84 PUSH2 0x2E58 JUMP JUMPDEST POP PUSH2 0x2E90 PUSH2 0x2710 PUSH2 0x2E60 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E9B PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD DUP1 SLOAD DUP1 PUSH1 0x60 SHL PUSH2 0x2F4B JUMPI DUP3 OR SWAP1 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD ADD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP4 MUL ISZERO PUSH2 0x2F36 JUMPI SSTORE PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 CODESIZE LOG4 JUMP JUMPDEST PUSH8 0xEA553B3401336CEA DUP4 ISZERO PUSH1 0x2 SHL MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xC991CBB1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP1 PUSH2 0x2F7B PUSH2 0x2F76 PUSH2 0x2F80 SWAP4 PUSH2 0x2F6F DUP2 DUP6 SWAP1 PUSH2 0x362A JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x3711 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2F8B PUSH2 0x1527 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FB2 PUSH2 0x2FAD PUSH2 0x2FB7 SWAP4 PUSH2 0x2FA6 DUP2 DUP6 SWAP1 PUSH2 0x374C JUMP JUMPDEST PUSH1 0x3 PUSH2 0x22B5 JUMP JUMPDEST PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x37E6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2FC2 PUSH2 0x1351 JUMP JUMPDEST POP EXTCODESIZE SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP2 PUSH1 0xA4 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH4 0x150B7A02 SWAP7 DUP8 DUP7 MSTORE CALLER DUP8 DUP8 ADD MSTORE PUSH1 0x60 SHL PUSH1 0x60 SHR PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP1 DUP6 ADD MSTORE DUP1 MLOAD DUP1 SWAP2 DUP2 DUP1 PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x3044 JUMPI JUMPDEST POP POP ADD SWAP1 PUSH1 0x0 PUSH1 0x1C DUP5 ADD SWAP2 GAS CALL ISZERO PUSH2 0x3034 JUMPI JUMPDEST PUSH1 0xE0 SHL SWAP1 MLOAD SUB PUSH2 0x3026 JUMPI JUMP JUMPDEST PUSH4 0xD1A57ED6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x301A JUMPI POP RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP2 DUP8 PUSH1 0xC0 DUP9 ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP DUP1 CODESIZE PUSH2 0x3007 JUMP JUMPDEST PUSH2 0x3061 DUP3 PUSH2 0x221B JUMP JUMPDEST POP PUSH1 0x60 SHL PUSH1 0x60 SHR DUP2 PUSH1 0x0 MSTORE DUP1 PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL OR PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP3 ADD DUP3 ADD SWAP1 DUP2 SLOAD SWAP2 DUP3 PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP2 DUP3 ISZERO PUSH2 0x3114 JUMPI DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x1 ADD SLOAD SWAP1 DUP2 DUP2 EQ DUP5 DUP3 EQ OR SWAP1 ISZERO OR ISZERO PUSH2 0x30FC JUMPI JUMPDEST PUSH1 0x0 SWAP4 DUP4 SWAP2 PUSH2 0x30F1 JUMPI JUMPDEST XOR SWAP1 SSTORE PUSH1 0x1C PUSH1 0xC KECCAK256 PUSH1 0x1 DUP2 SLOAD SUB SWAP1 SSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP3 CODESIZE LOG4 JUMP JUMPDEST DUP5 DUP4 PUSH1 0x1 ADD SSTORE PUSH2 0x30BC JUMP JUMPDEST PUSH1 0x30 PUSH1 0xC KECCAK256 SLOAD PUSH2 0x30B2 JUMPI PUSH4 0x4B6E7F18 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH4 0xCEEA21B6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST SWAP3 PUSH2 0x314C SWAP1 PUSH2 0x3145 PUSH2 0x3153 SWAP5 PUSH2 0x313E PUSH2 0x3191 SWAP11 SWAP9 SWAP6 PUSH1 0x7 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x8 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x6 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x9 PUSH2 0x21EB JUMP JUMPDEST PUSH2 0x3165 PUSH2 0x315E PUSH2 0xF38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3177 PUSH2 0x3170 PUSH2 0x1FCD JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x3189 PUSH2 0x3182 PUSH2 0x1396 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2F59 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x3821 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x455243323938313A20496E76616C696420706172616D65746572730000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x31C8 PUSH1 0x1B PUSH1 0x20 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x31D1 DUP2 PUSH2 0x3193 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x31EB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x31BB JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x31F5 JUMPI JUMP JUMPDEST PUSH2 0x31FD PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3213 PUSH1 0x4 DUP3 ADD PUSH2 0x31D5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3293 SWAP1 PUSH2 0x328C PUSH2 0x3298 SWAP5 SWAP4 PUSH2 0x3247 DUP6 PUSH2 0x3240 PUSH2 0x323A PUSH2 0x3235 PUSH2 0x2E7C JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST SWAP2 PUSH2 0x36F JUMP JUMPDEST GT ISZERO PUSH2 0x2BB6 JUMP JUMPDEST PUSH2 0x326D DUP2 PUSH2 0x3266 PUSH2 0x3260 PUSH2 0x325B PUSH1 0x0 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x33F JUMP JUMPDEST SWAP2 PUSH2 0x33F JUMP JUMPDEST EQ ISZERO PUSH2 0x31EE JUMP JUMPDEST SWAP4 PUSH2 0x3283 PUSH2 0x3279 PUSH2 0x2C63 JUMP JUMPDEST SWAP6 PUSH1 0x0 DUP8 ADD PUSH2 0x186F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD PUSH2 0x18B5 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x182B JUMP JUMPDEST PUSH2 0x2D2F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x32A2 PUSH2 0x1527 JUMP JUMPDEST POP DUP1 PUSH1 0x0 MSTORE PUSH8 0x3EC412A9852D173D PUSH1 0xC1 SHL PUSH1 0x1C MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 DUP2 ADD ADD SLOAD PUSH1 0x60 SHL PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32D7 PUSH2 0x32DC SWAP2 PUSH2 0x1663 JUMP JUMPDEST PUSH2 0x180F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32F3 PUSH2 0x32EE PUSH2 0x32F8 SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x334 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3327 PUSH2 0x3322 PUSH2 0x3331 SWAP4 PUSH2 0x331D PUSH1 0x0 PUSH2 0x332C SWAP6 PUSH2 0x3316 PUSH2 0x1527 JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x389C JUMP JUMPDEST PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x32DF JUMP JUMPDEST PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x333D PUSH2 0x13EE JUMP JUMPDEST POP PUSH1 0x80 PUSH1 0x40 MLOAD ADD SWAP2 PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP3 SWAP1 PUSH1 0xA PUSH1 0x0 NOT DUP1 SWAP3 SWAP6 JUMPDEST ADD SWAP5 DUP2 DUP2 MOD PUSH1 0x30 ADD DUP7 MSTORE8 DIV SWAP4 DUP5 ISZERO PUSH2 0x337A JUMPI SWAP1 PUSH1 0xA SWAP2 SWAP1 DUP1 SWAP3 SWAP2 PUSH2 0x335B JUMP JUMPDEST SWAP4 POP POP DUP3 PUSH1 0x20 SWAP2 SUB SWAP3 SUB SWAP2 DUP3 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33BC SWAP2 PUSH2 0x33B1 PUSH2 0x33AB PUSH2 0x33B7 SWAP4 PUSH2 0x33A5 PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3389 JUMP JUMPDEST SWAP2 PUSH2 0x3389 JUMP JUMPDEST SWAP1 PUSH2 0x38C3 JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33D7 PUSH1 0x0 PUSH2 0x33DC SWAP3 PUSH2 0x33D0 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3945 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x33E7 PUSH2 0x1351 JUMP JUMPDEST POP PUSH1 0xE0 SHR PUSH4 0x5B5E139F DUP2 EQ SWAP1 PUSH4 0x1FFC9A7 PUSH4 0x80AC58CD DUP3 EQ SWAP2 EQ OR OR SWAP1 JUMP JUMPDEST PUSH2 0x340E PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3418 DUP2 PUSH2 0x395D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x345D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x3442 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x3432 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x343C SWAP2 POP PUSH2 0x399D JUMP JUMPDEST CODESIZE PUSH2 0x342E JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3457 PUSH2 0x3451 DUP4 PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ PUSH2 0x3426 JUMP JUMPDEST POP PUSH2 0x3467 DUP2 PUSH2 0x399D JUMP JUMPDEST PUSH2 0x341F JUMP JUMPDEST PUSH2 0x3474 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x347E DUP2 PUSH2 0x399D JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x348A JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3494 SWAP2 POP PUSH2 0x39DD JUMP JUMPDEST CODESIZE PUSH2 0x3486 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34B1 PUSH2 0x34AC PUSH2 0x34B6 SWAP3 PUSH2 0x349A JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x34F2 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x34FB DUP2 PUSH2 0x34BE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3524 PUSH2 0x351B SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x3512 DUP2 PUSH2 0x41C JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x34B9 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x429 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x355C PUSH1 0x11 DUP1 SWAP3 PUSH2 0x34B9 JUMP JUMPDEST PUSH2 0x3565 DUP2 PUSH2 0x3528 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3583 PUSH2 0x358E SWAP4 SWAP3 PUSH2 0x357D PUSH2 0x3588 SWAP4 PUSH2 0x34E6 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST PUSH2 0x3550 JUMP JUMPDEST SWAP1 PUSH2 0x34FF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x35A6 PUSH2 0x35A0 DUP4 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x35AE JUMPI POP POP JUMP JUMPDEST PUSH2 0x3626 SWAP2 PUSH2 0x3604 PUSH2 0x35DD PUSH2 0x35CD PUSH2 0x35C7 PUSH2 0x3609 SWAP6 PUSH2 0x3A6B JUMP JUMPDEST SWAP4 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x35D7 PUSH1 0x20 PUSH2 0x349D JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP2 PUSH2 0x35F5 PUSH2 0x35E9 PUSH2 0x273 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x3569 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x97E JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST PUSH2 0x3611 PUSH2 0x273 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x363E PUSH2 0x3638 DUP3 DUP5 SWAP1 PUSH2 0x2328 JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0x3647 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x366A PUSH1 0x1 PUSH2 0x3665 PUSH1 0x0 PUSH2 0x365D PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x3673 PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x36B0 PUSH2 0x36AA PUSH2 0x36A4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x36B9 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x36C3 DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x3643 JUMP JUMPDEST PUSH2 0x36D6 SWAP1 PUSH2 0x15C0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x36ED PUSH2 0x36E8 PUSH2 0x36F2 SWAP3 PUSH2 0x334 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3709 PUSH2 0x3704 PUSH2 0x370E SWAP3 PUSH2 0x4D7 JUMP JUMPDEST PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x6DC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3744 PUSH2 0x373E PUSH2 0x3739 PUSH2 0x3734 PUSH1 0x0 PUSH2 0x3749 SWAP7 PUSH2 0x372C PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3E7A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3757 DUP2 DUP4 SWAP1 PUSH2 0x2328 JUMP JUMPDEST PUSH2 0x3760 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3783 PUSH1 0x0 PUSH2 0x377E PUSH1 0x0 PUSH2 0x3776 PUSH1 0x2 DUP7 SWAP1 PUSH2 0x17B1 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x2310 JUMP JUMPDEST PUSH2 0x1EC5 JUMP JUMPDEST SWAP1 PUSH2 0x378C PUSH2 0x2F83 JUMP JUMPDEST SWAP1 PUSH2 0x37C9 PUSH2 0x37C3 PUSH2 0x37BD PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x17A5 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x2304 JUMP JUMPDEST SWAP3 PUSH2 0x37D2 PUSH2 0x273 JUMP JUMPDEST DUP1 PUSH2 0x37DC DUP2 PUSH2 0x3D2 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x375C JUMP JUMPDEST SWAP1 PUSH2 0x3819 PUSH2 0x3813 PUSH2 0x380E PUSH2 0x3809 PUSH1 0x0 PUSH2 0x381E SWAP7 PUSH2 0x3801 PUSH2 0x1351 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x36F5 JUMP JUMPDEST SWAP2 PUSH2 0x32C8 JUMP JUMPDEST PUSH2 0x3F5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3837 PUSH2 0x383C SWAP4 SWAP3 PUSH2 0x3832 PUSH2 0x157E JUMP JUMPDEST PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x4069 JUMP JUMPDEST JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3856 DUP2 PUSH2 0x383E JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3871 JUMPI PUSH2 0x3868 PUSH1 0x1 SWAP2 PUSH2 0x3842 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3886 SWAP1 PUSH1 0x8 PUSH2 0x388B SWAP4 MUL PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x17C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3899 SWAP2 SLOAD PUSH2 0x3876 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38BB SWAP2 PUSH1 0x0 PUSH2 0x38B5 SWAP3 PUSH2 0x38AE PUSH2 0x17A0 JUMP JUMPDEST POP ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x38CE PUSH2 0x38BE JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1F NOT DUP1 DUP4 MLOAD SWAP4 DUP2 DUP1 PUSH1 0x20 DUP8 ADD AND JUMPDEST DUP1 DUP4 ADD MLOAD DUP2 DUP11 ADD MSTORE ADD SWAP1 DUP2 ISZERO PUSH2 0x38FD JUMPI DUP2 SWAP1 SWAP2 POP DUP3 SWAP1 PUSH2 0x38E2 JUMP JUMPDEST POP POP POP DUP2 MLOAD SWAP2 DUP4 DUP7 ADD DUP3 DUP1 PUSH1 0x20 DUP7 ADD AND JUMPDEST DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE ADD SWAP2 DUP3 ISZERO PUSH2 0x392B JUMPI DUP3 DUP1 SWAP2 SWAP4 POP POP DUP4 SWAP1 PUSH2 0x390E JUMP JUMPDEST POP POP POP POP PUSH1 0x20 SWAP2 ADD DUP1 DUP3 DUP6 ADD ADD SWAP1 PUSH1 0x0 DUP3 MSTORE DUP5 MSTORE ADD PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x395A SWAP2 PUSH2 0x3953 PUSH2 0x165E JUMP JUMPDEST POP ADD PUSH2 0x383E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3965 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3980 PUSH2 0x397A PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x398D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3997 SWAP2 POP PUSH2 0x4089 JUMP JUMPDEST CODESIZE PUSH2 0x3989 JUMP JUMPDEST PUSH2 0x39A5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x39C0 PUSH2 0x39BA PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x39CD JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x39D7 SWAP2 POP PUSH2 0x40AF JUMP JUMPDEST CODESIZE PUSH2 0x39C9 JUMP JUMPDEST PUSH2 0x39E5 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x3A00 PUSH2 0x39FA PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3A0D JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A17 SWAP2 POP PUSH2 0x3406 JUMP JUMPDEST CODESIZE PUSH2 0x3A09 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3A3A PUSH2 0x3A35 PUSH2 0x3A3F SWAP3 PUSH2 0x3A1D JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A4C PUSH1 0x14 PUSH2 0x3A26 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A63 PUSH2 0x3A5E PUSH2 0x3A68 SWAP3 PUSH2 0x3A20 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A88 PUSH2 0x3A83 PUSH2 0x3A9E SWAP3 PUSH2 0x3A7D PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x36CD JUMP JUMPDEST PUSH2 0x36D9 JUMP JUMPDEST PUSH2 0x3A98 PUSH2 0x3A93 PUSH2 0x3A42 JUMP JUMPDEST PUSH2 0x3A4F JUMP JUMPDEST SWAP1 PUSH2 0x3C84 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AB8 PUSH2 0x3AB3 PUSH2 0x3ABD SWAP3 PUSH2 0x3AA1 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3AD2 PUSH2 0x3ACD DUP4 PUSH2 0x27E0 JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3B01 PUSH2 0x3AE9 DUP4 PUSH2 0x3AC0 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x3AF7 DUP7 SWAP4 PUSH2 0x27E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x3AD7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3B19 DUP3 PUSH2 0x3B0B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x3B2B JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B4F PUSH2 0x3B4A PUSH2 0x3B54 SWAP3 PUSH2 0x3B38 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3B60 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3B6F JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3B93 PUSH2 0x3B74 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BAD PUSH2 0x3BA8 PUSH2 0x3BB2 SWAP3 PUSH2 0x3B96 JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BD2 PUSH2 0x3BCD PUSH2 0x3BD7 SWAP3 PUSH2 0x3BBB JUMP JUMPDEST PUSH2 0x15BD JUMP JUMPDEST PUSH2 0x3A20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3BF9 SWAP1 PUSH2 0x3BF3 PUSH2 0x3BED PUSH2 0x3BFE SWAP5 PUSH2 0x3A20 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SWAP1 PUSH2 0x20EE JUMP JUMPDEST PUSH2 0x4D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3C35 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x420 JUMP JUMPDEST PUSH2 0x3C3E DUP2 PUSH2 0x3C01 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x3C58 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3C62 JUMPI JUMP JUMPDEST PUSH2 0x3C6A PUSH2 0x273 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3C80 PUSH1 0x4 DUP3 ADD PUSH2 0x3C42 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3C8E PUSH2 0x13EE JUMP JUMPDEST POP PUSH2 0x3D28 PUSH2 0x3D18 PUSH2 0x3CC4 PUSH2 0x3CBF PUSH2 0x3CAF PUSH1 0x2 PUSH2 0x3CAA DUP8 SWAP2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3CB9 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST PUSH2 0x3ADC JUMP JUMPDEST SWAP3 PUSH2 0x3CCD PUSH2 0x3B03 JUMP JUMPDEST PUSH2 0x3CE6 DUP6 PUSH2 0x3CE0 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x1AF4 JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3CEF PUSH2 0x3B30 JUMP JUMPDEST PUSH2 0x3D08 DUP6 PUSH2 0x3D02 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D13 PUSH1 0x2 PUSH2 0x3AA4 JUMP JUMPDEST PUSH2 0x1989 JUMP JUMPDEST PUSH2 0x3D22 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x1B76 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3D3E PUSH2 0x3D38 PUSH1 0x1 PUSH2 0x3B3B JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST GT ISZERO PUSH2 0x3DA5 JUMPI PUSH2 0x3D4C PUSH2 0x3B8B JUMP JUMPDEST DUP2 PUSH2 0x3D57 PUSH1 0xF PUSH2 0x3B99 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3DA0 JUMPI PUSH2 0x3D73 PUSH2 0x3D94 SWAP3 PUSH2 0x3D9A SWAP5 BYTE PUSH2 0x3BB5 JUMP JUMPDEST PUSH2 0x3D83 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3B0F JUMP JUMPDEST MSTORE8 PUSH2 0x3D8E PUSH1 0x4 PUSH2 0x3BBE JUMP JUMPDEST SWAP1 PUSH2 0x3BDA JUMP JUMPDEST SWAP4 PUSH2 0x3B57 JUMP JUMPDEST SWAP3 PUSH2 0x3D2A JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST PUSH2 0x3DCD SWAP3 SWAP4 POP PUSH2 0x3DC8 SWAP1 PUSH2 0x3DC2 PUSH2 0x3DBC PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x338C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3DEB DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3E06 JUMPI PUSH2 0x3DFD PUSH1 0x1 SWAP2 PUSH2 0x3DD3 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x29A0 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3E21 PUSH2 0x3E1C PUSH2 0x3E29 SWAP4 PUSH2 0x17A5 JUMP JUMPDEST PUSH2 0x2A99 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x201B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x3E5D JUMPI DUP3 PUSH2 0x3E55 SWAP2 PUSH1 0x1 PUSH2 0x3E5B SWAP6 ADD DUP2 SSTORE PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x968 JUMP JUMPDEST SWAP1 PUSH2 0x3E6C SWAP1 PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3E82 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3E97 PUSH2 0x3E91 DUP3 DUP5 SWAP1 PUSH2 0x40EF JUMP JUMPDEST ISZERO PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3EDA JUMPI PUSH2 0x3ED0 PUSH2 0x3ED5 SWAP3 PUSH2 0x3EBB PUSH2 0x3EB4 PUSH1 0x0 DUP6 ADD PUSH2 0x3DD0 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3E2D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3EC9 PUSH1 0x0 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST SWAP4 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3EF0 PUSH2 0x3EF6 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x4D7 JUMP JUMPDEST SWAP3 PUSH2 0x4D7 JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3F01 JUMPI JUMP JUMPDEST PUSH2 0x1973 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3F2E SWAP2 PUSH2 0x3F28 PUSH2 0x17A0 JUMP JUMPDEST SWAP2 PUSH2 0x3E0B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3F39 DUP2 PUSH2 0x3DDE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F5A JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3F57 PUSH2 0x3F51 DUP4 DUP4 PUSH2 0x3DE2 JUMP JUMPDEST SWAP1 PUSH2 0x3F1C JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3F06 JUMP JUMPDEST PUSH2 0x3F67 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x3F7E PUSH2 0x3F79 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3F93 PUSH2 0x3F8D PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x4061 JUMPI PUSH2 0x4013 SWAP3 PUSH1 0x1 PUSH2 0x400E SWAP3 DUP5 PUSH2 0x3FBC PUSH1 0x0 SWAP7 PUSH2 0x3FB6 DUP6 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST PUSH2 0x3FD9 PUSH2 0x3FCA DUP9 DUP6 ADD PUSH2 0x383E JUMP JUMPDEST PUSH2 0x3FD3 DUP7 PUSH2 0x3B3B JUMP JUMPDEST SWAP1 PUSH2 0x3EE1 JUMP JUMPDEST DUP1 PUSH2 0x3FEC PUSH2 0x3FE6 DUP5 PUSH2 0x4D7 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST SUB PUSH2 0x4018 JUMPI JUMPDEST POP POP POP PUSH2 0x4008 PUSH2 0x4003 DUP7 DUP4 ADD PUSH2 0x3DD0 JUMP JUMPDEST PUSH2 0x3F30 JUMP JUMPDEST ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x2063 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4059 SWAP3 PUSH2 0x404B PUSH2 0x4037 PUSH2 0x4031 PUSH2 0x4054 SWAP5 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x388E JUMP JUMPDEST SWAP4 PUSH2 0x4045 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x384D JUMP JUMPDEST SWAP1 PUSH2 0x3E0B JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1B56 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3FF2 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4080 PUSH2 0x4079 PUSH2 0x4087 SWAP4 PUSH2 0x15E8 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x5 PUSH2 0x2AA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4091 PUSH2 0x1351 JUMP JUMPDEST POP PUSH2 0x40AB PUSH2 0x40A5 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x40B7 PUSH2 0x1351 JUMP JUMPDEST POP DUP1 PUSH2 0x40D2 PUSH2 0x40CC PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x288 JUMP JUMPDEST SWAP2 PUSH2 0x288 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x40DF JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x40E9 SWAP2 POP PUSH2 0x395D JUMP JUMPDEST CODESIZE PUSH2 0x40DB JUMP JUMPDEST PUSH2 0x410D SWAP2 PUSH1 0x1 PUSH2 0x4108 SWAP3 PUSH2 0x4101 PUSH2 0x1351 JUMP JUMPDEST POP ADD PUSH2 0x3E62 JUMP JUMPDEST PUSH2 0x1680 JUMP JUMPDEST PUSH2 0x4120 PUSH2 0x411A PUSH1 0x0 PUSH2 0x1AF4 JUMP JUMPDEST SWAP2 PUSH2 0x4D7 JUMP JUMPDEST EQ ISZERO SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xA6 0xD0 COINBASE CALL 0x4C 0x22 PUSH12 0x15D09BED1F38D00ED477C06 COINBASE PUSH29 0xDEFC834389F375CB9B8964736F6C634300081B00336080604052346100 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "341:2484:39:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;544:172::-;;;:::i;:::-;621:17;;:::i;:::-;;;;;;;341:2484;;;;;621:17;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;681:13;696:12;602:36;681:13;:::i;:::-;696:12;:::i;:::-;544:172::o;621:17::-;;:::i;:::-;;:::i;689:2159:32:-;;;:::i;:::-;:::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;341:2484:39:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;961:189:32:-;1056:37;;:::i;:::-;;;;;;;;341:2484:39;;;;;1056:37:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1047:46;1130:12;1047:46;;;:::i;:::-;1130:12;:::i;:::-;961:189::o;1056:37::-;;:::i;:::-;;:::i;341:2484:39:-;;;:::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;341:2484:39:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 1002,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 212,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_stringt_stringt_stringt_stringt_addresst_uint96t_addresst_bytes32": {
                  "entryPoint": 559,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 10
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 378,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 544,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 1845,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_string": {
                  "entryPoint": 432,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 914,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint96": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 813,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_bytes": {
                  "entryPoint": 3265,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_string_string_string_string_address_uint96_address_bytes32": {
                  "entryPoint": 1586,
                  "id": null,
                  "parameterSlots": 10,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address_nonPadded_inplace": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes": {
                  "entryPoint": 3021,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bytes32": {
                  "entryPoint": 2944,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1573,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_memory_ptr": {
                  "entryPoint": 3216,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon": {
                  "entryPoint": 1155,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 1142,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_packed_bytes32_address_address_bytes": {
                  "entryPoint": 3062,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1511,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3702,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1247": {
                  "entryPoint": 4323,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 2789,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8714": {
                  "entryPoint": 4454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 3677,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f": {
                  "entryPoint": 4217,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 945,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 826,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 4480,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_1247": {
                  "entryPoint": 4348,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 2815,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint96": {
                  "entryPoint": 1560,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_memory": {
                  "entryPoint": 310,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1751,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_bytes": {
                  "entryPoint": 1741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1747,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 1461,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 3207,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes_nonPadded_inplace": {
                  "entryPoint": 3016,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 1465,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 179,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 520,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 2626,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_UpgradeableBeacon": {
                  "entryPoint": 1022,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 2444,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 168,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 3116,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint96": {
                  "entryPoint": 467,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_payable_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 3845,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address_payable": {
                  "entryPoint": 3159,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_ERC721Items": {
                  "entryPoint": 1810,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_Create2_to_address": {
                  "entryPoint": 4139,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC721Items_to_address": {
                  "entryPoint": 1822,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ITransparentUpgradeableBeaconProxy_to_address": {
                  "entryPoint": 3195,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 1130,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2475,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2447,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 3119,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1787,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 1118,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address_payable": {
                  "entryPoint": 3147,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ERC721Items": {
                  "entryPoint": 1798,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 1090,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 366,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1774,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 1474,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_beacon": {
                  "entryPoint": 1177,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_deploy": {
                  "entryPoint": 848,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_determineAddress": {
                  "entryPoint": 1281,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 1347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 1230,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 1400,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeBeacon": {
                  "entryPoint": 951,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_contract_UpgradeableBeacon": {
                  "entryPoint": 1033,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 2637,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_UpgradeableBeacon": {
                  "entryPoint": 2235,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 269,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__transferOwnership": {
                  "entryPoint": 3892,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 3768,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_computeAddress": {
                  "entryPoint": 4729,
                  "id": 1772,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_computeAddress_1758": {
                  "entryPoint": 4696,
                  "id": 1758,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_computeProxyAddress": {
                  "entryPoint": 3989,
                  "id": 7587,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_createProxy": {
                  "entryPoint": 3318,
                  "id": 7544,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy": {
                  "entryPoint": 4546,
                  "id": 1738,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy_8746": {
                  "entryPoint": 1878,
                  "id": 8746,
                  "parameterSlots": 10,
                  "returnSlots": 1
                },
                "fun_determineAddress": {
                  "entryPoint": 2517,
                  "id": 8796,
                  "parameterSlots": 10,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 4683,
                  "id": 1682,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 2670,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 2507,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 2487,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 2930,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 2881,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon": {
                  "entryPoint": 2415,
                  "id": 7602,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon_inner": {
                  "entryPoint": 2268,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "getter_fun_beacon": {
                  "entryPoint": 1071,
                  "id": 7462,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 1087,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_address": {
                  "entryPoint": 2983,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_bytes32": {
                  "entryPoint": 2941,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_uint160": {
                  "entryPoint": 2971,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 2210,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_597": {
                  "entryPoint": 2426,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 2692,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 247,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3857,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_contract_UpgradeableBeacon": {
                  "entryPoint": 1057,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 2657,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_UpgradeableBeacon": {
                  "entryPoint": 2255,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 4373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 2840,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_8714": {
                  "entryPoint": 4505,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9924": {
                  "entryPoint": 3727,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f94f": {
                  "entryPoint": 4242,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 1834,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1451,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 232,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 163,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 1861,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 3812,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 1839,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_96": {
                  "entryPoint": 2965,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 2229,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 1018,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "store_literal_in_memory_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0": {
                  "entryPoint": 4283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 2711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676": {
                  "entryPoint": 4414,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 3637,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3818,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3860,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 523,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint96": {
                  "entryPoint": 484,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 1456,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b6105ab565b61001e60003561008d565b80630defbce9146100885780631bce45831461008357806359659e901461007e578063715018a6146100795780638bdb5fd2146100745780638da5cb5b1461006f5763f2fde38b0361000e57610578565b610543565b610501565b6104ce565b610499565b6103b7565b610350565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b6100bc906100a8565b90565b6100c8816100b3565b036100cf57565b600080fd5b905035906100e1826100bf565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610117906100ed565b810190811067ffffffffffffffff82111761013157604052565b6100f7565b90610149610142610093565b928361010d565b565b67ffffffffffffffff8111610169576101656020916100ed565b0190565b6100f7565b90826000939282370152565b9092919261018f61018a8261014b565b610136565b938185526020850190828401116101ab576101a99261016e565b565b6100e8565b9080601f830112156101ce578160206101cb9335910161017a565b90565b6100e3565b6bffffffffffffffffffffffff1690565b6101ed816101d3565b036101f457565b600080fd5b90503590610206826101e4565b565b90565b61021481610208565b0361021b57565b600080fd5b9050359061022d8261020b565b565b610140818303126103285761024782600083016100d4565b9261025583602084016100d4565b92604083013567ffffffffffffffff811161032357816102769185016101b0565b92606081013567ffffffffffffffff811161031e57826102979183016101b0565b92608082013567ffffffffffffffff811161031957836102b89184016101b0565b9260a083013567ffffffffffffffff811161031457816102d99185016101b0565b926102e78260c083016100d4565b926103116102f88460e085016101f9565b936103078161010086016100d4565b9361012001610220565b90565b6100a3565b6100a3565b6100a3565b6100a3565b61009e565b610336906100b3565b9052565b919061034e9060006020850194019061032d565b565b3461038d5761038961037861036636600461022f565b98979097969196959295949394610756565b610380610093565b9182918261033a565b0390f35b610099565b906020828203126103ac576103a9916000016100d4565b90565b61009e565b60000190565b346103e5576103cf6103ca366004610392565b61096f565b6103d7610093565b806103e1816103b1565b0390f35b610099565b60009103126103f557565b61009e565b1c90565b60018060a01b031690565b61041990600861041e93026103fa565b6103fe565b90565b9061042c9154610409565b90565b61043c6001600090610421565b90565b90565b61045661045161045b926100a8565b61043f565b6100a8565b90565b61046790610442565b90565b6104739061045e565b90565b61047f9061046a565b9052565b919061049790600060208501940190610476565b565b346104c9576104a93660046103ea565b6104c56104b461042f565b6104bc610093565b91829182610483565b0390f35b610099565b346104fc576104de3660046103ea565b6104e66109cb565b6104ee610093565b806104f8816103b1565b0390f35b610099565b3461053e5761053a61052961051736600461022f565b989790979691969592959493946109d5565b610531610093565b9182918261033a565b0390f35b610099565b34610573576105533660046103ea565b61056f61055e610a6e565b610566610093565b9182918261033a565b0390f35b610099565b346105a65761059061058b366004610392565b610b72565b610598610093565b806105a2816103b1565b0390f35b610099565b600080fd5b600090565b5190565b60209181520190565b60005b8381106105d6575050906000910152565b8060209183015181850152016105c5565b61060661060f602093610614936105fd816105b5565b938480936105b9565b958691016105c2565b6100ed565b0190565b610621906101d3565b9052565b61062e90610208565b9052565b946106a56106b0916106976106c4976106896101009b9f9e9c969861067a6106cb9f9a6106ba9a8e61066d610120820193600083019061032d565b60208184039101526105e7565b908c60408184039101526105e7565b908a820360608c01526105e7565b9088820360808a01526105e7565b9a60a087019061032d565b60c0850190610618565b60e083019061032d565b0190610625565b565b60200190565b5190565b906106e96106e48361014b565b610136565b918252565b6106f860006106d7565b90565b6107036106ee565b90565b61070f90610442565b90565b61071b90610706565b90565b6107279061045e565b90565b600080fd5b60e01b90565b600091031261074057565b61009e565b61074d610093565b3d6000823e3d90fd5b6107c990846107a7856107988c8e9f809c9a9f9d9b98999d6107766105b0565b508a9496928d8d8c90919293949561078c610093565b9a8b9960208b01610632565b6020820181038252038261010d565b6107b96107b3826106d3565b916106cd565b20906107c36106fb565b91610cf6565b986107db6107d68b610712565b61071e565b95634c62cd9b93979992949598919091873b1561089d57600099610813978b9761081e96610807610093565b9e8f9d8e9c8d9b61072f565b8b5260048b01610632565b03925af180156108985761086b575b50806108657fd8ad75647a93de9d8d617559d87f1c27bc23fb6237b94054baf34aafbe85ad039161085c610093565b9182918261033a565b0390a190565b61088b9060003d8111610891575b610883818361010d565b810190610735565b3861082d565b503d610879565b610745565b61072a565b6108b3906108ae610eb8565b6108dc565b565b60001c90565b6108c76108cc916108b5565b6103fe565b90565b6108d990546108bb565b90565b6108ee6108e960016108cf565b61046a565b90633659cfe690823b1561096a576109269261091b6000809461090f610093565b9687958694859361072f565b83526004830161033a565b03925af1801561096557610938575b50565b6109589060003d811161095e575b610950818361010d565b810190610735565b38610935565b503d610946565b610745565b61072a565b610978906108a2565b565b610982610eb8565b61098a6109b7565b565b90565b6109a361099e6109a89261098c565b61043f565b6100a8565b90565b6109b49061098f565b90565b6109c96109c460006109ab565b610f34565b565b6109d361097a565b565b979096610a1d96610a3f9a9396610a0e9695996109f06105b0565b50979995909192939495610a02610093565b9a8b9960208b01610632565b6020820181038252038261010d565b610a2f610a29826106d3565b916106cd565b2090610a396106fb565b91610f95565b90565b60018060a01b031690565b610a59610a5e916108b5565b610a42565b90565b610a6b9054610a4d565b90565b610a766105b0565b50610a816000610a61565b90565b610a9590610a90610eb8565b610b41565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610af260266040926105b9565b610afb81610a97565b0190565b610b159060208101906000818303910152610ae5565b90565b15610b1f57565b610b27610093565b62461bcd60e51b815280610b3d60048201610aff565b0390fd5b610b7090610b6b81610b64610b5e610b5960006109ab565b6100b3565b916100b3565b1415610b18565b610f34565b565b610b7b90610a84565b565b90565b610b8c610b9191610208565b610b7d565b9052565b60601b90565b610ba490610b95565b90565b610bb090610b9b565b90565b610bbf610bc4916100b3565b610ba7565b9052565b905090565b610bf2610be992602092610be0816106d3565b94858093610bc8565b938491016105c2565b0190565b60148093610c1a602084610c12610c2296610c299b9a98610b80565b018092610bb3565b018092610bb3565b0190610bcd565b90565b90565b610c43610c3e610c489261098c565b61043f565b610c2c565b90565b610c5490610442565b90565b610c6090610c4b565b90565b610c6c90610442565b90565b610c7890610c63565b90565b610c849061045e565b90565b60209181520190565b610caf610cb8602093610cbd93610ca6816106d3565b93848093610c87565b958691016105c2565b6100ed565b0190565b610ce6610cf3949293610cdc6060840195600085019061032d565b602083019061032d565b6040818403910152610c90565b90565b610d869093929193610d066105b0565b50610d468591610d37610d21610d1c60016108cf565b61046a565b8690610d2b610093565b95869460208601610bf6565b6020820181038252038261010d565b610d58610d52826106d3565b916106cd565b2061148a610d6860208201610136565b908082526112a36020830139610d816000929192610c2f565b6111c2565b92610da0610d9b610d9686610c57565b610c6f565b610c7b565b63cf7a1d779190610db9610db460016108cf565b61046a565b9392813b15610e30576000610de191610dec8296610dd5610093565b9889978896879561072f565b855260048501610cc1565b03925af18015610e2b57610dfe575b50565b610e1e9060003d8111610e24575b610e16818361010d565b810190610735565b38610dfb565b503d610e0c565b610745565b61072a565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610e69602080926105b9565b610e7281610e35565b0190565b610e8c9060208101906000818303910152610e5d565b90565b15610e9657565b610e9e610093565b62461bcd60e51b815280610eb460048201610e76565b0390fd5b610ee2610ec3610a6e565b610edc610ed6610ed161124b565b6100b3565b916100b3565b14610e8f565b565b60001b90565b90610efb60018060a01b0391610ee4565b9181191691161790565b610f0e9061045e565b90565b90565b90610f29610f24610f3092610f05565b610f11565b8254610eea565b9055565b610f3e6000610a61565b610f49826000610f14565b90610f7d610f777f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610f05565b91610f05565b91610f86610093565b80610f90816103b1565b0390a3565b6110289291610fd2610fe192610fa96105b0565b509193610fbe610fb960016108cf565b61046a565b610fc6610093565b95869460208601610bf6565b6020820181038252038261010d565b610ff3610fed826106d3565b916106cd565b2061148a61100360208201610136565b908082526112a3602083013961102161101b826106d3565b916106cd565b2090611258565b90565b6110349061045e565b90565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b61106c601d6020926105b9565b61107581611037565b0190565b61108f906020810190600081830391015261105f565b90565b1561109957565b6110a1610093565b62461bcd60e51b8152806110b760048201611079565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b6110ef602080926105b9565b6110f8816110bb565b0190565b61111290602081019060008183039101526110e3565b90565b1561111c57565b611124610093565b62461bcd60e51b81528061113a600482016110fc565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b61117360196020926105b9565b61117c8161113e565b0190565b6111969060208101906000818303910152611166565b90565b156111a057565b6111a8610093565b62461bcd60e51b8152806111be60048201611180565b0390fd5b9190916111cd6105b0565b506111f46111da3061102b565b316111ed6111e784610c2c565b91610c2c565b1015611092565b61121a611200836106d3565b61121361120d6000610c2f565b91610c2c565b1415611115565b60208251920190f5906112498261124261123c61123760006109ab565b6100b3565b916100b3565b1415611199565b565b6112536105b0565b503390565b90611276916112656105b0565b50906112703061102b565b91611279565b90565b90605592600b926112886105b0565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a26469706673582212203b72369d1d46611771220d986b45a922fa914be16aa4d3dbc40e20507531653264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0xDEFBCE9 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8BDB5FD2 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x578 JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH2 0x501 JUMP JUMPDEST PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x3B7 JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x117 SWAP1 PUSH2 0xED JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x131 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST SWAP1 PUSH2 0x149 PUSH2 0x142 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x10D JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x169 JUMPI PUSH2 0x165 PUSH1 0x20 SWAP2 PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF7 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x18F PUSH2 0x18A DUP3 PUSH2 0x14B JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x1AB JUMPI PUSH2 0x1A9 SWAP3 PUSH2 0x16E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xE8 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x1CE JUMPI DUP2 PUSH1 0x20 PUSH2 0x1CB SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x17A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1ED DUP2 PUSH2 0x1D3 JUMP JUMPDEST SUB PUSH2 0x1F4 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x206 DUP3 PUSH2 0x1E4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x214 DUP2 PUSH2 0x208 JUMP JUMPDEST SUB PUSH2 0x21B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x22D DUP3 PUSH2 0x20B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x140 DUP2 DUP4 SUB SLT PUSH2 0x328 JUMPI PUSH2 0x247 DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x255 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x323 JUMPI DUP2 PUSH2 0x276 SWAP2 DUP6 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x31E JUMPI DUP3 PUSH2 0x297 SWAP2 DUP4 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x319 JUMPI DUP4 PUSH2 0x2B8 SWAP2 DUP5 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x314 JUMPI DUP2 PUSH2 0x2D9 SWAP2 DUP6 ADD PUSH2 0x1B0 JUMP JUMPDEST SWAP3 PUSH2 0x2E7 DUP3 PUSH1 0xC0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x311 PUSH2 0x2F8 DUP5 PUSH1 0xE0 DUP6 ADD PUSH2 0x1F9 JUMP JUMPDEST SWAP4 PUSH2 0x307 DUP2 PUSH2 0x100 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH2 0x120 ADD PUSH2 0x220 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x336 SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x34E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x38D JUMPI PUSH2 0x389 PUSH2 0x378 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F JUMP JUMPDEST SWAP9 SWAP8 SWAP1 SWAP8 SWAP7 SWAP2 SWAP7 SWAP6 SWAP3 SWAP6 SWAP5 SWAP4 SWAP5 PUSH2 0x756 JUMP JUMPDEST PUSH2 0x380 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3AC JUMPI PUSH2 0x3A9 SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x3E5 JUMPI PUSH2 0x3CF PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x392 JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x3D7 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x3E1 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x3F5 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x419 SWAP1 PUSH1 0x8 PUSH2 0x41E SWAP4 MUL PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x42C SWAP2 SLOAD PUSH2 0x409 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x43C PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x421 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x456 PUSH2 0x451 PUSH2 0x45B SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x467 SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x473 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47F SWAP1 PUSH2 0x46A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x497 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x476 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4C9 JUMPI PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4B4 PUSH2 0x42F JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x483 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4FC JUMPI PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x4E6 PUSH2 0x9CB JUMP JUMPDEST PUSH2 0x4EE PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x4F8 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x53E JUMPI PUSH2 0x53A PUSH2 0x529 PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F JUMP JUMPDEST SWAP9 SWAP8 SWAP1 SWAP8 SWAP7 SWAP2 SWAP7 SWAP6 SWAP3 SWAP6 SWAP5 SWAP4 SWAP5 PUSH2 0x9D5 JUMP JUMPDEST PUSH2 0x531 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x573 JUMPI PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x56F PUSH2 0x55E PUSH2 0xA6E JUMP JUMPDEST PUSH2 0x566 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x5A6 JUMPI PUSH2 0x590 PUSH2 0x58B CALLDATASIZE PUSH1 0x4 PUSH2 0x392 JUMP JUMPDEST PUSH2 0xB72 JUMP JUMPDEST PUSH2 0x598 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x5A2 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x5D6 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x5C5 JUMP JUMPDEST PUSH2 0x606 PUSH2 0x60F PUSH1 0x20 SWAP4 PUSH2 0x614 SWAP4 PUSH2 0x5FD DUP2 PUSH2 0x5B5 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x5B9 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x621 SWAP1 PUSH2 0x1D3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x62E SWAP1 PUSH2 0x208 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP5 PUSH2 0x6A5 PUSH2 0x6B0 SWAP2 PUSH2 0x697 PUSH2 0x6C4 SWAP8 PUSH2 0x689 PUSH2 0x100 SWAP12 SWAP16 SWAP15 SWAP13 SWAP7 SWAP9 PUSH2 0x67A PUSH2 0x6CB SWAP16 SWAP11 PUSH2 0x6BA SWAP11 DUP15 PUSH2 0x66D PUSH2 0x120 DUP3 ADD SWAP4 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP13 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP11 DUP3 SUB PUSH1 0x60 DUP13 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP1 DUP9 DUP3 SUB PUSH1 0x80 DUP11 ADD MSTORE PUSH2 0x5E7 JUMP JUMPDEST SWAP11 PUSH1 0xA0 DUP8 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD SWAP1 PUSH2 0x618 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST ADD SWAP1 PUSH2 0x625 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x6E9 PUSH2 0x6E4 DUP4 PUSH2 0x14B JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x6F8 PUSH1 0x0 PUSH2 0x6D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x703 PUSH2 0x6EE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x70F SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x71B SWAP1 PUSH2 0x706 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x727 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x740 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x74D PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x7C9 SWAP1 DUP5 PUSH2 0x7A7 DUP6 PUSH2 0x798 DUP13 DUP15 SWAP16 DUP1 SWAP13 SWAP11 SWAP16 SWAP14 SWAP12 SWAP9 SWAP10 SWAP14 PUSH2 0x776 PUSH2 0x5B0 JUMP JUMPDEST POP DUP11 SWAP5 SWAP7 SWAP3 DUP14 DUP14 DUP13 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0x78C PUSH2 0x93 JUMP JUMPDEST SWAP11 DUP12 SWAP10 PUSH1 0x20 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0x7B9 PUSH2 0x7B3 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x7C3 PUSH2 0x6FB JUMP JUMPDEST SWAP2 PUSH2 0xCF6 JUMP JUMPDEST SWAP9 PUSH2 0x7DB PUSH2 0x7D6 DUP12 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x71E JUMP JUMPDEST SWAP6 PUSH4 0x4C62CD9B SWAP4 SWAP8 SWAP10 SWAP3 SWAP5 SWAP6 SWAP9 SWAP2 SWAP1 SWAP2 DUP8 EXTCODESIZE ISZERO PUSH2 0x89D JUMPI PUSH1 0x0 SWAP10 PUSH2 0x813 SWAP8 DUP12 SWAP8 PUSH2 0x81E SWAP7 PUSH2 0x807 PUSH2 0x93 JUMP JUMPDEST SWAP15 DUP16 SWAP14 DUP15 SWAP13 DUP14 SWAP12 PUSH2 0x72F JUMP JUMPDEST DUP12 MSTORE PUSH1 0x4 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x898 JUMPI PUSH2 0x86B JUMPI JUMPDEST POP DUP1 PUSH2 0x865 PUSH32 0xD8AD75647A93DE9D8D617559D87F1C27BC23FB6237B94054BAF34AAFBE85AD03 SWAP2 PUSH2 0x85C PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x33A JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x88B SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x891 JUMPI JUMPDEST PUSH2 0x883 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0x82D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x879 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH2 0x8B3 SWAP1 PUSH2 0x8AE PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x8C7 PUSH2 0x8CC SWAP2 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8D9 SWAP1 SLOAD PUSH2 0x8BB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8EE PUSH2 0x8E9 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x96A JUMPI PUSH2 0x926 SWAP3 PUSH2 0x91B PUSH1 0x0 DUP1 SWAP5 PUSH2 0x90F PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x72F JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x33A JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x965 JUMPI PUSH2 0x938 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x958 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x95E JUMPI JUMPDEST PUSH2 0x950 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0x935 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x946 JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH2 0x978 SWAP1 PUSH2 0x8A2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x982 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0x98A PUSH2 0x9B7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9A3 PUSH2 0x99E PUSH2 0x9A8 SWAP3 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B4 SWAP1 PUSH2 0x98F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9C9 PUSH2 0x9C4 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9D3 PUSH2 0x97A JUMP JUMPDEST JUMP JUMPDEST SWAP8 SWAP1 SWAP7 PUSH2 0xA1D SWAP7 PUSH2 0xA3F SWAP11 SWAP4 SWAP7 PUSH2 0xA0E SWAP7 SWAP6 SWAP10 PUSH2 0x9F0 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP8 SWAP10 SWAP6 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0xA02 PUSH2 0x93 JUMP JUMPDEST SWAP11 DUP12 SWAP10 PUSH1 0x20 DUP12 ADD PUSH2 0x632 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xA2F PUSH2 0xA29 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xA39 PUSH2 0x6FB JUMP JUMPDEST SWAP2 PUSH2 0xF95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xA59 PUSH2 0xA5E SWAP2 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0xA42 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA6B SWAP1 SLOAD PUSH2 0xA4D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA76 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0xA81 PUSH1 0x0 PUSH2 0xA61 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA95 SWAP1 PUSH2 0xA90 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAF2 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0xAFB DUP2 PUSH2 0xA97 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB15 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAE5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB1F JUMPI JUMP JUMPDEST PUSH2 0xB27 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB3D PUSH1 0x4 DUP3 ADD PUSH2 0xAFF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB70 SWAP1 PUSH2 0xB6B DUP2 PUSH2 0xB64 PUSH2 0xB5E PUSH2 0xB59 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xB18 JUMP JUMPDEST PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xB7B SWAP1 PUSH2 0xA84 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xB8C PUSH2 0xB91 SWAP2 PUSH2 0x208 JUMP JUMPDEST PUSH2 0xB7D JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xBA4 SWAP1 PUSH2 0xB95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBB0 SWAP1 PUSH2 0xB9B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xBBF PUSH2 0xBC4 SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xBF2 PUSH2 0xBE9 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xBE0 DUP2 PUSH2 0x6D3 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xBC8 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xC1A PUSH1 0x20 DUP5 PUSH2 0xC12 PUSH2 0xC22 SWAP7 PUSH2 0xC29 SWAP12 SWAP11 SWAP9 PUSH2 0xB80 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xBB3 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xBB3 JUMP JUMPDEST ADD SWAP1 PUSH2 0xBCD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC43 PUSH2 0xC3E PUSH2 0xC48 SWAP3 PUSH2 0x98C JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST PUSH2 0xC2C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC54 SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC60 SWAP1 PUSH2 0xC4B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC6C SWAP1 PUSH2 0x442 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC78 SWAP1 PUSH2 0xC63 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC84 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xCAF PUSH2 0xCB8 PUSH1 0x20 SWAP4 PUSH2 0xCBD SWAP4 PUSH2 0xCA6 DUP2 PUSH2 0x6D3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xC87 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0xED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xCE6 PUSH2 0xCF3 SWAP5 SWAP3 SWAP4 PUSH2 0xCDC PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x32D JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xC90 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD86 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xD06 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0xD46 DUP6 SWAP2 PUSH2 0xD37 PUSH2 0xD21 PUSH2 0xD1C PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xD2B PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xBF6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xD58 PUSH2 0xD52 DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD68 PUSH1 0x20 DUP3 ADD PUSH2 0x136 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x12A3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD81 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xC2F JUMP JUMPDEST PUSH2 0x11C2 JUMP JUMPDEST SWAP3 PUSH2 0xDA0 PUSH2 0xD9B PUSH2 0xD96 DUP7 PUSH2 0xC57 JUMP JUMPDEST PUSH2 0xC6F JUMP JUMPDEST PUSH2 0xC7B JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xDB9 PUSH2 0xDB4 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 PUSH2 0xDE1 SWAP2 PUSH2 0xDEC DUP3 SWAP7 PUSH2 0xDD5 PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x72F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xCC1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE2B JUMPI PUSH2 0xDFE JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xE1E SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE24 JUMPI JUMPDEST PUSH2 0xE16 DUP2 DUP4 PUSH2 0x10D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x735 JUMP JUMPDEST CODESIZE PUSH2 0xDFB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE0C JUMP JUMPDEST PUSH2 0x745 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xE69 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0xE72 DUP2 PUSH2 0xE35 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE8C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xE5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE96 JUMPI JUMP JUMPDEST PUSH2 0xE9E PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xEB4 PUSH1 0x4 DUP3 ADD PUSH2 0xE76 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEE2 PUSH2 0xEC3 PUSH2 0xA6E JUMP JUMPDEST PUSH2 0xEDC PUSH2 0xED6 PUSH2 0xED1 PUSH2 0x124B JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xE8F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEFB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xEE4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xF0E SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF29 PUSH2 0xF24 PUSH2 0xF30 SWAP3 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0xF11 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xEEA JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF3E PUSH1 0x0 PUSH2 0xA61 JUMP JUMPDEST PUSH2 0xF49 DUP3 PUSH1 0x0 PUSH2 0xF14 JUMP JUMPDEST SWAP1 PUSH2 0xF7D PUSH2 0xF77 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xF05 JUMP JUMPDEST SWAP2 PUSH2 0xF05 JUMP JUMPDEST SWAP2 PUSH2 0xF86 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xF90 DUP2 PUSH2 0x3B1 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x1028 SWAP3 SWAP2 PUSH2 0xFD2 PUSH2 0xFE1 SWAP3 PUSH2 0xFA9 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xFBE PUSH2 0xFB9 PUSH1 0x1 PUSH2 0x8CF JUMP JUMPDEST PUSH2 0x46A JUMP JUMPDEST PUSH2 0xFC6 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xBF6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x10D JUMP JUMPDEST PUSH2 0xFF3 PUSH2 0xFED DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0x1003 PUSH1 0x20 DUP3 ADD PUSH2 0x136 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x12A3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0x1021 PUSH2 0x101B DUP3 PUSH2 0x6D3 JUMP JUMPDEST SWAP2 PUSH2 0x6CD JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x1258 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1034 SWAP1 PUSH2 0x45E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x106C PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x1075 DUP2 PUSH2 0x1037 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x108F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x105F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1099 JUMPI JUMP JUMPDEST PUSH2 0x10A1 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10B7 PUSH1 0x4 DUP3 ADD PUSH2 0x1079 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10EF PUSH1 0x20 DUP1 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x10F8 DUP2 PUSH2 0x10BB JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1112 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x111C JUMPI JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x113A PUSH1 0x4 DUP3 ADD PUSH2 0x10FC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1173 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH2 0x117C DUP2 PUSH2 0x113E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1196 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1166 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x11A0 JUMPI JUMP JUMPDEST PUSH2 0x11A8 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x11BE PUSH1 0x4 DUP3 ADD PUSH2 0x1180 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x11CD PUSH2 0x5B0 JUMP JUMPDEST POP PUSH2 0x11F4 PUSH2 0x11DA ADDRESS PUSH2 0x102B JUMP JUMPDEST BALANCE PUSH2 0x11ED PUSH2 0x11E7 DUP5 PUSH2 0xC2C JUMP JUMPDEST SWAP2 PUSH2 0xC2C JUMP JUMPDEST LT ISZERO PUSH2 0x1092 JUMP JUMPDEST PUSH2 0x121A PUSH2 0x1200 DUP4 PUSH2 0x6D3 JUMP JUMPDEST PUSH2 0x1213 PUSH2 0x120D PUSH1 0x0 PUSH2 0xC2F JUMP JUMPDEST SWAP2 PUSH2 0xC2C JUMP JUMPDEST EQ ISZERO PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x1249 DUP3 PUSH2 0x1242 PUSH2 0x123C PUSH2 0x1237 PUSH1 0x0 PUSH2 0x9AB JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x1199 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1253 PUSH2 0x5B0 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1276 SWAP2 PUSH2 0x1265 PUSH2 0x5B0 JUMP JUMPDEST POP SWAP1 PUSH2 0x1270 ADDRESS PUSH2 0x102B JUMP JUMPDEST SWAP2 PUSH2 0x1279 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x1288 PUSH2 0x5B0 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PUSH19 0x369D1D46611771220D986B45A922FA914BE16A LOG4 0xD3 0xDB 0xC4 0xE KECCAK256 POP PUSH22 0x31653264736F6C634300081B00330000000000000000 ",
              "sourceMap": "341:2484:39:-:0;;;;;;;;;-1:-1:-1;341:2484:39;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;746:31:32:-;;;;;;:::i;:::-;;:::o;341:2484:39:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;771:1171;1537:34;771:1171;;1205:300;771:1171;1205:300;771:1171;;;;;;;;;;;;1138:17;;:::i;:::-;1233:10;;1261:4;1283:6;1307:7;;;;1332:11;1361:15;1394:19;1431:21;1470;1205:300;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1182:333;;;;:::i;:::-;;;:::i;:::-;;1556:10;1537:34;;:::i;:::-;;;:::i;:::-;1593:9;1581:33;:22;1593:9;1581:22;:::i;:::-;:33;:::i;:::-;;;1628:10;1652:4;1670:6;1690:7;1711:11;1736:15;1765:19;1798:21;1833;1581:283;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;771:1171;1899:9;;1879:30;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1919:16;:::o;1581:283::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;1063:62:4:-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;341:2484:39:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;2718:127:32:-;2806:16;:6;;;:::i;:::-;:16;:::i;:::-;;;2823:14;2806:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;2718:127;;:::o;2806:32::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;2718:127::-;;;;:::i;:::-;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;341:2484:39:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;1997:825:39:-;;;;2446:300;1997:825;2773:42;1997:825;;;2446:300;1997:825;;;2379:17;;:::i;:::-;2474:10;2502:4;2524:6;2548:7;2573:11;2602:15;2635:19;2672:21;2711;2446:300;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2423:333;;;;:::i;:::-;;;:::i;:::-;;2800:10;2773:42;;:::i;:::-;;;:::i;:::-;2766:49;:::o;341:2484::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1201:85:4:-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;341:2484:39:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;341:2484:39:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;1424:523:32:-;1786:39;1424:523;;;;;1550:20;;:::i;:::-;1630:5;1613:60;1637:11;1658:6;1613:60;1650:15;1658:6;;;:::i;:::-;1650:15;:::i;:::-;1667:5;1613:60;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1603:71;;;;:::i;:::-;;;:::i;:::-;;1708:52;;;;;;:::i;:::-;;;;;;;;;;1786:39;1801:1;1804:10;1816:8;1786:39;;:::i;:::-;;:::i;:::-;1878:12;1835:68;:57;1870:21;1878:12;1870:21;:::i;:::-;1835:57;:::i;:::-;:68;:::i;:::-;;1904:11;1925:6;1917:15;1925:6;;;:::i;:::-;1917:15;:::i;:::-;1934:5;1835:105;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;1424:523;;:::o;1835:105::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;341:2484:39:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;341:2484:39:-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;2174:419:32:-;2538:48;2174:419;;2363:60;;2174:419;2313:7;;:::i;:::-;2380:5;2387:11;2408:6;2400:15;2408:6;;;:::i;:::-;2400:15;:::i;:::-;2363:60;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2353:71;;;;:::i;:::-;;;:::i;:::-;;2467:52;;;;;;:::i;:::-;;;;;;;;;;2457:63;;;;:::i;:::-;;;:::i;:::-;;2538:48;;:::i;:::-;2531:55;:::o;341:2484:39:-;;;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1081:484:15;;;;1168:12;;:::i;:::-;1208:4;1192:73;1200:13;1208:4;1200:13;:::i;:::-;:21;:31;;1225:6;1200:31;:::i;:::-;;;:::i;:::-;;;1192:73;:::i;:::-;1275:65;1283:15;:8;:15;:::i;:::-;:20;;1302:1;1283:20;:::i;:::-;;;:::i;:::-;;;1275:65;:::i;:::-;1393:100;;;;;;;1510:4;1502:56;1510:4;:18;;1518:10;1526:1;1518:10;:::i;:::-;1510:18;:::i;:::-;;;:::i;:::-;;;1502:56;:::i;:::-;1081:484::o;640:96:14:-;693:7;;:::i;:::-;719:10;;712:17;:::o;1769:165:15:-;;1878:49;1769:165;1852:7;;:::i;:::-;1893:4;1899:12;1913:13;1921:4;1913:13;:::i;:::-;1878:49;;:::i;:::-;1871:56;:::o;2177:1772::-;;2345:1598;2177:1772;2345:1598;2177:1772;2278:12;;:::i;:::-;2345:1598;;;;;;;;;;;;;;;;;;;2177:1772;:::o"
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": "0defbce9",
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": "8bdb5fd2",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721ItemsDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryOwner\":\"The owner of the ERC-721 Items Factory\"}},\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates an ERC-721 Items Factory.\"},\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Items proxy.\"},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"},\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"Deployer of ERC-721 Items proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol\":\"ERC721ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"lib/solady/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n///   (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Mints token `id` to `to`, and updates the extra data for token `id` to `value`.\\n    /// Does NOT check if token `id` already exists (assumes `id` is auto-incrementing).\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Update with the owner and extra data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            sstore(add(id, add(id, keccak256(0x00, 0x20))), or(shl(160, value), to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if the token does not exist, or if `from` is not the owner.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                // `TokenDoesNotExist()`, `TransferFromIncorrectOwner()`.\\n                mstore(shl(2, iszero(owner)), 0xceea21b6a1148100)\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                // Revert if `to` is the zero address, or if the account balance overflows.\\n                if iszero(mul(to, and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE))) {\\n                    // `TransferToZeroAddress()`, `AccountBalanceOverflow()`.\\n                    mstore(shl(2, iszero(to)), 0xea553b3401336cea)\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ee665c5f70c388430cd7af42a5b1c2ff0e11ab45e46ab7ba02a6aad29f5cc77\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for byte related operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibBytes.sol)\\nlibrary LibBytes {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated bytes storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native bytes storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct BytesStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the bytes.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  BYTE STORAGE OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function set(BytesStorage storage $, bytes memory s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(s)\\n            let packed := or(0xff, shl(8, n))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(n, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(n, shl(8, mload(add(s, i))))\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                let o := add(s, 0x20)\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), mload(add(o, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to `s`.\\n    function setCalldata(BytesStorage storage $, bytes calldata s) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let packed := or(0xff, shl(8, s.length))\\n            for { let i := 0 } 1 {} {\\n                if iszero(gt(s.length, 0xfe)) {\\n                    i := 0x1f\\n                    packed := or(s.length, shl(8, shr(8, calldataload(s.offset))))\\n                    if iszero(gt(s.length, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    sstore(add(p, shr(5, i)), calldataload(add(s.offset, i)))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, s.length)) { break }\\n                }\\n                break\\n            }\\n            sstore($.slot, packed)\\n        }\\n    }\\n\\n    /// @dev Sets the value of the bytes storage `$` to the empty bytes.\\n    function clear(BytesStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty bytes \\\"\\\".\\n    function isEmpty(BytesStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(BytesStorage storage $) internal view returns (uint256 result) {\\n        result = uint256($._spacer);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := and(0xff, result)\\n            result := or(mul(shr(8, result), eq(0xff, n)), mul(n, iszero(eq(0xff, n))))\\n        }\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(BytesStorage storage $) internal view returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let packed := sload($.slot)\\n            let n := shr(8, packed)\\n            for { let i := 0 } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    mstore(o, packed)\\n                    n := and(0xff, packed)\\n                    i := 0x1f\\n                    if iszero(gt(n, i)) { break }\\n                }\\n                mstore(0x00, $.slot)\\n                for { let p := keccak256(0x00, 0x20) } 1 {} {\\n                    mstore(add(o, i), sload(add(p, shr(5, i))))\\n                    i := add(i, 0x20)\\n                    if iszero(lt(i, n)) { break }\\n                }\\n                break\\n            }\\n            mstore(result, n) // Store the length of the memory.\\n            mstore(add(o, n), 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(add(o, n), 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(BytesStorage storage $, uint256 i) internal view returns (uint8 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let packed := sload($.slot) } 1 {} {\\n                if iszero(eq(or(packed, 0xff), packed)) {\\n                    if iszero(gt(i, 0x1e)) {\\n                        result := byte(i, packed)\\n                        break\\n                    }\\n                    if iszero(gt(i, and(0xff, packed))) {\\n                        mstore(0x00, $.slot)\\n                        let j := sub(i, 0x1f)\\n                        result := byte(and(j, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, j))))\\n                    }\\n                    break\\n                }\\n                if iszero(gt(i, shr(8, packed))) {\\n                    mstore(0x00, $.slot)\\n                    result := byte(and(i, 0x1f), sload(add(keccak256(0x00, 0x20), shr(5, i))))\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      BYTES OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(bytes memory subject, bytes memory needle, bytes memory replacement)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let needleLen := mload(needle)\\n            let replacementLen := mload(replacement)\\n            let d := sub(result, subject) // Memory difference.\\n            let i := add(subject, 0x20) // Subject bytes pointer.\\n            mstore(0x00, add(i, mload(subject))) // End of subject.\\n            if iszero(gt(needleLen, mload(subject))) {\\n                let subjectSearchEnd := add(sub(mload(0x00), needleLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(needleLen, 0x20)) { h := keccak256(add(needle, 0x20), needleLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(needleLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `needleLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, needleLen), h)) {\\n                                mstore(add(i, d), t)\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let j := 0 } 1 {} {\\n                            mstore(add(add(i, d), j), mload(add(add(replacement, 0x20), j)))\\n                            j := add(j, 0x20)\\n                            if iszero(lt(j, replacementLen)) { break }\\n                        }\\n                        d := sub(add(d, replacementLen), needleLen)\\n                        if needleLen {\\n                            i := add(i, needleLen)\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(add(i, d), t)\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n            }\\n            let end := mload(0x00)\\n            let n := add(sub(d, add(result, 0x20)), end)\\n            // Copy the rest of the bytes one word at a time.\\n            for {} lt(i, end) { i := add(i, 0x20) } { mstore(add(i, d), mload(i)) }\\n            let o := add(i, d)\\n            mstore(o, 0) // Zeroize the slot after the bytes.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := not(0) // Initialize to `NOT_FOUND`.\\n            for { let subjectLen := mload(subject) } 1 {} {\\n                if iszero(mload(needle)) {\\n                    result := from\\n                    if iszero(gt(from, subjectLen)) { break }\\n                    result := subjectLen\\n                    break\\n                }\\n                let needleLen := mload(needle)\\n                let subjectStart := add(subject, 0x20)\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLen), needleLen), 1)\\n                let m := shl(3, sub(0x20, and(needleLen, 0x1f)))\\n                let s := mload(add(needle, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLen))) { break }\\n\\n                if iszero(lt(needleLen, 0x20)) {\\n                    for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, needleLen), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(bytes memory subject, bytes memory needle) internal pure returns (uint256) {\\n        return indexOf(subject, needle, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let needleLen := mload(needle)\\n                if gt(needleLen, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), needleLen)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(needle, 0x20), needleLen) } 1 {} {\\n                    if eq(keccak256(subject, needleLen), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return lastIndexOf(subject, needle, type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(bytes memory subject, bytes memory needle) internal pure returns (bool) {\\n        return indexOf(subject, needle) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            // Just using keccak256 directly is actually cheaper.\\n            let t := eq(keccak256(add(subject, 0x20), n), keccak256(add(needle, 0x20), n))\\n            result := lt(gt(n, mload(subject)), t)\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(needle)\\n            let notInRange := gt(n, mload(subject))\\n            // `subject + 0x20 + max(subject.length - needle.length, 0)`.\\n            let t := add(add(subject, 0x20), mul(iszero(notInRange), sub(mload(subject), n)))\\n            // Just using keccak256 directly is actually cheaper.\\n            result := gt(eq(keccak256(t, n), keccak256(add(needle, 0x20), n)), notInRange)\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(bytes memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(or(iszero(times), iszero(l))) {\\n                result := mload(0x40)\\n                subject := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let j := 0 } 1 {} {\\n                        mstore(add(o, j), mload(add(subject, j)))\\n                        j := add(j, 0x20)\\n                        if iszero(lt(j, l)) { break }\\n                    }\\n                    o := add(o, l)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(bytes memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := mload(subject) // Subject length.\\n            if iszero(gt(l, end)) { end := l }\\n            if iszero(gt(l, start)) { start := l }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let n := sub(end, start)\\n                let i := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let j := and(add(n, 0x1f), w) } 1 {} {\\n                    mstore(add(result, j), mload(add(i, j)))\\n                    j := add(j, w) // `sub(j, 0x20)`.\\n                    if iszero(j) { break }\\n                }\\n                let o := add(add(result, 0x20), n)\\n                mstore(o, 0) // Zeroize the slot after the bytes.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n                mstore(result, n) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset.\\n    function slice(bytes memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        result = slice(subject, start, type(uint256).max);\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            end := xor(end, mul(xor(end, subject.length), lt(subject.length, end)))\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, end), sub(end, start))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the bytes.\\n    /// `start` is a byte offset. Faster than Solidity's native slicing.\\n    function sliceCalldata(bytes calldata subject, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            start := xor(start, mul(xor(start, subject.length), lt(subject.length, start)))\\n            result.offset := add(subject.offset, start)\\n            result.length := mul(lt(start, subject.length), sub(subject.length, start))\\n        }\\n    }\\n\\n    /// @dev Reduces the size of `subject` to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncate(bytes memory subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := subject\\n            mstore(mul(lt(n, mload(result)), result), n)\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject`, with the length reduced to `n`.\\n    /// If `n` is greater than the size of `subject`, this will be a no-op.\\n    function truncatedCalldata(bytes calldata subject, uint256 n)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.offset := subject.offset\\n            result.length := xor(n, mul(xor(n, subject.length), lt(subject.length, n)))\\n        }\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(bytes memory subject, bytes memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLen := mload(needle)\\n            if iszero(gt(searchLen, mload(subject))) {\\n                result := mload(0x40)\\n                let i := add(subject, 0x20)\\n                let o := add(result, 0x20)\\n                let subjectSearchEnd := add(sub(add(i, mload(subject)), searchLen), 1)\\n                let h := 0 // The hash of `needle`.\\n                if iszero(lt(searchLen, 0x20)) { h := keccak256(add(needle, 0x20), searchLen) }\\n                let s := mload(add(needle, 0x20))\\n                for { let m := shl(3, sub(0x20, and(searchLen, 0x1f))) } 1 {} {\\n                    let t := mload(i)\\n                    // Whether the first `searchLen % 32` bytes of `subject` and `needle` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(i, searchLen), h)) {\\n                                i := add(i, 1)\\n                                if iszero(lt(i, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        mstore(o, sub(i, add(subject, 0x20))) // Append to `result`.\\n                        o := add(o, 0x20)\\n                        i := add(i, searchLen) // Advance `i` by `searchLen`.\\n                        if searchLen {\\n                            if iszero(lt(i, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    i := add(i, 1)\\n                    if iszero(lt(i, subjectSearchEnd)) { break }\\n                }\\n                mstore(result, shr(5, sub(o, add(result, 0x20)))) // Store the length of `result`.\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(o, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns an arrays of bytess based on the `delimiter` inside of the `subject` bytes.\\n    function split(bytes memory subject, bytes memory delimiter)\\n        internal\\n        pure\\n        returns (bytes[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            for { let prevIndex := 0 } 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let l := sub(index, prevIndex)\\n                    mstore(element, l) // Store the length of the element.\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(l, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    mstore(add(add(element, 0x20), l), 0) // Zeroize the slot after the bytes.\\n                    // Allocate memory for the length and the bytes, rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(l, 0x3f), w)))\\n                    mstore(indexPtr, element) // Store the `element` into the array.\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated bytes of `a` and `b`.\\n    /// Cheaper than `bytes.concat()` and does not de-align the free memory pointer.\\n    function concat(bytes memory a, bytes memory b) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let w := not(0x1f)\\n            let aLen := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLen, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLen := mload(b)\\n            let output := add(result, aLen)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLen, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLen := add(aLen, bLen)\\n            let last := add(add(result, 0x20), totalLen)\\n            mstore(last, 0) // Zeroize the slot after the bytes.\\n            mstore(result, totalLen) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(bytes memory a, bytes memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small bytes.\\n    function eqs(bytes memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(bytes memory a, bytes memory b) internal pure returns (int256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            let bLen := mload(b)\\n            let n := and(xor(aLen, mul(xor(aLen, bLen), lt(bLen, aLen))), not(0x1f))\\n            if n {\\n                for { let i := 0x20 } 1 {} {\\n                    let x := mload(add(a, i))\\n                    let y := mload(add(b, i))\\n                    if iszero(or(xor(x, y), eq(i, n))) {\\n                        i := add(i, 0x20)\\n                        continue\\n                    }\\n                    result := sub(gt(x, y), lt(x, y))\\n                    break\\n                }\\n            }\\n            // forgefmt: disable-next-item\\n            if iszero(result) {\\n                let l := 0x201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201\\n                let x := and(mload(add(add(a, 0x20), n)), shl(shl(3, byte(sub(aLen, n), l)), not(0)))\\n                let y := and(mload(add(add(b, 0x20), n)), shl(shl(3, byte(sub(bLen, n), l)), not(0)))\\n                result := sub(gt(x, y), lt(x, y))\\n                if iszero(result) { result := sub(gt(aLen, bLen), lt(aLen, bLen)) }\\n            }\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(bytes memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the bytes does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the bytes is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the bytes.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` with minimal copying.\\n    function directReturn(bytes[] memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(a) // `a.length`.\\n            let o := add(a, 0x20) // Start of elements in `a`.\\n            let u := a // Highest memory slot.\\n            let w := not(0x1f)\\n            for { let i := 0 } iszero(eq(i, n)) { i := add(i, 1) } {\\n                let c := add(o, shl(5, i)) // Location of pointer to `a[i]`.\\n                let s := mload(c) // `a[i]`.\\n                let l := mload(s) // `a[i].length`.\\n                let r := and(l, 0x1f) // `a[i].length % 32`.\\n                let z := add(0x20, and(l, w)) // Offset of last word in `a[i]` from `s`.\\n                // If `s` comes before `o`, or `s` is not zero right padded.\\n                if iszero(lt(lt(s, o), or(iszero(r), iszero(shl(shl(3, r), mload(add(s, z))))))) {\\n                    let m := mload(0x40)\\n                    mstore(m, l) // Copy `a[i].length`.\\n                    for {} 1 {} {\\n                        mstore(add(m, z), mload(add(s, z))) // Copy `a[i]`, backwards.\\n                        z := add(z, w) // `sub(z, 0x20)`.\\n                        if iszero(z) { break }\\n                    }\\n                    let e := add(add(m, 0x20), l)\\n                    mstore(e, 0) // Zeroize the slot after the copied bytes.\\n                    mstore(0x40, add(e, 0x20)) // Allocate memory.\\n                    s := m\\n                }\\n                mstore(c, sub(s, o)) // Convert to calldata offset.\\n                let t := add(l, add(s, 0x20))\\n                if iszero(lt(t, u)) { u := t }\\n            }\\n            let retStart := add(a, w) // Assumes `a` doesn't start from scratch space.\\n            mstore(retStart, 0x20) // Store the return offset.\\n            return(retStart, add(0x40, sub(u, retStart))) // End the transaction.\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function load(bytes memory a, uint256 offset) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(add(add(a, 0x20), offset))\\n        }\\n    }\\n\\n    /// @dev Returns the word at `offset`, without any bounds checks.\\n    function loadCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := calldataload(add(a.offset, offset))\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a static struct in the calldata. Performs bounds checks.\\n    function staticStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            result.offset := add(a.offset, offset)\\n            result.length := sub(a.length, offset)\\n            if or(shr(64, or(l, a.offset)), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns a slice representing a dynamic struct in the calldata. Performs bounds checks.\\n    function dynamicStructInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(a.offset, s)\\n            result.length := sub(a.length, s)\\n            if or(shr(64, or(s, or(l, a.offset))), gt(offset, l)) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns bytes in calldata. Performs bounds checks.\\n    function bytesInCalldata(bytes calldata a, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let l := sub(a.length, 0x20)\\n            let s := calldataload(add(a.offset, offset)) // Relative offset of `result` from `a.offset`.\\n            result.offset := add(add(a.offset, s), 0x20)\\n            result.length := calldataload(add(a.offset, s))\\n            // forgefmt: disable-next-item\\n            if or(shr(64, or(result.length, or(s, or(l, a.offset)))),\\n                or(gt(add(s, result.length), l), gt(offset, l))) { revert(l, 0x00) }\\n        }\\n    }\\n\\n    /// @dev Returns empty calldata bytes. For silencing the compiler.\\n    function emptyCalldata() internal pure returns (bytes calldata result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x320c3c933df51e8fd6f1fc96de721c8cc6f1be1d4c586c11f1c472a23b86eba5\",\"license\":\"MIT\"},\"lib/solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {LibBytes} from \\\"./LibBytes.sol\\\";\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// @dev Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STRUCTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Goated string storage struct that totally MOGs, no cap, fr.\\n    /// Uses less gas and bytecode than Solidity's native string storage. It's meta af.\\n    /// Packs length with the first 31 bytes if <255 bytes, so it\\u2019s mad tight.\\n    struct StringStorage {\\n        bytes32 _spacer;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /// @dev The input string must be a 7-bit ASCII.\\n    error StringNot7BitASCII();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant ALPHANUMERIC_7_BIT_ASCII = 0x7fffffe07fffffe03ff000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant LETTERS_7_BIT_ASCII = 0x7fffffe07fffffe0000000000000000;\\n\\n    /// @dev Lookup for 'abcdefghijklmnopqrstuvwxyz'.\\n    uint128 internal constant LOWERCASE_7_BIT_ASCII = 0x7fffffe000000000000000000000000;\\n\\n    /// @dev Lookup for 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\\n    uint128 internal constant UPPERCASE_7_BIT_ASCII = 0x7fffffe0000000000000000;\\n\\n    /// @dev Lookup for '0123456789'.\\n    uint128 internal constant DIGITS_7_BIT_ASCII = 0x3ff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefABCDEF'.\\n    uint128 internal constant HEXDIGITS_7_BIT_ASCII = 0x7e0000007e03ff000000000000;\\n\\n    /// @dev Lookup for '01234567'.\\n    uint128 internal constant OCTDIGITS_7_BIT_ASCII = 0xff000000000000;\\n\\n    /// @dev Lookup for '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant PRINTABLE_7_BIT_ASCII = 0x7fffffffffffffffffffffff00003e00;\\n\\n    /// @dev Lookup for '!\\\"#$%&\\\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~'.\\n    uint128 internal constant PUNCTUATION_7_BIT_ASCII = 0x78000001f8000001fc00fffe00000000;\\n\\n    /// @dev Lookup for ' \\\\t\\\\n\\\\r\\\\x0b\\\\x0c'.\\n    uint128 internal constant WHITESPACE_7_BIT_ASCII = 0x100003e00;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                 STRING STORAGE OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function set(StringStorage storage $, string memory s) internal {\\n        LibBytes.set(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to `s`.\\n    function setCalldata(StringStorage storage $, string calldata s) internal {\\n        LibBytes.setCalldata(bytesStorage($), bytes(s));\\n    }\\n\\n    /// @dev Sets the value of the string storage `$` to the empty string.\\n    function clear(StringStorage storage $) internal {\\n        delete $._spacer;\\n    }\\n\\n    /// @dev Returns whether the value stored is `$` is the empty string \\\"\\\".\\n    function isEmpty(StringStorage storage $) internal view returns (bool) {\\n        return uint256($._spacer) & 0xff == uint256(0);\\n    }\\n\\n    /// @dev Returns the length of the value stored in `$`.\\n    function length(StringStorage storage $) internal view returns (uint256) {\\n        return LibBytes.length(bytesStorage($));\\n    }\\n\\n    /// @dev Returns the value stored in `$`.\\n    function get(StringStorage storage $) internal view returns (string memory) {\\n        return string(LibBytes.get(bytesStorage($)));\\n    }\\n\\n    /// @dev Returns the uint8 at index `i`. If out-of-bounds, returns 0.\\n    function uint8At(StringStorage storage $, uint256 i) internal view returns (uint8) {\\n        return LibBytes.uint8At(bytesStorage($), i);\\n    }\\n\\n    /// @dev Helper to cast `$` to a `BytesStorage`.\\n    function bytesStorage(StringStorage storage $)\\n        internal\\n        pure\\n        returns (LibBytes.BytesStorage storage casted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            casted.slot := $.slot\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end of the memory to calculate the length later.\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 1)`.\\n                // Store the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(result, add(48, mod(temp, 10)))\\n                temp := div(temp, 10) // Keep dividing `temp` until zero.\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20) // Move the pointer 32 bytes back to make room for the length.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory result) {\\n        if (value >= 0) return toString(uint256(value));\\n        unchecked {\\n            result = toString(~uint256(value) + 1);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let n := mload(result) // Load the string length.\\n            mstore(result, 0x2d) // Store the '-' character.\\n            result := sub(result, 1) // Move back the string pointer by a byte.\\n            mstore(result, add(n, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2 + 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value, byteCount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `byteCount` bytes.\\n    /// The output is not prefixed with \\\"0x\\\" and is encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `byteCount * 2` bytes.\\n    /// Reverts if `byteCount` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 byteCount)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `byteCount * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            result := add(mload(0x40), and(add(shl(1, byteCount), 0x42), not(0x1f)))\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(result, add(byteCount, byteCount))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(result, start)) { break }\\n            }\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(add(result, o), 0x3078) // Store the \\\"0x\\\" prefix, accounting for leading zero.\\n            result := sub(add(result, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(result, 0x20))), 0x30) // Whether leading zero is present.\\n            let n := mload(result) // Get the length.\\n            result := add(result, o) // Move the pointer, accounting for leading zero.\\n            mstore(result, sub(n, o)) // Store the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            result := add(mload(0x40), 0x80)\\n            mstore(0x40, add(result, 0x20)) // Allocate memory.\\n            mstore(result, 0) // Zeroize the slot after the string.\\n\\n            let end := result // Cache the end to calculate the length later.\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                result := add(result, w) // `sub(result, 2)`.\\n                mstore8(add(result, 1), mload(and(temp, 15)))\\n                mstore8(result, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(end, result)\\n            result := sub(result, 0x20)\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory result) {\\n        result = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(result, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Allocate memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(result, 0x80))\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n\\n            result := add(result, 2)\\n            mstore(result, 40) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(add(o, 40), 0) // Zeroize the slot after the string.\\n            value := shl(96, value)\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory result) {\\n        result = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := add(mload(result), 2) // Compute the length.\\n            mstore(result, 0x3078) // Store the \\\"0x\\\" prefix.\\n            result := sub(result, 2) // Move the pointer.\\n            mstore(result, n) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(raw)\\n            result := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(result, add(n, n)) // Store the length of the output.\\n\\n            mstore(0x0f, 0x30313233343536373839616263646566) // Store the \\\"0123456789abcdef\\\" lookup.\\n            let o := add(result, 0x20)\\n            let end := add(raw, n)\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            let mask := shl(7, div(not(0), 255))\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string,\\n    /// AND all characters are in the `allowed` lookup.\\n    /// Note: If `s` is empty, returns true regardless of `allowed`.\\n    function is7BitASCII(string memory s, uint128 allowed) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            if mload(s) {\\n                let allowed_ := shr(128, shl(128, allowed))\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := and(result, shr(byte(0, mload(o)), allowed_))\\n                    o := add(o, 1)\\n                    if iszero(and(result, lt(o, end))) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Converts the bytes in the 7-bit ASCII string `s` to\\n    /// an allowed lookup for use in `is7BitASCII(s, allowed)`.\\n    /// To save runtime gas, you can cache the result in an immutable variable.\\n    function to7BitASCIIAllowedLookup(string memory s) internal pure returns (uint128 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                let o := add(s, 0x20)\\n                for { let end := add(o, mload(s)) } 1 {} {\\n                    result := or(result, shl(byte(0, mload(o)), 1))\\n                    o := add(o, 1)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                if shr(128, result) {\\n                    mstore(0x00, 0xc9807e0d) // `StringNot7BitASCII()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `needle` replaced with `replacement`.\\n    function replace(string memory subject, string memory needle, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.replace(bytes(subject), bytes(needle), bytes(replacement)));\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function indexOf(string memory subject, string memory needle) internal pure returns (uint256) {\\n        return LibBytes.indexOf(bytes(subject), bytes(needle), 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle, uint256 from)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), from);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `needle` in `subject`,\\n    /// needleing from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `needle` is not found.\\n    function lastIndexOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return LibBytes.lastIndexOf(bytes(subject), bytes(needle), type(uint256).max);\\n    }\\n\\n    /// @dev Returns true if `needle` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.contains(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `needle`.\\n    function startsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.startsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `needle`.\\n    function endsWith(string memory subject, string memory needle) internal pure returns (bool) {\\n        return LibBytes.endsWith(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times) internal pure returns (string memory) {\\n        return string(LibBytes.repeat(bytes(subject), times));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(LibBytes.slice(bytes(subject), start, end));\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start) internal pure returns (string memory) {\\n        return string(LibBytes.slice(bytes(subject), start, type(uint256).max));\\n    }\\n\\n    /// @dev Returns all the indices of `needle` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory needle)\\n        internal\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return LibBytes.indicesOf(bytes(subject), bytes(needle));\\n    }\\n\\n    /// @dev Returns an arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        bytes[] memory a = LibBytes.split(bytes(subject), bytes(delimiter));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := a\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(LibBytes.concat(bytes(a), bytes(b)));\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let n := mload(subject)\\n            if n {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let d := sub(subject, result)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                for { let end := add(o, n) } 1 {} {\\n                    let b := byte(0, mload(add(d, o)))\\n                    mstore8(o, xor(and(shr(b, flags), 0x20), b))\\n                    o := add(o, 1)\\n                    if eq(o, end) { break }\\n                }\\n                mstore(result, n) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n) // Store the length.\\n            let o := add(result, 0x20)\\n            mstore(o, s) // Store the bytes of the string.\\n            mstore(add(o, n), 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(result, 0x40)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let end := add(s, mload(s))\\n            let o := add(result, 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(o, mload(and(t, 0x1f)))\\n                o := add(o, shr(5, t))\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(o, c)\\n                        o := add(o, 1)\\n                        continue\\n                    }\\n                    mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(o, 1), c)\\n                    o := add(o, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(o, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    o := add(o, 6)\\n                    continue\\n                }\\n                mstore8(o, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(o, 1), mload(add(c, 8)))\\n                o := add(o, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(o, 34)\\n                o := add(1, o)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Encodes `s` so that it can be safely used in a URI,\\n    /// just like `encodeURIComponent` in JavaScript.\\n    /// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    /// See: https://datatracker.ietf.org/doc/html/rfc2396\\n    /// See: https://datatracker.ietf.org/doc/html/rfc3986\\n    function encodeURIComponent(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            // Store \\\"0123456789ABCDEF\\\" in scratch space.\\n            // Uppercased to be consistent with JavaScript's implementation.\\n            mstore(0x0f, 0x30313233343536373839414243444546)\\n            let o := add(result, 0x20)\\n            for { let end := add(s, mload(s)) } iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // If not in `[0-9A-Z-a-z-_.!~*'()]`.\\n                if iszero(and(1, shr(c, 0x47fffffe87fffffe03ff678200000000))) {\\n                    mstore8(o, 0x25) // '%'.\\n                    mstore8(add(o, 1), mload(and(shr(4, c), 15)))\\n                    mstore8(add(o, 2), mload(and(c, 15)))\\n                    o := add(o, 3)\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Returns 0 if `a == b`, -1 if `a < b`, +1 if `a > b`.\\n    /// If `a` == b[:a.length]`, and `a.length < b.length`, returns -1.\\n    function cmp(string memory a, string memory b) internal pure returns (int256) {\\n        return LibBytes.cmp(bytes(a), bytes(b));\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n            mstore(0x40, add(result, 0x40)) // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(result, 0) // Zeroize the length slot.\\n            mstore(add(result, 0x1f), packed) // Store the length and bytes.\\n            mstore(add(add(result, 0x20), mload(result)), 0) // Right pad with zeroes.\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLen := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    or( // Load the length and the bytes of `a` and `b`.\\n                    shl(shl(3, sub(0x1f, aLen)), mload(add(a, aLen))), mload(sub(add(b, 0x1e), aLen))),\\n                    // `totalLen != 0 && totalLen < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLen, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            resultA := mload(0x40) // Grab the free memory pointer.\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retUnpaddedSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retUnpaddedSize), 0)\\n            mstore(retStart, 0x20) // Store the return offset.\\n            // End the transaction, returning the string.\\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b219f6ccda90c08e2debae62618d78d6f0cef086eb6c9503793d7f12815dd\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"},\"src/tokens/ERC721/ERC721BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC2981Controlled } from \\\"../common/ERC2981Controlled.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC721 } from \\\"solady/tokens/ERC721.sol\\\";\\nimport { LibString } from \\\"solady/utils/LibString.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-721 for use in Sequence library contracts.\\n */\\nabstract contract ERC721BaseToken is ERC721, ERC2981Controlled, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256(\\\"METADATA_ADMIN_ROLE\\\");\\n\\n    string private _tokenBaseURI;\\n    string private _tokenName;\\n    string private _tokenSymbol;\\n    string private _contractURI;\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenBaseURI Base URI of the token\\n     * @param tokenContractURI Contract URI of the token\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function _initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) internal {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenBaseURI = tokenBaseURI;\\n        _contractURI = tokenContractURI;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(METADATA_ADMIN_ROLE, owner);\\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n    }\\n\\n    //\\n    // Metadata\\n    //\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n    }\\n\\n    /**\\n     * Update the base URI of token's URI.\\n     * @param tokenBaseURI New base URI of token's URI\\n     */\\n    function setBaseMetadataURI(\\n        string memory tokenBaseURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _tokenBaseURI = tokenBaseURI;\\n    }\\n\\n    /**\\n     * Update the contract URI of token's URI.\\n     * @param tokenContractURI New contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function setContractURI(\\n        string memory tokenContractURI\\n    ) external onlyRole(METADATA_ADMIN_ROLE) {\\n        _contractURI = tokenContractURI;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their token.\\n     * @param tokenId Id of token to burn\\n     */\\n    function burn(\\n        uint256 tokenId\\n    ) public virtual {\\n        _burn(msg.sender, tokenId);\\n    }\\n\\n    /**\\n     * Allows the owner of the tokens to burn their tokens.\\n     * @param tokenIds Array of token ids to burn\\n     */\\n    function batchBurn(\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        uint256 nBurn = tokenIds.length;\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            _burn(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Get the contract URI of token's URI.\\n     * @return Contract URI of token's URI\\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, ERC2981Controlled, SignalsImplicitModeControlled) returns (bool) {\\n        return ERC721.supportsInterface(interfaceId) || ERC2981Controlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC721 Overrides\\n    //\\n\\n    /// @inheritdoc ERC721\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override(ERC721) returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert TokenDoesNotExist();\\n        }\\n\\n        return bytes(_tokenBaseURI).length != 0 ? LibString.concat(_tokenBaseURI, LibString.toString(tokenId)) : \\\"\\\";\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function name() public view override(ERC721) returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /// @inheritdoc ERC721\\n    function symbol() public view override(ERC721) returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd93442011e8d25544edfccb710b2ea6a851317e30ecf1421481cd29e0b5b5406\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/ERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC721BaseToken } from \\\"../../ERC721BaseToken.sol\\\";\\nimport { IERC721Items, IERC721ItemsFunctions } from \\\"./IERC721Items.sol\\\";\\n\\n/**\\n * An implementation of ERC-721 capable of minting when role provided.\\n */\\ncontract ERC721Items is ERC721BaseToken, IERC721Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    uint256 private _nextSequentialId;\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * Deploy contract.\\n     */\\n    constructor() ERC721BaseToken() {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenBaseURI Base URI of the token\\n     * @param tokenContractURI Contract URI of the token\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenBaseURI,\\n        string memory tokenContractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC721BaseToken._initialize(\\n            owner, tokenName, tokenSymbol, tokenBaseURI, tokenContractURI, implicitModeValidator, implicitModeProjectId\\n        );\\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function mint(address to, uint256 tokenId) external onlyRole(MINTER_ROLE) {\\n        _mint(to, tokenId);\\n        _totalSupply++;\\n        while (_exists(_nextSequentialId)) {\\n            _nextSequentialId++;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function mintSequential(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        for (uint256 i = 0; i < amount; i++) {\\n            while (_exists(_nextSequentialId)) {\\n                _nextSequentialId++;\\n            }\\n            _mint(to, _nextSequentialId);\\n            _nextSequentialId++;\\n        }\\n        _totalSupply += amount;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /// @inheritdoc IERC721ItemsFunctions\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return type(IERC721ItemsFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xad7c33ac8880a49a6c08df98051261f14271b2989a4381849726628e17bad3c6\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SequenceProxyFactory } from \\\"../../../../proxies/SequenceProxyFactory.sol\\\";\\nimport { ERC721Items } from \\\"./ERC721Items.sol\\\";\\nimport { IERC721ItemsFactory, IERC721ItemsFactoryFunctions } from \\\"./IERC721ItemsFactory.sol\\\";\\n\\n/**\\n * Deployer of ERC-721 Items proxies.\\n */\\ncontract ERC721ItemsFactory is IERC721ItemsFactory, SequenceProxyFactory {\\n\\n    /**\\n     * Creates an ERC-721 Items Factory.\\n     * @param factoryOwner The owner of the ERC-721 Items Factory\\n     */\\n    constructor(\\n        address factoryOwner\\n    ) {\\n        ERC721Items impl = new ERC721Items();\\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\\n    }\\n\\n    /// @inheritdoc IERC721ItemsFactoryFunctions\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr) {\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                tokenOwner,\\n                name,\\n                symbol,\\n                baseURI,\\n                contractURI,\\n                royaltyReceiver,\\n                royaltyFeeNumerator,\\n                implicitModeValidator,\\n                implicitModeProjectId\\n            )\\n        );\\n        proxyAddr = _createProxy(salt, proxyOwner, \\\"\\\");\\n        ERC721Items(proxyAddr).initialize(\\n            tokenOwner,\\n            name,\\n            symbol,\\n            baseURI,\\n            contractURI,\\n            royaltyReceiver,\\n            royaltyFeeNumerator,\\n            implicitModeValidator,\\n            implicitModeProjectId\\n        );\\n        emit ERC721ItemsDeployed(proxyAddr);\\n        return proxyAddr;\\n    }\\n\\n    /// @inheritdoc IERC721ItemsFactoryFunctions\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr) {\\n        bytes32 salt = keccak256(\\n            abi.encode(\\n                tokenOwner,\\n                name,\\n                symbol,\\n                baseURI,\\n                contractURI,\\n                royaltyReceiver,\\n                royaltyFeeNumerator,\\n                implicitModeValidator,\\n                implicitModeProjectId\\n            )\\n        );\\n        return _computeProxyAddress(salt, proxyOwner, \\\"\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd88c0af3da546895528990ae3a86a40b499526abe5d998fbc068d748bdb0d1eb\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Items proxy.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactory is IERC721ItemsFactoryFunctions, IERC721ItemsFactorySignals { }\\n\",\"keccak256\":\"0x5cdd4014eda4314823596f6802271c673e2b70206ac47fd6e4886cc545e62b79\",\"license\":\"Apache-2.0\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "constructor": {
                "notice": "Creates an ERC-721 Items Factory."
              },
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-721 Items proxy."
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              },
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "Deployer of ERC-721 Items proxies.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "IERC721Items": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mintSequential",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token id to mint."
                }
              },
              "mintSequential(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint token to."
                }
              },
              "totalSupply()": {
                "returns": {
                  "totalSupply": "The total supply of tokens."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "mintSequential(address,uint256)": "2e73e0fd",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSequential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token id to mint.\"}},\"mintSequential(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint token to.\"}},\"totalSupply()\":{\"returns\":{\"totalSupply\":\"The total supply of tokens.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"mintSequential(address,uint256)\":{\"notice\":\"Mint a sequential token.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "mintSequential(address,uint256)": {
                "notice": "Mint a sequential token."
              },
              "totalSupply()": {
                "notice": "Get the total supply of tokens."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mintSequential",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token id to mint."
                }
              },
              "mintSequential(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint token to."
                }
              },
              "totalSupply()": {
                "returns": {
                  "totalSupply": "The total supply of tokens."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "mintSequential(address,uint256)": "2e73e0fd",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSequential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token id to mint.\"}},\"mintSequential(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint token to.\"}},\"totalSupply()\":{\"returns\":{\"totalSupply\":\"The total supply of tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"mintSequential(address,uint256)\":{\"notice\":\"Mint a sequential token.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721ItemsFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "mintSequential(address,uint256)": {
                "notice": "Mint a sequential token."
              },
              "totalSupply()": {
                "notice": "Get the total supply of tokens."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsSignals": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721ItemsSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol": {
        "IERC721ItemsFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721ItemsDeployed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": "0defbce9",
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": "8bdb5fd2"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721ItemsDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Items proxy.\"},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":\"IERC721ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Items proxy.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactory is IERC721ItemsFactoryFunctions, IERC721ItemsFactorySignals { }\\n\",\"keccak256\":\"0x5cdd4014eda4314823596f6802271c673e2b70206ac47fd6e4886cc545e62b79\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-721 Items proxy."
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsFactoryFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "baseURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "royaltyReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "royaltyFeeNumerator",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "params": {
                  "baseURI": "The base URI of the ERC-721 Items proxy",
                  "contractURI": "The contract URI of the ERC-721 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-721 Items proxy",
                  "proxyOwner": "The owner of the ERC-721 Items proxy",
                  "royaltyFeeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "royaltyReceiver": "Address of who should be sent the royalty payment",
                  "symbol": "The symbol of the ERC-721 Items proxy",
                  "tokenOwner": "The owner of the ERC-721 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": "0defbce9",
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": "8bdb5fd2"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"params\":{\"baseURI\":\"The base URI of the ERC-721 Items proxy\",\"contractURI\":\"The contract URI of the ERC-721 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-721 Items proxy\",\"proxyOwner\":\"The owner of the ERC-721 Items proxy\",\"royaltyFeeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"royaltyReceiver\":\"Address of who should be sent the royalty payment\",\"symbol\":\"The symbol of the ERC-721 Items proxy\",\"tokenOwner\":\"The owner of the ERC-721 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Items proxy.\"},\"determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":\"IERC721ItemsFactoryFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Items proxy.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactory is IERC721ItemsFactoryFunctions, IERC721ItemsFactorySignals { }\\n\",\"keccak256\":\"0x5cdd4014eda4314823596f6802271c673e2b70206ac47fd6e4886cc545e62b79\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Creates an ERC-721 Items proxy."
              },
              "determineAddress(address,address,string,string,string,string,address,uint96,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsFactorySignals": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721ItemsDeployed",
              "type": "event"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721ItemsDeployed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ERC721ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":\"IERC721ItemsFactorySignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Items proxy.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-721 Items proxy\\n     * @param tokenOwner The owner of the ERC-721 Items implementation\\n     * @param name The name of the ERC-721 Items proxy\\n     * @param symbol The symbol of the ERC-721 Items proxy\\n     * @param baseURI The base URI of the ERC-721 Items proxy\\n     * @param contractURI The contract URI of the ERC-721 Items proxy\\n     * @param royaltyReceiver Address of who should be sent the royalty payment\\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI,\\n        string memory contractURI,\\n        address royaltyReceiver,\\n        uint96 royaltyFeeNumerator,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721ItemsFactory is IERC721ItemsFactoryFunctions, IERC721ItemsFactorySignals { }\\n\",\"keccak256\":\"0x5cdd4014eda4314823596f6802271c673e2b70206ac47fd6e4886cc545e62b79\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "ERC2981Controlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "salePrice",
                  "type": "uint256"
                }
              ],
              "name": "royaltyInfo",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "royaltyInfo(uint256,uint256)": {
                "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
              },
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "royaltyInfo(uint256,uint256)": "2a55205a",
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"}},\"notice\":\"An implementation of ERC-2981 that allows updates by roles.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/ERC2981Controlled.sol\":\"ERC2981Controlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/tokens/common/ERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IERC2981Controlled } from \\\"./IERC2981Controlled.sol\\\";\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { ERC2981 } from \\\"openzeppelin-contracts/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * An implementation of ERC-2981 that allows updates by roles.\\n */\\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\\n\\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256(\\\"ROYALTY_ADMIN_ROLE\\\");\\n\\n    //\\n    // Royalty\\n    //\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ADMIN_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC2981, AccessControlEnumerable) returns (bool) {\\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf02124d449f7dc76b4b1a26d9b1728d42facfc5f84771e73352e2b0c4b6c566b\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              }
            },
            "notice": "An implementation of ERC-2981 that allows updates by roles.",
            "version": 1
          }
        }
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "IERC2981Controlled": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IERC2981Controlled.sol\":\"IERC2981Controlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              }
            },
            "version": 1
          }
        },
        "IERC2981ControlledFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setDefaultRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeNumerator",
                  "type": "uint96"
                }
              ],
              "name": "setTokenRoyalty",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment"
                }
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "params": {
                  "feeNumerator": "The royalty fee numerator in basis points (e.g. 15% would be 1500)",
                  "receiver": "Address of who should be sent the royalty payment",
                  "tokenId": "The token id to set the royalty information for"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "setDefaultRoyalty(address,uint96)": "04634d8d",
              "setTokenRoyalty(uint256,address,uint96)": "5944c753"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\"}},\"setTokenRoyalty(uint256,address,uint96)\":{\"params\":{\"feeNumerator\":\"The royalty fee numerator in basis points (e.g. 15% would be 1500)\",\"receiver\":\"Address of who should be sent the royalty payment\",\"tokenId\":\"The token id to set the royalty information for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setDefaultRoyalty(address,uint96)\":{\"notice\":\"Sets the royalty information that all ids in this contract will default to.\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"notice\":\"Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IERC2981Controlled.sol\":\"IERC2981ControlledFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IERC2981Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC2981ControlledFunctions {\\n\\n    /**\\n     * Sets the royalty information that all ids in this contract will default to.\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n\\n    /**\\n     * Sets the royalty information that a given token id in this contract will use.\\n     * @param tokenId The token id to set the royalty information for\\n     * @param receiver Address of who should be sent the royalty payment\\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\\n     * @notice This overrides the default royalty information for this token id\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\\n\\n}\\n\\ninterface IERC2981Controlled is IERC2981ControlledFunctions { }\\n\",\"keccak256\":\"0x65d66b30719fb4161fc4ef666794f8dcb7660528bdff9bf126b12999fac79ee0\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "setDefaultRoyalty(address,uint96)": {
                "notice": "Sets the royalty information that all ids in this contract will default to."
              },
              "setTokenRoyalty(uint256,address,uint96)": {
                "notice": "Sets the royalty information that a given token id in this contract will use.This overrides the default royalty information for this token id"
              }
            },
            "version": 1
          }
        }
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "SignalsImplicitModeControlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"}},\"notice\":\"An abstract contract that allows implicit session access for a given project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/SignalsImplicitModeControlled.sol\":\"SignalsImplicitModeControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              }
            },
            "notice": "An abstract contract that allows implicit session access for a given project.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "id": 0
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "id": 1
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "id": 2
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "id": 3
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "id": 4
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 5
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol": {
        "id": 6
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 7
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "id": 8
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 9
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 10
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "id": 11
      },
      "lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol": {
        "id": 12
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 13
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 14
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "id": 15
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 16
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "id": 17
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "id": 18
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 19
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "id": 20
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "id": 21
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "id": 22
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "id": 23
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "id": 24
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "id": 25
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "id": 26
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "id": 27
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "id": 28
      },
      "lib/solady/src/tokens/ERC721.sol": {
        "id": 29
      },
      "lib/solady/src/utils/LibBytes.sol": {
        "id": 30
      },
      "lib/solady/src/utils/LibString.sol": {
        "id": 31
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "id": 32
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "id": 33
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "id": 34
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "id": 35
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "id": 36
      },
      "src/tokens/ERC721/ERC721BaseToken.sol": {
        "id": 37
      },
      "src/tokens/ERC721/presets/items/ERC721Items.sol": {
        "id": 38
      },
      "src/tokens/ERC721/presets/items/ERC721ItemsFactory.sol": {
        "id": 39
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "id": 40
      },
      "src/tokens/ERC721/presets/items/IERC721ItemsFactory.sol": {
        "id": 41
      },
      "src/tokens/common/ERC2981Controlled.sol": {
        "id": 42
      },
      "src/tokens/common/IERC2981Controlled.sol": {
        "id": 43
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "id": 44
      }
    }
  },
  "solcLongVersion": "0.8.27+commit.40a35a09",
  "solcVersion": "0.8.27"
}
