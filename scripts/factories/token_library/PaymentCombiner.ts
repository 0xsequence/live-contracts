import { ContractFactory, type ethers } from 'ethers'
import type { VerificationRequest } from 'scripts/types'

// https://github.com/0xsequence/contracts-library/blob/32eef092e8e4c92cc89e11b4693ee2e81843c790/src/payments/PaymentCombiner.sol

const abi = [
  { type: 'constructor', inputs: [], stateMutability: 'nonpayable' },
  {
    type: 'function',
    name: 'countPayeeSplitters',
    inputs: [{ name: 'payee', type: 'address', internalType: 'address' }],
    outputs: [{ name: 'count', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'deploy',
    inputs: [
      { name: 'payees', type: 'address[]', internalType: 'address[]' },
      { name: 'shares', type: 'uint256[]', internalType: 'uint256[]' }
    ],
    outputs: [{ name: 'proxyAddr', type: 'address', internalType: 'address' }],
    stateMutability: 'nonpayable'
  },
  {
    type: 'function',
    name: 'determineAddress',
    inputs: [
      { name: 'payees', type: 'address[]', internalType: 'address[]' },
      { name: 'shares', type: 'uint256[]', internalType: 'uint256[]' }
    ],
    outputs: [{ name: 'proxyAddr', type: 'address', internalType: 'address' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'implementationAddress',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'listPayeeSplitters',
    inputs: [
      { name: 'payee', type: 'address', internalType: 'address' },
      { name: 'offset', type: 'uint256', internalType: 'uint256' },
      { name: 'limit', type: 'uint256', internalType: 'uint256' }
    ],
    outputs: [
      {
        name: 'splitterAddrs',
        type: 'address[]',
        internalType: 'address[]'
      }
    ],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'listReleasable',
    inputs: [
      { name: 'payee', type: 'address', internalType: 'address' },
      { name: 'tokenAddr', type: 'address', internalType: 'address' },
      {
        name: 'splitterAddrs',
        type: 'address[]',
        internalType: 'address[]'
      }
    ],
    outputs: [
      {
        name: 'pendingShares',
        type: 'uint256[]',
        internalType: 'uint256[]'
      }
    ],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'release',
    inputs: [
      {
        name: 'payee',
        type: 'address',
        internalType: 'address payable'
      },
      { name: 'tokenAddr', type: 'address', internalType: 'address' },
      {
        name: 'splitterAddrs',
        type: 'address[]',
        internalType: 'address[]'
      }
    ],
    outputs: [],
    stateMutability: 'nonpayable'
  },
  {
    type: 'function',
    name: 'supportsInterface',
    inputs: [{ name: 'interfaceId', type: 'bytes4', internalType: 'bytes4' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view'
  },
  {
    type: 'event',
    name: 'PaymentSplitterDeployed',
    inputs: [
      {
        name: 'proxyAddr',
        type: 'address',
        indexed: false,
        internalType: 'address'
      }
    ],
    anonymous: false
  },
  {
    type: 'error',
    name: 'ParametersOutOfBounds',
    inputs: [
      { name: 'offset', type: 'uint256', internalType: 'uint256' },
      { name: 'limit', type: 'uint256', internalType: 'uint256' },
      { name: 'count', type: 'uint256', internalType: 'uint256' }
    ]
  }
]

export class PaymentCombiner extends ContractFactory {
  constructor(signer?: ethers.Signer) {
    super(
      abi,
      '0x60a08060405234610088576114918181016001600160401b0381118382101761007257829161109c833903906000f08015610066576001600160a01b031660805260405161100e908161008e823960805181818161063f01528181610741015261095e0152f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60806040908082526004908136101561001757600080fd5b600090813560e01c90816301ffc9a714610b70575080634f62f4d11461093a5780638389718c14610765578063b97a2319146106f6578063d9b09b5814610695578063d9ce73a3146105e6578063e7c95c00146103a75763f67844101461007d57600080fd5b346103a45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a4576100b4610cd7565b6100bc610cfa565b91604491823567ffffffffffffffff81116103a0576100e16100e89136908801610c3d565b3691610f82565b9485518015610327575b6100fb81610f56565b9561010889519788610d81565b81875261011482610f56565b976020967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0888a019a01368b3773ffffffffffffffffffffffffffffffffffffffff92831690816102555750929482169250855b8581106101b557505050505050909392915b83519485948186019282875251809352850193925b82811061019e57505050500390f35b83518552869550938101939281019260010161018f565b8088846101c460249486610f6e565b51168d51938480927fa3f8eace000000000000000000000000000000000000000000000000000000008252898b8301525afa801561024b578890610218575b60019250610211828c610f6e565b5201610168565b508882813d8311610244575b61022e8183610d81565b8101031261023f5760019151610203565b600080fd5b503d610224565b8c513d8a823e3d90fd5b92909395949181889616955b8c8a89831061027d57505050505050505050509093929161017a565b86918561028a8587610f6e565b51169051928380927fc45ac0500000000000000000000000000000000000000000000000000000000082528b8a8301528c60248301525afa90811561031d57908c92918b916102e8575b506102e182600194610f6e565b5201610261565b8093508c8092503d8311610316575b6103018183610d81565b8101031261023f5790518b91906102e16102d4565b503d6102f7565b8e513d8c823e3d90fd5b50945073ffffffffffffffffffffffffffffffffffffffff94858216835260208381528784209688519788899284835492838152019288528488209488915b838310610384575050505061037d92500387610d81565b85516100f2565b8654811685526001968701968d96509482019490920191610366565b8280fd5b80fd5b509190346103a05760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a0578035918373ffffffffffffffffffffffffffffffffffffffff938481168091036105e257610405610cfa565b946044803567ffffffffffffffff81116104c7576100e16104299136908901610c3d565b908151978815610581575b831690816104d9575050835b87811061045257505050505050505080f35b8261045d8284610f6e565b5116803b156104d557858560248a838b5195869485937f191655870000000000000000000000000000000000000000000000000000000085528401525af180156104cb579086916104b3575b5050600101610440565b6104bc90610d3e565b6104c75784386104a9565b8480fd5b87513d88823e3d90fd5b8580fd5b9290939691855b8981106104f4575050505050505050505080f35b826104ff8284610f6e565b5116803b1561057d57878091878c8c5194859384927f48b750440000000000000000000000000000000000000000000000000000000084528d8c85015260248401525af180156105735790889161055b575b50506001016104e0565b61056490610d3e565b61056f578638610551565b8680fd5b89513d8a823e3d90fd5b8780fd5b848652602086815287872088518154808252918952828920939b509450848201929188905b8282106105c55750505050826105bd910383610d81565b815197610434565b8354881685528d99509384019360019384019391909101906105a6565b5080fd5b5082346105e25760209073ffffffffffffffffffffffffffffffffffffffff6055604361061e61061536610c6e565b92919091610efd565b8451903060388301526f5af43d82803e903d91602b57fd5bf3ff60248301527f00000000000000000000000000000000000000000000000000000000000000006014830152733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c82012060788201520120915191168152f35b5082346105e25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105e2578060209273ffffffffffffffffffffffffffffffffffffffff6106e7610cd7565b16815280845220549051908152f35b5082346105e257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105e2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b508290346103a45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a45761079f610cd7565b92602435906044359273ffffffffffffffffffffffffffffffffffffffff8096169384825260209282845286832087518082878294549384815201908752878720928c8989915b83831061092157505050506107fd92500382610d81565b51806108098488610f49565b116108e857505061081d8194939294610f56565b9261082a87519485610d81565b81845261083682610f56565b957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08486019701368837855b8381106108a357505050508451948186019282875251809352850193925b82811061088d5785850386f35b8351871685529381019392810192600101610880565b6108df908288969798528587528a6108c78b88206108c18785610f49565b90610eb6565b90549060031b1c166108d9828a610f6e565b52610e5a565b95949395610862565b606492868951937ffd1391a500000000000000000000000000000000000000000000000000000000855284015260248301526044820152fd5b865416845260019586019587955093019201898e6107e6565b5082346105e25761094a36610c6e565b959261095b87838584999599610efd565b917f000000000000000000000000000000000000000000000000000000000000000097763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8a60881c161782526e5af43d82803e903d91602b57fd5bf360209960781b17895273ffffffffffffffffffffffffffffffffffffffff80946037600985f516978815610b1457883b156103a057610a21918391895193849283927f7fbbe46f0000000000000000000000000000000000000000000000000000000084528a898d8601610dc2565b0381838c5af18015610b0a57610afb575b50907f67bdf41d0e1d5179023a551fad9360dd613a5d4909111476e44d47e906e0b759888751898152a1815b848110610a6e5788888851908152f35b8060051b820135848116809103610af757835282895286832080549068010000000000000000821015610acb5781610aaf916001610ac69594018155610eb6565b81549060031b90878c831b921b1916179055610e5a565b610a5e565b60248560418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8380fd5b610b0490610d3e565b88610a32565b87513d84823e3d90fd5b6064878b8a51917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152fd5b905082346103a05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103a057357fffffffff0000000000000000000000000000000000000000000000000000000081168091036103a057602092508015908115610c13575b8115610be9575b5015158152f35b90507f01ffc9a7000000000000000000000000000000000000000000000000000000001483610be2565b7f645e56af0000000000000000000000000000000000000000000000000000000081149150610bdb565b9181601f8401121561023f5782359167ffffffffffffffff831161023f576020808501948460051b01011161023f57565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc82011261023f5767ffffffffffffffff9160043583811161023f5782610cb991600401610c3d565b9390939260243591821161023f57610cd391600401610c3d565b9091565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361023f57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361023f57565b359073ffffffffffffffffffffffffffffffffffffffff8216820361023f57565b67ffffffffffffffff8111610d5257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d5257604052565b90918060408301604084525260608201929060005b818110610e245750505060208183039101528281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161023f5760209260051b809284830137010190565b90919360019073ffffffffffffffffffffffffffffffffffffffff610e4887610d1d565b16815260209081019501929101610dd7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e875760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8054821015610ece5760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9290610f17610f4392604051948593602085019788610dc2565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610d81565b51902090565b91908201809211610e8757565b67ffffffffffffffff8111610d525760051b60200190565b8051821015610ece5760209160051b010190565b9291610f8d82610f56565b91610f9b6040519384610d81565b829481845260208094019160051b810192831161023f57905b828210610fc15750505050565b838091610fcd84610d1d565b815201910190610fb456fea2646970667358221220db5e98373b1ad600d3bfa281f3f10d52a95c085fc9fb76780d70d0fb8dddd97764736f6c634300081300336080806040523461001657611475908161001c8239f35b600080fdfe60406080815260048036101561004e575b50361561001c57600080fd5b513381523460208201527f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77090604090a1005b600090813560e01c9081631916558714610bf75781633a98ef3914610bd8578163406072a914610b8257816348b75044146108fb5781637fbbe46f1461026b5781638b83209b14610224575080639852595c146101e0578063a3f8eace146101ba578063c45ac05014610185578063ce7c2ac214610141578063d79779b2146100fd5763e33b7de3036100105790346100f957816003193601126100f9576020906034549051908152f35b5080fd5b5090346100f95760206003193601126100f9578060209273ffffffffffffffffffffffffffffffffffffffff610131610da5565b1681526038845220549051908152f35b5090346100f95760206003193601126100f9578060209273ffffffffffffffffffffffffffffffffffffffff610175610da5565b1681526035845220549051908152f35b5090346100f957806003193601126100f9576020906101b36101a5610da5565b6101ad610dcd565b90610f59565b9051908152f35b5090346100f95760206003193601126100f9576020906101b36101db610da5565b610f1a565b5090346100f95760206003193601126100f9578060209273ffffffffffffffffffffffffffffffffffffffff610214610da5565b1681526036845220549051908152f35b838334610268576020600319360112610268575073ffffffffffffffffffffffffffffffffffffffff61025960209335610e78565b92905490519260031b1c168152f35b80fd5b839150346108f757816003193601126108f75780359067ffffffffffffffff908183116108f357366023840112156108f357828101356102aa81610e60565b916102b786519384610df0565b8183526020948584016024809460051b830101913683116108bb578401905b8282106108c35750505081359384116108bf57366023850112156108bf57838101359361030285610e60565b9461030f88519687610df0565b808652838787019160051b830101913683116108bb5784889101915b8383106108ab575050505086549360ff8560081c16159384809561089e575b8015610887575b156108065760019585877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316178b556107d8575b506103a060ff8a5460081c1661039b816113a0565b6113a0565b8051825103610757578051156106fc5788865b610419575b50505050506103c5578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff855416855551908152a18180808380f35b81518110156106f75773ffffffffffffffffffffffffffffffffffffffff80610442838561142b565b511661044e838661142b565b51918115610675578215610619578a908c8e848152603580945220546105975760378054906801000000000000000082101561056b578f90938f928f90948f868a99986104c0927f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac9c99019055610e78565b819291549060031b9189831b921b191617905585835252205560336104e6838254610ede565b90558b5173ffffffffffffffffffffffffffffffffffffffff9190911681526020810191909152604090a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610540578601866103b3565b848a6011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50898f60418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b608488602b8f8f8d9151937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201527f20686173207368617265730000000000000000000000000000000000000000006064820152fd5b50606486601d898d8f51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152fd5b50608486602c898d8f51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201527f7a65726f206164647265737300000000000000000000000000000000000000006064820152fd5b6103b8565b606483601a868a8c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152fd5b6084836032868a8c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f5061796d656e7453706c69747465723a2070617965657320616e64207368617260448201527f6573206c656e677468206d69736d6174636800000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117895589610386565b608483602e868a8c51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156103515750600160ff871614610351565b50600160ff87161061034a565b823581529181019188910161032b565b8980fd5b8680fd5b813573ffffffffffffffffffffffffffffffffffffffff811681036108ef5781529087019087016102d6565b8a80fd5b8480fd5b8280fd5b9050346100f957826003193601126100f957610915610da5565b61091d610dcd565b73ffffffffffffffffffffffffffffffffffffffff92838216938486526020906035825261094f888820541515611033565b6109598486610f59565b946109658615156110be565b16948587526038825287872061097c868254610ede565b905585875260398252878720908752815286862080548501905586517fa9059cbb0000000000000000000000000000000000000000000000000000000081830190815273ffffffffffffffffffffffffffffffffffffffff85166024830152604480830187905282526109f0606483610df0565b88519189830183811067ffffffffffffffff821117610b56578a528383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648484015251610a50929189918291828b5af1610a49611220565b908861127e565b8051828115918215610b36575b5050905015610ab4575050935173ffffffffffffffffffffffffffffffffffffffff9094168452602084015290917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a90604090a280f35b608492508651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126108bf5781015180151581036108bf57808238610a5d565b60248a6041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8284346100f957806003193601126100f95780602092610ba0610da5565b610ba8610dcd565b73ffffffffffffffffffffffffffffffffffffffff91821683526039865283832091168252845220549051908152f35b8284346100f957816003193601126100f9576020906033549051908152f35b8284346100f957602092836003193601126108f75780359073ffffffffffffffffffffffffffffffffffffffff8216809203610da15781845260358552610c42838520541515611033565b610c4b82610f1a565b90610c578215156110be565b610c6382603454610ede565b60345582855260368652838520828154019055814710610d45578480808085875af1610c8d611220565b5015610cc357507fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05693948351928352820152a180f35b608490868551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b606490868551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610dc857565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610dc857565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e3157604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610e315760051b60200190565b603754811015610eaf5760376000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908201809211610eeb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610f5690610f2b4760345490610ede565b73ffffffffffffffffffffffffffffffffffffffff8216600052603660205260406000205491611149565b90565b919073ffffffffffffffffffffffffffffffffffffffff809316604051937f70a0823100000000000000000000000000000000000000000000000000000000855230600486015260208086602481865afa95861561102757600096610ff6575b50610fd6610f569596846000526038835260406000205490610ede565b926000526039815260406000209184166000525260406000205491611149565b958187813d8311611020575b61100c8183610df0565b810103126102685750945194610fd6610fb9565b503d611002565b6040513d6000823e3d90fd5b1561103a57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201527f73686172657300000000000000000000000000000000000000000000000000006064820152fd5b156110c557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201527f647565207061796d656e740000000000000000000000000000000000000000006064820152fd5b9073ffffffffffffffffffffffffffffffffffffffff60009216825260356020526040822054908181029181830414901517156111f3576033549081156111c65704918203918211611199575090565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526012600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b3d15611279573d9067ffffffffffffffff8211610e31576040519161126d60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610df0565b82523d6000602084013e565b606090565b919290156112f95750815115611292575090565b3b1561129b5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561130c5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611389575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611348565b156113a757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b8051821015610eaf5760209160051b01019056fea26469706673582212203a57752ba96dc244fda480b044a2438cb74358d99bad884f1edb9e5b02d498ee64736f6c63430008130033',
      signer
    )
  }
}

export const PAYMENTCOMBINER_VERIFICATION: Omit<VerificationRequest, 'waitForSuccess'> = {
  contractToVerify: 'src/payments/PaymentCombiner.sol:PaymentCombiner',
  version: 'v0.8.19+commit.7dd6d404',
  licenceType: 'Apache-2.0',
  compilerInput: {
    language: 'Solidity',
    sources: {
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/finance/PaymentSplitterUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport "../token/ERC20/utils/SafeERC20Upgradeable.sol";\nimport "../utils/AddressUpgradeable.sol";\nimport "../utils/ContextUpgradeable.sol";\nimport "../proxy/utils/Initializable.sol";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can\'t be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitterUpgradeable is Initializable, ContextUpgradeable {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20Upgradeable indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20Upgradeable => uint256) private _erc20TotalReleased;\n    mapping(IERC20Upgradeable => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    function __PaymentSplitter_init(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        __PaymentSplitter_init_unchained(payees, shares_);\n    }\n\n    function __PaymentSplitter_init_unchained(address[] memory payees, uint256[] memory shares_) internal onlyInitializing {\n        require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");\n        require(payees.length > 0, "PaymentSplitter: no payees");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it\'s possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20Upgradeable token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20Upgradeable token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee\'s releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee\'s releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20Upgradeable token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, "PaymentSplitter: account has no shares");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, "PaymentSplitter: account is not due payment");\n\n        // _totalReleased is the sum of all values in _released.\n        // If "_totalReleased += payment" does not overflow, then "_released[account] += payment" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        AddressUpgradeable.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20Upgradeable token, address account) public virtual {\n        require(_shares[account] > 0, "PaymentSplitter: account has no shares");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, "PaymentSplitter: account is not due payment");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If "_erc20TotalReleased[token] += payment" does not overflow, then "_erc20Released[token][account] += payment"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20Upgradeable.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), "PaymentSplitter: account is the zero address");\n        require(shares_ > 0, "PaymentSplitter: shares are 0");\n        require(_shares[account] == 0, "PaymentSplitter: account already has shares");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[43] private __gap;\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport "../../utils/AddressUpgradeable.sol";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it\'s common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init("MyToken", "MTK");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init("MyToken");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            "Initializable: contract is already initialized"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport "../IERC20Upgradeable.sol";\nimport "../extensions/IERC20PermitUpgradeable.sol";\nimport "../../../utils/AddressUpgradeable.sol";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            "SafeERC20: approve from non-zero to non-zero allowance"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract\'s allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract\'s allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract\'s allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\n        // we\'re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\n        // we\'re implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport "../proxy/utils/Initializable.sol";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/Clones.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as "clones".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create(0, 0x09, 0x37)\r\n        }\r\n        require(instance != address(0), "ERC1167: create failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create2(0, 0x09, 0x37, salt)\r\n        }\r\n        require(instance != address(0), "ERC1167: create2 failed");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(add(ptr, 0x38), deployer)\r\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\r\n            mstore(add(ptr, 0x14), implementation)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\r\n            mstore(add(ptr, 0x58), salt)\r\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\r\n            predicted := keccak256(add(ptr, 0x43), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt\r\n    ) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n'
      },
      'src/payments/IPaymentCombiner.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IPaymentCombinerFunctions {\n    /**\n     * Get the address of the PaymentSplitter implementation.\n     * @return implementationAddr The address of the PaymentSplitter implementation.\n     */\n    function implementationAddress() external view returns (address implementationAddr);\n\n    /**\n     * Creates a PaymentSplitter proxy.\n     * @param payees The addresses of the payees\n     * @param shares The number of shares each payee has\n     * @return proxyAddr The address of the deployed proxy\n     */\n    function deploy(address[] calldata payees, uint256[] calldata shares) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param payees The addresses of the payees\n     * @param shares The number of shares each payee has\n     * @return proxyAddr The address of the proxy\n     */\n    function determineAddress(address[] calldata payees, uint256[] calldata shares)\n        external\n        returns (address proxyAddr);\n\n    /**\n     * Get the amount of Payment Splitters this payee is associated with.\n     * @param payee The address of the payee\n     * @return count The amount of payments splitters\n     */\n    function countPayeeSplitters(address payee) external view returns (uint256 count);\n\n    /**\n     * Get the list of Payment Splitters this payee is associated with.\n     * @param payee The address of the payee\n     * @param offset The offset to start from\n     * @param limit The maximum amount of splitters to return\n     * @return splitterAddrs The list of payments splitters\n     */\n    function listPayeeSplitters(address payee, uint256 offset, uint256 limit)\n        external\n        view\n        returns (address[] memory splitterAddrs);\n\n    /**\n     * Get the list of pending shares for a payee.\n     * @param payee The address of the payee\n     * @param tokenAddr The address of the ERC-20 token. If the token address is 0x0, then the native token is used.\n     * @param splitterAddrs The list of payments splitters to check. If empty then all splitters are used.\n     * @return pendingShares The list of pending shares\n     * @dev The list includes zero balances. These should be removed before releasing shares.\n     */\n    function listReleasable(address payee, address tokenAddr, address[] memory splitterAddrs)\n        external\n        view\n        returns (uint256[] memory pendingShares);\n\n    /**\n     * Release the pending shares for a payee.\n     * @param payee The address of the payee\n     * @param tokenAddr The address of the ERC-20 token. If the token address is 0x0, then the native token is used.\n     * @param splitterAddrs The list of payments splitters to release shares from. If empty then all splitters are used.\n     * @dev Use the above functions to get the list of splitters and pending shares.\n     * @dev Calling splitters with no shares to release will fail.\n     */\n    function release(address payable payee, address tokenAddr, address[] calldata splitterAddrs) external;\n}\n\ninterface IPaymentCombinerSignals {\n    /**\n     * Event emitted when a new proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event PaymentSplitterDeployed(address proxyAddr);\n\n    /**\n     * Thrown when the provided offset and limit are out of bounds.\n     */\n    error ParametersOutOfBounds(uint256 offset, uint256 limit, uint256 count);\n}\n\ninterface IPaymentCombiner is IPaymentCombinerFunctions, IPaymentCombinerSignals {}\n'
      },
      'src/payments/PaymentCombiner.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {PaymentSplitter, IERC20Upgradeable} from "@0xsequence/contracts-library/payments/PaymentSplitter.sol";\nimport {\n    IPaymentCombiner, IPaymentCombinerFunctions\n} from "@0xsequence/contracts-library/payments/IPaymentCombiner.sol";\nimport {IERC165} from "@0xsequence/erc-1155/contracts/interfaces/IERC165.sol";\nimport {Clones} from "@openzeppelin/contracts/proxy/Clones.sol";\n\n/**\n * Deployer of Payment Splitter proxies.\n * @dev Unlike other factories in this library, payment splitters are unowned and not upgradeable.\n */\ncontract PaymentCombiner is IPaymentCombiner, IERC165 {\n    using Clones for address;\n\n    address private immutable _IMPLEMENTATION;\n\n    mapping(address => address[]) private _payeeSplitters;\n\n    /**\n     * Creates a Payment Splitter Factory.\n     */\n    constructor() {\n        _IMPLEMENTATION = address(new PaymentSplitter());\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function implementationAddress() external view returns (address) {\n        return _IMPLEMENTATION;\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function deploy(address[] calldata payees, uint256[] calldata shares) external returns (address proxyAddr) {\n        bytes32 salt = _determineSalt(payees, shares);\n        proxyAddr = _IMPLEMENTATION.cloneDeterministic(salt);\n        PaymentSplitter(payable(proxyAddr)).initialize(payees, shares);\n        emit PaymentSplitterDeployed(proxyAddr);\n\n        // Add the payees to the list of payee splitters\n        for (uint256 i = 0; i < payees.length; i++) {\n            _payeeSplitters[payees[i]].push(proxyAddr);\n        }\n\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function determineAddress(address[] calldata payees, uint256[] calldata shares)\n        external\n        view\n        returns (address proxyAddr)\n    {\n        bytes32 salt = _determineSalt(payees, shares);\n        return _IMPLEMENTATION.predictDeterministicAddress(salt);\n    }\n\n    /// @dev Computes the deployment salt for a Payment Splitter.\n    function _determineSalt(address[] calldata payees, uint256[] calldata shares) internal pure returns (bytes32) {\n        return keccak256(abi.encode(payees, shares));\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function countPayeeSplitters(address payee) external view returns (uint256 count) {\n        return _payeeSplitters[payee].length;\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function listPayeeSplitters(address payee, uint256 offset, uint256 limit)\n        external\n        view\n        returns (address[] memory splitterAddrs)\n    {\n        address[] memory payeeSplitters = _payeeSplitters[payee];\n        uint256 len = payeeSplitters.length;\n        if (offset + limit > len) {\n            revert ParametersOutOfBounds(offset, limit, len);\n        }\n        splitterAddrs = new address[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            splitterAddrs[i] = _payeeSplitters[payee][i + offset];\n        }\n        return splitterAddrs;\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function listReleasable(address payee, address tokenAddr, address[] calldata splitterAddrs)\n        external\n        view\n        returns (uint256[] memory pendingShares)\n    {\n        address[] memory splitters = splitterAddrs;\n        uint256 len = splitters.length;\n        if (len == 0) {\n            splitters = _payeeSplitters[payee];\n            len = splitters.length;\n        }\n\n        uint256[] memory payeePendingShares = new uint256[](len);\n\n        if (tokenAddr == address(0)) {\n            for (uint256 i = 0; i < len;) {\n                payeePendingShares[i] = PaymentSplitter(payable(splitters[i])).releasable(payee);\n                unchecked {\n                    i++;\n                }\n            }\n        } else {\n            IERC20Upgradeable token = IERC20Upgradeable(tokenAddr);\n            for (uint256 i = 0; i < len;) {\n                payeePendingShares[i] = PaymentSplitter(payable(splitters[i])).releasable(token, payee);\n                unchecked {\n                    i++;\n                }\n            }\n        }\n\n        return payeePendingShares;\n    }\n\n    /// @inheritdoc IPaymentCombinerFunctions\n    function release(address payable payee, address tokenAddr, address[] calldata splitterAddrs) external {\n        address[] memory splitters = splitterAddrs;\n        uint256 len = splitters.length;\n        if (len == 0) {\n            splitters = _payeeSplitters[payee];\n            len = splitters.length;\n        }\n\n        if (tokenAddr == address(0)) {\n            for (uint256 i = 0; i < len;) {\n                PaymentSplitter(payable(splitters[i])).release(payee);\n                unchecked {\n                    i++;\n                }\n            }\n        } else {\n            IERC20Upgradeable token = IERC20Upgradeable(tokenAddr);\n            for (uint256 i = 0; i < len;) {\n                PaymentSplitter(payable(splitters[i])).release(token, payee);\n                unchecked {\n                    i++;\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return type(IPaymentCombiner).interfaceId == interfaceId\n            || type(IPaymentCombinerFunctions).interfaceId == interfaceId || type(IERC165).interfaceId == interfaceId;\n    }\n}\n'
      },
      'src/payments/PaymentSplitter.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    PaymentSplitterUpgradeable,\n    IERC20Upgradeable\n} from "@openzeppelin-upgradeable/contracts/finance/PaymentSplitterUpgradeable.sol";\n\ncontract PaymentSplitter is PaymentSplitterUpgradeable {\n    /**\n     * Initialize the PaymentSplitter contract.\n     * @param payees The addresses of the payees\n     * @param shares The number of shares each payee has\n     * @dev This function should be called only once immediately after the contract is deployed.\n     */\n    function initialize(address[] memory payees, uint256[] memory shares) public initializer {\n        __PaymentSplitter_init(payees, shares);\n    }\n}\n'
      }
    },
    settings: {
      evmVersion: 'paris',
      libraries: {},
      metadata: { bytecodeHash: 'ipfs' },
      optimizer: { enabled: true, runs: 20000 },
      remappings: [
        '0xsequence/=lib/0xsequence/',
        '@0xsequence/contracts-library/=src/',
        '@0xsequence/erc-1155/=lib/0xsequence/erc-1155/src/',
        '@0xsequence/erc20-meta-token/=lib/0xsequence/erc20-meta-token/src/',
        '@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/',
        '@openzeppelin/=lib/openzeppelin/',
        'chiru-labs/=lib/chiru-labs/',
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/',
        'erc721a-upgradeable/=lib/chiru-labs/erc721a-upgradeable/',
        'erc721a/=lib/chiru-labs/erc721a/',
        'forge-std/=lib/forge-std/src/',
        'murky/=lib/murky/src/',
        'openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/',
        'openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/',
        'openzeppelin/=lib/openzeppelin/',
        'solady/=lib/solady/src/'
      ],
      viaIR: true,
      outputSelection: {
        '*': {
          '*': ['evm.bytecode', 'evm.deployedBytecode', 'devdoc', 'userdoc', 'metadata', 'abi']
        }
      }
    }
  }
}
