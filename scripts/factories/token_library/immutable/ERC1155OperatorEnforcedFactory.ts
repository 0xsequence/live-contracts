import { ContractFactory, type ethers } from 'ethers'
import type { VerificationRequest } from 'scripts/types'

// https://github.com/0xsequence/contracts-library/blob/a447b5d81e9f7f60936554c6ef78fcdd5f344bbd/src/tokens/ERC1155/presets/operator-enforced/ERC1155OperatorEnforcedFactory.sol

const abi = [
  {
    type: 'constructor',
    inputs: [{ name: 'factoryOwner', type: 'address', internalType: 'address' }],
    stateMutability: 'nonpayable'
  },
  {
    type: 'function',
    name: 'beacon',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract UpgradeableBeacon' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'deploy',
    inputs: [
      { name: 'proxyOwner', type: 'address', internalType: 'address' },
      { name: 'tokenOwner', type: 'address', internalType: 'address' },
      { name: 'tokenName', type: 'string', internalType: 'string' },
      { name: 'tokenBaseURI', type: 'string', internalType: 'string' },
      { name: 'tokenContractURI', type: 'string', internalType: 'string' },
      { name: 'royaltyReceiver', type: 'address', internalType: 'address' },
      { name: 'royaltyFeeNumerator', type: 'uint96', internalType: 'uint96' },
      { name: 'operatorAllowlist', type: 'address', internalType: 'address' }
    ],
    outputs: [{ name: 'proxyAddr', type: 'address', internalType: 'address' }],
    stateMutability: 'nonpayable'
  },
  {
    type: 'function',
    name: 'determineAddress',
    inputs: [
      { name: 'proxyOwner', type: 'address', internalType: 'address' },
      { name: 'tokenOwner', type: 'address', internalType: 'address' },
      { name: 'tokenName', type: 'string', internalType: 'string' },
      { name: 'tokenBaseURI', type: 'string', internalType: 'string' },
      { name: 'tokenContractURI', type: 'string', internalType: 'string' },
      { name: 'royaltyReceiver', type: 'address', internalType: 'address' },
      { name: 'royaltyFeeNumerator', type: 'uint96', internalType: 'uint96' },
      { name: 'operatorAllowlist', type: 'address', internalType: 'address' }
    ],
    outputs: [{ name: 'proxyAddr', type: 'address', internalType: 'address' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view'
  },
  { type: 'function', name: 'renounceOwnership', inputs: [], outputs: [], stateMutability: 'nonpayable' },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable'
  },
  {
    type: 'function',
    name: 'upgradeBeacon',
    inputs: [{ name: 'implementation', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable'
  },
  {
    type: 'event',
    name: 'ERC1155OperatorEnforcedDeployed',
    inputs: [{ name: 'proxyAddr', type: 'address', indexed: false, internalType: 'address' }],
    anonymous: false
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      { name: 'previousOwner', type: 'address', indexed: true, internalType: 'address' },
      { name: 'newOwner', type: 'address', indexed: true, internalType: 'address' }
    ],
    anonymous: false
  }
]

export class ERC1155OperatorEnforcedFactory extends ContractFactory {
  constructor(signer?: ethers.Signer) {
    super(
      abi,
      '0x608034610125576001600160401b0390601f62006fd338819003918201601f191683019291908484118385101761010f57816020928492604096875283398101031261012557516001600160a01b038082168203610125576100603361012a565b825193614afe94858101958187108388111761010f57620024d5823980600096039086f0908115610105578451916105ee808401928311848410176100f1579184849260209462001ee7853916815203019085f080156100e4576100d69394501660018060a01b0319600154161760015561012a565b51611d759081620001728239f35b50505051903d90823e3d90fd5b634e487b7160e01b88526041600452602488fd5b84513d87823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604052600436101561001257600080fd5b6000803560e01c80631bce4583146106bb5780634d11813d146105c157806359659e901461056f5780636c33162c14610291578063715018a6146101f45780638da5cb5b146101a35763f2fde38b1461006a57600080fd5b346101a05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a0576100a161077e565b6100a961099d565b73ffffffffffffffffffffffffffffffffffffffff80911690811561011c57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b80fd5b50346101a057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101a057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a05761022b61099d565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101a0576102f26102c66102a6366108bb565b9293829986829a86858b9a9b96978a604051978896602088019a8b610a82565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610805565b51902097604051610302816107e9565b8a815273ffffffffffffffffffffffffffffffffffffffff998a600154166103398a6102c685604051948593602085019788610afe565b5190206111eb906040516103506020840182610805565b8281526020810192610b55843980511561051157518c928ef516998a156104b3578b988160015416908c3b156104af578a92838e926103d1604051978896879586947fcf7a1d770000000000000000000000000000000000000000000000000000000086521660048501526024840152606060448401526064830190610a3f565b03925af19081156104a4578891610490575b5050883b1561048c576104249360405198899788977f36e678f800000000000000000000000000000000000000000000000000000000895260048901610a82565b038183865af1801561048157610469575b6020827f6533e5fa78ee62afb7c5550b66fcfc7706c73d3019803f34205824417616686882604051838152a1604051908152f35b61047383916107a6565b61047d5781610435565b5080fd5b6040513d85823e3d90fd5b8680fd5b610499906107a6565b61048c5786386103e3565b6040513d8a823e3d90fd5b8a80fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b50346101a057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a057602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b50346101a0576106776055600b6105f76105da366108bb565b9160409c979b96959c9893985198899560209e8f88019889610a82565b03936106297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe095868101835282610805565b519020926040519261063a846107e9565b835273ffffffffffffffffffffffffffffffffffffffff9661066b8860015416946040519586938c85019889610afe565b03908101835282610805565b5190206111eb60405161068c87830182610805565b81815286810191610b55833951902090604051916040830152858201523081520160ff81532060405191168152f35b50346101a05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101a0576106f361077e565b6106fb61099d565b8173ffffffffffffffffffffffffffffffffffffffff806001541692833b1561077a576024908360405195869485937f3659cfe60000000000000000000000000000000000000000000000000000000085521660048401525af1801561076f57610763575080f35b61076c906107a6565b80f35b6040513d84823e3d90fd5b8280fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036107a157565b600080fd5b67ffffffffffffffff81116107ba57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176107ba57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107ba57604052565b81601f820112156107a15780359067ffffffffffffffff82116107ba576040519261089960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610805565b828452602083830101116107a157816000926020809301838601378301015290565b906101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126107a15773ffffffffffffffffffffffffffffffffffffffff9060043582811681036107a1579260243583811681036107a1579267ffffffffffffffff926044358481116107a1578361093891600401610846565b936064358181116107a1578461095091600401610846565b936084359182116107a15761096791600401610846565b9160a43581811681036107a1579160c4356bffffffffffffffffffffffff811681036107a1579160e43590811681036107a15790565b73ffffffffffffffffffffffffffffffffffffffff6000541633036109be57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60005b838110610a2f5750506000910152565b8181015183820152602001610a1f565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610a7b81518092818752878088019101610a1c565b0116010190565b9590610aeb8795610add60c0989b9a96610acf6bffffffffffffffffffffffff9760e0602073ffffffffffffffffffffffffffffffffffffffff9c8d809a168152015260e08d0190610a3f565b908b820360408d0152610a3f565b9089820360608b0152610a3f565b981660808701521660a085015216910152565b9190926048949383527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000809260601b16602084015260601b166034820152610b4f8251809360208685019101610a1c565b01019056fe60808060405234610016576111cf908161001c8239f35b600080fdfe604060808152366103825773ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416158015610b94576000917fcf7a1d77000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000843516146100c057600484517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b6100c8611192565b60049136831161037e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261037e578235916101088361067f565b602435926101158461067f565b60443567ffffffffffffffff811161037a57610135839136908801610789565b941692156103525761014791166107e3565b803b156102cf578451907f5c60da1b000000000000000000000000000000000000000000000000000000009384835260209687848381865afa9384156102a657889461019d9189916102b2575b503b1515610926565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555194827f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e8880a28451158015906102ab575b610242575b8361023c6107d0565b80519101f35b8592839182525afa9182156102a65761026a9392610277575b506102646109b1565b91610a21565b5038808083818080610233565b610298919250843d861161029f575b610290818361070e565b810190610902565b903861025b565b503d610286565b61091a565b508661022e565b6102c99150863d881161029f57610290818361070e565b38610194565b60848360208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60448201527f74726163740000000000000000000000000000000000000000000000000000006064820152fd5b8487517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b8680fd5b8380fd5b73ffffffffffffffffffffffffffffffffffffffff807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035416158015610b94576000907fcf7a1d77000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000833516146104395760046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b610441611192565b60049236841161067b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261067b5783356104808161067f565b6024359161048d8361067f565b60443567ffffffffffffffff8111610677576104ad829136908901610789565b9316931561064e576104bf91166107e3565b813b156105ca576040517f5c60da1b000000000000000000000000000000000000000000000000000000009283825260209586838281855afa9283156102a65787936105149188916105b357503b1515610926565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841617905560405194827f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e8880a28451158015906102ab57610242578361023c6107d0565b6102c99150853d871161029f57610290818361070e565b6084846020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60448201527f74726163740000000000000000000000000000000000000000000000000000006064820152fd5b856040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361069d57565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176106ed57604052565b6106a2565b6040810190811067ffffffffffffffff8211176106ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176106ed57604052565b67ffffffffffffffff81116106ed57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f8201121561069d578035906107a08261074f565b926107ae604051948561070e565b8284526020838301011161069d57816000926020809301838601378301015290565b604051906107dd826106d1565b60008252565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61039081547f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604080519373ffffffffffffffffffffffffffffffffffffffff9081851686521693846020820152a1811561087e577fffffffffffffffffffffffff000000000000000000000000000000000000000016179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261069d57516109178161067f565b90565b6040513d6000823e3d90fd5b1561092d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201527f73206e6f74206120636f6e7472616374000000000000000000000000000000006064820152fd5b604051906060820182811067ffffffffffffffff8211176106ed57604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806109179493602081519101845af43d15610a60573d91610a438361074f565b92610a51604051948561070e565b83523d6000602085013e610acd565b606091610acd565b15610a6f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b91929015610aed5750815115610ae1575090565b610917903b1515610a68565b825190915015610b005750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110610b7d575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201610b3c565b610bee610bd57fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b3303610d14576000357fffffffff00000000000000000000000000000000000000000000000000000000167f3659cfe6000000000000000000000000000000000000000000000000000000008103610c515750610c49610f0f565b602081519101f35b7f4f1ef286000000000000000000000000000000000000000000000000000000008103610c865750610c81611083565b610c49565b7f8f283970000000000000000000000000000000000000000000000000000000008103610cb65750610c81610ec5565b7ff851a440000000000000000000000000000000000000000000000000000000008103610ce65750610c81610dfd565b7f5c60da1b0000000000000000000000000000000000000000000000000000000003610d1457610c81610e53565b610d1c610d3b565b6000808092368280378136915af43d82803e15610d37573d90f35b3d90fd5b73ffffffffffffffffffffffffffffffffffffffff807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541680610df8575060206004917fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505416604051928380927f5c60da1b0000000000000000000000000000000000000000000000000000000082525afa9081156102a657600091610de0575090565b610917915060203d811161029f57610290818361070e565b905090565b610e05611192565b73ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541660405190602082015260208152610917816106f2565b610e5b611192565b610e63610d3b565b73ffffffffffffffffffffffffffffffffffffffff6040519116602082015260208152610917816106f2565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc602091011261069d576004356109178161067f565b610ecd611192565b3660041161069d57610efc73ffffffffffffffffffffffffffffffffffffffff610ef636610e8f565b166107e3565b604051610f08816106d1565b6000815290565b610f17611192565b3660041161069d5773ffffffffffffffffffffffffffffffffffffffff610f3d36610e8f565b1660405190610f4b826106d1565b60008252803b15610fff577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610ff7575b610fe3575b5050604051610f08816106d1565b610fef916102646109b1565b503880610fd5565b506000610fd0565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3660041161069d5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261069d576004356110c18161067f565b60243567ffffffffffffffff811161069d576110f673ffffffffffffffffffffffffffffffffffffffff913690600401610789565b9116803b15610fff577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061118a57610fe3575050604051610f08816106d1565b506001610fd0565b3461069d5756fea264697066735822122023354c417804091978a0c3928a1f614b94897af7ab0167e2c746722978551fa664736f6c63430008130033a2646970667358221220a193c525a249ad1c4b4afc0c418f10e5430a6380396650707ef57b4227d00f0664736f6c6343000813003360803461011a57601f6105ee38819003918201601f19168301916001600160401b0383118484101761011f5780849260209460405283398101031261011a57516001600160a01b03808216919082820361011a576000549160018060a01b0319923384821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a33b156100b2575060015416176001556040516104b890816101368239f35b62461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e7472616374000000000000000000000000006064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c80633659cfe6146102ce5780635c60da1b1461027c578063715018a6146101e05780638da5cb5b1461018f5763f2fde38b1461005457600080fd5b3461018c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018c5760043573ffffffffffffffffffffffffffffffffffffffff808216809203610188576100ad610403565b8115610104578254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b80fd5b503461018c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018c5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461018c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018c57610217610403565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461018c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018c57602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b503461018c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018c5760043573ffffffffffffffffffffffffffffffffffffffff81169081810361018857610328610403565b3b1561037f57807fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8280a280f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e7472616374000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff60005416330361042457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220d4b43b70081ae7db32246e520f5aa59c306a2d0655829502c3c4eb30ea95b57c64736f6c6343000813003360a060405234620002ec5762000014620002f1565b6200001e620002f1565b815190916001600160401b0390818311620001ed576005938454916001948584811c9416918215620002e1575b60209283861014620002cb578190601f9586811162000277575b5083908683116001146200020f5760009262000203575b5050600019600383901b1c191690861b1786555b8151938411620001ed576004958654908682811c92168015620001e2575b83831014620001cd5784821162000184575b5050809284116001146200011957509282939183926000946200010d575b50501b916000199060031b1c19161790555b336080526040516147e89081620003168239608051816135d60152f35b015192503880620000de565b919083601f1981168760005284600020946000905b888383106200016957505050106200014f575b505050811b019055620000f0565b015160001960f88460031b161c1916905538808062000141565b8587015188559096019594850194879350908101906200012e565b87600052826000209085808801821c830193858910620001c3575b01901c019086905b828110620001b65750620000c0565b60008155018690620001a7565b935082936200019f565b602288634e487b7160e01b6000525260246000fd5b91607f1691620000ae565b634e487b7160e01b600052604160045260246000fd5b0151905038806200007c565b90889350601f198316918a600052856000209260005b8782821062000260575050841162000246575b505050811b01865562000090565b015160001960f88460031b161c1916905538808062000238565b8385015186558c9790950194938401930162000225565b9091508860005283600020868085018b1c820192868610620002c1575b918a9186959493018c1c01915b828110620002b157505062000065565b600081558594508a9101620002a1565b9250819262000294565b634e487b7160e01b600052602260045260246000fd5b93607f16936200004b565b600080fd5b60405190602082016001600160401b03811183821017620001ed576040526000825256fe60806040818152600436101561001457600080fd5b60003560e01c918262fdd58e146127445750816301ffc9a7146126a557816304634d8d1461266557816306fdde03146125bc5781630b5ee006146124435781630e89341c146122e057816318160ddd146122c257816320ec271b14612162578163248a9ca3146121355781632693ebf21461210b57816329326f29146120d45781632a55205a146120245781632eb2c2d614611b555781632f2ff15d14611a6757816336568abe146119a257816336e678f8146118f25781634e1273f4146117095781635944c753146115ed5781636c0360eb14611544578163731133e9146113f85781637e518ec81461127e5781639010d07c1461122e57816391d14854146111d8578163938e3d7b1461102f578163a217fddf14611014578163a22cb46514610dac578163b390c0ab14610d19578163b48ab8b6146109fd578163ca15c873146109d3578163d547741f14610996578163e4e18f6d1461072a578163e8a3d48514610624578163e985e9c5146105c5578163f242432a1461022e575063f8954818146101a157600080fd5b346102295760c0600319360112610229576101ba612790565b67ffffffffffffffff90602435828111610229576101dc903690600401612926565b604435838111610229576101f4903690600401612926565b6064359384116102295761020f610227943690600401612926565b906102186127d6565b926102216127f9565b946135b6565b005b600080fd5b346102295760a060031936011261022957610247612790565b61024f6127b3565b6044356064359260843567ffffffffffffffff811161022957610276903690600401612926565b73ffffffffffffffffffffffffffffffffffffffff938483169485331480156105a3575b1561052057811692831561049d57818661048d575b5050846000526020956000875287600020856000528752876000206102d5828254612a88565b9055836000526000875287600020856000528752876000206102f882825461324b565b905583868951878152838a8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b3392a46103355a92612bb3565b61033b57005b60008794610397968a51978896879586937ff23a6e61000000000000000000000000000000000000000000000000000000009c8d865233600487015260248601526044850152606484015260a0608484015260a48301906128e5565b0393f18015610482577fffffffff0000000000000000000000000000000000000000000000000000000091600091610455575b5016036103d357005b60849151907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152603a60248201527f45524331313535235f63616c6c6f6e4552433131353552656365697665643a2060448201527f494e56414c49445f4f4e5f524543454956455f4d4553534147450000000000006064820152fd5b6104759150843d861161047b575b61046d818361289f565b810190612a2d565b856103ca565b503d610463565b84513d6000823e3d90fd5b6104969161445a565b87816102af565b608488517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960448201527f445f524543495049454e540000000000000000000000000000000000000000006064820152fd5b608488517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433131353523736166655472616e7366657246726f6d3a20494e56414c4960448201527f445f4f50455241544f52000000000000000000000000000000000000000000006064820152fd5b50856000526001602052876000203360005260205260ff88600020541661029a565b346102295780600319360112610229576020906105e0612790565b6105e86127b3565b9073ffffffffffffffffffffffffffffffffffffffff80911660005260018452826000209116600052825260ff81600020541690519015158152f35b34610229576000600319360112610229578051600091600a5461064681612814565b808452906001908181169081156106e45750600114610687575b50506106718261068394038361289f565b519182916020835260208301906128e5565b0390f35b600a600090815294507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8286106106cc575050509181016020019161067182610660565b805460208787018101919091529095019481016106b2565b610683965085925060209150927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00610671941682840152151560051b8201019450610660565b346102295760208060031936011261022957610744612790565b9060008052600881528260002033600052815260ff8360002054161561076d576102278261466a565b905061077833613258565b6000835161078581612883565b604281528381019160603684378151156109675760308353815160019081101561096757607860218401536041905b8082116108e757505061088b5760486108879386936108519361084298519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261080d815180928c6037890191016128c2565b8401917f206973206d697373696e6720726f6c65200000000000000000000000000000006037840152518093868401906128c2565b0103602881018752018561289f565b519283927f08c379a0000000000000000000000000000000000000000000000000000000008452600484015260248301906128e5565b0390fd5b6064848651907f08c379a000000000000000000000000000000000000000000000000000000000825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015610967577f3031323334353637383961626364656600000000000000000000000000000000901a6109238486612a95565b5360041c9180156109385760001901906107b4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b34610229578060031936011261022957610227906004356109ce60016109ba6127b3565b938360005260086020526000200154613078565b613196565b34610229576020600319360112610229576020906004356000526009825280600020549051908152f35b346102295760031960808136011261022957610a17612790565b9067ffffffffffffffff60243581811161022957610a39903690600401612985565b9260443582811161022957610a52903690600401612985565b9160643590811161022957610a6b903690600401612926565b90610a74612f20565b845183518103610cf05760008073ffffffffffffffffffffffffffffffffffffffff8416925b888a88838610610c605750505050610ab5915060025461324b565b60025580600088517f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb339180610aec8a8d83613ed0565b0390a4610af95a92612bb3565b610aff57005b6000610b6991602095610b788a5198899788968794610b597fbc197c81000000000000000000000000000000000000000000000000000000009e8f885233600489015289602489015260a0604489015260a48801906129f9565b90848783030160648801526129f9565b918483030160848501526128e5565b0393f18015610c55577fffffffff0000000000000000000000000000000000000000000000000000000091600091610c37575b501603610bb457005b608490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f45524331313535235f63616c6c6f6e455243313135354261746368526563656960448201527f7665643a20494e56414c49445f4f4e5f524543454956455f4d455353414745006064820152fd5b610c4f915060203d811161047b5761046d818361289f565b84610bab565b83513d6000823e3d90fd5b916003610ce9949592610cbc88610cb581888d610c8083610ce39c612a74565b5190600052610cae6020976000895280600020610c9d868d612a74565b51600052895260002091825461324b565b9055612a74565b5194612a74565b5160005252610cd08d60002091825461324b565b9055610cdc858a612a74565b519061324b565b92612a65565b9190610a9a565b600487517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b3461022957600090610d2a366129e3565b610d33336141df565b610d3f81600254612a88565b6002558184526003602052828420610d58828254612a88565b905533845283602052828420828552602052828420610d78828254612a88565b9055825191825260208201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6233923392a4005b34610229578060031936011261022957610dc4612790565b906024359081151580920361022957333b151580610f8e575b610f5f57823b151580610ebb575b610e765733600052600160205273ffffffffffffffffffffffffffffffffffffffff8160002093169283600052602052806000207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b517f8371ab0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602490fd5b5073ffffffffffffffffffffffffffffffffffffffff602081600b5460081c169160248451809481937f05a3b809000000000000000000000000000000000000000000000000000000008352891660048301525afa908115610f5457600091610f26575b5015610deb565b610f47915060203d8111610f4d575b610f3f818361289f565b8101906141c7565b84610f1f565b503d610f35565b82513d6000823e3d90fd5b602490517ff6fa4cbd000000000000000000000000000000000000000000000000000000008152336004820152fd5b506024602073ffffffffffffffffffffffffffffffffffffffff600b5460081c168351928380927f05a3b8090000000000000000000000000000000000000000000000000000000082523360048301525afa908115610f5457600091610ff6575b5015610ddd565b61100e915060203d8111610f4d57610f3f818361289f565b84610fef565b34610229576000600319360112610229576020905160008152f35b34610229576020806003193601126102295767ffffffffffffffff60043581811161022957611062903690600401612926565b9161106b612dc8565b82519182116111a95761107f600a54612814565b601f8111611145575b5080601f83116001146110c4575081926000926110b9575b50506000198260011b9260031b1c191617600a55600080f35b0151905082806110a0565b90601f19831693600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8926000905b86821061112d5750508360019510611114575b505050811b01600a55005b015160001960f88460031b161c19169055828080611109565b806001859682949686015181550195019301906110f6565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8601f840160051c81019183851061119f575b601f0160051c01905b8181106111935750611088565b60008155600101611186565b909150819061117d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346102295780600319360112610229576020906111f36127b3565b6004356000526008835273ffffffffffffffffffffffffffffffffffffffff826000209116600052825260ff81600020541690519015158152f35b346102295780600319360112610229576020906004356000526009825273ffffffffffffffffffffffffffffffffffffffff61126f602435836000206133c0565b92905490519260031b1c168152f35b34610229576020806003193601126102295767ffffffffffffffff600435818111610229576112b1903690600401612926565b916112ba612dc8565b82519182116111a9576112ce600454612814565b601f8111611394575b5080601f831160011461131357508192600092611308575b50506000198260011b9260031b1c191617600455600080f35b0151905082806112ef565b90601f1983169360046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b86821061137c5750508360019510611363575b505050811b01600455005b015160001960f88460031b161c19169055828080611358565b80600185968294968601518155019501930190611345565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c8101918385106113ee575b601f0160051c01905b8181106113e257506112d7565b600081556001016113d5565b90915081906113cc565b3461022957608060031936011261022957611411612790565b60243560443560643567ffffffffffffffff811161022957611437903690600401612926565b92611440612f20565b61144c8260025461324b565b60025582600052602093600385528560002061146984825461324b565b905573ffffffffffffffffffffffffffffffffffffffff821691826000526000865286600020856000528652866000206114a485825461324b565b9055826000885187815286898201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a3392a46114e25a91612bb3565b6114e857005b610397936000879489518097819682957ff23a6e61000000000000000000000000000000000000000000000000000000009b8c85523360048601528660248601526044850152606484015260a0608484015260a48301906128e5565b3461022957600060031936011261022957805160009160045461156681612814565b808452906001908181169081156106e457506001146115905750506106718261068394038361289f565b6004600090815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8286106115d5575050509181016020019161067182610660565b805460208787018101919091529095019481016115bb565b34610229576060600319360112610229576116066127b3565b604435906bffffffffffffffffffffffff821680920361022957611628612be9565b611636612710831115613d6d565b73ffffffffffffffffffffffffffffffffffffffff8091169283156116ac5790817fffffffffffffffffffffffff000000000000000000000000000000000000000092519461168486612867565b8552602085019384526004356000526007602052600020935116915160a01b16179055600080f35b606490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152fd5b3461022957806003193601126102295760043567ffffffffffffffff918282116102295736602383011215610229578160040135926117478461296d565b926117548351948561289f565b84845260209460248686019160051b8301019136831161022957602401905b8282106118c65750505060243590811161022957611795903690600401612985565b825181510361184357825193601f196117c56117b08761296d565b966117bd8651988961289f565b80885261296d565b01368287013760005b8451811015611831578073ffffffffffffffffffffffffffffffffffffffff6117fa61182c9388612a74565b511660005260008352846000206118118286612a74565b51600052835284600020546118268289612a74565b52612a65565b6117ce565b835182815280610683818501896129f9565b6084848351907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602c60248201527f455243313135352362616c616e63654f6642617463683a20494e56414c49445f60448201527f41525241595f4c454e47544800000000000000000000000000000000000000006064820152fd5b813573ffffffffffffffffffffffffffffffffffffffff81168103610229578152908601908601611773565b346102295760e06003193601126102295761190b612790565b67ffffffffffffffff6024358181116102295761192c903690600401612926565b9060443581811161022957611945903690600401612926565b906064359081116102295761195e903690600401612926565b6119666127d6565b9161196f6127f9565b9360c4359573ffffffffffffffffffffffffffffffffffffffff871687036102295761199d6102279761466a565b6135b6565b346102295780600319360112610229576119ba6127b3565b903373ffffffffffffffffffffffffffffffffffffffff8316036119e45761022782600435613196565b608490517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152fd5b3461022957806003193601126102295761022790600435906009611a896127b3565b928060005260209060088252611aa56001856000200154613078565b806000526008825273ffffffffffffffffffffffffffffffffffffffff8460002095169485600052825260ff84600020541615611ae9575b600052526000206133d8565b8060005260088252836000208560005282528360002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553385827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4611add565b346102295760a060031936011261022957611b6e612790565b611b766127b3565b9160449167ffffffffffffffff90833582811161022957611b9b903690600401612985565b606495863584811161022957611bb5903690600401612985565b9360843590811161022957611bce903690600401612926565b73ffffffffffffffffffffffffffffffffffffffff9081851633148015612000575b15611f7e5781831615611efc57818516611eed575b8351865103611e6b57835160005b818110611de5575050865182841690838716907f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb339180611c558c8b83613ed0565b0390a45a94611c6384612bb3565b611c6957005b82918851978896879586947fbc197c810000000000000000000000000000000000000000000000000000000086523360048701521660248501528b840160a0905260a48401611cb7916129f9565b838103600319018d850152611ccb916129f9565b828103600319016084840152611ce0916128e5565b039216600090602095f1908115610f54577fbc197c8100000000000000000000000000000000000000000000000000000000917fffffffff0000000000000000000000000000000000000000000000000000000091600091611dc7575b501603611d4657005b6084927f45524331313535235f63616c6c6f6e45524331313535426174636852656365697f7665643a20494e56414c49445f4f4e5f524543454956455f4d455353414745009251937f08c379a000000000000000000000000000000000000000000000000000000000855260206004860152603f6024860152840152820152fd5b611ddf915060203d811161047b5761046d818361289f565b86611d3d565b80611df3611e66928a612a74565b51858916600052602090600082528b600020611e0f848b612a74565b516000528252611e248c600020918254612a88565b9055611e30828b612a74565b5190868816600052600081528b60002090611e4b848b612a74565b5160005252611e5f8b60002091825461324b565b9055612a65565b611c13565b6084887f494e56414c49445f4152524159535f4c454e47544800000000000000000000008b7f45524331313535235f7361666542617463685472616e7366657246726f6d3a208b51937f08c379a00000000000000000000000000000000000000000000000000000000085526020600486015260356024860152840152820152fd5b611ef7838661445a565b611c05565b6084887f4e56414c49445f524543495049454e54000000000000000000000000000000008b7f45524331313535237361666542617463685472616e7366657246726f6d3a20498b51937f08c379a00000000000000000000000000000000000000000000000000000000085526020600486015260306024860152840152820152fd5b6084887f4e56414c49445f4f50455241544f5200000000000000000000000000000000008b7f45524331313535237361666542617463685472616e7366657246726f6d3a20498b51937f08c379a000000000000000000000000000000000000000000000000000000000855260206004860152602f6024860152840152820152fd5b508185166000526001602052866000203360005260205260ff876000205416611bf0565b3461022957612032366129e3565b9060005260076020528160002082519061204b82612867565b549073ffffffffffffffffffffffffffffffffffffffff908183169283825260a01c602082015291156120b1575b6bffffffffffffffffffffffff6020830151169283810293818504149015171561093857612710915116918351928352046020820152f35b905082516120be81612867565b600654828116825260a01c602082015290612079565b346102295760006003193601126102295760209073ffffffffffffffffffffffffffffffffffffffff600b5460081c169051908152f35b34610229576020600319360112610229576020906004356000526003825280600020549051908152f35b34610229576020600319360112610229576020906004356000526008825260018160002001549051908152f35b3461022957806003193601126102295767ffffffffffffffff60043581811161022957612193903690600401612985565b90602435908111610229576121ac903690600401612985565b906121b6336141df565b805182518103612299576000906000905b8082106122175750506000936122007f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb92600254612a88565b60025551806122123395339583613ed0565b0390a4005b9091610ce36122939161222a8588612a74565b51336000526020906000825289600020612244888a612a74565b5160005282526122598a600020918254612a88565b90556003612267878a612a74565b5191612273888a612a74565b516000525261228789600020918254612a88565b9055610cdc8588612a74565b906121c7565b600484517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b34610229576000600319360112610229576020906002549051908152f35b346102295760209081600319360112610229578190612300600435612aa6565b815193849160009060045461231481612814565b9060019081811690811561240857506001146123a9575b50509261239a928261234986600595610683999851948592016128c2565b017f2e6a736f6e0000000000000000000000000000000000000000000000000000008152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe581018752018561289f565b519282849384528301906128e5565b9091925060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906000915b8383106123f05750505083018201908261068361232b565b8054838b0187015289965088959092019181016123d8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016868801525050801515028401830191508261068361232b565b34610229576020806003193601126102295767ffffffffffffffff9060043582811161022957612477903690600401612926565b91612480612dc8565b82519081116111a9576005916124968354612814565b601f811161255b575b5080601f83116001146124db57508192936000926124d0575b50506000198260011b9260031b1c1916179055600080f35b0151905083806124b8565b90601f19831694846000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000905b87821061254357505083600195961061252a575b505050811b019055005b015160001960f88460031b161c19169055838080612520565b8060018596829496860151815501950193019061250c565b836000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0601f8401851c8101918385106125b2575b601f01851c01905b8181106125a6575061249f565b60008155600101612599565b9091508190612591565b346102295760006003193601126102295780516000916005546125de81612814565b808452906001908181169081156106e457506001146126085750506106718261068394038361289f565b6005600090815294507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82861061264d575050509181016020019161067182610660565b80546020878701810191909152909501948101612633565b34610229576003193601126102295761267c612790565b6024356bffffffffffffffffffffffff8116810361022957610227916126a0612be9565b613df8565b34610229576020600319360112610229576004357fffffffff00000000000000000000000000000000000000000000000000000000811691828203610229576020927fc79b8b5f0000000000000000000000000000000000000000000000000000000014918215612733575b8215612721575b50519015158152f35b61272c919250613ef8565b9083612718565b915061273e82613ef8565b91612711565b3461022957816003193601126102295760209173ffffffffffffffffffffffffffffffffffffffff612774612790565b1660005260008352806000206024356000528352600020548152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361022957565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361022957565b6084359073ffffffffffffffffffffffffffffffffffffffff8216820361022957565b60a435906bffffffffffffffffffffffff8216820361022957565b90600182811c9216801561285d575b602083101461282e57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691612823565b6040810190811067ffffffffffffffff8211176111a957604052565b6080810190811067ffffffffffffffff8211176111a957604052565b90601f601f19910116810190811067ffffffffffffffff8211176111a957604052565b60005b8381106128d55750506000910152565b81810151838201526020016128c5565b90601f19601f602093612903815180928187528780880191016128c2565b0116010190565b67ffffffffffffffff81116111a957601f01601f191660200190565b81601f820112156102295780359061293d8261290a565b9261294b604051948561289f565b8284526020838301011161022957816000926020809301838601378301015290565b67ffffffffffffffff81116111a95760051b60200190565b81601f820112156102295780359161299c8361296d565b926129aa604051948561289f565b808452602092838086019260051b820101928311610229578301905b8282106129d4575050505090565b813581529083019083016129c6565b6003196040910112610229576004359060243590565b90815180825260208080930193019160005b828110612a19575050505090565b835185529381019392810192600101612a0b565b9081602091031261022957517fffffffff00000000000000000000000000000000000000000000000000000000811681036102295790565b60001981146109385760010190565b80518210156109675760209160051b010190565b9190820391821161093857565b908151811015610967570160200190565b8015612b795780816000925b612b65575080612ac18361290a565b92612acf604051948561289f565b808452601f19612ade8261290a565b01366020860137915b612af057505090565b60001982019182116109385781600a8083049281840291848304148415171561093857612b2060ff928392612a88565b16603001908111610938577fff00000000000000000000000000000000000000000000000000000000000000612b5e9160f81b1660001a9185612a95565b5380612ae7565b91612b71600a91612a65565b920480612ab2565b50604051612b8681612867565b600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b3f8015159081612bc1575090565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709150141590565b3360009081527fa9ced9fdc45cded6d4b7a90e36d1ee82b957a500cc22704c465e9bdf275406fd602090815260408083205490927f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb0119160ff1615612c4d5750505050565b612c5633613258565b91845190612c6382612883565b60428252848201926060368537825115612d9b5760308453825190600191821015612d9b5790607860218501536041915b818311612cee5750505061088b5760486108879386936108519361084298519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261080d815180928c6037890191016128c2565b909192600f81166010811015612d6e577f3031323334353637383961626364656600000000000000000000000000000000901a612d2b8587612a95565b5360041c928015612d4157600019019190612c94565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526032600452fd5b3360009081527f95f185554aba264de8ed412af70e5aba6acb0e648f258c912ad29ed85d11ca18602090815260408083205490927fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a59160ff1615612e2c5750505050565b612e3533613258565b91845190612e4282612883565b60428252848201926060368537825115612d9b5760308453825190600191821015612d9b5790607860218501536041915b818311612ecd5750505061088b5760486108879386936108519361084298519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261080d815180928c6037890191016128c2565b909192600f81166010811015612d6e577f3031323334353637383961626364656600000000000000000000000000000000901a612f0a8587612a95565b5360041c928015612d4157600019019190612e73565b3360009081527f51a495916474fe1a0c0fcfb65a8a97682b84a054118858cdd1f5dfd7fc0919eb602090815260408083205490927f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69160ff1615612f845750505050565b612f8d33613258565b91845190612f9a82612883565b60428252848201926060368537825115612d9b5760308453825190600191821015612d9b5790607860218501536041915b8183116130255750505061088b5760486108879386936108519361084298519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261080d815180928c6037890191016128c2565b909192600f81166010811015612d6e577f3031323334353637383961626364656600000000000000000000000000000000901a6130628587612a95565b5360041c928015612d4157600019019190612fcb565b60009080825260209060088252604092838120338252835260ff8482205416156130a25750505050565b6130ab33613258565b918451906130b882612883565b60428252848201926060368537825115612d9b5760308453825190600191821015612d9b5790607860218501536041915b8183116131435750505061088b5760486108879386936108519361084298519889937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008a86015261080d815180928c6037890191016128c2565b909192600f81166010811015612d6e577f3031323334353637383961626364656600000000000000000000000000000000901a6131808587612a95565b5360041c928015612d41576000190191906130e9565b9060406131e292600090808252600860205273ffffffffffffffffffffffffffffffffffffffff83832094169384835260205260ff83832054166131e5575b815260096020522061347b565b50565b80825260086020528282208483526020528282207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690553384827ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8580a46131d5565b9190820180921161093857565b604051906060820182811067ffffffffffffffff8211176111a957604052602a82526020820160403682378251156109675760309053815160019081101561096757607860218401536029905b8082116133135750506132b55790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613392577f3031323334353637383961626364656600000000000000000000000000000000901a61334f8486612a95565b5360041c9180156133645760001901906132a5565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b80548210156109675760005260206000200190600090565b9190600183016000908282528060205260408220541560001461347557845494680100000000000000008610156134485783613438613421886001604098999a018555846133c0565b81939154906000199060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146135af57600019918281018181116135825782549084820191821161355557808203613520575b505050805480156134f3578201916134d683836133c0565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b61354061353061342193866133c0565b90549060031b1c928392866133c0565b905586528460205260408620553880806134be565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b9391959490929573ffffffffffffffffffffffffffffffffffffffff93847f0000000000000000000000000000000000000000000000000000000000000000163314801590613d61575b613d3757805167ffffffffffffffff928382116111a957600591806136258454612814565b94601f95868111613cca575b50602090868311600114613c4957600092613c3e575b50506000198260011b9260031b1c19161782555b80518481116111a957806004926136728454612814565b868111613bd3575b50602090868311600114613b5257600092613b47575b50506000198260011b9260031b1c19161781555b8951938411613b1957506136b9600a54612814565b90828211613abd575b50506020908211600114613a305790806137ef93926138439899600092613a25575b50506000198260011b9260031b1c191617600a555b6000805260089283602052604094856000209616958660005260205260ff856000205416156139b8575b60008052600960205261373986866000206133d8565b507f6db4061a20ca83a3be756ee172bd37a029093ac5afe4ce968c6d5435b43cb0118060005284602052856000208760005260205260ff8660002054161561394b575b600052600960205261379186866000206133d8565b507fe02a0315b383857ac496e9d2b2546a699afaeb4e5e83a1fdef64376d0b74e5a58060005284602052856000208760005260205260ff866000205416156138de575b60005260096020526137e986866000206133d8565b50613df8565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6908160005280602052826000208460005260205260ff83600020541615613871575b5060005260096020526000206133d8565b5060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00600b541617600b55565b8160005260205281600020836000526020528160002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553383827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a438613832565b806000528460205285600020876000526020528560002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553387827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a46137d4565b806000528460205285600020876000526020528560002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790553387827f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a461377c565b600080528360205284600020866000526020528460002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055338660007f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4613723565b0151905038806136e4565b601f19821697600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89860005b818110613aa557509860019284926137ef96956138439b9c10613a8c575b505050811b01600a556136f9565b015160001960f88460031b161c19169055388080613a7e565b838301518b556001909a019960209384019301613a60565b600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89083808601821c83019360208710613b10575b01901c01905b818110156136c25760008155600101613afc565b93508293613af6565b6041907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b015190503880613690565b60008581527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b93601f1916905b818110613bbb5750908460019594939210613ba2575b505050811b0181556136a4565b015160001960f88460031b161c19169055388080613b95565b92936020600181928786015181550195019301613b7f565b909150836000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b86808501871c82019260208610613c35575b90859493929101871c01905b818110613c26575061367a565b60008155849350600101613c19565b92508192613c0d565b015190503880613647565b60008681527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db093601f1916905b818110613cb25750908460019594939210613c99575b505050811b01825561365b565b015160001960f88460031b161c19169055388080613c8c565b92936020600181928786015181550195019301613c76565b90915060008581527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db087808601881c82019360208710613d2e575b9086959493929101881c01915b828110613d20575050613631565b818155859450600101613d12565b93508193613d05565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b5060ff600b5416613600565b15613d7457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c2065786365656460448201527f2073616c655072696365000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff831691613e2b612710841115613d6d565b16918215613e72577fffffffffffffffffffffffff0000000000000000000000000000000000000000916020604051613e6381612867565b858152015260a01b1617600655565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152fd5b9091613ee7613ef5936040845260408401906129f9565b9160208184039101526129f9565b90565b613f0181613f9e565b908115613f35575b8115613f24575b8115613f1a575090565b613ef59150614061565b9050613f2f81614061565b90613f10565b9050613f4081613f46565b90613f09565b7f0e89341c000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614613f9857613ef590613f9e565b50600190565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f3e85e62f0000000000000000000000000000000000000000000000000000000014908115613fee575090565b613ef591507fffffffff00000000000000000000000000000000000000000000000000000000167fd9b67a26000000000000000000000000000000000000000000000000000000008114613f98577f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b61406a81614150565b9081156140b8575b811561408d575b8115614083575090565b613ef591506140c9565b7fffffffff000000000000000000000000000000000000000000000000000000008116159150614079565b90506140c3816140c9565b90614072565b7fffffffff000000000000000000000000000000000000000000000000000000008116907f5a05180f00000000000000000000000000000000000000000000000000000000821491821561411c57505090565b7f7965db0b00000000000000000000000000000000000000000000000000000000149150811561414a575090565b613ef591505b7fffffffff00000000000000000000000000000000000000000000000000000000167f2a55205a0000000000000000000000000000000000000000000000000000000081149081156141a0575090565b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501490565b90816020910312610229575180151581036102295790565b32331415806143d3575b6143a357803b151580614319575b6142d2575060003b15158061423e575b61420d57565b60246040517f54ce484200000000000000000000000000000000000000000000000000000000815260006004820152fd5b506024602073ffffffffffffffffffffffffffffffffffffffff600b5460081c16604051928380927f05a3b809000000000000000000000000000000000000000000000000000000008252600060048301525afa9081156142c6576000916142a8575b5015614207565b6142c0915060203d8111610f4d57610f3f818361289f565b386142a1565b6040513d6000823e3d90fd5b60249073ffffffffffffffffffffffffffffffffffffffff604051917ff9344531000000000000000000000000000000000000000000000000000000008352166004820152fd5b5073ffffffffffffffffffffffffffffffffffffffff602081600b5460081c16916024604051809481937f05a3b809000000000000000000000000000000000000000000000000000000008352871660048301525afa9081156142c657600091614385575b50156141f7565b61439d915060203d8111610f4d57610f3f818361289f565b3861437e565b60246040517f937db65f000000000000000000000000000000000000000000000000000000008152336004820152fd5b506024602073ffffffffffffffffffffffffffffffffffffffff600b5460081c16604051928380927f05a3b8090000000000000000000000000000000000000000000000000000000082523360048301525afa9081156142c65760009161443c575b50156141e9565b614454915060203d8111610f4d57610f3f818361289f565b38614435565b32331415806145e3575b6143a357803b151580614559575b6142d25750803b1515806144cf575b6144885750565b60249073ffffffffffffffffffffffffffffffffffffffff604051917f54ce4842000000000000000000000000000000000000000000000000000000008352166004820152fd5b5073ffffffffffffffffffffffffffffffffffffffff602081600b5460081c16916024604051809481937f05a3b809000000000000000000000000000000000000000000000000000000008352871660048301525afa9081156142c65760009161453b575b5015614481565b614553915060203d8111610f4d57610f3f818361289f565b38614534565b5073ffffffffffffffffffffffffffffffffffffffff602081600b5460081c16916024604051809481937f05a3b809000000000000000000000000000000000000000000000000000000008352871660048301525afa9081156142c6576000916145c5575b5015614472565b6145dd915060203d8111610f4d57610f3f818361289f565b386145be565b506024602073ffffffffffffffffffffffffffffffffffffffff600b5460081c16604051928380927f05a3b8090000000000000000000000000000000000000000000000000000000082523360048301525afa9081156142c65760009161464c575b5015614464565b614664915060203d8111610f4d57610f3f818361289f565b38614645565b73ffffffffffffffffffffffffffffffffffffffff90818116916040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f05a3b809000000000000000000000000000000000000000000000000000000006004820152602081602481875afa9081156142c657600091614794575b501561476a577fffffffffffffffffffffff0000000000000000000000000000000000000000ff917f3edc37a14cc8047c7c8a3f354311efe86c14848efd4e3765a3e1e57eea04ea76604074ffffffffffffffffffffffffffffffffffffffff0093600b54968251918860081c1682526020820152a160081b16911617600b55565b60046040517fd6f93fb7000000000000000000000000000000000000000000000000000000008152fd5b6147ac915060203d8111610f4d57610f3f818361289f565b386146e856fea2646970667358221220dfc7340894e3fa8fe5ab760a8077b0f367e4ba923d649a23559d132e94c3d89f64736f6c63430008130033',
      signer
    )
  }
}

export const ERC1155OPERATORENFORCEDFACTORY_VERIFICATION: Omit<VerificationRequest, 'waitForSuccess'> = {
  contractToVerify:
    'src/tokens/ERC1155/presets/operator-enforced/ERC1155OperatorEnforcedFactory.sol:ERC1155OperatorEnforcedFactory',
  version: 'v0.8.19+commit.7dd6d404',
  licenceType: 'UNLICENSED',
  compilerInput: {
    language: 'Solidity',
    sources: {
      'src/tokens/ERC1155/presets/operator-enforced/ERC1155OperatorEnforcedFactory.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    IERC1155OperatorEnforcedFactory,\n    IERC1155OperatorEnforcedFactoryFunctions\n} from "@0xsequence/contracts-library/tokens/ERC1155/presets/operator-enforced/IERC1155OperatorEnforcedFactory.sol";\nimport {ERC1155OperatorEnforced} from\n    "@0xsequence/contracts-library/tokens/ERC1155/presets/operator-enforced/ERC1155OperatorEnforced.sol";\nimport {SequenceProxyFactory} from "@0xsequence/contracts-library/proxies/SequenceProxyFactory.sol";\n\n/**\n * Deployer of ERC-1155 Operator Enforced proxies.\n */\ncontract ERC1155OperatorEnforcedFactory is IERC1155OperatorEnforcedFactory, SequenceProxyFactory {\n    /**\n     * Creates an ERC-1155 Operator Enforced Factory.\n     * @param factoryOwner The owner of the ERC-1155 Operator Enforced Factory\n     */\n    constructor(address factoryOwner) {\n        ERC1155OperatorEnforced impl = new ERC1155OperatorEnforced();\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\n    }\n\n    /// @inheritdoc IERC1155OperatorEnforcedFactoryFunctions\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address operatorAllowlist\n    ) external returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                tokenName,\n                tokenBaseURI,\n                tokenContractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                operatorAllowlist\n            )\n        );\n        proxyAddr = _createProxy(salt, proxyOwner, "");\n        ERC1155OperatorEnforced(proxyAddr).initialize(\n            tokenOwner,\n            tokenName,\n            tokenBaseURI,\n            tokenContractURI,\n            royaltyReceiver,\n            royaltyFeeNumerator,\n            operatorAllowlist\n        );\n        emit ERC1155OperatorEnforcedDeployed(proxyAddr);\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IERC1155OperatorEnforcedFactoryFunctions\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address operatorAllowlist\n    ) external view returns (address proxyAddr) {\n        bytes32 salt = keccak256(\n            abi.encode(\n                tokenOwner,\n                tokenName,\n                tokenBaseURI,\n                tokenContractURI,\n                royaltyReceiver,\n                royaltyFeeNumerator,\n                operatorAllowlist\n            )\n        );\n        return _computeProxyAddress(salt, proxyOwner, "");\n    }\n}\n'
      },
      'src/tokens/ERC1155/presets/operator-enforced/IERC1155OperatorEnforcedFactory.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155OperatorEnforcedFactoryFunctions {\n    /**\n     * Creates an ERC-1155 Operator Enforced proxy.\n     * @param proxyOwner The owner of the ERC-1155 Operator Enforced proxy\n     * @param tokenOwner The owner of the ERC-1155 Operator Enforced implementation\n     * @param tokenName Token name\n     * @param tokenBaseURI Base URI for token metadata\n     * @param tokenContractURI Contract URI for token metadata\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param operatorAllowlist Address of the operator allowlist\n     * @return proxyAddr The address of the ERC-1155 Operator Enforced Proxy\n     */\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address operatorAllowlist\n    ) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param proxyOwner The owner of the ERC-1155 Operator Enforced proxy\n     * @param tokenOwner The owner of the ERC-1155 Operator Enforced implementation\n     * @param tokenName Token name\n     * @param tokenBaseURI Base URI for token metadata\n     * @param tokenContractURI Contract URI for token metadata\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param operatorAllowlist Address of the operator allowlist\n     * @return proxyAddr The address of the ERC-1155 Operator Enforced Proxy\n     */\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address operatorAllowlist\n    ) external returns (address proxyAddr);\n}\n\ninterface IERC1155OperatorEnforcedFactorySignals {\n    /**\n     * Event emitted when a new ERC-1155 Operator Enforced proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event ERC1155OperatorEnforcedDeployed(address proxyAddr);\n}\n\ninterface IERC1155OperatorEnforcedFactory is\n    IERC1155OperatorEnforcedFactoryFunctions,\n    IERC1155OperatorEnforcedFactorySignals\n{}\n'
      },
      'src/tokens/ERC1155/presets/operator-enforced/ERC1155OperatorEnforced.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {ERC1155Items} from "@0xsequence/contracts-library/tokens/ERC1155/presets/items/ERC1155Items.sol";\nimport {OperatorAllowlistEnforced} from\n    "@0xsequence/contracts-library/tokens/common/immutable/OperatorAllowlistEnforced.sol";\n\n/**\n * An implementation of ERC-1155 that prevents transfers.\n */\ncontract ERC1155OperatorEnforced is ERC1155Items, OperatorAllowlistEnforced {\n    constructor() ERC1155Items() {}\n\n    /**\n     * Initialize the contract.\n     * @param owner Owner address\n     * @param tokenName Token name\n     * @param tokenBaseURI Base URI for token metadata\n     * @param tokenContractURI Contract URI for token metadata\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @param operatorAllowlist Address of the operator allowlist\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator,\n        address operatorAllowlist\n    ) public virtual {\n        _setOperatorAllowlistRegistry(operatorAllowlist);\n        ERC1155Items.initialize(owner, tokenName, tokenBaseURI, tokenContractURI, royaltyReceiver, royaltyFeeNumerator);\n    }\n\n    //\n    // Operator Allowlist\n    //\n\n    /**\n     * Set the operator allowlist registry.\n     * @param operatorAllowlist Address of the operator allowlist\n     */\n    function setOperatorAllowlistRegistry(address operatorAllowlist) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _setOperatorAllowlistRegistry(operatorAllowlist);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public override validateApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 amount) internal virtual override {\n        if (from != address(0)) {\n            // Ignore validation on minting\n            _validateTransfer(from, to);\n        }\n        super._safeTransferFrom(from, to, id, amount);\n    }\n\n    function _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts)\n        internal\n        virtual\n        override\n    {\n        if (from != address(0)) {\n            // Ignore validation on minting\n            _validateTransfer(from, to);\n        }\n        super._safeBatchTransferFrom(from, to, ids, amounts);\n    }\n\n    function _burn(address from, uint256 id, uint256 amount)\n        internal\n        virtual\n        override\n        validateTransfer(from, address(0))\n    {\n        super._burn(from, id, amount);\n    }\n\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\n        internal\n        virtual\n        override\n        validateTransfer(from, address(0))\n    {\n        super._batchBurn(from, ids, amounts);\n    }\n}\n'
      },
      'src/proxies/SequenceProxyFactory.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    TransparentUpgradeableBeaconProxy,\n    ITransparentUpgradeableBeaconProxy\n} from "./TransparentUpgradeableBeaconProxy.sol";\n\nimport {Create2} from "@openzeppelin/contracts/utils/Create2.sol";\nimport {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";\nimport {UpgradeableBeacon} from "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol";\n\n/**\n * An proxy factory that deploys upgradeable beacon proxies.\n * @dev The factory owner is able to upgrade the beacon implementation.\n * @dev Proxy deployers are able to override the beacon reference with their own.\n */\nabstract contract SequenceProxyFactory is Ownable {\n    UpgradeableBeacon public beacon;\n\n    /**\n     * Initialize a Sequence Proxy Factory.\n     * @param implementation The initial beacon implementation.\n     * @param factoryOwner The owner of the factory.\n     */\n    function _initialize(address implementation, address factoryOwner) internal {\n        beacon = new UpgradeableBeacon(implementation);\n        Ownable._transferOwnership(factoryOwner);\n    }\n\n    /**\n     * Deploys and initializes a new proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @param _data The initialization data.\n     * @return proxyAddress The address of the deployed proxy.\n     */\n    function _createProxy(bytes32 _salt, address _proxyOwner, bytes memory _data)\n        internal\n        returns (address proxyAddress)\n    {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\n\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\n    }\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @return proxy The expected address of the deployed proxy.\n     */\n    function _computeProxyAddress(bytes32 _salt, address _proxyOwner, bytes memory _data)\n        internal\n        view\n        returns (address)\n    {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\n\n        return Create2.computeAddress(saltedHash, bytecodeHash);\n    }\n\n    /**\n     * Upgrades the beacon implementation.\n     * @param implementation The new beacon implementation.\n     */\n    function upgradeBeacon(address implementation) public onlyOwner {\n        beacon.upgradeTo(implementation);\n    }\n}\n'
      },
      'src/tokens/ERC1155/presets/items/ERC1155Items.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    IERC1155Items,\n    IERC1155ItemsFunctions\n} from "@0xsequence/contracts-library/tokens/ERC1155/presets/items/IERC1155Items.sol";\nimport {ERC1155BaseToken} from "@0xsequence/contracts-library/tokens/ERC1155/ERC1155BaseToken.sol";\nimport {ERC2981Controlled} from "@0xsequence/contracts-library/tokens/common/ERC2981Controlled.sol";\n\n/**\n * An implementation of ERC-1155 capable of minting when role provided.\n */\ncontract ERC1155Items is ERC1155BaseToken, IERC1155Items {\n    bytes32 internal constant MINTER_ROLE = keccak256("MINTER_ROLE");\n\n    address private immutable initializer;\n    bool private initialized;\n\n    constructor() {\n        initializer = msg.sender;\n    }\n\n    /**\n     * Initialize the contract.\n     * @param owner Owner address\n     * @param tokenName Token name\n     * @param tokenBaseURI Base URI for token metadata\n     * @param tokenContractURI Contract URI for token metadata\n     * @param royaltyReceiver Address of who should be sent the royalty payment\n     * @param royaltyFeeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI,\n        address royaltyReceiver,\n        uint96 royaltyFeeNumerator\n    )\n        public\n        virtual\n    {\n        if (msg.sender != initializer || initialized) {\n            revert InvalidInitialization();\n        }\n\n        ERC1155BaseToken._initialize(owner, tokenName, tokenBaseURI, tokenContractURI);\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\n\n        _grantRole(MINTER_ROLE, owner);\n\n        initialized = true;\n    }\n\n    //\n    // Minting\n    //\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token ID to mint.\n     * @param amount Amount of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external onlyRole(MINTER_ROLE) {\n        _mint(to, tokenId, amount, data);\n    }\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenIds Token IDs to mint.\n     * @param amounts Amounts of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data)\n        external\n        onlyRole(MINTER_ROLE)\n    {\n        _batchMint(to, tokenIds, amounts, data);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC1155BaseToken) returns (bool) {\n        return type(IERC1155ItemsFunctions).interfaceId == interfaceId || ERC1155BaseToken.supportsInterface(interfaceId)\n            || super.supportsInterface(interfaceId);\n    }\n}\n'
      },
      'src/tokens/common/immutable/OperatorAllowlistEnforced.sol': {
        content:
          '// Copyright Immutable Pty Ltd 2018 - 2023\n// SPDX-License-Identifier: Apache 2.0\n// slither-disable-start calls-loop\npragma solidity 0.8.19;\n\n// Allowlist Registry\nimport {IOperatorAllowlist} from "./IOperatorAllowlist.sol";\n\n// Interface\nimport {IERC165} from "@openzeppelin/contracts/utils/introspection/ERC165.sol";\n\n// Errors\nimport {OperatorAllowlistEnforcementErrors} from "./OperatorAllowlistEnforcementErrors.sol";\n\n/*\n    OperatorAllowlistEnforced is an abstract contract that token contracts can inherit in order to set the\n    address of the OperatorAllowlist registry that it will interface with, so that the token contract may\n    enable the restriction of approvals and transfers to allowlisted users.\n    OperatorAllowlistEnforced is not designed to be upgradeable or extended.\n*/\n\nabstract contract OperatorAllowlistEnforced is OperatorAllowlistEnforcementErrors {\n    ///     =====   State Variables  =====\n\n    /// @notice Interface that implements the `IOperatorAllowlist` interface\n    IOperatorAllowlist public operatorAllowlist;\n\n    ///     =====     Events         =====\n\n    /// @notice Emitted whenever the transfer Allowlist registry is updated\n    event OperatorAllowlistRegistryUpdated(address oldRegistry, address newRegistry);\n\n    ///     =====     Modifiers      =====\n\n    /**\n     * @notice Internal function to validate an approval, according to whether the target is an EOA or Allowlisted\n     * @param targetApproval the address of the approval target to be validated\n     */\n    modifier validateApproval(address targetApproval) {\n        _validateApproval(targetApproval);\n        _;\n    }\n\n    /**\n     * @notice Internal function to validate an approval, according to whether the target is an EOA or Allowlisted\n     * @param targetApproval the address of the approval target to be validated\n     */\n    function _validateApproval(address targetApproval) internal view {\n        // Check for:\n        // 1. approver is an EOA. Contract constructor is handled as transfers \'from\' are blocked\n        // 2. approver is address or bytecode is allowlisted\n        if (msg.sender.code.length != 0 && !operatorAllowlist.isAllowlisted(msg.sender)) {\n            revert ApproverNotInAllowlist(msg.sender);\n        }\n\n        // Check for:\n        // 1. approval target is an EOA\n        // 2. approval target address is Allowlisted or target address bytecode is Allowlisted\n        if (targetApproval.code.length != 0 && !operatorAllowlist.isAllowlisted(targetApproval)) {\n            revert ApproveTargetNotInAllowlist(targetApproval);\n        }\n    }\n\n    /**\n     * @notice Internal function to validate a transfer, according to whether the calling address,\n     * from address and to address is an EOA or Allowlisted\n     * @param from the address of the from target to be validated\n     * @param to the address of the to target to be validated\n     */\n    modifier validateTransfer(address from, address to) {\n        _validateTransfer(from, to);\n        _;\n    }\n\n    /**\n     * @notice Internal function to validate a transfer, according to whether the calling address,\n     * from address and to address is an EOA or Allowlisted\n     * @param from the address of the from target to be validated\n     * @param to the address of the to target to be validated\n     */\n    function _validateTransfer(address from, address to) internal view {\n        // Check for:\n        // 1. caller is an EOA\n        // 2. caller is Allowlisted or is the calling address bytecode is Allowlisted\n        if (\n            msg.sender != tx.origin // solhint-disable-line avoid-tx-origin\n                && !operatorAllowlist.isAllowlisted(msg.sender)\n        ) {\n            revert CallerNotInAllowlist(msg.sender);\n        }\n\n        // Check for:\n        // 1. from is an EOA\n        // 2. from is Allowlisted or from address bytecode is Allowlisted\n        if (from.code.length != 0 && !operatorAllowlist.isAllowlisted(from)) {\n            revert TransferFromNotInAllowlist(from);\n        }\n\n        // Check for:\n        // 1. to is an EOA\n        // 2. to is Allowlisted or to address bytecode is Allowlisted\n        if (to.code.length != 0 && !operatorAllowlist.isAllowlisted(to)) {\n            revert TransferToNotInAllowlist(to);\n        }\n    }\n\n    ///     =====  External functions  =====\n\n    /**\n     * @notice Internal function to set the operator allowlist the calling contract will interface with\n     * @param _operatorAllowlist the address of the Allowlist registry\n     */\n    function _setOperatorAllowlistRegistry(address _operatorAllowlist) internal {\n        if (!IERC165(_operatorAllowlist).supportsInterface(type(IOperatorAllowlist).interfaceId)) {\n            revert AllowlistDoesNotImplementIOperatorAllowlist();\n        }\n\n        emit OperatorAllowlistRegistryUpdated(address(operatorAllowlist), _operatorAllowlist);\n        operatorAllowlist = IOperatorAllowlist(_operatorAllowlist);\n    }\n}\n// slither-disable-end calls-loop\n'
      },
      'src/proxies/TransparentUpgradeableBeaconProxy.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {BeaconProxy, Proxy} from "./openzeppelin/BeaconProxy.sol";\nimport {TransparentUpgradeableProxy, ERC1967Proxy} from "./openzeppelin/TransparentUpgradeableProxy.sol";\n\ninterface ITransparentUpgradeableBeaconProxy {\n    function initialize(address admin, address beacon, bytes memory data) external;\n}\n\nerror InvalidInitialization();\n\n/**\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * The proxy selectors are:\n * - 0xcf7a1d77: initialize\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\n */\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\n    /**\n     * Decode the initialization data from the msg.data and call the initialize function.\n     */\n    function _dispatchInitialize() private returns (bytes memory) {\n        _requireZeroValue();\n\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\n        initialize(admin, beacon, data);\n\n        return "";\n    }\n\n    function initialize(address admin, address beacon, bytes memory data) internal {\n        if (_admin() != address(0)) {\n            // Redundant call. This function can only be called when the admin is not set.\n            revert InvalidInitialization();\n        }\n        _changeAdmin(admin);\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\n     */\n    function _fallback() internal override (TransparentUpgradeableProxy, Proxy) {\n        if (_getAdmin() == address(0)) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\n                ret = _dispatchInitialize();\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    return(add(ret, 0x20), mload(ret))\n                }\n            }\n            // When the admin is not set, the fallback function is used to initialize the proxy.\n            revert InvalidInitialization();\n        }\n        TransparentUpgradeableProxy._fallback();\n    }\n\n    /**\n     * Returns the current implementation address.\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\n     */\n    function _implementation() internal view override (ERC1967Proxy, BeaconProxy) returns (address) {\n        address implementation = ERC1967Proxy._implementation();\n        if (implementation != address(0)) {\n            return implementation;\n        }\n        return BeaconProxy._implementation();\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/Create2.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as \'counterfactual interactions\'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, "Create2: insufficient balance");\n        require(bytecode.length != 0, "Create2: bytecode length is zero");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), "Create2: Failed on deploy");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/access/Ownable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport "../utils/Context.sol";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport "./IBeacon.sol";\nimport "../../access/Ownable.sol";\nimport "../../utils/Address.sol";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), "UpgradeableBeacon: implementation is not a contract");\n        _implementation = newImplementation;\n    }\n}\n'
      },
      'src/tokens/ERC1155/presets/items/IERC1155Items.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155ItemsFunctions {\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token ID to mint.\n     * @param amount Amount of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function mint(address to, uint256 tokenId, uint256 amount, bytes memory data) external;\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenIds Token IDs to mint.\n     * @param amounts Amounts of tokens to mint.\n     * @param data Data to pass if receiver is contract.\n     */\n    function batchMint(address to, uint256[] memory tokenIds, uint256[] memory amounts, bytes memory data) external;\n}\n\ninterface IERC1155ItemsSignals {\n    /**\n     * Invalid initialization error.\n     */\n    error InvalidInitialization();\n}\n\ninterface IERC1155Items is IERC1155ItemsFunctions, IERC1155ItemsSignals {}\n'
      },
      'src/tokens/ERC1155/ERC1155BaseToken.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    ERC1155Supply, ERC1155\n} from "@0xsequence/contracts-library/tokens/ERC1155/extensions/supply/ERC1155Supply.sol";\nimport {ERC1155Metadata} from "@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155Metadata.sol";\nimport {ERC2981Controlled} from "@0xsequence/contracts-library/tokens/common/ERC2981Controlled.sol";\n\nerror InvalidInitialization();\n\n/**\n * A standard base implementation of ERC-1155 for use in Sequence library contracts.\n */\nabstract contract ERC1155BaseToken is ERC1155Supply, ERC1155Metadata, ERC2981Controlled {\n    bytes32 internal constant METADATA_ADMIN_ROLE = keccak256("METADATA_ADMIN_ROLE");\n\n    string private _contractURI;\n\n    /**\n     * Deploy contract.\n     */\n    constructor() ERC1155Metadata("", "") {}\n\n    /**\n     * Initialize the contract.\n     * @param owner Owner address.\n     * @param tokenName Token name.\n     * @param tokenBaseURI Base URI for token metadata.\n     * @param tokenContractURI Contract URI for token metadata.\n     * @dev This should be called immediately after deployment.\n     */\n    function _initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenBaseURI,\n        string memory tokenContractURI\n    )\n        internal\n    {\n        name = tokenName;\n        baseURI = tokenBaseURI;\n        _contractURI = tokenContractURI;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n        _grantRole(ROYALTY_ADMIN_ROLE, owner);\n        _grantRole(METADATA_ADMIN_ROLE, owner);\n    }\n\n    //\n    // Metadata\n    //\n\n    /**\n     * Update the base URI of token\'s URI.\n     * @param tokenBaseURI New base URI of token\'s URI\n     */\n    function setBaseMetadataURI(string memory tokenBaseURI) external onlyRole(METADATA_ADMIN_ROLE) {\n        _setBaseMetadataURI(tokenBaseURI);\n    }\n\n    /**\n     * Update the name of the contract.\n     * @param tokenName New contract name\n     */\n    function setContractName(string memory tokenName) external onlyRole(METADATA_ADMIN_ROLE) {\n        _setContractName(tokenName);\n    }\n\n    /**\n     * Update the contract URI of token\'s URI.\n     * @param tokenContractURI New contract URI of token\'s URI\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function setContractURI(string memory tokenContractURI) external onlyRole(METADATA_ADMIN_ROLE) {\n        _contractURI = tokenContractURI;\n    }\n\n    //\n    // Burn\n    //\n\n    /**\n     * Allows the owner of the token to burn their tokens.\n     * @param tokenId Id of token to burn\n     * @param amount Amount of tokens to burn\n     */\n    function burn(uint256 tokenId, uint256 amount) public virtual {\n        _burn(msg.sender, tokenId, amount);\n    }\n\n    /**\n     * Burn tokens of given token id for each (tokenIds[i], amounts[i]) pair.\n     * @param tokenIds Array of token ids to burn\n     * @param amounts Array of the amount to be burned\n     */\n    function batchBurn(uint256[] memory tokenIds, uint256[] memory amounts) public virtual {\n        _batchBurn(msg.sender, tokenIds, amounts);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Get the contract URI of token\'s URI.\n     * @return Contract URI of token\'s URI\n     * @notice Refer to https://docs.opensea.io/docs/contract-level-metadata\n     */\n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override (ERC1155Supply, ERC1155Metadata, ERC2981Controlled)\n        returns (bool)\n    {\n        return ERC1155Supply.supportsInterface(interfaceId) || ERC1155Metadata.supportsInterface(interfaceId)\n            || ERC2981Controlled.supportsInterface(interfaceId) || super.supportsInterface(interfaceId);\n    }\n}\n'
      },
      'src/tokens/common/ERC2981Controlled.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {IERC2981Controlled} from "@0xsequence/contracts-library/tokens/common/IERC2981Controlled.sol";\nimport {ERC2981} from "@openzeppelin/contracts/token/common/ERC2981.sol";\nimport {AccessControlEnumerable} from "@openzeppelin/contracts/access/AccessControlEnumerable.sol";\n\n/**\n * An implementation of ERC-2981 that allows updates by roles.\n */\nabstract contract ERC2981Controlled is ERC2981, AccessControlEnumerable, IERC2981Controlled {\n    bytes32 internal constant ROYALTY_ADMIN_ROLE = keccak256("ROYALTY_ADMIN_ROLE");\n\n    //\n    // Royalty\n    //\n\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ADMIN_ROLE) {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator)\n        external\n        onlyRole(ROYALTY_ADMIN_ROLE)\n    {\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override (ERC2981, AccessControlEnumerable)\n        returns (bool)\n    {\n        return ERC2981.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId)\n            || type(IERC2981Controlled).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n'
      },
      'src/tokens/common/immutable/IOperatorAllowlist.sol': {
        content:
          '// Copyright Immutable Pty Ltd 2018 - 2023\n// SPDX-License-Identifier: Apache 2.0\npragma solidity 0.8.19;\n\n/**\n * @notice Required interface of an OperatorAllowlist compliant contract\n */\ninterface IOperatorAllowlist {\n    /**\n     * @notice Returns true if an address is Allowlisted false otherwise\n     *  @param target the address to be checked against the Allowlist\n     */\n    function isAllowlisted(address target) external view returns (bool);\n}\n'
      },
      'lib/openzeppelin/contracts/utils/introspection/ERC165.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport "./IERC165.sol";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n'
      },
      'src/tokens/common/immutable/OperatorAllowlistEnforcementErrors.sol': {
        content:
          "// Copyright Immutable Pty Ltd 2018 - 2023\n// SPDX-License-Identifier: Apache 2.0\npragma solidity 0.8.19;\n\ninterface OperatorAllowlistEnforcementErrors {\n    /// @dev Error thrown when the operatorAllowlist address does not implement the IOperatorAllowlist interface\n    error AllowlistDoesNotImplementIOperatorAllowlist();\n\n    /// @dev Error thrown when calling address is not OperatorAllowlist\n    error CallerNotInAllowlist(address caller);\n\n    /// @dev Error thrown when 'from' address is not OperatorAllowlist\n    error TransferFromNotInAllowlist(address from);\n\n    /// @dev Error thrown when 'to' address is not OperatorAllowlist\n    error TransferToNotInAllowlist(address to);\n\n    /// @dev Error thrown when approve target is not OperatorAllowlist\n    error ApproveTargetNotInAllowlist(address target);\n\n    /// @dev Error thrown when approve target is not OperatorAllowlist\n    error ApproverNotInAllowlist(address approver);\n}\n"
      },
      'src/proxies/openzeppelin/BeaconProxy.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport "@openzeppelin/contracts/proxy/beacon/IBeacon.sol";\nimport "@openzeppelin/contracts/proxy/Proxy.sol";\nimport "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256(\'eip1967.proxy.beacon\')) - 1`, so that it doesn\'t\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it\'s used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n'
      },
      'src/proxies/openzeppelin/TransparentUpgradeableProxy.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\n/// @notice This implementation is a copy of OpenZeppelin\'s with the following changes:\n/// - Pragma updated\n/// - Imports updated\n/// - Constructor removed\n/// - Allows admin to call implementation\n\npragma solidity ^0.8.19;\n\nimport "./ERC1967Proxy.sol";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\n * This potentially exposes the admin to a proxy selector attack. See\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\n * The proxy selectors are:\n * - 0x3659cfe6: upgradeTo\n * - 0x4f1ef286: upgradeToAndCall\n * - 0x8f283970: changeAdmin\n * - 0xf851a440: admin\n * - 0x5c60da1b: implementation\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                // Call implementation\n                return super._fallback();\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return "";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(""), false);\n\n        return "";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return "";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() internal {\n        require(msg.value == 0);\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/Context.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/beacon/IBeacon.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n'
      },
      'lib/openzeppelin/contracts/utils/Address.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n'
      },
      'src/tokens/ERC1155/extensions/supply/ERC1155Supply.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {ERC1155} from "@0xsequence/erc-1155/contracts/tokens/ERC1155/ERC1155.sol";\nimport {\n    IERC1155Supply,\n    IERC1155SupplyFunctions\n} from "@0xsequence/contracts-library/tokens/ERC1155/extensions/supply/IERC1155Supply.sol";\n\n/**\n * An ERC-1155 extension that tracks token supply.\n */\nabstract contract ERC1155Supply is ERC1155, IERC1155Supply {\n    // Current supply\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public tokenSupply;\n\n    /**\n     * Mint _amount of tokens of a given id\n     * @param _to The address to mint tokens to\n     * @param _id Token id to mint\n     * @param _amount The amount to be minted\n     * @param _data Data to pass if receiver is contract\n     */\n    function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal virtual {\n        totalSupply += _amount;\n        tokenSupply[_id] += _amount;\n        balances[_to][_id] += _amount;\n\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\n\n        _callonERC1155Received(address(0x0), _to, _id, _amount, gasleft(), _data);\n    }\n\n    /**\n     * Mint tokens for each ids in _ids\n     * @param _to The address to mint tokens to\n     * @param _ids Array of ids to mint\n     * @param _amounts Array of amount of tokens to mint per id\n     * @param _data Data to pass if receiver is contract\n     */\n    function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n        internal\n        virtual\n    {\n        uint256 nMint = _ids.length;\n        if (nMint != _amounts.length) {\n            revert InvalidArrayLength();\n        }\n\n        // Executing all minting\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < nMint; i++) {\n            // Update storage balance\n            balances[_to][_ids[i]] += _amounts[i];\n            tokenSupply[_ids[i]] += _amounts[i];\n            totalAmount += _amounts[i];\n        }\n        totalSupply += totalAmount;\n\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\n\n        // Calling onReceive method if recipient is contract\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, gasleft(), _data);\n    }\n\n    /**\n     * Burn _amount of tokens of a given token id\n     * @param _from The address to burn tokens from\n     * @param _id Token id to burn\n     * @param _amount The amount to be burned\n     */\n    function _burn(address _from, uint256 _id, uint256 _amount) internal virtual {\n        // Supply\n        totalSupply -= _amount;\n        tokenSupply[_id] -= _amount;\n\n        // Balances\n        balances[_from][_id] -= _amount;\n\n        // Emit event\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\n    }\n\n    /**\n     * Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\n     * @param _from The address to burn tokens from\n     * @param _ids Array of token ids to burn\n     * @param _amounts Array of the amount to be burned\n     */\n    function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal virtual {\n        uint256 nBurn = _ids.length;\n        if (nBurn != _amounts.length) {\n            revert InvalidArrayLength();\n        }\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < nBurn; i++) {\n            // Update balances\n            balances[_from][_ids[i]] -= _amounts[i];\n            tokenSupply[_ids[i]] -= _amounts[i];\n            totalAmount += _amounts[i];\n        }\n        totalSupply -= totalAmount;\n\n        // Emit batch mint event\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC1155) returns (bool) {\n        return type(IERC1155SupplyFunctions).interfaceId == interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/tokens/ERC1155/ERC1155Metadata.sol': {
        content:
          "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\nimport '../../interfaces/IERC1155Metadata.sol';\nimport '../../utils/ERC165.sol';\n\n/**\n * @notice Contract that handles metadata related methods.\n * @dev Methods assume a deterministic generation of URI based on token IDs.\n *      Methods also assume that URI uses hex representation of token IDs.\n */\ncontract ERC1155Metadata is IERC1155Metadata, ERC165 {\n  // URI's default URI prefix\n  string public baseURI;\n  string public name;\n\n  // set the initial name and base URI\n  constructor(string memory _name, string memory _baseURI) {\n    name = _name;\n    baseURI = _baseURI;\n  }\n\n  /***********************************|\n  |     Metadata Public Functions     |\n  |__________________________________*/\n\n  /**\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n   * @dev URIs are defined in RFC 3986.\n   *      URIs are assumed to be deterministically generated based on token ID\n   * @return URI string\n   */\n  function uri(uint256 _id) public view virtual override returns (string memory) {\n    return string(abi.encodePacked(baseURI, _uint2str(_id), \".json\"));\n  }\n\n\n  /***********************************|\n  |    Metadata Internal Functions    |\n  |__________________________________*/\n\n  /**\n   * @notice Will emit default URI log event for corresponding token _id\n   * @param _tokenIDs Array of IDs of tokens to log default URI\n   */\n  function _logURIs(uint256[] memory _tokenIDs) internal virtual {\n    string memory baseURL = baseURI;\n    string memory tokenURI;\n\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\n      emit URI(tokenURI, _tokenIDs[i]);\n    }\n  }\n\n  /**\n   * @notice Will update the base URL of token's URI\n   * @param _newBaseMetadataURI New base URL of token's URI\n   */\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\n    baseURI = _newBaseMetadataURI;\n  }\n\n  /**\n   * @notice Will update the name of the contract\n   * @param _newName New contract name\n   */\n  function _setContractName(string memory _newName) internal {\n    name = _newName;\n  }\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\n   * @return `true` if the contract implements `_interfaceID` and\n   */\n  function supportsInterface(bytes4 _interfaceID) public view virtual override returns (bool) {\n    if (_interfaceID == type(IERC1155Metadata).interfaceId) {\n      return true;\n    }\n    return super.supportsInterface(_interfaceID);\n  }\n\n  /***********************************|\n  |    Utility Internal Functions     |\n  |__________________________________*/\n\n  function _uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n    if (_i == 0) {\n      return '0';\n    }\n    uint j = _i;\n    uint len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len;\n    while (_i != 0) {\n      k = k - 1;\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n      bytes1 b1 = bytes1(temp);\n      bstr[k] = b1;\n      _i /= 10;\n    }\n    return string(bstr);\n  }\n}\n"
      },
      'src/tokens/common/IERC2981Controlled.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC2981ControlledFunctions {\n    /**\n     * Sets the royalty information that all ids in this contract will default to.\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\n\n    /**\n     * Sets the royalty information that a given token id in this contract will use.\n     * @param tokenId The token id to set the royalty information for\n     * @param receiver Address of who should be sent the royalty payment\n     * @param feeNumerator The royalty fee numerator in basis points (e.g. 15% would be 1500)\n     * @notice This overrides the default royalty information for this token id\n     */\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external;\n}\n\ninterface IERC2981Controlled is IERC2981ControlledFunctions {}\n'
      },
      'lib/openzeppelin/contracts/token/common/ERC2981.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport "../../interfaces/IERC2981.sol";\nimport "../../utils/introspection/ERC165.sol";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");\n        require(receiver != address(0), "ERC2981: invalid receiver");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), "ERC2981: royalty fee will exceed salePrice");\n        require(receiver != address(0), "ERC2981: Invalid parameters");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/access/AccessControlEnumerable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport "./IAccessControlEnumerable.sol";\nimport "./AccessControl.sol";\nimport "../utils/structs/EnumerableSet.sol";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/introspection/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/Proxy.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      'lib/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport "../beacon/IBeacon.sol";\nimport "../../interfaces/IERC1967.sol";\nimport "../../interfaces/draft-IERC1822.sol";\nimport "../../utils/Address.sol";\nimport "../../utils/StorageSlot.sol";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n'
      },
      'src/proxies/openzeppelin/ERC1967Proxy.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport "@openzeppelin/contracts/proxy/Proxy.sol";\nimport "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn\'t conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/tokens/ERC1155/ERC1155.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport "../../interfaces/IERC1155TokenReceiver.sol";\nimport "../../interfaces/IERC1155.sol";\nimport "../../utils/Address.sol";\nimport "../../utils/ERC165.sol";\n\n/**\n * @dev Implementation of Multi-Token Standard contract\n */\ncontract ERC1155 is IERC1155, ERC165 {\n  using Address for address;\n\n  /***********************************|\n  |        Variables and Events       |\n  |__________________________________*/\n\n  // onReceive function signatures\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\n\n  // Objects balances\n  mapping (address => mapping(uint256 => uint256)) internal balances;\n\n  // Operator Functions\n  mapping (address => mapping(address => bool)) internal operators;\n\n\n  /***********************************|\n  |     Public Transfer Functions     |\n  |__________________________________*/\n\n  /**\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\n   * @param _from    Source address\n   * @param _to      Target address\n   * @param _id      ID of the token type\n   * @param _amount  Transfered amount\n   * @param _data    Additional data with no specified format, sent in call to `_to`\n   */\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\n    public virtual override\n  {\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeTransferFrom: INVALID_OPERATOR");\n    require(_to != address(0),"ERC1155#safeTransferFrom: INVALID_RECIPIENT");\n\n    _safeTransferFrom(_from, _to, _id, _amount);\n    _callonERC1155Received(_from, _to, _id, _amount, gasleft(), _data);\n  }\n\n  /**\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n   * @param _from     Source addresses\n   * @param _to       Target addresses\n   * @param _ids      IDs of each token type\n   * @param _amounts  Transfer amounts per token type\n   * @param _data     Additional data with no specified format, sent in call to `_to`\n   */\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\n    public virtual override\n  {\n    // Requirements\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeBatchTransferFrom: INVALID_OPERATOR");\n    require(_to != address(0), "ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT");\n\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, gasleft(), _data);\n  }\n\n\n  /***********************************|\n  |    Internal Transfer Functions    |\n  |__________________________________*/\n\n  /**\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\n   * @param _from    Source address\n   * @param _to      Target address\n   * @param _id      ID of the token type\n   * @param _amount  Transfered amount\n   */\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\n    internal virtual\n  {\n    // Update balances\n    balances[_from][_id] -= _amount;\n    balances[_to][_id] += _amount;\n\n    // Emit event\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\n  }\n\n  /**\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\n   */\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, uint256 _gasLimit, bytes memory _data)\n    internal virtual\n  {\n    // Check if recipient is contract\n    if (_to.isContract()) {\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received{gas: _gasLimit}(msg.sender, _from, _id, _amount, _data);\n      require(retval == ERC1155_RECEIVED_VALUE, "ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE");\n    }\n  }\n\n  /**\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n   * @param _from     Source addresses\n   * @param _to       Target addresses\n   * @param _ids      IDs of each token type\n   * @param _amounts  Transfer amounts per token type\n   */\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\n    internal virtual\n  {\n    require(_ids.length == _amounts.length, "ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH");\n\n    // Number of transfer to execute\n    uint256 nTransfer = _ids.length;\n\n    // Executing all transfers\n    for (uint256 i = 0; i < nTransfer; i++) {\n      // Update storage balance of previous bin\n      balances[_from][_ids[i]] -= _amounts[i];\n      balances[_to][_ids[i]] += _amounts[i];\n    }\n\n    // Emit event\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\n  }\n\n  /**\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\n   */\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, uint256 _gasLimit, bytes memory _data)\n    internal virtual\n  {\n    // Pass data if recipient is contract\n    if (_to.isContract()) {\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived{gas: _gasLimit}(msg.sender, _from, _ids, _amounts, _data);\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, "ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE");\n    }\n  }\n\n\n  /***********************************|\n  |         Operator Functions        |\n  |__________________________________*/\n\n  /**\n   * @notice Enable or disable approval for a third party ("operator") to manage all of caller\'s tokens\n   * @param _operator  Address to add to the set of authorized operators\n   * @param _approved  True if the operator is approved, false to revoke approval\n   */\n  function setApprovalForAll(address _operator, bool _approved)\n    public virtual override\n  {\n    // Update operator status\n    operators[msg.sender][_operator] = _approved;\n    emit ApprovalForAll(msg.sender, _operator, _approved);\n  }\n\n  /**\n   * @notice Queries the approval status of an operator for a given owner\n   * @param _owner     The owner of the Tokens\n   * @param _operator  Address of authorized operator\n   * @return isOperator True if the operator is approved, false if not\n   */\n  function isApprovedForAll(address _owner, address _operator)\n    public view virtual override returns (bool isOperator)\n  {\n    return operators[_owner][_operator];\n  }\n\n\n  /***********************************|\n  |         Balance Functions         |\n  |__________________________________*/\n\n  /**\n   * @notice Get the balance of an account\'s Tokens\n   * @param _owner  The address of the token holder\n   * @param _id     ID of the Token\n   * @return The _owner\'s balance of the Token type requested\n   */\n  function balanceOf(address _owner, uint256 _id)\n    public view virtual override returns (uint256)\n  {\n    return balances[_owner][_id];\n  }\n\n  /**\n   * @notice Get the balance of multiple account/token pairs\n   * @param _owners The addresses of the token holders\n   * @param _ids    ID of the Tokens\n   * @return        The _owner\'s balance of the Token types requested (i.e. balance for each (owner, id) pair)\n   */\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\n    public view virtual override returns (uint256[] memory)\n  {\n    require(_owners.length == _ids.length, "ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH");\n\n    // Variables\n    uint256[] memory batchBalances = new uint256[](_owners.length);\n\n    // Iterate over each owner and token ID\n    for (uint256 i = 0; i < _owners.length; i++) {\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\n    }\n\n    return batchBalances;\n  }\n\n\n  /***********************************|\n  |          ERC165 Functions         |\n  |__________________________________*/\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\n   * @return `true` if the contract implements `_interfaceID` and\n   */\n  function supportsInterface(bytes4 _interfaceID) public view virtual override(ERC165, IERC165) returns (bool) {\n    if (_interfaceID == type(IERC1155).interfaceId) {\n      return true;\n    }\n    return super.supportsInterface(_interfaceID);\n  }\n}\n'
      },
      'src/tokens/ERC1155/extensions/supply/IERC1155Supply.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC1155SupplyFunctions {\n\n    /**\n     * Returns the total supply of ERC1155 tokens.\n     */\n    function totalSupply() external returns (uint256);\n\n    /**\n     * Returns the total supply of a given ERC1155 token.\n     * @param tokenId The ERC1155 token id.\n     */\n    function tokenSupply(uint256 tokenId) external returns (uint256);\n}\n\ninterface IERC1155SupplySignals {\n\n    /**\n     * Invalid array input length.\n     */\n    error InvalidArrayLength();\n}\n\ninterface IERC1155Supply is IERC1155SupplySignals {}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC1155Metadata.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\ninterface IERC1155Metadata {\n\n  event URI(string _uri, uint256 indexed _id);\n\n  /****************************************|\n  |                Functions               |\n  |_______________________________________*/\n\n  /**\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n   * @dev URIs are defined in RFC 3986.\n   *      URIs are assumed to be deterministically generated based on token ID\n   *      Token IDs are assumed to be represented in their hex format in URIs\n   * @return URI string\n   */\n  function uri(uint256 _id) external view returns (string memory);\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/utils/ERC165.sol': {
        content:
          'pragma solidity ^0.8.0;\nimport "../interfaces/IERC165.sol";\n\nabstract contract ERC165 is IERC165 {\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceID The interface identifier, as specified in ERC-165\n   * @return `true` if the contract implements `_interfaceID`\n   */\n  function supportsInterface(bytes4 _interfaceID) public view virtual override returns (bool) {\n    return _interfaceID == this.supportsInterface.selector;\n  }\n}\n'
      },
      'lib/openzeppelin/contracts/interfaces/IERC2981.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport "../utils/introspection/IERC165.sol";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n'
      },
      'lib/openzeppelin/contracts/access/IAccessControlEnumerable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport "./IAccessControl.sol";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n'
      },
      'lib/openzeppelin/contracts/access/AccessControl.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport "./IAccessControl.sol";\nimport "../utils/Context.sol";\nimport "../utils/Strings.sol";\nimport "../utils/introspection/ERC165.sol";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn\'t allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role\'s admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        "AccessControl: account ",\n                        Strings.toHexString(account),\n                        " is missing role ",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role\'s admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``\'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\'s\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn\'t perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``\'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/structs/EnumerableSet.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
      },
      'lib/openzeppelin/contracts/interfaces/IERC1967.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n'
      },
      'lib/openzeppelin/contracts/interfaces/draft-IERC1822.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n'
      },
      'lib/openzeppelin/contracts/utils/StorageSlot.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC1155TokenReceiver.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1155 interface for accepting safe transfers.\n */\ninterface IERC1155TokenReceiver {\n\n  /**\n   * @notice Handle the receipt of a single ERC1155 token type\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\n   * This function MAY throw to revert and reject the transfer\n   * Return of other amount than the magic value MUST result in the transaction being reverted\n   * Note: The token contract address is always the message sender\n   * @param _operator  The address which called the `safeTransferFrom` function\n   * @param _from      The address which previously owned the token\n   * @param _id        The id of the token being transferred\n   * @param _amount    The amount of tokens being transferred\n   * @param _data      Additional data with no specified format\n   * @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n   */\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\n\n  /**\n   * @notice Handle the receipt of multiple ERC1155 token types\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\n   * This function MAY throw to revert and reject the transfer\n   * Return of other amount than the magic value WILL result in the transaction being reverted\n   * Note: The token contract address is always the message sender\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\n   * @param _from      The address which previously owned the token\n   * @param _ids       An array containing ids of each token being transferred\n   * @param _amounts   An array containing amounts of each token being transferred\n   * @param _data      Additional data with no specified format\n   * @return           `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n   */\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC1155.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\nimport \'./IERC165.sol\';\n\n\ninterface IERC1155 is IERC165 {\n\n  /****************************************|\n  |                 Events                 |\n  |_______________________________________*/\n\n  /**\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n   *   Operator MUST be msg.sender\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the "circulating supply" for a given token ID\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n   */\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\n\n  /**\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n   *   Operator MUST be msg.sender\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the "circulating supply" for a given token ID\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n   */\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\n\n  /**\n   * @dev MUST emit when an approval is updated\n   */\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n  /****************************************|\n  |                Functions               |\n  |_______________________________________*/\n\n  /**\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\n    * @dev MUST emit TransferSingle event on success\n    * Caller must be approved to manage the _from account\'s tokens (see isApprovedForAll)\n    * MUST throw if `_to` is the zero address\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\n    * MUST throw on any other error\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n    * @param _from    Source address\n    * @param _to      Target address\n    * @param _id      ID of the token type\n    * @param _amount  Transfered amount\n    * @param _data    Additional data with no specified format, sent in call to `_to`\n    */\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n\n  /**\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n    * @dev MUST emit TransferBatch event on success\n    * Caller must be approved to manage the _from account\'s tokens (see isApprovedForAll)\n    * MUST throw if `_to` is the zero address\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\n    * MUST throw on any other error\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\n    * @param _from     Source addresses\n    * @param _to       Target addresses\n    * @param _ids      IDs of each token type\n    * @param _amounts  Transfer amounts per token type\n    * @param _data     Additional data with no specified format, sent in call to `_to`\n  */\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\n\n  /**\n   * @notice Get the balance of an account\'s Tokens\n   * @param _owner  The address of the token holder\n   * @param _id     ID of the Token\n   * @return        The _owner\'s balance of the Token type requested\n   */\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n  /**\n   * @notice Get the balance of multiple account/token pairs\n   * @param _owners The addresses of the token holders\n   * @param _ids    ID of the Tokens\n   * @return        The _owner\'s balance of the Token types requested (i.e. balance for each (owner, id) pair)\n   */\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n  /**\n   * @notice Enable or disable approval for a third party ("operator") to manage all of caller\'s tokens\n   * @dev MUST emit the ApprovalForAll event on success\n   * @param _operator  Address to add to the set of authorized operators\n   * @param _approved  True if the operator is approved, false to revoke approval\n   */\n  function setApprovalForAll(address _operator, bool _approved) external;\n\n  /**\n   * @notice Queries the approval status of an operator for a given owner\n   * @param _owner     The owner of the Tokens\n   * @param _operator  Address of authorized operator\n   * @return isOperator True if the operator is approved, false if not\n   */\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/utils/Address.sol': {
        content:
          'pragma solidity ^0.8.0;\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n  // Default hash for EOA accounts returned by extcodehash\n  bytes32 constant internal ACCOUNT_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract.\n   * @param _address address of the account to check\n   * @return Whether the target address is a contract\n   */\n  function isContract(address _address) internal view returns (bool) {\n    bytes32 codehash;\n\n    // Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\n    assembly { codehash := extcodehash(_address) }\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\n  }\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     */\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n'
      },
      'lib/openzeppelin/contracts/access/IAccessControl.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
      },
      'lib/openzeppelin/contracts/utils/Strings.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport "./math/Math.sol";\nimport "./math/SignedMath.sol";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = "0123456789abcdef";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? "-" : "", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = "0";\n        buffer[1] = "x";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, "Strings: hex length insufficient");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/math/Math.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, "Math: mulDiv overflow");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\'s lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don\'t need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.\'s "Hacker\'s Delight" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton\'s method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/math/SignedMath.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book "Hacker\'s Delight"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n'
      }
    },
    settings: {
      remappings: [
        '@0xsequence/contracts-library/=src/',
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'forge-std/=lib/forge-std/src/',
        'murky/=lib/murky/src/',
        '@0xsequence/erc20-meta-token/=lib/0xsequence/erc20-meta-token/src/',
        '@0xsequence/erc-1155/=lib/0xsequence/erc-1155/src/',
        'erc721a/=lib/chiru-labs/erc721a/',
        'erc721a-upgradeable/=lib/chiru-labs/erc721a-upgradeable/',
        '@openzeppelin/=lib/openzeppelin/',
        '@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/',
        'solady/=lib/solady/src/',
        '0xsequence/=lib/0xsequence/',
        'chiru-labs/=lib/chiru-labs/',
        'openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/',
        'openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/',
        'openzeppelin/=lib/openzeppelin/'
      ],
      optimizer: {
        enabled: true,
        runs: 20000
      },
      metadata: {
        useLiteralContent: true,
        bytecodeHash: 'ipfs',
        appendCBOR: true
      },
      outputSelection: {
        '*': {
          '*': ['evm.bytecode', 'evm.deployedBytecode', 'devdoc', 'userdoc', 'metadata', 'abi']
        }
      },
      evmVersion: 'paris',
      libraries: {}
    }
  }
}
