import { ContractFactory, type ethers } from 'ethers'
import type { VerificationRequest } from 'scripts/types'

// https://github.com/0xsequence/contracts-library/blob/cf0a57481afc5d993595028a5e4a7f87172a2ba3/src/tokens/wrappers/clawback/ClawbackMetadata.sol

const abi = [
  {
    type: 'function',
    name: 'getStringProperty',
    inputs: [
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'tokenAddr', type: 'address', internalType: 'address' },
      { name: 'callData', type: 'bytes', internalType: 'bytes' }
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct ClawbackMetadata.MetadataProperty',
        components: [
          { name: 'key', type: 'string', internalType: 'string' },
          { name: 'value', type: 'string', internalType: 'string' }
        ]
      }
    ],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'getUint256Property',
    inputs: [
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'tokenAddr', type: 'address', internalType: 'address' },
      { name: 'callData', type: 'bytes', internalType: 'bytes' }
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct ClawbackMetadata.MetadataProperty',
        components: [
          { name: 'key', type: 'string', internalType: 'string' },
          { name: 'value', type: 'string', internalType: 'string' }
        ]
      }
    ],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'metadata',
    inputs: [
      {
        name: 'clawbackAddr',
        type: 'address',
        internalType: 'address'
      },
      {
        name: 'wrappedTokenId',
        type: 'uint256',
        internalType: 'uint256'
      }
    ],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'metadataProperties',
    inputs: [
      {
        name: 'details',
        type: 'tuple',
        internalType: 'struct IClawbackFunctions.TokenDetails',
        components: [
          {
            name: 'tokenType',
            type: 'uint8',
            internalType: 'enum IClawbackFunctions.TokenType'
          },
          {
            name: 'templateId',
            type: 'uint32',
            internalType: 'uint32'
          },
          { name: 'lockedAt', type: 'uint56', internalType: 'uint56' },
          {
            name: 'tokenAddr',
            type: 'address',
            internalType: 'address'
          },
          { name: 'tokenId', type: 'uint256', internalType: 'uint256' }
        ]
      },
      {
        name: 'template',
        type: 'tuple',
        internalType: 'struct IClawbackFunctions.Template',
        components: [
          {
            name: 'destructionOnly',
            type: 'bool',
            internalType: 'bool'
          },
          { name: 'transferOpen', type: 'bool', internalType: 'bool' },
          { name: 'duration', type: 'uint56', internalType: 'uint56' },
          { name: 'admin', type: 'address', internalType: 'address' }
        ]
      }
    ],
    outputs: [
      {
        name: 'properties',
        type: 'tuple[]',
        internalType: 'struct ClawbackMetadata.MetadataProperty[]',
        components: [
          { name: 'key', type: 'string', internalType: 'string' },
          { name: 'value', type: 'string', internalType: 'string' }
        ]
      }
    ],
    stateMutability: 'view'
  },
  {
    type: 'function',
    name: 'supportsInterface',
    inputs: [{ name: 'interfaceID', type: 'bytes4', internalType: 'bytes4' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view'
  },
  { type: 'error', name: 'InvalidTokenType', inputs: [] }
]

export class ClawbackMetadata extends ContractFactory {
  constructor(signer: ethers.Signer) {
    super(
      abi,
      '0x60808060405234610016576121f0908161001c8239f35b600080fdfe60806040908082526004908136101561001757600080fd5b600090813560e01c90816301ffc9a7146109315750806316689bce146109115780636edc3d70146108de5780639be5ce6d1461072d5763a08206c91461005c57600080fd5b3461072a57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261072a5781359173ffffffffffffffffffffffffffffffffffffffff9182841680940361072a57602435918551917fc1e03728000000000000000000000000000000000000000000000000000000008352838284015260a083602481895afa92831561071e57819361068a575b50602095608063ffffffff888601511660248a51809481937f4edaaca8000000000000000000000000000000000000000000000000000000008352888301525afa908115610680578291610607575b50835194600395868110156105db5761015a90610fdf565b9089519061016782610a07565b601a82527f7b226e616d65223a2022436c61776261636b20417373657420230000000000008a83015261019990610d80565b6101a291610f4d565b89516101ad81610a23565b602681527f222c20226465736372697074696f6e223a2022412077726170706564206173738a8201527f6574206f662000000000000000000000000000000000000000000000000000008b82015261020491610f4d565b9061020e91610f4d565b9588519661021b88610a07565b60018089527f20000000000000000000000000000000000000000000000000000000000000008a8a01529761024f91610f4d565b9060608601511661025f90610e23565b61026891610f4d565b9388519461027586610a07565b60028087527f20230000000000000000000000000000000000000000000000000000000000008a880152956102a991610f4d565b60808201516102b790610d80565b6102c091610f4d565b89516102cb81610a23565b602e81527f222c2022696d616765223a2022222c2022646563696d616c73223a20302c20228a8201527f70726f70657274696573223a207b0000000000000000000000000000000000008b82015261032291610f4d565b9161032c9161124b565b90815183925b888a8c898588106104fe575093505050506103809250519061035382610a07565b8582527f7d7d00000000000000000000000000000000000000000000000000000000000089830152610f4d565b908688519461038e86610a07565b601d86527f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008287015283968a60609886519a8b6103e9575b82866103e56103d58e8e610f4d565b9251928284938452830190610bc3565b0390f35b84959697989a50838c939495840104861b9884519b8c987f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f52603f906106707f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f1882528c818c019b019681880194010193845195818d87525b6104ba575b505050929091525050018a527f3d3d000000000000000000000000000000000000000000000000000000000000970690048103959095529093529181526103e5916103d538808681808a81806103c6565b8c9b838b8693019d8e5190828260121c165190538181600c1c165185538d828260061c1651905316518b538d518152019a848c10156104f95781610464565b610469565b91610573917f223a20220000000000000000000000000000000000000000000000000000000061055c61054a61058f9798999a610587978d610599575b50610544610c75565b90610f4d565b6105548c8b610d6c565b515190610f4d565b91519261056884610a07565b8c8452830152610f4d565b8c61057e8887610d6c565b51015190610f4d565b610544610c75565b9301929190610332565b6105d5918651916105a983610a07565b82527f2c2000000000000000000000000000000000000000000000000000000000000088830152610f4d565b8f61053b565b6024846021877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90506080813d8211610678575b8161062160809383610a3f565b8101031261067457610669606089519261063a846109eb565b61064381610c68565b84526106508a8201610c68565b8a85015261065f8b8201610c33565b8b85015201610c47565b606082015238610142565b5080fd5b3d9150610614565b88513d84823e3d90fd5b90925060a0813d8211610716575b816106a560a09383610a3f565b81010312610712578651906106b9826109a0565b8051600381101561070e578252602081015163ffffffff8116810361070e5760208301526080906106eb898201610c33565b898401526106fb60608201610c47565b60608401520151608082015291386100f3565b8480fd5b8280fd5b3d9150610698565b508651903d90823e3d90fd5b80fd5b503461072a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360161012081126106745760a01361072a57825191610772836109a0565b3560038110156106745782526024359163ffffffff8316830361067457602092838201526044359066ffffffffffffff9182811681036108d6578186015273ffffffffffffffffffffffffffffffffffffffff606435818116810361070e576060830152608435608083015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c3601126108d657855192610814846109eb565b60a43580151581036108da57845260c43580151581036108da578685015260e435908116810361070e57868401526101043590811681036108d657606083015261085e919061124b565b9083519280840190808552835180925280868601968360051b870101940192955b82871061088c5785850386f35b9091929382806108c6837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a600196030186528851610c06565b960192019601959291909261087f565b8380fd5b8580fd5b508234610674576103e5906108fe6108f536610aba565b92919091611bea565b9051918291602083526020830190610c06565b508234610674576103e5906108fe61092836610aba565b92919091611b62565b905082346107125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126107125735917fffffffff000000000000000000000000000000000000000000000000000000008316830361072a575061099a602092611cdf565b15158152f35b60a0810190811067ffffffffffffffff8211176109bc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176109bc57604052565b6040810190811067ffffffffffffffff8211176109bc57604052565b6060810190811067ffffffffffffffff8211176109bc57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109bc57604052565b67ffffffffffffffff81116109bc57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830112610b9b576004359067ffffffffffffffff90818311610b9b5783602384011215610b9b578260040135610b1381610a80565b90610b216040519283610a3f565b8082528560248287010111610b9b5780602460209601868401376000948591830101529360243573ffffffffffffffffffffffffffffffffffffffff8116810361070e5793604435918483116106745780602384011215610674578260040135948511610674576024858401011161072a57506024019190565b600080fd5b60005b838110610bb35750506000910152565b8181015183820152602001610ba3565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610bff81518092818752878088019101610ba0565b0116010190565b610c30916020610c1f8351604084526040840190610bc3565b920151906020818403910152610bc3565b90565b519066ffffffffffffff82168203610b9b57565b519073ffffffffffffffffffffffffffffffffffffffff82168203610b9b57565b51908115158203610b9b57565b60405190610c8282610a07565b600182527f22000000000000000000000000000000000000000000000000000000000000006020830152565b805115610cbb5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015610cbb5760400190565b805160021015610cbb5760600190565b805160031015610cbb5760800190565b805160041015610cbb5760a00190565b805160051015610cbb5760c00190565b805160061015610cbb5760e00190565b805160071015610cbb576101000190565b805160081015610cbb576101200190565b8051821015610cbb5760209160051b010190565b906040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608082019360a0830160405260008552935b0192600a90818106603001855304928315610df3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90610db7565b92506080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09203019201918252565b906040519160808301604052600f6f3031323334353637383961626364656681526002840191602883526000604a86015260601b90600160005b8080018701602285831a85811651602384015360041c519101530160148114610e8857600190610e5d565b5050506130786002825101915282528160228101907f88888888888888888888888888888888888888888888888888888888888888806028832016600160005b82811a7e880000000000000000000000000000000000000000000000000000000000000281800152019060148214610f035790600190610ec8565b50506042908251927f20202020202020202020202020202020202020202020202020202020202020209384816000511660011c161890520190815190816020511660011c16189052565b60405181519093927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0928390816020850181165b80830151818a015201908115610f9957908290610f81565b50505082815191838701828060208601165b808401518184015201918215610fc357918390610fab565b50505050603f9101808501906000602083015285520116604052565b60038110156110d357806110275750604051610ffa81610a07565b600681527f4552432d32300000000000000000000000000000000000000000000000000000602082015290565b60018103611069575060405161103c81610a07565b600781527f4552432d37323100000000000000000000000000000000000000000000000000602082015290565b60021461109a5760046040517fa1e9dd9d000000000000000000000000000000000000000000000000000000008152fd5b6040516110a681610a07565b600881527f4552432d31313535000000000000000000000000000000000000000000000000602082015290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b67ffffffffffffffff81116109bc5760051b60200190565b6040519061112782610a07565b60606020838281520152565b9061113d82611102565b61114a6040519182610a3f565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06111788294611102565b019060005b82811061118957505050565b60209061119461111a565b8282850101520161117d565b604051906111ad82610a07565b600c82527f6f726967696e616c5f55524900000000000000000000000000000000000000006020830152565b604051906111e682610a07565b600d82527f6f726967696e616c5f6e616d65000000000000000000000000000000000000006020830152565b6040519061121f82610a07565b600f82527f6f726967696e616c5f73796d626f6c00000000000000000000000000000000006020830152565b805191600392838110156110d357600114908115611942575b81156119365761127860ff60095b16611133565b8351858110156110d35761128b90610fdf565b93604095865161129a81610a07565b8751966112a688610a07565b600a88526020977f746f6b656e5f7479706500000000000000000000000000000000000000000000898201528252878201526112e184610cae565b526112eb83610cae565b5060608201946115918773ffffffffffffffffffffffffffffffffffffffff96611317888a5116610e23565b8b519061132382610a07565b8c5161132e81610a07565b600d81527f746f6b656e5f61646472657373000000000000000000000000000000000000008582015282528382015261136688610cea565b5261137087610cea565b5061138363ffffffff8388015116610d80565b8b519061138f82610a07565b8c5161139a81610a07565b600b81527f74656d706c6174655f6964000000000000000000000000000000000000000000858201528252838201526113d288610cfa565b526113dc87610cfa565b506114c88b87018c66ffffffffffffff9182916113fb83835116610d80565b81519161140783610a07565b5161141181610a07565b600981527f6c6f636b65645f61740000000000000000000000000000000000000000000000898201528252878201526114498c610d0a565b526114538b610d0a565b5051168d611468818601928484511690611d65565b81519161147483610a07565b5161147e81610a07565b600a81527f756e6c6f636b735f696e00000000000000000000000000000000000000000000888201528252868201526114b68b610d1a565b526114c08a610d1a565b505116611e0b565b8b51906114d482610a07565b8c516114df81610a07565b600881527f6475726174696f6e0000000000000000000000000000000000000000000000008582015282528382015261151788610d2a565b5261152187610d2a565b5061152e81511515611957565b8b519061153a82610a07565b8c5161154581610a07565b601081527f6465737472756374696f6e5f6f6e6c79000000000000000000000000000000008582015282528382015261157d88610d3a565b5261158787610d3a565b5001511515611957565b88519061159d82610a07565b89516115a881610a07565b600d81527f7472616e736665725f6f70656e000000000000000000000000000000000000008a8201528252888201526115e085610d4a565b526115ea84610d4a565b506118ca575b8151818110156110d35761177a57505090611692611651600093838651168851917f06fdde0300000000000000000000000000000000000000000000000000000000898401526004835261164383610a07565b61164b6111d9565b90611abb565b828551168751917f95d89b4100000000000000000000000000000000000000000000000000000000888401526004835261168a83610a07565b61164b611212565b9251168451937f313ce5670000000000000000000000000000000000000000000000000000000081860152600485526116ca85610a07565b7f6f726967696e616c5f646563696d616c730000000000000000000000000000008651916116f783610a07565b6011835282015261173584965195869384937f6edc3d7000000000000000000000000000000000000000000000000000000000855260048501611a7c565b0381305afa60009281611757575b5061174d57505090565b610c309250611c41565b61177391933d8091833e61176b8183610a3f565b810190611a10565b9138611743565b819493919796929751818110156110d35760010361185a57506080816118346117fb610c30999a7fc87b56dd00000000000000000000000000000000000000000000000000000000958851168751917f06fdde03000000000000000000000000000000000000000000000000000000008c8401526004835261164383610a07565b828751168651917f95d89b41000000000000000000000000000000000000000000000000000000008b8401526004835261168a83610a07565b94511694015191519485015260248401526024835261185283610a23565b61164b6111a0565b849391929351908110156110d357600214611877575b5050505050565b60806118bf969793927f0e89341c0000000000000000000000000000000000000000000000000000000092511694015191519485015260248401526024835261185283610a23565b903880808080611870565b6118d76080830151610d80565b8751906118e382610a07565b88516118ee81610a07565b600881527f746f6b656e5f69640000000000000000000000000000000000000000000000008982015282528782015261192684610d5b565b5261193083610d5b565b506115f0565b61127860ff6008611272565b90508151838110156110d35760021490611264565b156119955760405161196881610a07565b600481527f7472756500000000000000000000000000000000000000000000000000000000602082015290565b6040516119a181610a07565b600581527f66616c7365000000000000000000000000000000000000000000000000000000602082015290565b81601f82011215610b9b5780516119e481610a80565b926119f26040519485610a3f565b81845260208284010111610b9b57610c309160208085019101610ba0565b90602082820312610b9b57815167ffffffffffffffff92838211610b9b570190604082820312610b9b5760405192611a4784610a07565b8251818111610b9b5782611a5c9185016119ce565b84526020830151908111610b9b57611a7492016119ce565b602082015290565b73ffffffffffffffffffffffffffffffffffffffff611aa7610c309593606084526060840190610bc3565b931660208201526040818403910152610bc3565b9291600091611af760405194859384937f16689bce00000000000000000000000000000000000000000000000000000000855260048501611a7c565b0381305afa60009181611b17575b50611b0e575090565b610c3091611c41565b611b2b91923d8091833e61176b8183610a3f565b9038611b05565b3d15611b5d573d90611b4382610a80565b91611b516040519384610a3f565b82523d6000602084013e565b606090565b9190939293611b6f61111a565b508460405195869384378201906000958693838580955203915afa611b92611b32565b90611b9b578380fd5b909192815182016020838203126106745760208301519167ffffffffffffffff831161072a5750611bd39260209182019201016119ce565b60405191611be083610a07565b8252602082015290565b9190939293611bf761111a565b508460405195869384378201906000958693838580955203915afa611c1a611b32565b90611c23578380fd5b90919260208280518101031261072a57506020611bd3910151610d80565b90815191600192838101809111611cb057611c5b90611133565b92815160005b818110611c875750505090611c83915190611c7c8285610d6c565b5282610d6c565b5090565b80611c93849286610d6c565b51611c9e8289610d6c565b52611ca98188610d6c565b5001611c61565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000008114908115611d3b575b50611d3657600090565b600190565b7fa08206c90000000000000000000000000000000000000000000000000000000091501438611d2c565b908101809111611cb05780421015611dd157428103908111611cb05764141dd60e80811015611d9757610c3090611e0b565b50604051611da481610a07565b600581527f4e65766572000000000000000000000000000000000000000000000000000000602082015290565b50604051611dde81610a07565b600881527f556e6c6f636b6564000000000000000000000000000000000000000000000000602082015290565b6201518090818104603c80610e1080958506049484060492069260609180612155575b508061204d575b509080611f45575b509080611e48575090565b815115611ee857602a611e5d610c3092610d80565b926040519381611e77869351809260208087019101610ba0565b82017f2c200000000000000000000000000000000000000000000000000000000000006020820152611eb3825180936020602285019101610ba0565b017f207365636f6e6473000000000000000000000000000000000000000000000000602282015203600a810184520182610a3f565b611ef29150610d80565b610c30602860405183611f0f829551809260208086019101610ba0565b81017f207365636f6e64730000000000000000000000000000000000000000000000006020820152036008810184520182610a3f565b815115611feb57602a611f5a611fe592610d80565b926040519381611f74869351809260208087019101610ba0565b82017f2c200000000000000000000000000000000000000000000000000000000000006020820152611fb0825180936020602285019101610ba0565b017f206d696e75746573000000000000000000000000000000000000000000000000602282015203600a810184520182610a3f565b38611e3d565b611ff59150610d80565b612048602860405183612012829551809260208086019101610ba0565b81017f206d696e757465730000000000000000000000000000000000000000000000006020820152036008810184520182610a3f565b611fe5565b8151156120f35760286120626120ed92610d80565b92604051938161207c869351809260208087019101610ba0565b82017f2c2000000000000000000000000000000000000000000000000000000000000060208201526120b8825180936020602285019101610ba0565b017f20686f75727300000000000000000000000000000000000000000000000000006022820152036008810184520182610a3f565b38611e35565b6120fd9150610d80565b61215060266040518361211a829551809260208086019101610ba0565b81017f20686f75727300000000000000000000000000000000000000000000000000006020820152036006810184520182610a3f565b6120ed565b612160919250610d80565b6121b360256040518361217d829551809260208086019101610ba0565b81017f20646179730000000000000000000000000000000000000000000000000000006020820152036005810184520182610a3f565b9038611e2e56fea264697066735822122001e7a8fcdd85890a49a22a385e22bbf156e7ebfad8e126284a1a60cfbc31090a64736f6c63430008130033',
      signer
    )
  }
}

export const CLAWBACKMETADATA_VERIFICATION: Omit<VerificationRequest, 'waitForSuccess'> = {
  contractToVerify: 'src/tokens/wrappers/clawback/ClawbackMetadata.sol:ClawbackMetadata',
  version: 'v0.8.19+commit.7dd6d404',
  licenceType: 'Apache-2.0',
  compilerInput: {
    language: 'Solidity',
    sources: {
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n'
      },
      'lib/openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../token/ERC1155/extensions/IERC1155MetadataURI.sol";\r\n'
      },
      'lib/openzeppelin/contracts/interfaces/IERC20Metadata.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../token/ERC20/extensions/IERC20Metadata.sol";\r\n'
      },
      'lib/openzeppelin/contracts/interfaces/IERC721Metadata.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../token/ERC721/extensions/IERC721Metadata.sol";\r\n'
      },
      'lib/openzeppelin/contracts/token/ERC1155/IERC1155.sol': {
        content:
          "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
      },
      'lib/openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../IERC1155.sol";\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n'
      },
      'lib/openzeppelin/contracts/token/ERC20/IERC20.sol': {
        content:
          "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
      },
      'lib/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../IERC20.sol";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n'
      },
      'lib/openzeppelin/contracts/token/ERC721/IERC721.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../../utils/introspection/IERC165.sol";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``\'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n'
      },
      'lib/openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport "../IERC721.sol";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n'
      },
      'lib/openzeppelin/contracts/utils/introspection/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n'
      },
      'lib/solady/src/utils/Base64.sol': {
        content:
          "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library to encode strings in Base64.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\nlibrary Base64 {\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\n    /// @param noPadding Whether to strip away the padding.\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let dataLength := mload(data)\n\n            if dataLength {\n                // Multiply by 4/3 rounded up.\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\n\n                // Set `result` to point to the start of the free memory.\n                result := mload(0x40)\n\n                // Store the table into the scratch space.\n                // Offsetted by -1 byte so that the `mload` will load the character.\n                // We will rewrite the free memory pointer at `0x40` later with\n                // the allocated size.\n                // The magic constant 0x0670 will turn \"-_\" into \"+/\".\n                mstore(0x1f, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\n                mstore(0x3f, xor(\"ghijklmnopqrstuvwxyz0123456789-_\", mul(iszero(fileSafe), 0x0670)))\n\n                // Skip the first slot, which stores the length.\n                let ptr := add(result, 0x20)\n                let end := add(ptr, encodedLength)\n\n                let dataEnd := add(add(0x20, data), dataLength)\n                let dataEndValue := mload(dataEnd) // Cache the value at the `dataEnd` slot.\n                mstore(dataEnd, 0x00) // Zeroize the `dataEnd` slot to clear dirty bits.\n\n                // Run over the input, 3 bytes at a time.\n                for {} 1 {} {\n                    data := add(data, 3) // Advance 3 bytes.\n                    let input := mload(data)\n\n                    // Write 4 bytes. Optimized for fewer stack operations.\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\n                    mstore8(3, mload(and(input, 0x3F)))\n                    mstore(ptr, mload(0x00))\n\n                    ptr := add(ptr, 4) // Advance 4 bytes.\n                    if iszero(lt(ptr, end)) { break }\n                }\n                mstore(dataEnd, dataEndValue) // Restore the cached value at `dataEnd`.\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\n                let o := div(2, mod(dataLength, 3))\n                // Offset `ptr` and pad with '='. We can simply write over the end.\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\n                // Set `o` to zero if there is padding.\n                o := mul(iszero(iszero(noPadding)), o)\n                mstore(sub(ptr, o), 0) // Zeroize the slot after the string.\n                mstore(result, sub(encodedLength, o)) // Store the length.\n            }\n        }\n    }\n\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\n    /// Equivalent to `encode(data, false, false)`.\n    function encode(bytes memory data) internal pure returns (string memory result) {\n        result = encode(data, false, false);\n    }\n\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\n    /// Equivalent to `encode(data, fileSafe, false)`.\n    function encode(bytes memory data, bool fileSafe)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = encode(data, fileSafe, false);\n    }\n\n    /// @dev Decodes base64 encoded `data`.\n    ///\n    /// Supports:\n    /// - RFC 4648 (both standard and file-safe mode).\n    /// - RFC 3501 (63: ',').\n    ///\n    /// Does not support:\n    /// - Line breaks.\n    ///\n    /// Note: For performance reasons,\n    /// this function will NOT revert on invalid `data` inputs.\n    /// Outputs for invalid inputs will simply be undefined behaviour.\n    /// It is the user's responsibility to ensure that the `data`\n    /// is a valid base64 encoded string.\n    function decode(string memory data) internal pure returns (bytes memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let dataLength := mload(data)\n\n            if dataLength {\n                let decodedLength := mul(shr(2, dataLength), 3)\n\n                for {} 1 {} {\n                    // If padded.\n                    if iszero(and(dataLength, 3)) {\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\n                        // forgefmt: disable-next-item\n                        decodedLength := sub(\n                            decodedLength,\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\n                        )\n                        break\n                    }\n                    // If non-padded.\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\n                    break\n                }\n                result := mload(0x40)\n\n                // Write the length of the bytes.\n                mstore(result, decodedLength)\n\n                // Skip the first slot, which stores the length.\n                let ptr := add(result, 0x20)\n                let end := add(ptr, decodedLength)\n\n                // Load the table into the scratch space.\n                // Constants are optimized for smaller bytecode with zero gas overhead.\n                // `m` also doubles as the mask of the upper 6 bits.\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\n                mstore(0x5b, m)\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\n\n                for {} 1 {} {\n                    // Read 4 bytes.\n                    data := add(data, 4)\n                    let input := mload(data)\n\n                    // Write 3 bytes.\n                    // forgefmt: disable-next-item\n                    mstore(ptr, or(\n                        and(m, mload(byte(28, input))),\n                        shr(6, or(\n                            and(m, mload(byte(29, input))),\n                            shr(6, or(\n                                and(m, mload(byte(30, input))),\n                                shr(6, mload(byte(31, input)))\n                            ))\n                        ))\n                    ))\n                    ptr := add(ptr, 3)\n                    if iszero(lt(ptr, end)) { break }\n                }\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\n                mstore(end, 0) // Zeroize the slot after the bytes.\n                mstore(0x60, 0) // Restore the zero slot.\n            }\n        }\n    }\n}\n"
      },
      'lib/solady/src/utils/LibString.sol': {
        content:
          '// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Library for converting numbers into strings and other string operations.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\n///\n/// @dev Note:\n/// For performance and bytecode compactness, most of the string operations are restricted to\n/// byte strings (7-bit ASCII), except where otherwise specified.\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\n/// can lead to undefined behavior.\nlibrary LibString {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                        CUSTOM ERRORS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The length of the output is too small to contain all the hex digits.\n    error HexLengthInsufficient();\n\n    /// @dev The length of the string is more than 32 bytes.\n    error TooBigForSmallString();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The constant returned when the `search` is not found in the string.\n    uint256 internal constant NOT_FOUND = type(uint256).max;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     DECIMAL OPERATIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(uint256 value) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits.\n            str := add(mload(0x40), 0x80)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, add(str, 0x20))\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            let w := not(0) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                str := add(str, w) // `sub(str, 1)`.\n                // Write the character to the pointer.\n                // The ASCII index of the \'0\' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n\n    /// @dev Returns the base 10 decimal representation of `value`.\n    function toString(int256 value) internal pure returns (string memory str) {\n        if (value >= 0) {\n            return toString(uint256(value));\n        }\n        unchecked {\n            str = toString(~uint256(value) + 1);\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We still have some spare memory space on the left,\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\n            let length := mload(str) // Load the string length.\n            mstore(str, 0x2d) // Store the \'-\' character.\n            str := sub(str, 1) // Move back the string pointer by a byte.\n            mstore(str, add(length, 1)) // Update the string length.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   HEXADECIMAL OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `length` bytes.\n    /// The output is prefixed with "0x" encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `length * 2 + 2` bytes.\n    /// Reverts if `length` is too small for the output to contain all the digits.\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(value, length);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let strLength := add(mload(str), 2) // Compute the length.\n            mstore(str, 0x3078) // Write the "0x" prefix.\n            str := sub(str, 2) // Move the pointer.\n            mstore(str, strLength) // Write the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`,\n    /// left-padded to an input length of `length` bytes.\n    /// The output is prefixed with "0x" encoded using 2 hexadecimal digits per byte,\n    /// giving a total length of `length * 2` bytes.\n    /// Reverts if `length` is too small for the output to contain all the digits.\n    function toHexStringNoPrefix(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory str)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\n            // We add 0x20 to the total and round down to a multiple of 0x20.\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\n            // Allocate the memory.\n            mstore(0x40, add(str, 0x20))\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end to calculate the length later.\n            let end := str\n            // Store "0123456789abcdef" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            let start := sub(str, add(length, length))\n            let w := not(1) // Tsk.\n            let temp := value\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for {} 1 {} {\n                str := add(str, w) // `sub(str, 2)`.\n                mstore8(add(str, 1), mload(and(temp, 15)))\n                mstore8(str, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(xor(str, start)) { break }\n            }\n\n            if temp {\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\n                revert(0x1c, 0x04)\n            }\n\n            // Compute the string\'s length.\n            let strLength := sub(end, str)\n            // Move the pointer and write the length.\n            str := sub(str, 0x20)\n            mstore(str, strLength)\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with "0x" and encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2 + 2` bytes.\n    function toHexString(uint256 value) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let strLength := add(mload(str), 2) // Compute the length.\n            mstore(str, 0x3078) // Write the "0x" prefix.\n            str := sub(str, 2) // Move the pointer.\n            mstore(str, strLength) // Write the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with "0x".\n    /// The output excludes leading "0" from the `toHexString` output.\n    /// `0x00: "0x0", 0x01: "0x1", 0x12: "0x12", 0x123: "0x123"`.\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\n            let strLength := add(mload(str), 2) // Compute the length.\n            mstore(add(str, o), 0x3078) // Write the "0x" prefix, accounting for leading zero.\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output excludes leading "0" from the `toHexStringNoPrefix` output.\n    /// `0x00: "0", 0x01: "1", 0x12: "12", 0x123: "123"`.\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\n            let strLength := mload(str) // Get the length.\n            str := add(str, o) // Move the pointer, accounting for leading zero.\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    /// As address are 20 bytes long, the output will left-padded to have\n    /// a length of `20 * 2` bytes.\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\n            str := add(mload(0x40), 0x80)\n            // Allocate the memory.\n            mstore(0x40, add(str, 0x20))\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end to calculate the length later.\n            let end := str\n            // Store "0123456789abcdef" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            let w := not(1) // Tsk.\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let temp := value } 1 {} {\n                str := add(str, w) // `sub(str, 2)`.\n                mstore8(add(str, 1), mload(and(temp, 15)))\n                mstore8(str, mload(and(shr(4, temp), 15)))\n                temp := shr(8, temp)\n                if iszero(temp) { break }\n            }\n\n            // Compute the string\'s length.\n            let strLength := sub(end, str)\n            // Move the pointer and write the length.\n            str := sub(str, 0x20)\n            mstore(str, strLength)\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with "0x", encoded using 2 hexadecimal digits per byte,\n    /// and the alphabets are capitalized conditionally according to\n    /// https://eips.ethereum.org/EIPS/eip-55\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\n        str = toHexString(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\n            let o := add(str, 0x22)\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\n            let t := shl(240, 136) // `0b10001000 << 240`\n            for { let i := 0 } 1 {} {\n                mstore(add(i, i), mul(t, byte(i, hashed)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\n            o := add(o, 0x20)\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is prefixed with "0x" and encoded using 2 hexadecimal digits per byte.\n    function toHexString(address value) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(value);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let strLength := add(mload(str), 2) // Compute the length.\n            mstore(str, 0x3078) // Write the "0x" prefix.\n            str := sub(str, 2) // Move the pointer.\n            mstore(str, strLength) // Write the length.\n        }\n    }\n\n    /// @dev Returns the hexadecimal representation of `value`.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            str := mload(0x40)\n\n            // Allocate the memory.\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\n            mstore(0x40, add(str, 0x80))\n\n            // Store "0123456789abcdef" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            str := add(str, 2)\n            mstore(str, 40)\n\n            let o := add(str, 0x20)\n            mstore(add(o, 40), 0)\n\n            value := shl(96, value)\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            for { let i := 0 } 1 {} {\n                let p := add(o, add(i, i))\n                let temp := byte(i, value)\n                mstore8(add(p, 1), mload(and(temp, 15)))\n                mstore8(p, mload(shr(4, temp)))\n                i := add(i, 1)\n                if eq(i, 20) { break }\n            }\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\n        str = toHexStringNoPrefix(raw);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let strLength := add(mload(str), 2) // Compute the length.\n            mstore(str, 0x3078) // Write the "0x" prefix.\n            str := sub(str, 2) // Move the pointer.\n            mstore(str, strLength) // Write the length.\n        }\n    }\n\n    /// @dev Returns the hex encoded string from the raw bytes.\n    /// The output is encoded using 2 hexadecimal digits per byte.\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let length := mload(raw)\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\n            mstore(str, add(length, length)) // Store the length of the output.\n\n            // Store "0123456789abcdef" in scratch space.\n            mstore(0x0f, 0x30313233343536373839616263646566)\n\n            let o := add(str, 0x20)\n            let end := add(raw, length)\n\n            for {} iszero(eq(raw, end)) {} {\n                raw := add(raw, 1)\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\n                o := add(o, 2)\n            }\n            mstore(o, 0) // Zeroize the slot after the string.\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   RUNE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the number of UTF characters in the string.\n    function runeCount(string memory s) internal pure returns (uint256 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if mload(s) {\n                mstore(0x00, div(not(0), 255))\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\n                let o := add(s, 0x20)\n                let end := add(o, mload(s))\n                for { result := 1 } 1 { result := add(result, 1) } {\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\n                    if iszero(lt(o, end)) { break }\n                }\n            }\n        }\n    }\n\n    /// @dev Returns if this string is a 7-bit ASCII string.\n    /// (i.e. all characters codes are in [0..127])\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let mask := shl(7, div(not(0), 255))\n            result := 1\n            let n := mload(s)\n            if n {\n                let o := add(s, 0x20)\n                let end := add(o, n)\n                let last := mload(end)\n                mstore(end, 0)\n                for {} 1 {} {\n                    if and(mask, mload(o)) {\n                        result := 0\n                        break\n                    }\n                    o := add(o, 0x20)\n                    if iszero(lt(o, end)) { break }\n                }\n                mstore(end, last)\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   BYTE STRING OPERATIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    // For performance and bytecode compactness, byte string operations are restricted\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\n    // can lead to undefined behavior.\n\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\n    function replace(string memory subject, string memory search, string memory replacement)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let subjectLength := mload(subject)\n            let searchLength := mload(search)\n            let replacementLength := mload(replacement)\n\n            subject := add(subject, 0x20)\n            search := add(search, 0x20)\n            replacement := add(replacement, 0x20)\n            result := add(mload(0x40), 0x20)\n\n            let subjectEnd := add(subject, subjectLength)\n            if iszero(gt(searchLength, subjectLength)) {\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\n                let h := 0\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\n                let s := mload(search)\n                for {} 1 {} {\n                    let t := mload(subject)\n                    // Whether the first `searchLength % 32` bytes of\n                    // `subject` and `search` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\n                                mstore(result, t)\n                                result := add(result, 1)\n                                subject := add(subject, 1)\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Copy the `replacement` one word at a time.\n                        for { let o := 0 } 1 {} {\n                            mstore(add(result, o), mload(add(replacement, o)))\n                            o := add(o, 0x20)\n                            if iszero(lt(o, replacementLength)) { break }\n                        }\n                        result := add(result, replacementLength)\n                        subject := add(subject, searchLength)\n                        if searchLength {\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    mstore(result, t)\n                    result := add(result, 1)\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\n                }\n            }\n\n            let resultRemainder := result\n            result := add(mload(0x40), 0x20)\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\n            // Copy the rest of the string one word at a time.\n            for {} lt(subject, subjectEnd) {} {\n                mstore(resultRemainder, mload(subject))\n                resultRemainder := add(resultRemainder, 0x20)\n                subject := add(subject, 0x20)\n            }\n            result := sub(result, 0x20)\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\n            mstore(last, 0)\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\n            mstore(result, k) // Store the length.\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\n    /// searching from left to right, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n    function indexOf(string memory subject, string memory search, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for { let subjectLength := mload(subject) } 1 {} {\n                if iszero(mload(search)) {\n                    if iszero(gt(from, subjectLength)) {\n                        result := from\n                        break\n                    }\n                    result := subjectLength\n                    break\n                }\n                let searchLength := mload(search)\n                let subjectStart := add(subject, 0x20)\n\n                result := not(0) // Initialize to `NOT_FOUND`.\n\n                subject := add(subjectStart, from)\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\n\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\n                let s := mload(add(search, 0x20))\n\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\n\n                if iszero(lt(searchLength, 0x20)) {\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\n                        if iszero(shr(m, xor(mload(subject), s))) {\n                            if eq(keccak256(subject, searchLength), h) {\n                                result := sub(subject, subjectStart)\n                                break\n                            }\n                        }\n                        subject := add(subject, 1)\n                        if iszero(lt(subject, end)) { break }\n                    }\n                    break\n                }\n                for {} 1 {} {\n                    if iszero(shr(m, xor(mload(subject), s))) {\n                        result := sub(subject, subjectStart)\n                        break\n                    }\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\n    /// searching from left to right.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n    function indexOf(string memory subject, string memory search)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = indexOf(subject, search, 0);\n    }\n\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\n    /// searching from right to left, starting from `from`.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} 1 {} {\n                result := not(0) // Initialize to `NOT_FOUND`.\n                let searchLength := mload(search)\n                if gt(searchLength, mload(subject)) { break }\n                let w := result\n\n                let fromMax := sub(mload(subject), searchLength)\n                if iszero(gt(fromMax, from)) { from := fromMax }\n\n                let end := add(add(subject, 0x20), w)\n                subject := add(add(subject, 0x20), from)\n                if iszero(gt(subject, end)) { break }\n                // As this function is not too often used,\n                // we shall simply use keccak256 for smaller bytecode size.\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\n                    if eq(keccak256(subject, searchLength), h) {\n                        result := sub(subject, add(end, 1))\n                        break\n                    }\n                    subject := add(subject, w) // `sub(subject, 1)`.\n                    if iszero(gt(subject, end)) { break }\n                }\n                break\n            }\n        }\n    }\n\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\n    /// searching from right to left.\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\n    function lastIndexOf(string memory subject, string memory search)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\n    }\n\n    /// @dev Returns true if `search` is found in `subject`, false otherwise.\n    function contains(string memory subject, string memory search) internal pure returns (bool) {\n        return indexOf(subject, search) != NOT_FOUND;\n    }\n\n    /// @dev Returns whether `subject` starts with `search`.\n    function startsWith(string memory subject, string memory search)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let searchLength := mload(search)\n            // Just using keccak256 directly is actually cheaper.\n            // forgefmt: disable-next-item\n            result := and(\n                iszero(gt(searchLength, mload(subject))),\n                eq(\n                    keccak256(add(subject, 0x20), searchLength),\n                    keccak256(add(search, 0x20), searchLength)\n                )\n            )\n        }\n    }\n\n    /// @dev Returns whether `subject` ends with `search`.\n    function endsWith(string memory subject, string memory search)\n        internal\n        pure\n        returns (bool result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let searchLength := mload(search)\n            let subjectLength := mload(subject)\n            // Whether `search` is not longer than `subject`.\n            let withinRange := iszero(gt(searchLength, subjectLength))\n            // Just using keccak256 directly is actually cheaper.\n            // forgefmt: disable-next-item\n            result := and(\n                withinRange,\n                eq(\n                    keccak256(\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\n                        searchLength\n                    ),\n                    keccak256(add(search, 0x20), searchLength)\n                )\n            )\n        }\n    }\n\n    /// @dev Returns `subject` repeated `times`.\n    function repeat(string memory subject, uint256 times)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let subjectLength := mload(subject)\n            if iszero(or(iszero(times), iszero(subjectLength))) {\n                subject := add(subject, 0x20)\n                result := mload(0x40)\n                let output := add(result, 0x20)\n                for {} 1 {} {\n                    // Copy the `subject` one word at a time.\n                    for { let o := 0 } 1 {} {\n                        mstore(add(output, o), mload(add(subject, o)))\n                        o := add(o, 0x20)\n                        if iszero(lt(o, subjectLength)) { break }\n                    }\n                    output := add(output, subjectLength)\n                    times := sub(times, 1)\n                    if iszero(times) { break }\n                }\n                mstore(output, 0) // Zeroize the slot after the string.\n                let resultLength := sub(output, add(result, 0x20))\n                mstore(result, resultLength) // Store the length.\n                // Allocate the memory.\n                mstore(0x40, add(result, add(resultLength, 0x20)))\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\n    /// `start` and `end` are byte offsets.\n    function slice(string memory subject, uint256 start, uint256 end)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let subjectLength := mload(subject)\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\n            if lt(start, end) {\n                result := mload(0x40)\n                let resultLength := sub(end, start)\n                mstore(result, resultLength)\n                subject := add(subject, start)\n                let w := not(0x1f)\n                // Copy the `subject` one word at a time, backwards.\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\n                    mstore(add(result, o), mload(add(subject, o)))\n                    o := add(o, w) // `sub(o, 0x20)`.\n                    if iszero(o) { break }\n                }\n                // Zeroize the slot after the string.\n                mstore(add(add(result, 0x20), resultLength), 0)\n                // Allocate memory for the length and the bytes,\n                // rounded up to a multiple of 32.\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\n            }\n        }\n    }\n\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\n    /// `start` is a byte offset.\n    function slice(string memory subject, uint256 start)\n        internal\n        pure\n        returns (string memory result)\n    {\n        result = slice(subject, start, uint256(int256(-1)));\n    }\n\n    /// @dev Returns all the indices of `search` in `subject`.\n    /// The indices are byte offsets.\n    function indicesOf(string memory subject, string memory search)\n        internal\n        pure\n        returns (uint256[] memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let subjectLength := mload(subject)\n            let searchLength := mload(search)\n\n            if iszero(gt(searchLength, subjectLength)) {\n                subject := add(subject, 0x20)\n                search := add(search, 0x20)\n                result := add(mload(0x40), 0x20)\n\n                let subjectStart := subject\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\n                let h := 0\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\n                let s := mload(search)\n                for {} 1 {} {\n                    let t := mload(subject)\n                    // Whether the first `searchLength % 32` bytes of\n                    // `subject` and `search` matches.\n                    if iszero(shr(m, xor(t, s))) {\n                        if h {\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\n                                subject := add(subject, 1)\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\n                                continue\n                            }\n                        }\n                        // Append to `result`.\n                        mstore(result, sub(subject, subjectStart))\n                        result := add(result, 0x20)\n                        // Advance `subject` by `searchLength`.\n                        subject := add(subject, searchLength)\n                        if searchLength {\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\n                            continue\n                        }\n                    }\n                    subject := add(subject, 1)\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\n                }\n                let resultEnd := result\n                // Assign `result` to the free memory pointer.\n                result := mload(0x40)\n                // Store the length of `result`.\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\n                // Allocate memory for result.\n                // We allocate one more word, so this array can be recycled for {split}.\n                mstore(0x40, add(resultEnd, 0x20))\n            }\n        }\n    }\n\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\n    function split(string memory subject, string memory delimiter)\n        internal\n        pure\n        returns (string[] memory result)\n    {\n        uint256[] memory indices = indicesOf(subject, delimiter);\n        /// @solidity memory-safe-assembly\n        assembly {\n            let w := not(0x1f)\n            let indexPtr := add(indices, 0x20)\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\n            mstore(add(indicesEnd, w), mload(subject))\n            mstore(indices, add(mload(indices), 1))\n            let prevIndex := 0\n            for {} 1 {} {\n                let index := mload(indexPtr)\n                mstore(indexPtr, 0x60)\n                if iszero(eq(index, prevIndex)) {\n                    let element := mload(0x40)\n                    let elementLength := sub(index, prevIndex)\n                    mstore(element, elementLength)\n                    // Copy the `subject` one word at a time, backwards.\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\n                        o := add(o, w) // `sub(o, 0x20)`.\n                        if iszero(o) { break }\n                    }\n                    // Zeroize the slot after the string.\n                    mstore(add(add(element, 0x20), elementLength), 0)\n                    // Allocate memory for the length and the bytes,\n                    // rounded up to a multiple of 32.\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\n                    // Store the `element` into the array.\n                    mstore(indexPtr, element)\n                }\n                prevIndex := add(index, mload(delimiter))\n                indexPtr := add(indexPtr, 0x20)\n                if iszero(lt(indexPtr, indicesEnd)) { break }\n            }\n            result := indices\n            if iszero(mload(delimiter)) {\n                result := add(indices, 0x20)\n                mstore(result, sub(mload(indices), 2))\n            }\n        }\n    }\n\n    /// @dev Returns a concatenated string of `a` and `b`.\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\n    function concat(string memory a, string memory b)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let w := not(0x1f)\n            result := mload(0x40)\n            let aLength := mload(a)\n            // Copy `a` one word at a time, backwards.\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\n                mstore(add(result, o), mload(add(a, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let bLength := mload(b)\n            let output := add(result, aLength)\n            // Copy `b` one word at a time, backwards.\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\n                mstore(add(output, o), mload(add(b, o)))\n                o := add(o, w) // `sub(o, 0x20)`.\n                if iszero(o) { break }\n            }\n            let totalLength := add(aLength, bLength)\n            let last := add(add(result, 0x20), totalLength)\n            // Zeroize the slot after the string.\n            mstore(last, 0)\n            // Stores the length.\n            mstore(result, totalLength)\n            // Allocate memory for the length and the bytes,\n            // rounded up to a multiple of 32.\n            mstore(0x40, and(add(last, 0x1f), w))\n        }\n    }\n\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function toCase(string memory subject, bool toUpper)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let length := mload(subject)\n            if length {\n                result := add(mload(0x40), 0x20)\n                subject := add(subject, 1)\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\n                let w := not(0)\n                for { let o := length } 1 {} {\n                    o := add(o, w)\n                    let b := and(0xff, mload(add(subject, o)))\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\n                    if iszero(o) { break }\n                }\n                result := mload(0x40)\n                mstore(result, length) // Store the length.\n                let last := add(add(result, 0x20), length)\n                mstore(last, 0) // Zeroize the slot after the string.\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\n            }\n        }\n    }\n\n    /// @dev Returns a string from a small bytes32 string.\n    /// `s` must be null-terminated, or behavior will be undefined.\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(0x40)\n            let n := 0\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for \'\\0\'.\n            mstore(result, n)\n            let o := add(result, 0x20)\n            mstore(o, s)\n            mstore(add(o, n), 0)\n            mstore(0x40, add(result, 0x40))\n        }\n    }\n\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for \'\\0\'.\n            mstore(0x00, s)\n            mstore(result, 0x00)\n            result := mload(0x00)\n        }\n    }\n\n    /// @dev Returns the string as a normalized null-terminated small string.\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := mload(s)\n            if iszero(lt(result, 33)) {\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\n                revert(0x1c, 0x04)\n            }\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\n        }\n    }\n\n    /// @dev Returns a lowercased copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function lower(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, false);\n    }\n\n    /// @dev Returns an UPPERCASED copy of the string.\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\n    function upper(string memory subject) internal pure returns (string memory result) {\n        result = toCase(subject, true);\n    }\n\n    /// @dev Escapes the string to be used within HTML tags.\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let end := add(s, mload(s))\n            result := add(mload(0x40), 0x20)\n            // Store the bytes of the packed offsets and strides into the scratch space.\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\n            mstore(0x1f, 0x900094)\n            mstore(0x08, 0xc0000000a6ab)\n            // Store "&quot;&amp;&#39;&lt;&gt;" into the scratch space.\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\n            for {} iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                // Not in `["\\"","\'","&","<",">"]`.\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\n                    mstore8(result, c)\n                    result := add(result, 1)\n                    continue\n                }\n                let t := shr(248, mload(c))\n                mstore(result, mload(and(t, 0x1f)))\n                result := add(result, shr(5, t))\n            }\n            let last := result\n            mstore(last, 0) // Zeroize the slot after the string.\n            result := mload(0x40)\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\n    function escapeJSON(string memory s, bool addDoubleQuotes)\n        internal\n        pure\n        returns (string memory result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let end := add(s, mload(s))\n            result := add(mload(0x40), 0x20)\n            if addDoubleQuotes {\n                mstore8(result, 34)\n                result := add(1, result)\n            }\n            // Store "\\\\u0000" in scratch space.\n            // Store "0123456789abcdef" in scratch space.\n            // Also, store `{0x08:"b", 0x09:"t", 0x0a:"n", 0x0c:"f", 0x0d:"r"}`.\n            // into the scratch space.\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\n            // Bitmask for detecting `["\\"","\\\\"]`.\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\n            for {} iszero(eq(s, end)) {} {\n                s := add(s, 1)\n                let c := and(mload(s), 0xff)\n                if iszero(lt(c, 0x20)) {\n                    if iszero(and(shl(c, 1), e)) {\n                        // Not in `["\\"","\\\\"]`.\n                        mstore8(result, c)\n                        result := add(result, 1)\n                        continue\n                    }\n                    mstore8(result, 0x5c) // "\\\\".\n                    mstore8(add(result, 1), c)\n                    result := add(result, 2)\n                    continue\n                }\n                if iszero(and(shl(c, 1), 0x3700)) {\n                    // Not in `["\\b","\\t","\\n","\\f","\\d"]`.\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\n                    mstore(result, mload(0x19)) // "\\\\u00XX".\n                    result := add(result, 6)\n                    continue\n                }\n                mstore8(result, 0x5c) // "\\\\".\n                mstore8(add(result, 1), mload(add(c, 8)))\n                result := add(result, 2)\n            }\n            if addDoubleQuotes {\n                mstore8(result, 34)\n                result := add(1, result)\n            }\n            let last := result\n            mstore(last, 0) // Zeroize the slot after the string.\n            result := mload(0x40)\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\n        }\n    }\n\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\n        result = escapeJSON(s, false);\n    }\n\n    /// @dev Returns whether `a` equals `b`.\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\n        }\n    }\n\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // These should be evaluated on compile time, as far as possible.\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\n            let x := not(or(m, or(b, add(m, and(b, m)))))\n            let r := shl(7, iszero(iszero(shr(128, x))))\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\n            // forgefmt: disable-next-item\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\n        }\n    }\n\n    /// @dev Packs a single string with its length into a single word.\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\n    function packOne(string memory a) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // We don\'t need to zero right pad the string,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    // Load the length and the bytes.\n                    mload(add(a, 0x1f)),\n                    // `length != 0 && length < 32`. Abuses underflow.\n                    // Assumes that the length is valid and within the block gas limit.\n                    lt(sub(mload(a), 1), 0x1f)\n                )\n        }\n    }\n\n    /// @dev Unpacks a string packed using {packOne}.\n    /// Returns the empty string if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Grab the free memory pointer.\n            result := mload(0x40)\n            // Allocate 2 words (1 for the length, 1 for the bytes).\n            mstore(0x40, add(result, 0x40))\n            // Zeroize the length slot.\n            mstore(result, 0)\n            // Store the length and bytes.\n            mstore(add(result, 0x1f), packed)\n            // Right pad with zeroes.\n            mstore(add(add(result, 0x20), mload(result)), 0)\n        }\n    }\n\n    /// @dev Packs two strings with their lengths into a single word.\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let aLength := mload(a)\n            // We don\'t need to zero right pad the strings,\n            // since this is our own custom non-standard packing scheme.\n            result :=\n                mul(\n                    // Load the length and the bytes of `a` and `b`.\n                    or(\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\n                        mload(sub(add(b, 0x1e), aLength))\n                    ),\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\n                    // Assumes that the lengths are valid and within the block gas limit.\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\n                )\n        }\n    }\n\n    /// @dev Unpacks strings packed using {packTwo}.\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\n    function unpackTwo(bytes32 packed)\n        internal\n        pure\n        returns (string memory resultA, string memory resultB)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Grab the free memory pointer.\n            resultA := mload(0x40)\n            resultB := add(resultA, 0x40)\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\n            mstore(0x40, add(resultB, 0x40))\n            // Zeroize the length slots.\n            mstore(resultA, 0)\n            mstore(resultB, 0)\n            // Store the lengths and bytes.\n            mstore(add(resultA, 0x1f), packed)\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\n            // Right pad with zeroes.\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\n        }\n    }\n\n    /// @dev Directly returns `a` without copying.\n    function directReturn(string memory a) internal pure {\n        assembly {\n            // Assumes that the string does not start from the scratch space.\n            let retStart := sub(a, 0x20)\n            let retUnpaddedSize := add(mload(a), 0x40)\n            // Right pad with zeroes. Just in case the string is produced\n            // by a method that doesn\'t zero right pad.\n            mstore(add(retStart, retUnpaddedSize), 0)\n            // Store the return offset.\n            mstore(retStart, 0x20)\n            // End the transaction, returning the string.\n            return(retStart, and(not(0x1f), add(0x1f, retUnpaddedSize)))\n        }\n    }\n}\n'
      },
      'src/tokens/common/IMetadataProvider.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IMetadataProvider {\n    /**\n     * Provides the metadata for the given token.\n     * @param tokenAddress The address of the token.\n     * @param tokenId The ID of the token.\n     */\n    function metadata(address tokenAddress, uint256 tokenId) external view returns (string memory);\n}\n'
      },
      'src/tokens/wrappers/clawback/ClawbackMetadata.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {IMetadataProvider} from "../../common/IMetadataProvider.sol";\nimport {IClawbackFunctions} from "./IClawback.sol";\n\nimport {Duration} from "../../../utils/Duration.sol";\n\nimport {LibString} from "solady/utils/LibString.sol";\nimport {Base64} from "solady/utils/Base64.sol";\n\nimport {IERC165} from "@0xsequence/erc-1155/contracts/interfaces/IERC165.sol";\n\nimport {IERC20Metadata} from "@openzeppelin/contracts/interfaces/IERC20Metadata.sol";\nimport {IERC721Metadata} from "@openzeppelin/contracts/interfaces/IERC721Metadata.sol";\nimport {IERC1155MetadataURI} from "@openzeppelin/contracts/interfaces/IERC1155MetadataURI.sol";\n\nerror InvalidTokenType();\n\ncontract ClawbackMetadata is IMetadataProvider, IERC165 {\n    using LibString for *;\n\n    struct MetadataProperty {\n        string key;\n        string value;\n    }\n\n    function metadata(address clawbackAddr, uint256 wrappedTokenId) external view returns (string memory) {\n        IClawbackFunctions clawback = IClawbackFunctions(clawbackAddr);\n\n        IClawbackFunctions.TokenDetails memory details = clawback.getTokenDetails(wrappedTokenId);\n        IClawbackFunctions.Template memory template = clawback.getTemplate(details.templateId);\n\n        string memory tokenTypeStr = _toTokenTypeStr(details.tokenType);\n\n        //solhint-disable quotes\n\n        string memory json = \'{"name": "Clawback Asset #\'.concat(wrappedTokenId.toString()).concat(\n            \'", "description": "A wrapped asset of \'\n        ).concat(tokenTypeStr).concat(" ").concat(details.tokenAddr.toHexStringChecksummed()).concat(" #").concat(\n            details.tokenId.toString()\n        ).concat(\'", "image": "", "decimals": 0, "properties": {\');\n\n        MetadataProperty[] memory properties = metadataProperties(details, template);\n        uint256 len = properties.length;\n        for (uint256 i = 0; i < len;) {\n            if (i > 0) {\n                json = json.concat(", ");\n            }\n            json = json.concat(\'"\').concat(properties[i].key).concat(\'": "\').concat(properties[i].value).concat(\'"\');\n            unchecked { ++i; }\n        }\n        json = json.concat("}}");\n\n        //solhint-enable quotes\n\n        return "data:application/json;base64,".concat(Base64.encode(bytes(json)));\n    }\n\n    function _toTokenTypeStr(IClawbackFunctions.TokenType tokenType) internal pure returns (string memory) {\n        if (tokenType == IClawbackFunctions.TokenType.ERC20) {\n            return "ERC-20";\n        } else if (tokenType == IClawbackFunctions.TokenType.ERC721) {\n            return "ERC-721";\n        } else if (tokenType == IClawbackFunctions.TokenType.ERC1155) {\n            return "ERC-1155";\n        }\n        revert InvalidTokenType();\n    }\n\n    function metadataProperties(\n        IClawbackFunctions.TokenDetails memory details,\n        IClawbackFunctions.Template memory template\n    ) public view returns (MetadataProperty[] memory properties) {\n        // From clawback\n        bool hasTokenId = details.tokenType == IClawbackFunctions.TokenType.ERC721\n            || details.tokenType == IClawbackFunctions.TokenType.ERC1155;\n        properties = new MetadataProperty[](hasTokenId ? 9 : 8);\n        properties[0] = MetadataProperty("token_type", _toTokenTypeStr(details.tokenType));\n        properties[1] = MetadataProperty("token_address", details.tokenAddr.toHexStringChecksummed());\n        properties[2] = MetadataProperty("template_id", details.templateId.toString());\n        properties[3] = MetadataProperty("locked_at", details.lockedAt.toString());\n        properties[4] = MetadataProperty("unlocks_in", _formatUnlocksIn(details.lockedAt, template.duration));\n        properties[5] = MetadataProperty("duration", Duration.format(template.duration));\n        properties[6] = MetadataProperty("destruction_only", _boolToString(template.destructionOnly));\n        properties[7] = MetadataProperty("transfer_open", _boolToString(template.transferOpen));\n        if (hasTokenId) {\n            properties[8] = MetadataProperty("token_id", details.tokenId.toString());\n        }\n\n        // From contract\n        if (details.tokenType == IClawbackFunctions.TokenType.ERC20) {\n            properties = _safeAddStringProperty(\n                properties, "original_name", details.tokenAddr, abi.encodeWithSelector(IERC20Metadata.name.selector)\n            );\n            properties = _safeAddStringProperty(\n                properties, "original_symbol", details.tokenAddr, abi.encodeWithSelector(IERC20Metadata.symbol.selector)\n            );\n            properties = _safeAddUint256Property(\n                properties,\n                "original_decimals",\n                details.tokenAddr,\n                abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n            );\n        } else if (details.tokenType == IClawbackFunctions.TokenType.ERC721) {\n            properties = _safeAddStringProperty(\n                properties, "original_name", details.tokenAddr, abi.encodeWithSelector(IERC721Metadata.name.selector)\n            );\n            properties = _safeAddStringProperty(\n                properties, "original_symbol", details.tokenAddr, abi.encodeWithSelector(IERC721Metadata.symbol.selector)\n            );\n            properties = _safeAddStringProperty(\n                properties,\n                "original_URI",\n                details.tokenAddr,\n                abi.encodeWithSelector(IERC721Metadata.tokenURI.selector, details.tokenId)\n            );\n        } else if (details.tokenType == IClawbackFunctions.TokenType.ERC1155) {\n            properties = _safeAddStringProperty(\n                properties,\n                "original_URI",\n                details.tokenAddr,\n                abi.encodeWithSelector(IERC1155MetadataURI.uri.selector, details.tokenId)\n            );\n        }\n    }\n\n    function _boolToString(bool value) internal pure returns (string memory) {\n        return value ? "true" : "false";\n    }\n\n    function _safeAddStringProperty(\n        MetadataProperty[] memory properties,\n        string memory key,\n        address tokenAddr,\n        bytes memory callData\n    ) internal view returns (MetadataProperty[] memory) {\n        try this.getStringProperty(key, tokenAddr, callData) returns (MetadataProperty memory prop) {\n            properties = _appendProperty(properties, prop);\n        } catch {}\n        return properties;\n    }\n\n    function _safeAddUint256Property(\n        MetadataProperty[] memory properties,\n        string memory key,\n        address tokenAddr,\n        bytes memory callData\n    ) internal view returns (MetadataProperty[] memory) {\n        try this.getUint256Property(key, tokenAddr, callData) returns (MetadataProperty memory prop) {\n            properties = _appendProperty(properties, prop);\n        } catch {}\n        return properties;\n    }\n\n    function getStringProperty(string memory key, address tokenAddr, bytes calldata callData)\n        external\n        view\n        returns (MetadataProperty memory)\n    {\n        (bool success, bytes memory prop) = tokenAddr.staticcall(callData);\n        if (success) {\n            return MetadataProperty(key, abi.decode(prop, (string)));\n        }\n        // Unable to get property\n        revert();\n    }\n\n    function getUint256Property(string memory key, address tokenAddr, bytes calldata callData)\n        external\n        view\n        returns (MetadataProperty memory)\n    {\n        (bool success, bytes memory prop) = tokenAddr.staticcall(callData);\n        if (success) {\n            return MetadataProperty(key, abi.decode(prop, (uint256)).toString());\n        }\n        // Unable to get property\n        revert();\n    }\n\n    function _appendProperty(MetadataProperty[] memory properties, MetadataProperty memory prop)\n        internal\n        pure\n        returns (MetadataProperty[] memory)\n    {\n        MetadataProperty[] memory newProperties = new MetadataProperty[](properties.length + 1);\n        uint256 len = properties.length;\n        for (uint256 i = 0; i < len;) {\n            newProperties[i] = properties[i];\n            unchecked { ++i; }\n        }\n        newProperties[properties.length] = prop;\n        return newProperties;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\n        if (interfaceID == type(IERC165).interfaceId || interfaceID == type(IMetadataProvider).interfaceId) {\n            return true;\n        }\n        return false;\n    }\n\n    function _formatUnlocksIn(uint256 lockedAt, uint256 duration) internal view returns (string memory) {\n        uint256 unlocksAt = lockedAt + duration;\n        if (block.timestamp >= unlocksAt) {\n            return "Unlocked";\n        }\n\n        uint256 remaining = unlocksAt - block.timestamp;\n        if (remaining >= 999999 days) {\n            return "Never";\n        }\n\n        return Duration.format(remaining);\n    }\n}\n'
      },
      'src/tokens/wrappers/clawback/IClawback.sol': {
        content:
          "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IClawbackFunctions {\n    enum TokenType {\n        ERC20,\n        ERC721,\n        ERC1155\n    }\n\n    struct Template {\n        bool destructionOnly;\n        bool transferOpen;\n        uint56 duration;\n        address admin;\n    }\n\n    struct TokenDetails {\n        TokenType tokenType;\n        uint32 templateId;\n        uint56 lockedAt;\n        address tokenAddr;\n        uint256 tokenId; // 0 for ERC20\n    }\n\n    // Wrap functions\n\n    /**\n     * Wraps a token.\n     * @param templateId The template ID.\n     * @param tokenType The token type.\n     * @param tokenAddr The token address.\n     * @param tokenId The token ID.\n     * @param amount The amount to wrap.\n     * @param receiver The receiver of the wrapped token.\n     * @return wrappedTokenId The wrapped token ID.\n     */\n    function wrap(\n        uint32 templateId,\n        TokenType tokenType,\n        address tokenAddr,\n        uint256 tokenId,\n        uint256 amount,\n        address receiver\n    ) external returns (uint256 wrappedTokenId);\n\n    /**\n     * Add more tokens to a wrapping.\n     * @param wrappedTokenId The wrapped token ID.\n     * @param amount The amount to wrap.\n     * @param receiver The receiver of the wrapped token.\n     */\n    function addToWrap(uint256 wrappedTokenId, uint256 amount, address receiver) external;\n\n    /**\n     * Unwraps a token.\n     * @param wrappedTokenId The wrapped token ID.\n     * @param holder The holder of the token.\n     * @param amount The amount to unwrap.\n     * @dev Unwrapped tokens are sent to the wrapped token holder.\n     */\n    function unwrap(uint256 wrappedTokenId, address holder, uint256 amount) external;\n\n    /**\n     * Clawback a token.\n     * @param wrappedTokenId The wrapped token ID.\n     * @param holder The holder of the token.\n     * @param receiver The receiver of the token.\n     * @param amount The amount to clawback.\n     * @notice Only an operator of the template can clawback.\n     * @notice Clawback is only allowed when the token is locked.\n     */\n    function clawback(uint256 wrappedTokenId, address holder, address receiver, uint256 amount) external;\n\n    /**\n     * Clawback unwrapped tokens without burning wrapped tokens.\n     * @param wrappedTokenId The wrapped token ID.\n     * @param receiver The receiver of the token.\n     * @param amount The amount to clawback.\n     * @notice Clawback rules apply.\n     * @notice This function doesn't affect the wrapped token and should only be used when wrapped tokens are logically inaccessible.\n     * @dev Clawing back an incomplete amount will lead to a race when unwrapping remaining tokens.\n     */\n    function emergencyClawback(uint256 wrappedTokenId, address receiver, uint256 amount) external;\n\n    /**\n     * Returns the details of a wrapped token.\n     * @param wrappedTokenId The wrapped token ID.\n     * @return The token details.\n     */\n    function getTokenDetails(uint256 wrappedTokenId) external view returns (TokenDetails memory);\n\n    // Template functions\n\n    /**\n     * Gets the details of a template.\n     * @param templateId The template ID.\n     * @return The template details.\n     */\n    function getTemplate(uint32 templateId) external view returns (Template memory);\n\n    /**\n     * Add a new template.\n     * @param duration The duration of the template.\n     * @param destructionOnly Whether the template is for destruction only.\n     * @param transferOpen Whether the template allows transfers.\n     * @return templateId The template ID.\n     * @notice The msg.sender will be set as the admin of this template.\n     */\n    function addTemplate(uint56 duration, bool destructionOnly, bool transferOpen)\n        external\n        returns (uint32 templateId);\n\n    /**\n     * Update a template.\n     * @param templateId The template ID.\n     * @param duration The duration of the template. Can only be reduced.\n     * @param destructionOnly Whether the template is for destruction only. Can only be updated from false to true.\n     * @param transferOpen Whether the template allows transfers. Can only be updated from false to true.\n     * @notice Only the admin of the template can update it.\n     */\n    function updateTemplate(uint32 templateId, uint56 duration, bool destructionOnly, bool transferOpen) external;\n\n    /**\n     * Add a transferer to a template.\n     * @param templateId The template ID.\n     * @param transferer The address of the transferer.\n     * @notice Only the admin of the template can add a transferer.\n     * @notice Transferers cannot be removed.\n     * @notice Transfers are allowed when the to, from or operator is a template operator, even when the template is not in transferOpen mode.\n     */\n    function addTemplateTransferer(uint32 templateId, address transferer) external;\n\n    /**\n     * Update an operator to a template.\n     * @param templateId The template ID.\n     * @param operator The address of the operator.\n     * @param allowed Whether the operator is allowed.\n     * @notice Only the admin of the template can update an operator.\n     */\n    function updateTemplateOperator(uint32 templateId, address operator, bool allowed) external;\n\n    /**\n     * Transfer a template admin to another address.\n     * @param templateId The template ID.\n     * @param admin The address to transfer the template to.\n     * @notice Only the admin of the template can transfer it.\n     * @dev Transferring to address(0) is not allowed.\n     */\n    function updateTemplateAdmin(uint32 templateId, address admin) external;\n}\n\ninterface IClawbackSignals {\n    /// @notice Thrown when the template ID is invalid\n    error InvalidTemplate();\n\n    /// @notice Thrown when token has not been approved\n    error InvalidTokenApproval();\n\n    /// @notice Thrown when token transfer is invalid\n    error InvalidTokenTransfer();\n\n    /// @notice Thrown when token is locked\n    error TokenLocked();\n\n    /// @notice Thrown when token is unlocked\n    error TokenUnlocked();\n\n    /// @notice Thrown when the caller is not authorized\n    error Unauthorized();\n\n    /// @notice Thrown when the receiver is invalid\n    error InvalidReceiver();\n\n    /// @notice Thrown when the template change is invalid\n    error InvalidTemplateChange(string);\n\n    /// @notice Emits when a token is wrapped\n    event Wrapped(\n        uint256 indexed wrappedTokenId,\n        uint32 indexed templateId,\n        address indexed tokenAddr,\n        uint256 tokenId,\n        uint256 amount,\n        address sender,\n        address receiver\n    );\n\n    /// @notice Emits when a token is unwrapped\n    event Unwrapped(\n        uint256 indexed wrappedTokenId,\n        uint32 indexed templateId,\n        address indexed tokenAddr,\n        uint256 tokenId,\n        uint256 amount,\n        address sender\n    );\n\n    /// @notice Emits when a token is clawed back\n    event ClawedBack(\n        uint256 indexed wrappedTokenId,\n        uint32 indexed templateId,\n        address indexed tokenAddr,\n        uint256 tokenId,\n        uint256 amount,\n        address operator,\n        address holder,\n        address receiver\n    );\n\n    /// @notice Emits when a token is clawed back via emergency\n    event EmergencyClawedBack(\n        uint256 indexed wrappedTokenId,\n        uint32 indexed templateId,\n        address indexed tokenAddr,\n        uint256 tokenId,\n        uint256 amount,\n        address operator,\n        address receiver\n    );\n\n    /// @notice Emits when a template is added\n    event TemplateAdded(\n        uint32 indexed templateId, address admin, uint56 duration, bool destructionOnly, bool transferOpen\n    );\n\n    /// @notice Emits when a template is updated\n    event TemplateUpdated(uint32 indexed templateId, uint56 duration, bool destructionOnly, bool transferOpen);\n\n    /// @notice Emits when a template admin is updated\n    event TemplateAdminUpdated(uint32 indexed templateId, address admin);\n\n    /// @notice Emits when a transferer is added\n    event TemplateTransfererAdded(uint32 indexed templateId, address transferer);\n\n    /// @notice Emits when an operator is updated\n    event TemplateOperatorUpdated(uint32 indexed templateId, address operator, bool allowed);\n}\n\n// solhint-disable-next-line no-empty-blocks\ninterface IClawback is IClawbackFunctions, IClawbackSignals {}\n"
      },
      'src/utils/Duration.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {LibString} from "solady/utils/LibString.sol";\n\n\nlibrary Duration {\n  using LibString for *;\n\n  function format(uint256 totalSeconds) internal pure returns (string memory) {\n    uint256 d = totalSeconds / (24 * 60 * 60);\n    uint256 h = (totalSeconds % (24 * 60 * 60)) / (60 * 60);\n    uint256 m = (totalSeconds % (60 * 60)) / 60;\n    uint256 s = totalSeconds % 60;\n\n    string memory result;\n\n    if (d > 0) {\n        result = string(abi.encodePacked(d.toString(), " days"));\n    }\n    if (h > 0) {\n        result = bytes(result).length > 0 \n            ? string(abi.encodePacked(result, ", ", h.toString(), " hours"))\n            : string(abi.encodePacked(h.toString(), " hours"));\n    }\n    if (m > 0) {\n        result = bytes(result).length > 0 \n            ? string(abi.encodePacked(result, ", ", m.toString(), " minutes"))\n            : string(abi.encodePacked(m.toString(), " minutes"));\n    }\n    if (s > 0) {\n        result = bytes(result).length > 0 \n            ? string(abi.encodePacked(result, ", ", s.toString(), " seconds"))\n            : string(abi.encodePacked(s.toString(), " seconds"));\n    }\n\n    return result;\n  }\n}\n'
      }
    },
    settings: {
      evmVersion: 'paris',
      libraries: {},
      metadata: { bytecodeHash: 'ipfs' },
      optimizer: { enabled: true, runs: 20000 },
      remappings: [
        '0xsequence/=lib/0xsequence/',
        '@0xsequence/contracts-library/=src/',
        '@0xsequence/erc-1155/=lib/0xsequence/erc-1155/src/',
        '@0xsequence/erc20-meta-token/=lib/0xsequence/erc20-meta-token/src/',
        '@openzeppelin/=lib/openzeppelin/',
        'chiru-labs/=lib/chiru-labs/',
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'erc721a-upgradeable/=lib/chiru-labs/erc721a-upgradeable/',
        'erc721a/=lib/chiru-labs/erc721a/',
        'forge-std/=lib/forge-std/src/',
        'murky/=lib/murky/src/',
        'openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/',
        'openzeppelin/=lib/openzeppelin/',
        'solady/=lib/solady/src/'
      ],
      viaIR: true,
      outputSelection: {
        '*': {
          '*': ['evm.bytecode', 'evm.deployedBytecode', 'devdoc', 'userdoc', 'metadata', 'abi']
        }
      }
    }
  }
}
